<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="drawingMapper">

    <select id="selectDrawingEquipmentInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ, A.EQUIP_NM, A.FACTORY_AREA, B.USER_ID, B.USER_NM, B.PHOTO_GFILE_SEQ
        FROM TBL_EQUIP A
        	LEFT OUTER JOIN TBL_USER B ON A.LOGIN_USER_ID = B.USER_ID
        WHERE 1 = 1
            AND A.EQUIP_KIND = '1'
          	AND A.PROCESS_TYPE IN ('MPR010', 'MPR020', 'MPR030', 'MPR040')
            AND A.DEL_YN ='N'
            AND A.EQUIP_NM = #{EQUIP_NM}
    </select>

    <select id="selectDrawingAreaList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        	A.CODE_CD, B.CODE_NM
        FROM TBL_CODE A
        	INNER JOIN TBL_CODE_LANG B ON A.HIGH_CD = B.HIGH_CD AND A.CODE_CD = B.CODE_CD AND B.LANG_CD = CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'EN' ELSE 'KR' END
        WHERE 1 = 1
        	AND A.HIGH_CD = '1005'
        	AND A.ETC3 = 'D'
        ORDER BY A.SORT_NUM
    </select>

    <select id="selectDrawingEquipment" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT EQUIP_SEQ, EQUIP_NM, FACTORY_AREA
        FROM TBL_EQUIP
        WHERE 1 = 1
            AND EQUIP_KIND = '1'
          	AND PROCESS_TYPE IN ('MPR010', 'MPR020', 'MPR030', 'MPR040')
            AND DEL_YN ='N'
            AND FACTORY_AREA = #{FACTORY_AREA}
    </select>

    <select id="selectDrawingWorkerGroupList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CODE_CD, B.CODE_NM
        FROM TBL_CODE A
            INNER JOIN TBL_CODE_LANG B ON A.HIGH_CD = B.HIGH_CD AND A.CODE_CD = B.CODE_CD AND B.LANG_CD = CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'EN' ELSE 'KR' END
        WHERE 1 = 1
            AND A.HIGH_CD = '1061'
        ORDER BY A.SORT_NUM
    </select>

    <select id="selectDrawingErrorReasonList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CODE_CD, B.CODE_NM
        FROM TBL_CODE A
            INNER JOIN TBL_CODE_LANG B ON A.HIGH_CD = B.HIGH_CD AND A.CODE_CD = B.CODE_CD AND B.LANG_CD = CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'EN' ELSE 'KR' END
        WHERE 1 = 1
            AND A.HIGH_CD = '1015'
        ORDER BY A.SORT_NUM
    </select>



    <select id="selectDrawingUser" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.USER_ID, A.USER_NM, IFNULL(A.PHOTO_GFILE_SEQ, SPACE(0)) AS PHOTO_GFILE_SEQ
        FROM TBL_USER A
        WHERE 1=1
            AND A.DEL_YN = 'N'
            <if test="DEPARTMENT != null and DEPARTMENT != ''">
                AND A.DEPARTMENT = #{DEPARTMENT}
            </if>
        ORDER BY A.USER_NM
    </select>

    <select id="selectDrawingBoardLastWork" parameterType="java.util.HashMap" resultType="java.util.HashMap">
	    <!-- 최근 작업 내용 -->
        SELECT
            Z.DATA_TYPE, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.MCT_WORK_SEQ, Z.CONTROL_NUM,
            Z.WORK_MINUTE, Z.WORK_SECOND, Z.STOP_MINUTE, Z.STOP_SECOND,  Z.INNER_DUE_DT,<!--내부가공납기 -->
            Z.WORK_START_DT, Z.WORK_FINISH_DT, Z.CONTROL_NUM_NM, Z.PART_NUM, X.BARCODE_NUM,
            Z.EMERGENCY_YN,<!--긴급 -->
            Z.MAIN_INSPECTION,<!--주요 검사품 -->
            Z.SAME_SIDE_YN,<!-- 대칭 여부 -->
            Z.MATERIAL_FINISH_HEAT, <!-- 열처리 -->
            Z.ORDER_QTY,<!--수량 -->
            CASE WHEN ORIGINAL_SIDE_QTY > 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.ORIGINAL_SIDE_QTY, ",", Z.OTHER_SIDE_QTY, ")")
                 WHEN ORIGINAL_SIDE_QTY  > 0 AND Z.OTHER_SIDE_QTY = 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.ORIGINAL_SIDE_QTY, ")")
                 WHEN ORIGINAL_SIDE_QTY  = 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.OTHER_SIDE_QTY, ")")
                 ELSE Z.ORDER_QTY
            END AS ORDER_QTY_INFO,<!--수량에 대칭 추가 -->
            CONCAT(IFNULL(Z.NOTE, SPACE(0)), ' ', IFNULL(Z.MATERIAL_NOTE, SPACE(0))) AS NOTE, Z.MCT_NOTE,
            jmes.SF_GET_DATE_F(Y.INSERT_DT, 'YYYY', '') AS INSPECT_DT,
            jmes.SF_GET_CODE_NM('1040', Y.INSPECT_GRADE, 'EN') AS INSPECT_GRADE_NM,
            CASE WHEN Y.INSPECT_TYPE = '1' THEN
            		CASE WHEN Y.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Y.INSPECT_RESULT, 'EN')
            		 	 ELSE jmes.SF_GET_CODE_NM('1019', Y.INSPECT_RESULT, 'EN') END
              	 WHEN Y.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', Y.INSPECT_RESULT, 'EN')
            END AS INSPECT_RESULT_NM,
            jmes.SF_GET_CODE_NM('1032', Y.ERROR_REASON, 'EN') AS ERROR_REASON_NM, Z.WORK_STATUS
        FROM (
            SELECT
                'LAST' AS DATA_TYPE, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.MCT_WORK_SEQ, D.CONTROL_NUM,
                C.DRAWING_NUM, D.CONTROL_VER, C.DRAWING_VER, A.WORK_STATUS,
                SF_GET_DRAWING_WORK_TIME('W_MINUTE', A.MCT_WORK_SEQ) AS WORK_MINUTE,
                SF_GET_DRAWING_WORK_TIME('W_SECOND', A.MCT_WORK_SEQ) AS WORK_SECOND,
                SF_GET_DRAWING_WORK_TIME('S_MINUTE', A.MCT_WORK_SEQ) AS STOP_MINUTE,
                SF_GET_DRAWING_WORK_TIME('S_SECOND', A.MCT_WORK_SEQ) AS STOP_SECOND,
                CASE WHEN D.EMERGENCY_YN = 'Y' THEN D.EMERGENCY_YN ELSE SPACE(0) END AS EMERGENCY_YN,<!--긴급 -->
                IFNULL(SF_GET_CODE_NM('1059', D.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION,<!--주요 검사품 -->
                IFNULL(C.MATERIAL_FINISH_HEAT, SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 열처리 -->
                IFNULL(jmes.SF_GET_DATE_F(A.WORK_START_DT, '', 'M'), SPACE(0)) AS WORK_START_DT,
                IFNULL(jmes.SF_GET_DATE_F(A.WORK_FINISH_DT, '', 'M'), SPACE(0)) AS WORK_FINISH_DT,
                CASE WHEN C.PART_NUM IS NULL THEN D.CONTROL_NUM ELSE CONCAT(D.CONTROL_NUM, ' #', C.PART_NUM) END AS CONTROL_NUM_NM,<!--관리번호 -->
                IFNULL(C.PART_NUM, SPACE(0)) AS PART_NUM,<!--PART 번호 -->
                CONCAT(IFNULL(SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ), 0), SPACE(0)) AS ORDER_QTY,<!--주문 수량 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(C.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(C.PART_UNIT_QTY, 1), 0)AS ORIGINAL_SIDE_QTY,<!--대칭_원칭 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(C.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(C.PART_UNIT_QTY, 1), 0) AS OTHER_SIDE_QTY,<!--대칭_대칭 -->
                D.SAME_SIDE_YN,<!-- 대칭 여부 -->
                jmes.SF_GET_DATE_F(C.INNER_DUE_DT, '', '') AS INNER_DUE_DT,<!--내부가공납기 -->
                D.NOTE AS NOTE, C.MATERIAL_NOTE, C.MCT_NOTE
            FROM TBL_MCT_WORK A
        	    INNER JOIN TBL_CONTROL_PART C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        	    INNER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND D.DEL_YN = 'N'
        	WHERE 1 = 1
                AND A.MCT_WORK_SEQ = (SELECT MAX(H.MCT_WORK_SEQ) FROM TBL_MCT_WORK H
                                        WHERE A.EQUIP_SEQ = H.EQUIP_SEQ AND H.DEL_YN = 'N' AND H.WORK_FINISH_DT IS NOT NULL
                                            AND H.WORK_START_DT IS NOT NULL)
                AND A.DEL_YN = 'N'
                AND A.WORK_START_DT IS NOT NULL
                AND A.WORK_FINISH_DT IS NOT NULL
                AND A.EQUIP_SEQ = #{EQUIP_SEQ}
        ) Z
        INNER JOIN TBL_CONTROL_BARCODE X ON Z.CONTROL_SEQ = X.CONTROL_SEQ AND Z.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
               	AND Z.CONTROL_VER = X.CONTROL_VER AND IFNULL(Z.DRAWING_VER, SPACE(0)) = IFNULL(X.DRAWING_VER, SPACE(0)) AND X.DEL_YN = 'N'
        LEFT OUTER JOIN TBL_INSPECT Y ON Y.INSPECT_SEQ = (SELECT MAX(C.INSPECT_SEQ) AS INSPECT_SEQ
        							FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_INSPECT C
        							WHERE 1 = 1 AND A.DEL_YN = 'N' AND B.INNER_WORK_FINISH_DT IS NOT NULL
        								AND A.CONTROL_SEQ = B.CONTROL_SEQ
        								AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        								AND C.INSPECT_SEQ = (SELECT MAX(G.INSPECT_SEQ) FROM TBL_INSPECT G WHERE C.CONTROL_SEQ = G.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ)
        								AND C.INSPECT_RESULT IS NOT NULL
        								AND B.DRAWING_NUM = Z.DRAWING_NUM)
        WHERE 1 = 1
    </select>

    <select id="selectDrawingBoardCurrentWork" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 현재 작업 진행 중 내용 -->
        SELECT
            Z.DATA_TYPE, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.MCT_WORK_SEQ, Z.CONTROL_NUM,
            Z.WORK_MINUTE, Z.WORK_SECOND, Z.STOP_MINUTE, Z.STOP_SECOND,  Z.INNER_DUE_DT,<!--내부가공납기 -->
            Z.WORK_START_DT, Z.WORK_FINISH_DT, Z.CONTROL_NUM_NM, Z.PART_NUM, X.BARCODE_NUM,
            Z.EMERGENCY_YN,<!--긴급 -->
            Z.MAIN_INSPECTION,<!--주요 검사품 -->
            Z.SAME_SIDE_YN,<!-- 대칭 여부 -->
            Z.MATERIAL_FINISH_HEAT, <!-- 열처리 -->
            Z.ORDER_QTY,<!--수량 -->
            CASE WHEN ORIGINAL_SIDE_QTY > 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.ORIGINAL_SIDE_QTY, ",", Z.OTHER_SIDE_QTY, ")")
                 WHEN ORIGINAL_SIDE_QTY  > 0 AND Z.OTHER_SIDE_QTY = 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.ORIGINAL_SIDE_QTY, ")")
                 WHEN ORIGINAL_SIDE_QTY  = 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(Z.ORDER_QTY, SPACE(1), "(", Z.OTHER_SIDE_QTY, ")")
                 ELSE Z.ORDER_QTY
            END AS ORDER_QTY_INFO,<!--수량에 대칭 추가 -->
            CONCAT(IFNULL(Z.NOTE, SPACE(0)), ' ', IFNULL(Z.MATERIAL_NOTE, SPACE(0))) AS NOTE, Z.MCT_NOTE,
            jmes.SF_GET_DATE_F(Y.INSERT_DT, 'YYYY', '') AS INSPECT_DT,
            jmes.SF_GET_CODE_NM('1040', Y.INSPECT_GRADE, 'EN') AS INSPECT_GRADE_NM,
            CASE WHEN Y.INSPECT_TYPE = '1' THEN
                    CASE WHEN Y.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Y.INSPECT_RESULT, 'EN')
                         ELSE jmes.SF_GET_CODE_NM('1019', Y.INSPECT_RESULT, 'EN') END
                 WHEN Y.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', Y.INSPECT_RESULT, 'EN')
            END AS INSPECT_RESULT_NM,
            jmes.SF_GET_CODE_NM('1032', Y.ERROR_REASON, 'EN') AS ERROR_REASON_NM, Z.WORK_STATUS
        FROM (
            SELECT
                'CUR' AS DATA_TYPE, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.MCT_WORK_SEQ, D.CONTROL_NUM,
                C.DRAWING_NUM, D.CONTROL_VER, C.DRAWING_VER, A.WORK_STATUS,
                SF_GET_DRAWING_WORK_TIME('W_MINUTE', A.MCT_WORK_SEQ) AS WORK_MINUTE,
                SF_GET_DRAWING_WORK_TIME('W_SECOND', A.MCT_WORK_SEQ) AS WORK_SECOND,
                SF_GET_DRAWING_WORK_TIME('S_MINUTE', A.MCT_WORK_SEQ) AS STOP_MINUTE,
                SF_GET_DRAWING_WORK_TIME('S_SECOND', A.MCT_WORK_SEQ) AS STOP_SECOND,
                CASE WHEN D.EMERGENCY_YN = 'Y' THEN D.EMERGENCY_YN ELSE SPACE(0) END AS EMERGENCY_YN,<!--긴급 -->
                IFNULL(SF_GET_CODE_NM('1059', D.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION,<!--주요 검사품 -->
                IFNULL(SF_GET_CODE_NM('1058', C.MATERIAL_FINISH_HEAT, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 열처리 -->
                IFNULL(jmes.SF_GET_DATE_F(A.WORK_START_DT, '', 'M'), SPACE(0)) AS WORK_START_DT,
                IFNULL(jmes.SF_GET_DATE_F(A.WORK_FINISH_DT, '', 'M'), SPACE(0)) AS WORK_FINISH_DT,
                CASE WHEN C.PART_NUM IS NULL THEN D.CONTROL_NUM ELSE CONCAT(D.CONTROL_NUM, ' #', C.PART_NUM) END AS CONTROL_NUM_NM,<!--관리번호 -->
                IFNULL(C.PART_NUM, SPACE(0)) AS PART_NUM,<!--PART 번호 -->
                CONCAT(IFNULL(SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ), 0), SPACE(0)) AS ORDER_QTY,<!--주문 수량 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(C.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(C.PART_UNIT_QTY, 1), 0)AS ORIGINAL_SIDE_QTY,<!--대칭_원칭 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(C.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(C.PART_UNIT_QTY, 1), 0) AS OTHER_SIDE_QTY,<!--대칭_대칭 -->
                D.SAME_SIDE_YN,<!-- 대칭 여부 -->
                jmes.SF_GET_DATE_F(C.INNER_DUE_DT, '', '') AS INNER_DUE_DT,<!--내부가공납기 -->
                D.NOTE AS NOTE, C.MATERIAL_NOTE, C.MCT_NOTE
            FROM TBL_MCT_WORK A
                INNER JOIN TBL_CONTROL_PART C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                INNER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND D.DEL_YN = 'N'
            WHERE 1 = 1
                AND A.MCT_WORK_SEQ = (SELECT MAX(H.MCT_WORK_SEQ) FROM TBL_MCT_WORK H
                                        WHERE A.EQUIP_SEQ = H.EQUIP_SEQ AND H.DEL_YN = 'N' AND H.WORK_FINISH_DT IS NULL
                                            AND H.WORK_START_DT IS NOT NULL)
                AND A.DEL_YN = 'N'
                AND A.WORK_START_DT IS NOT NULL
                AND A.WORK_FINISH_DT IS NULL
                AND A.EQUIP_SEQ = #{EQUIP_SEQ}
        ) Z
        INNER JOIN TBL_CONTROL_BARCODE X ON Z.CONTROL_SEQ = X.CONTROL_SEQ AND Z.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                AND Z.CONTROL_VER = X.CONTROL_VER AND IFNULL(Z.DRAWING_VER, SPACE(0)) = IFNULL(X.DRAWING_VER, SPACE(0)) AND X.DEL_YN = 'N'
        LEFT OUTER JOIN TBL_INSPECT Y ON 1 = 1
            AND Y.CONTROL_SEQ = Z.CONTROL_SEQ AND Y.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
            AND Y.INSPECT_SEQ =
                (SELECT MAX(C.INSPECT_SEQ)
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_INSPECT C
                        WHERE 1 = 1 AND A.DEL_YN = 'N' AND B.INNER_WORK_FINISH_DT IS NOT NULL
                            AND A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND C.INSPECT_RESULT IS NOT NULL
                            AND B.DRAWING_NUM = Z.DRAWING_NUM
                            AND C.INSPECT_SEQ = (SELECT MAX(G.INSPECT_SEQ) FROM TBL_INSPECT G WHERE C.CONTROL_SEQ = G.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ)
                )
        WHERE 1 = 1
    </select>

    <select id="selectDrawingBoardWorkPlanList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        	A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
        	C.CONTROL_NUM, <!--관리 번호 -->
            C.SAME_SIDE_YN, -- 대칭 여부 -->
        	IFNULL(D.PART_NUM, SPACE(0)) AS PART_NUM, <!--PART 번호 -->
            jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!--수량 -->
            IFNULL(jmes.SF_GET_DATE_F(D.INNER_DUE_DT, '', ''), SPACE(0)) AS INNER_DUE_DT, <!--내부가공납기 -->
            (SELECT M.BARCODE_NUM FROM TBL_CONTROL_BARCODE M WHERE M.CONTROL_SEQ = D.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS BARCODE_NUM
        FROM jmes.TBL_MCT_PLAN A
        	INNER JOIN jmes.TBL_EQUIP B ON A.EQUIP_SEQ = B.EQUIP_SEQ AND B.EQUIP_KIND = '1'
                  	AND B.PROCESS_TYPE IN ('MPR010', 'MPR020', 'MPR030', 'MPR040')
                    AND B.DEL_YN ='N'
           	INNER JOIN jmes.TBL_CONTROL C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
           	INNER JOIN jmes.TBL_CONTROL_PART D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                AND D.PART_STATUS NOT IN ('PRO001', 'PRO003', 'PRO004', 'PRO012', 'PRO014')
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
        	AND A.DEL_YN = 'N'
        ORDER BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ
    </select>

    <select id="selectDrawingBoardPopList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            B.CONTROL_NUM,<!--관리 번호 -->
            B.SAME_SIDE_YN, -- 대칭 여부 -->
            IFNULL(A.PART_NUM, SPACE(0)) AS PART_NUM,<!--PART 번호 -->
            jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY,<!--수량 -->
            IFNULL(jmes.SF_GET_DATE_F(A.INNER_DUE_DT, '', ''), SPACE(0)) AS INNER_DUE_DT, <!--내부가공납기 -->
            (SELECT M.BARCODE_NUM FROM TBL_CONTROL_BARCODE M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS BARCODE_NUM
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.POP_SEQ = (SELECT MAX(E.POP_SEQ) FROM TBL_POP E WHERE C.CONTROL_SEQ = E.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ)<!--현재 POP -->
            INNER JOIN jmes.TBL_CODE D ON D.HIGH_CD = '1009' AND C.POP_POSITION = D.CODE_CD AND D.DEL_YN = 'N'
            	AND D.REF_CD = #{FACTORY_AREA}
        WHERE 1=1
          AND A.PART_STATUS NOT IN ('PRO001', 'PRO003', 'PRO004', 'PRO012', 'PRO014')
        ORDER BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ
    </select>

    <insert id="insertMctWorkStart"  parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_MCT_WORK
        (MCT_WORK_SEQ, EQUIP_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, WORK_USER_ID, WORK_STATUS, WORK_START_DT, WORK_RESTART_DT, DEL_YN, INSERT_ID
        <if test="PLAN_WORKING_TIME != null and PLAN_WORKING_TIME !=''">
            ,PLAN_WORKING_TIME
        </if>
        )
        VALUES
        (NEXTVAL(SEQ_MCT_WORK), #{machineInfo.EQUIP_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}, #{userInfo.USER_ID}, 'DBS020', NOW(), NOW(), 'N', #{userInfo.USER_ID}
        <if test="PLAN_WORKING_TIME != null and PLAN_WORKING_TIME !=''">
            , #{PLAN_WORKING_TIME}
        </if>
        )
    </insert>

    <select id="selectWorkingTime" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT WORKING_TIME AS PLAN_WORKING_TIME
        FROM jmes.TBL_MCT_PLAN
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
          AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND DEL_YN = 'N'
    </select>

    <update id="updateEquipmentWorker"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_EQUIP
        SET
            LOGIN_USER_ID = #{USER_ID}
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </update>

    <update id="updateRemoveEquipmentWorker"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_EQUIP
        SET
            LOGIN_USER_ID = null
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </update>

    <update id="updateMctWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_WORK
        SET
            WORK_STATUS = 'DBS040',
            <if test="DEL_YN != null and DEL_YN != ''">
                DEL_YN = #{DEL_YN},
            </if>
            UPDATE_DT = NOW(),
            UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </update>

    <update id="updateMctCancelWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_WORK
        SET
            WORK_STATUS = 'DBS040',
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </update>

    <update id="updateStopMctWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_WORK
        SET
            WORK_TEMP_STOP_DT = NOW(),
            WORK_RESTART_DT = NULL,
            WORK_STATUS = 'DBS010',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </update>

    <update id="updateRestartMctWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_WORK
        SET
            WORK_RESTART_DT = NOW(),
            WORK_TEMP_STOP_DT = NULL,
            WORK_STATUS = 'DBS020',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </update>

    <delete id="updateCancelMctControlPartWork" parameterType="java.util.HashMap" >
        DELETE A
        FROM jmes.TBL_CONTROL_PART_PROGRESS A
        WHERE 1 = 1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.PART_STATUS = 'PRO007'
            AND A.SEQ = (SELECT X.SEQ FROM (SELECT MAX(B.SEQ) AS SEQ FROM TBL_CONTROL_PART_PROGRESS B
                WHERE B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}) X
            )
    </delete>

    <update id="updateCompleteMctWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_WORK
        SET
            WORK_FINISH_DT = NOW(),
            WORK_TEMP_STOP_DT = NULL,
            WORK_STATUS = 'DBS030',
            FINISH_QTY = #{FINISH_QTY},
            ERROR_QTY = #{ERROR_QTY},
            ERROR_REASON = #{ERROR_REASON},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </update>

    <insert id="insertMctWorkTime"  parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_MCT_WORK_TIME
            (MCT_WORK_SEQ, SEQ, WORK_START_DT, WORK_STOP_DT, INSERT_ID)
        SELECT
            A.MCT_WORK_SEQ, NEXTVAL(SEQ_MCT_WORK_TIME), A.WORK_RESTART_DT, NOW(), #{userInfo.USER_ID}
        FROM jmes.TBL_MCT_WORK A
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND A.MCT_WORK_SEQ = #{MCT_WORK_SEQ}
    </insert>

    <update id="deleteFristMctPlan"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_MCT_PLAN A
            SET
                A.DEL_YN = 'Y',
                A.UPDATE_DT = NOW(),
                A.UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND IFNULL(A.DEL_YN, 'N') = 'N'
            <!-- AND A.EQUIP_SEQ = #{machineInfo.EQUIP_SEQ} -->
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.MCT_PLAN_SEQ = (SELECT MIN(B.MCT_PLAN_SEQ) FROM jmes.TBL_MCT_PLAN B WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                        AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND IFNULL(B.DEL_YN, 'N') = 'N')
    </update>

    <insert id="createDrawingBoardControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            #{PART_STATUS},
            NOW(),
            #{userInfo.USER_ID}
        )
    </insert>

    <update id="updateDrawingBoardControlPartStatusMapping" parameterType="java.util.HashMap" >
        UPDATE TBL_CONTROL_PART A
            INNER JOIN  TBL_CONTROL_PART_PROGRESS B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.SEQ = (SELECT MAX(C.SEQ) FROM TBL_CONTROL_PART_PROGRESS C WHERE C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ)
        SET
            A.PART_STATUS = B.PART_STATUS,
            A.STATUS_DT = B.STATUS_DT,
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{userInfo.USER_ID}
        WHERE 1 = 1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <!-- Barcode 스캔 이후 정보를 이용하여 작업 시작, 및 작업 종료 처리 한다. -->
    <select id="selectDrawingBarcodeScanInfo_Backup" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, B.CONTROL_NUM,<!--관리 번호 -->
            IFNULL(A.PART_NUM, SPACE(0)) AS PART_NUM,<!--PART 번호 -->
            jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY,<!--수량 -->
            jmes.SF_GET_DATE_F(A.INNER_DUE_DT, '', '') AS INNER_DUE_DT<!--내부가공납기 -->
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
                AND B.OUT_FINISH_DT IS NULL
            INNER JOIN TBL_CONTROL_BARCODE C ON C.CONTROL_SEQ = A.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND C.CONTROL_VER = B.CONTROL_VER AND C.DEL_YN = 'N'
            	AND IFNULL(C.DRAWING_VER, SPACE(0)) = IFNULL(A.DRAWING_VER, SPACE(0)) AND C.BARCODE_NUM = #{BARCODE_NUM}
        WHERE 1 = 1
            AND A.PART_STATUS NOT IN ('PRO001', 'PRO003', 'PRO004', 'PRO012', 'PRO014')
   </select>

    <select id="selectDrawingBarcodeScanInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            CONCAT(IFNULL(Z.CONTROL_NUM, SPACE(0)), CASE WHEN Z.PART_NUM IS NOT NULL THEN CONCAT(' #', Z.PART_NUM) ELSE SPACE(0) END) AS CONTROL_INFO,
            Z.EMERGENCY_YN, Z.MAIN_INSPECTION, Z.MATERIAL_FINISH_HEAT, Z.ORDER_QTY, Z.ORIGINAL_SIDE_QTY, Z.OTHER_SIDE_QTY,
            Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.CONTROL_NUM, Z.PART_NUM, Z.SAME_SIDE_YN, Z.SCAN_BARCODE_NUM AS BARCODE_NUM,
            CASE WHEN Z.SAME_SIDE_YN = 'Y' THEN CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'sym.' ELSE '대칭가공' END ELSE SPACE(0) END AS SAME_SIDE_YN_NM,
            CASE WHEN Z.MAIN_INSPECTION IS NOT NULL THEN Z.MAIN_INSPECTION ELSE SPACE(0) END AS MAIN_INSPECTION_NM,
            CASE WHEN Z.MATERIAL_FINISH_HEAT IS NOT NULL AND LENGTH(Z.MATERIAL_FINISH_HEAT) > 0  THEN CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'Heat treatment' ELSE '열처리' END ELSE SPACE(0) END AS MATERIAL_FINISH_HEAT_NM,
            CASE WHEN ORIGINAL_SIDE_QTY > 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'Qty.' ELSE '수량' END, SPACE(1), Z.ORDER_QTY, ' EA', SPACE(1), '(', CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'ori. ' ELSE '원 ' END, Z.ORIGINAL_SIDE_QTY, ',', CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN ' sym. ' ELSE ' 대 ' END, Z.OTHER_SIDE_QTY, ')')
                 WHEN ORIGINAL_SIDE_QTY  > 0 AND Z.OTHER_SIDE_QTY = 0
                    THEN CONCAT(CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'Qty.' ELSE '수량' END, SPACE(1), Z.ORDER_QTY, ' EA', SPACE(1), '(', CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'ori. ' ELSE '원 ' END, Z.ORIGINAL_SIDE_QTY, ')')
                 WHEN ORIGINAL_SIDE_QTY  = 0 AND Z.OTHER_SIDE_QTY > 0
                    THEN CONCAT(CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'Qty.' ELSE '수량' END, SPACE(1), Z.ORDER_QTY, ' EA', SPACE(1), '(', CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'sym. ' ELSE '대 ' END, Z.OTHER_SIDE_QTY, ')')
                 ELSE CONCAT(CASE WHEN UPPER(#{LOGIN_LOCALE}) = 'EN' THEN 'Qty.' ELSE '수량' END, SPACE(1), Z.ORDER_QTY, ' EA', SPACE(1))
            END AS ORDER_QTY_INFO, <!-- 수량에 대칭 추가 -->
            jmes.SF_GET_DATE_F(Z.INNER_DUE_DT, '', '') AS INNER_DUE_DT, <!-- 내부가공납기 -->
            CASE WHEN Z.POP_COUNT = 0 THEN 'X' ELSE '' END CHE_POP, <!-- pop 선작업이 필요한 경우 -->
            CASE WHEN Z.OUTSIDE_CONFIRM_DT IS NULL AND PRO002 IS NULL THEN 'X' ELSE '' END AS CHE_PRO002, <!-- NULL 이 아닌경우 가공 확정 이후 DRAWING 작업 가능 -->
            CASE WHEN Z.SCAN_BARCODE_NUM != Z.CURR_BARCODE_NUM THEN 'X' ELSE '' END AS CHE_VER, <!-- 최선 바코드 정보와 스캔 바코드의 DRAWING_NUM 가 다른경우 -->
            CASE WHEN Z.DEL_YN = 'Y' THEN 'X' ELSE '' END AS CHE_DEL_YN, <!-- 주문 정보가 삭제된 경우  -->
            CASE WHEN Z.CONTROL_STATUS = 'ORD002' THEN 'X' ELSE '' END AS CHE_CANCEL_YN, <!-- 주문 취소가 된 경우  -->
            CASE WHEN Z.CONTROL_STATUS = 'ORD005' THEN 'X' ELSE '' END AS CHE_HOLD_YN <!-- 주문 보류 된 경우  -->
        FROM (
            SELECT
                A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, H.CONTROL_NUM, A.PART_NUM, A.INNER_DUE_DT, H.SAME_SIDE_YN, <!-- 대칭 여부 -->
                CASE WHEN H.EMERGENCY_YN = 'Y' THEN H.EMERGENCY_YN ELSE SPACE(0) END AS EMERGENCY_YN, <!-- 긴급 -->
                IFNULL(SF_GET_CODE_NM('1059', H.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION, <!-- 주요 검사품 -->
                IFNULL(SF_GET_CODE_NM('1058', A.MATERIAL_FINISH_HEAT, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 열처리 -->
                IFNULL(H.CONTROL_STATUS, SPACE(0)) AS CONTROL_STATUS, <!-- CONTROL 상태 -->
                IFNULL(A.PART_STATUS, SPACE(0)) AS PART_STATUS, <!-- CONTROL PART 현재 상태  -->
                A.INNER_WORK_FINISH_DT, <!-- 가공 완료 일시  -->
                IFNULL(A.OUTSIDE_YN, 'N') AS OUTSIDE_YN, <!-- 외주 가공 여부  -->
                A.OUTSIDE_CONFIRM_DT,  <!-- 외주 가공 확정일  -->
                B.BARCODE_NUM AS SCAN_BARCODE_NUM, B.CONTROL_VER AS SCAN_CONTROL_VER,  B.DRAWING_VER AS SCAN_DRAWING_VER, <!-- 바코드 스캔 정보 -->
                D.BARCODE_NUM AS CURR_BARCODE_NUM, D.CONTROL_VER AS CURR_CONTROL_VER,  D.DRAWING_VER AS CURR_DRAWING_VER, <!-- 바코드 최선 정보 -->
                MAX(P.PART_STATUS) AS PRO002, H.DEL_YN, <!-- 주문정보 삭제 유무 -->
                jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!-- 수량 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1), 0) AS ORIGINAL_SIDE_QTY, <!-- 대칭_원칭 -->
                IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1), 0) AS OTHER_SIDE_QTY, <!-- 대칭_대칭 -->
                (SELECT COUNT(*) FROM TBL_POP K WHERE K.CONTROL_SEQ = A.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ) AS POP_COUNT
            FROM TBL_CONTROL_PART A
                INNER JOIN TBL_CONTROL H ON A.CONTROL_SEQ = H.CONTROL_SEQ  <!-- 확정 상태 -->
                INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND B.BARCODE_NUM = #{BARCODE_NUM} <!-- 현재 찍힌 바코드 -->
                LEFT OUTER JOIN TBL_CONTROL_BARCODE D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.DEL_YN = 'N'
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS P ON A.CONTROL_SEQ = P.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ AND P.PART_STATUS = 'PRO002' <!-- 가공 확정 존재 유무 주문 -->
                    AND P.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE P.CONTROL_SEQ = E.CONTROL_SEQ AND P.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
            WHERE 1=1
        ) Z
    </select>

</mapper>