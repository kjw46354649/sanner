<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="orderMapper">

    <sql id="control">
        A.CONTROL_SEQ, <!-- 주문관리일련번호 -->
        A.CONTROL_NUM, <!-- 작업지시번호 -->
        A.CONTROL_VER, <!-- 작업지시번호 버전 -->
        A.COMP_CD, <!-- 사업자 구분 -->
        IFNULL(SF_GET_COMP_NM(A.COMP_CD), SPACE(0)) AS COMP_NM, <!-- 사업자구분 -->
        A.ORDER_COMP_CD, <!-- 발주업체 -->
        IFNULL(SF_GET_COMP_NM(A.ORDER_COMP_CD), SPACE(0)) AS ORDER_COMP_NM, <!-- 발주업체 -->
        IFNULL(A.NOTE, SPACE(0)) AS CONTROL_NOTE, <!-- 주문관리 비고 -->
        IFNULL(A.MAIN_INSPECTION, SPACE(0)) AS MAIN_INSPECTION, <!-- 주요검사품 -->
        IFNULL(SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION_NM, <!-- 주요검사품 -->
        IFNULL(A.TOTAL_SHEET, SPACE(0)) AS TOTAL_SHEET, <!-- 총장 -->
        A.EMERGENCY_YN, <!-- 긴급 -->
        CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴급' ELSE SPACE(0) END AS EMERGENCY_BARCODE_NM, <!-- 바코드 긴급 -->
        A.CONTROL_STATUS, <!-- 주문관리상태 -->
        IFNULL(SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}), SPACE(0)) AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
        IFNULL(SF_GET_DATE_F(A.STATUS_DT, '', 'M'), SPACE(0)) AS CONTROL_STATUS_DT, <!-- 주문관리 상태확정일 -->
        A.EST_SEQ, <!-- 견적일련번호 -->
        IFNULL(A.PRICE_CONFIRM, SPACE(0)) AS PRICE_CONFIRM, <!-- 단가확인 -->
        IFNULL(SF_GET_CODE_NM('1017', PRICE_CONFIRM, #{LOGIN_LOCALE}), SPACE(0)) AS PRICE_CONFIRM_NM, <!-- 단가확인 -->
        IFNULL(A.OUT_FINISH_DT, SPACE(0)) AS CONTROL_OUT_FINISH_DT, <!-- 주문관리 출고완료일 -->
        IFNULL(A.SAME_SIDE_YN, SPACE(0)) AS SAME_SIDE_YN, <!-- 대칭여부 -->
        SF_GET_DATE_F(A.INSERT_DT, '', 'M') AS CONTROL_INSERT_DT
    </sql>

    <sql id="controlPart">
        B.CONTROL_DETAIL_SEQ, <!-- 주문관리상세일련번호 -->
        IFNULL(B.PART_NUM, SPACE(0)) AS PART_NUM, <!-- Part -->
        IFNULL(B.DRAWING_NUM, SPACE(0)) AS DRAWING_NUM, <!-- 도면번호 -->
        IFNULL(B.DRAWING_VER, SPACE(0)) AS DRAWING_VER, <!-- 도면번호 버전 -->
        CASE WHEN B.DRAWING_VER IS NOT NULL THEN IFNULL(SF_GET_DATE_F(B.DRAWING_UP_DT, '', 'M'), SPACE(0))
            ELSE SPACE(0) END AS DRAWING_UP_DT, <!-- 도면업로드시간 -->
        IFNULL(B.PREV_DRAWING_NUM, SPACE(0)) AS PREV_DRAWING_NUM, <!-- 변경전 도면번호 -->
        IFNULL(B.WORK_TYPE, SPACE(0)) AS WORK_TYPE, <!-- 작업형태 -->
        IFNULL(SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM, <!-- 작업형태 -->
        IFNULL(B.OUTSIDE_YN, SPACE(0)) AS OUTSIDE_YN, <!-- 외주 -->
        IFNULL(B.WORK_FACTORY, SPACE(0)) AS WORK_FACTORY, <!-- 수행공장 -->
        IFNULL(SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_FACTORY_NM, <!-- 수행공장 -->
        IFNULL(B.MATERIAL_SUPPLY_YN, SPACE(0)) AS MATERIAL_SUPPLY_YN, <!-- 소재사급 -->
        IFNULL(SF_GET_DATE_F(B.INNER_DUE_DT, 'YYYY', ''), SPACE(0)) AS INNER_DUE_DT, <!-- 가공납기 -->
        IFNULL(B.SIZE_TXT, SPACE(0)) AS SIZE_TXT, <!-- 규격 문자열 -->
        IFNULL(B.SIZE_TYPE, SPACE(0)) AS SIZE_TYPE, <!-- 규격 타입 -->
        IFNULL(B.SIZE_W, SPACE(0)) AS SIZE_W, <!-- 규격 가로 -->
        IFNULL(B.SIZE_H, SPACE(0)) AS SIZE_H, <!-- 규격 세로 -->
        IFNULL(B.SIZE_T, SPACE(0)) AS SIZE_T, <!-- 규격 두께 -->
        IFNULL(B.SIZE_D, SPACE(0)) AS SIZE_D, <!-- 규격 지름 -->
        IFNULL(B.SIZE_L, SPACE(0)) AS SIZE_L, <!-- 규격 길이 -->
        IFNULL(B.MATERIAL_TYPE, SPACE(0)) AS MATERIAL_TYPE, <!-- 재질 -->
        IFNULL(SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_TYPE_NM, <!-- 재질 -->
        IFNULL(B.MATERIAL_DETAIL, SPACE(0)) AS MATERIAL_DETAIL, <!-- 소재 종류 -->
        IFNULL(SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
        IFNULL(B.MATERIAL_KIND, SPACE(0)) AS MATERIAL_KIND, <!-- 소재 형태 -->
        IFNULL(SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_KIND_NM, <!-- 소재 형태 -->
        IFNULL(B.SURFACE_TREAT, SPACE(0)) AS SURFACE_TREAT, <!-- 표면처리 -->
        IFNULL(SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}), SPACE(0)) AS SURFACE_TREAT_NM,  <!-- 표면 처리 -->
        IFNULL(B.MATERIAL_NOTE, SPACE(0)) AS MATERIAL_NOTE, <!-- 소재비고 -->
        IFNULL(B.PART_UNIT_QTY, SPACE(0)) AS PART_UNIT_QTY, <!-- Part단위수량 -->
        IFNULL(B.MATERIAL_FINISH_GRIND, SPACE(0)) AS MATERIAL_FINISH_GRIND, <!-- 소재마감_연마 -->
        IFNULL(SF_GET_CODE_NM('1058', B.MATERIAL_FINISH_GRIND, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_FINISH_GRIND_NM, <!-- 소재마감_연마 -->
        IFNULL(B.MATERIAL_FINISH_HEAT, SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 소재마감_열처리 -->
        IFNULL(SF_GET_CODE_NM('1058', B.MATERIAL_FINISH_HEAT, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_FINISH_HEAT_NM, <!-- 소재마감_열처리 -->
        CASE WHEN B.WORK_TYPE = 'WTP050' THEN IFNULL(B.PART_UNIT_QTY * B.UNIT_MATERIAL_AUTO_AMT, SPACE(0)) ELSE IFNULL(B.UNIT_MATERIAL_AUTO_AMT, SPACE(0)) END AS UNIT_MATERIAL_AUTO_AMT,
	    CASE WHEN B.WORK_TYPE = 'WTP050' THEN IFNULL(B.PART_UNIT_QTY * B.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT, SPACE(0)) ELSE IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT, SPACE(0)) END AS UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT,
	    CASE WHEN B.WORK_TYPE = 'WTP050' THEN IFNULL(B.PART_UNIT_QTY * B.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT, SPACE(0)) ELSE IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT, SPACE(0)) END AS UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT,
	    CASE WHEN B.WORK_TYPE = 'WTP050' THEN IFNULL(B.PART_UNIT_QTY * B.UNIT_SURFACE_AUTO_AMT, SPACE(0)) ELSE IFNULL(B.UNIT_SURFACE_AUTO_AMT, SPACE(0)) END AS UNIT_SURFACE_AUTO_AMT,
	    CASE WHEN B.WORK_TYPE = 'WTP050' THEN IFNULL(B.PART_UNIT_QTY * B.UNIT_PROCESS_AUTO_AMT, SPACE(0)) ELSE IFNULL(B.UNIT_PROCESS_AUTO_AMT, SPACE(0)) END AS UNIT_PROCESS_AUTO_AMT,
        IFNULL(B.UNIT_MATERIAL_AMT, SPACE(0)) AS UNIT_MATERIAL_AMT, <!-- 항목별단가_소재비 -->
        IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT, SPACE(0)) AS UNIT_MATERIAL_FINISH_GRIND_AMT,
        IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT, SPACE(0)) AS UNIT_MATERIAL_FINISH_HEAT_AMT,
        IFNULL(B.UNIT_SURFACE_AMT, SPACE(0)) AS UNIT_SURFACE_AMT,
        IFNULL(B.UNIT_PROCESS_AMT, SPACE(0)) AS UNIT_PROCESS_AMT,
        IFNULL(B.UNIT_ETC_AMT, SPACE(0)) AS UNIT_ETC_AMT,
        IFNULL(B.UNIT_AMT_NOTE, SPACE(0)) AS UNIT_AMT_NOTE, <!-- 항목별단가_견적비고 -->
        IFNULL(B.DWG_GFILE_SEQ, SPACE(0)) AS DWG_GFILE_SEQ, <!-- DWG 파일그룹번호 -->
        IFNULL(B.DXF_GFILE_SEQ, SPACE(0)) AS DXF_GFILE_SEQ, <!-- DXF 파일그룹번호 -->
        IFNULL(B.PDF_GFILE_SEQ, SPACE(0)) AS PDF_GFILE_SEQ, <!-- PDF 파일그룹번호 -->
        IFNULL(B.IMG_GFILE_SEQ, SPACE(0)) AS IMG_GFILE_SEQ, <!-- IMG 파일그룹번호 -->
        IFNULL(B.ETC_GFILE_SEQ, SPACE(0)) AS ETC_GFILE_SEQ,
        IFNULL(B.PART_STATUS, SPACE(0)) AS PART_STATUS, <!-- PART 상태 -->
        IFNULL(SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}), SPACE(0)) AS PART_STATUS_NM, <!-- PART 상태 -->
        IFNULL(SF_GET_DATE_F(B.STATUS_DT, '', 'M'), SPACE(0)) AS PART_STATUS_DT, <!-- PART 상태확정일 -->
        IFNULL(B.MCT_NOTE, SPACE(0)) AS MCT_NOTE, <!-- MCT_가공계획비고 -->
        IFNULL(B.MCT_WORK_TYPE, SPACE(0)) AS MCT_WORK_TYPE, <!-- MCT_작업구분 -->
        IFNULL(B.OUTSIDE_COMP_CD, SPACE(0)) AS OUTSIDE_COMP_CD, <!-- 외주업체 -->
        IFNULL(SF_GET_COMP_NM(B.OUTSIDE_COMP_CD), SPACE(0)) AS OUTSIDE_COMP_NM, <!-- 외주업체 -->
        IFNULL(B.OUTSIDE_ORDER_NUM, SPACE(0)) AS OUTSIDE_ORDER_NUM, <!-- 외주발주번호 -->
        IFNULL(B.OUTSIDE_NOTE, SPACE(0)) AS OUTSIDE_NOTE, <!-- 외주 비고 -->
        IFNULL(B.OUTSIDE_MATERIAL_SUPPLY_YN, SPACE(0)) AS OUTSIDE_MATERIAL_SUPPLY_YN, <!-- 외주 소재제공 여부 -->
        IFNULL(B.OUTSIDE_REQUEST_FINISH_YN, SPACE(0)) AS OUTSIDE_REQUEST_FINISH_YN, <!-- 외주 요청가공 완제품 -->
        IFNULL(B.OUTSIDE_REQUEST_PROCESS_YN, SPACE(0)) AS OUTSIDE_REQUEST_PROCESS_YN, <!-- 외주 요청가공 가공 -->
        IFNULL(B.OUTSIDE_REQUEST_GRIND_YN, SPACE(0)) AS OUTSIDE_REQUEST_GRIND_YN, <!-- 외주 요청가공 연마 -->
        IFNULL(B.OUTSIDE_REQUEST_SURFACE_YN, SPACE(0)) AS OUTSIDE_REQUEST_SURFACE_YN, <!-- 외주 요청가공 표면처리 -->
        IFNULL(B.OUTSIDE_REQUEST_ETC, SPACE(0)) AS OUTSIDE_REQUEST_ETC, <!-- 외주 요청가공 기타사항 -->
        IFNULL(SF_GET_DATE_F(B.OUTSIDE_HOPE_DUE_DT, 'YYYY', ''), SPACE(0)) AS OUTSIDE_HOPE_DUE_DT, <!-- 외주 요망납기 -->
        IFNULL(B.OUTSIDE_UNIT_AMT, SPACE(0)) AS OUTSIDE_UNIT_AMT, <!-- 외주 확정단가 -->
        IFNULL(SF_GET_DATE_F(B.OUTSIDE_CONFIRM_DT, 'YY', 'M'), SPACE(0)) AS OUTSIDE_CONFIRM_DT, <!-- 외주 확정일시 -->
        IFNULL(B.OUTSIDE_STATUS, SPACE(0)) AS OUTSIDE_STATUS, <!-- 외주 가공요청상태 -->
        IFNULL(SF_GET_CODE_NM('1031', B.OUTSIDE_STATUS, #{LOGIN_LOCALE}), SPACE(0)) AS OUTSIDE_STATUS_NM, <!-- 외주 가공요청상태 -->
        IFNULL(SF_GET_DATE_F(B.OUTSIDE_STATUS_DT, '', 'M'), SPACE(0)) AS OUTSIDE_STATUS_DT, <!-- 외주 상태변경일시 -->
        IFNULL(SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', ''), SPACE(0)) AS OUTSIDE_IN_DT, <!-- 외주 입고일시 -->
        IFNULL(SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), SPACE(0)) AS CONTROL_PART_QTY,
        IFNULL(SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', 'M'), SPACE(0)) AS INNER_WORK_FINISH_DT,
        IFNULL(B.ADDITIONAL_QTY, SPACE(0)) AS ADDITIONAL_QTY
    </sql>

    <sql id="controlPartOrder">
        C.ORDER_SEQ,
        C.ORDER_NUM, <!-- 발주번호 -->
        C.REGIST_NUM, <!-- 접수번호 -->
        SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ) AS CONTROL_ORDER_QTY, <!-- 주문 수량 -->
        IFNULL(C.ORDER_QTY, SPACE(0)) AS ORDER_QTY, <!-- 발주수량 -->
        SF_GET_DATE_F(C.ORDER_DUE_DT, 'YYYY', '') AS ORDER_DUE_DT, <!-- 발주납기 -->
        SF_GET_DATE_F(C.DELIVERY_DT, 'YYYY', '') AS DELIVERY_DT, <!-- 발주정보_납품확인 -->
        C.PACKING_CNT, <!-- 포장묶음 -->
        SF_GET_DATE_F(C.OUT_FINISH_DT, 'YYYY', '') AS ORDER_OUT_FINISH_DT,   <!-- 출고완료일 -->
        IFNULL(C.PROJECT_NM, SPACE(0)) AS PROJECT_NM, <!-- 프로젝트 -->
        IFNULL(C.MODULE_NM, SPACE(0)) AS MODULE_NM, <!-- 모듈명 -->
        IFNULL(C.DELIVERY_COMP_NM, SPACE(0)) AS DELIVERY_COMP_NM, <!-- 납품처 -->
        IFNULL(C.LABEL_NOTE, SPACE(0)) AS LABEL_NOTE, <!-- 라벨비고 -->
        IFNULL(C.ORDER_STAFF_SEQ, SPACE(0)) AS ORDER_STAFF_SEQ, <!-- 구매담당자 -->
        IFNULL(SF_GET_STAFF_NM(C.ORDER_STAFF_SEQ), SPACE(0)) AS ORDER_STAFF_NM, <!-- 구매담당자  -->
        IFNULL(C.DESIGNER_NM, SPACE(0)) AS DESIGNER_NM, <!-- 설계자 -->
<!--        IFNULL(C.DRAWING_NUM, SPACE(0)) AS DRAWING_NUM, -->
<!--        IFNULL(C.DWG_GFILE_SEQ, SPACE(0)) AS DWG_GFILE_SEQ, -->
<!--        IFNULL(C.DXF_GFILE_SEQ, SPACE(0)) AS DXF_GFILE_SEQ, -->
<!--        IFNULL(C.PDF_GFILE_SEQ, SPACE(0)) AS PDF_GFILE_SEQ, -->
<!--        IFNULL(C.IMG_GFILE_SEQ, SPACE(0)) AS IMG_GFILE_SEQ, -->
<!--        IFNULL(C.VIEW_GFILE_SEQ, SPACE(0)) AS VIEW_GFILE_SEQ, -->
        IFNULL(C.ITEM_NM, SPACE(0)) AS ITEM_NM, <!-- 품명 -->
        IFNULL(C.ORIGINAL_SIDE_QTY, SPACE(0)) AS ORIGINAL_SIDE_QTY, <!-- 대칭_원칭 -->
        IFNULL(C.OTHER_SIDE_QTY, SPACE(0)) AS OTHER_SIDE_QTY,   <!-- 대칭_대칭 -->
        IFNULL(C.UNIT_FINAL_EST_AMT, SPACE(0)) AS UNIT_FINAL_EST_AMT,   <!-- 최종견적단가 -->
        IFNULL(C.UNIT_FINAL_AMT, SPACE(0)) AS UNIT_FINAL_AMT <!-- 최종공급단가 -->
    </sql>

    <select id="selectControlManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM, C.ORDER_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            <include refid="controlPartOrder"/>,
            CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS ORDER_DRAWING_NUM,
            CASE WHEN B.PART_NUM IS NULL THEN C.IMG_GFILE_SEQ ELSE B.IMG_GFILE_SEQ END AS ORDER_IMG_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.DXF_GFILE_SEQ ELSE B.DXF_GFILE_SEQ END AS ORDER_DXF_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.PDF_GFILE_SEQ ELSE B.PDF_GFILE_SEQ END AS ORDER_PDF_GFILE_SEQ,
            LAG(B.WORK_TYPE, 1) OVER(PARTITION BY A.CONTROL_NUM ORDER BY A.CONTROL_SEQ, B.PART_NUM, C.ORDER_SEQ) AS LAG_WORK_TYPE,
            CONCAT(A.CONTROL_NUM, ':', IFNULL(B.PART_NUM, 0)) AS CONTROL_NUM_BUTTON, <!-- merge 용도 -->
            CONCAT(C.DRAWING_NUM, ':', IFNULL(B.PART_NUM, 0)) AS DRAWING_NUM_BUTTON, <!-- merge 용도 -->
            CONCAT(B.WORK_TYPE, ':', IFNULL(B.PART_NUM, 0)) AS DETAIL_MACHINE_REQUIREMENT, <!-- merge 용도 -->
            IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1), SPACE(0)) AS DNJSCLD,
            IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1), SPACE(0)) AS EOCLD,
            IFNULL((SELECT INVOICE_NUM FROM TBL_INVOICE_DETAIL M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.ORDER_SEQ =  C.ORDER_SEQ), SPACE(0)) AS INVOICE_NUM, <!-- 인보이스 번호 -->
            IFNULL(C.UNIT_FINAL_AMT * C.ORDER_QTY, SPACE(0)) AS FINAL_TOTAL_AMT, <!-- 합계 금액 -->
            IFNULL(B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), SPACE(0)) AS OUTSIDE_FINAL_AMT, <!-- 외주 합계 금액 -->
            (SELECT SUM(OUT_QTY) FROM TBL_OUT WHERE CONTROL_SEQ = C.CONTROL_SEQ AND CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND ORDER_SEQ = C.ORDER_SEQ) AS OUT_QTY, <!-- 출고 -->
            IFNULL( CASE
                        WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.UNIT_FINAL_AMT
                                                                    FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                        AND N.DEL_YN = 'N'
                                                                        AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                        AND O.WORK_TYPE = B.WORK_TYPE
                                                                        AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                    LIMIT 1)
                        ELSE (  SELECT M.UNIT_FINAL_AMT
                                FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND N.CONTROL_STATUS = 'ORD003'
                                    AND N.DEL_YN = 'N'
                                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                    AND M.DRAWING_NUM = B.DRAWING_NUM
                                    AND O.WORK_TYPE = B.WORK_TYPE
                                    AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                ORDER BY M.CONTROL_SEQ DESC
                                LIMIT 1)
                    END, SPACE(0)) AS PREV_UNIT_FINAL_AMT,  <!-- 종전가 -->
            SF_GET_UNIT_SUM_AUTO_AMT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS UNIT_SUM_AUTO_AMT,
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT_F,
            (SELECT SF_GET_DATE_F(M.CLOSE_DT, 'YYYY', '') FROM TBL_MONTH_CLOSE M, TBL_MONTH_CLOSE_ORDER N WHERE N.COMP_CD = M.COMP_CD AND M.ORDER_COMP_CD = N.ORDER_COMP_CD AND N.CLOSE_MONTH = M.CLOSE_MONTH AND N.CLOSE_VER = M.CLOSE_VER AND N.CONTROL_SEQ = C.CONTROL_SEQ AND N.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND N.ORDER_SEQ = C.ORDER_SEQ ORDER BY N.INSERT_DT DESC LIMIT 1) AS CLOSE_DT,
            SF_GET_DATE_F(CASE WHEN IFNULL(TIMESTAMPDIFF(SECOND, B.INSERT_DT, B.UPDATE_DT), -1) <![CDATA[ < ]]> 0 THEN B.INSERT_DT ELSE B.UPDATE_DT END, 'YY', 'M') AS CONTROL_PART_INSERT_UPDATE_DT, <!-- 등록/업데이트 일시 -->
            (SELECT M.BARCODE_NUM FROM TBL_CONTROL_BARCODE M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS CONTROL_BARCODE_NUM,
            IFNULL(D.INSIDE_STOCK_NUM,SPACE(0)) AS INSIDE_STOCK_NUM,
            IFNULL(D.REQUEST_QTY,SPACE(0)) AS STOCK_REQUEST_QTY,
            IFNULL(D.OUT_QTY,SPACE(0)) AS STOCK_OUT_QTY,
            (SELECT COUNT(*) FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND B.WORK_TYPE != 'WTP040') AS ORDER_CONNECT_CNT,
            CASE WHEN B.MATERIAL_FINISH_GRIND_YN = 'Y' THEN 'MATERIAL_FINISH_GRIND_YN'
                 WHEN B.MATERIAL_FINISH_HEAT_YN = 'Y' THEN 'MATERIAL_FINISH_HEAT_YN'
            END AS SPECIAL_TREATMENT
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            <if test="HIDDEN_WORK_TYPE != null and HIDDEN_WORK_TYPE != ''">
                AND B.WORK_TYPE IN (${HIDDEN_WORK_TYPE})
            </if>
            <if test="HIDE_ASSEMBLY != null and HIDE_ASSEMBLY != ''">
                AND IFNULL(B.WORK_TYPE, 'WTP010') != 'WTP020'
            </if>
            <if test="OUTSIDE_YN != null and OUTSIDE_YN != ''">
                AND IFNULL(B.OUTSIDE_YN, 'N') = #{OUTSIDE_YN}
            </if>
            <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                AND B.MATERIAL_TYPE = #{MATERIAL_TYPE}
            </if>
            <if test="SIZE_TYPE != null and SIZE_TYPE != ''">
                AND B.SIZE_TYPE = #{SIZE_TYPE}
                <choose>
                    <when test="SIZE_TYPE == 'XYZ010'">
                        <if test="SIZE_W_F != null and SIZE_W_F != ''">
                            AND B.SIZE_W >= #{SIZE_W_F}
                        </if>
                        <if test="SIZE_W_T != null and SIZE_W_T != ''">
                            AND B.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                        </if>
                        <if test="SIZE_H_F != null and SIZE_H_F != ''">
                            AND B.SIZE_H >= #{SIZE_H_F}
                        </if>
                        <if test="SIZE_H_T != null and SIZE_H_T != ''">
                            AND B.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                        </if>
                        <if test="SIZE_T_F != null and SIZE_T_F != ''">
                            AND B.SIZE_T >= #{SIZE_T_F}
                        </if>
                        <if test="SIZE_T_T != null and SIZE_T_T != ''">
                            AND B.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                        </if>
                    </when>
                    <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                        <if test="SIZE_D_F != null and SIZE_D_F != ''">
                            AND B.SIZE_D >= #{SIZE_D_F}
                        </if>
                        <if test="SIZE_D_T != null and SIZE_D_T != ''">
                            AND B.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                        </if>
                        <if test="SIZE_L_F != null and SIZE_L_F != ''">
                            AND B.SIZE_L >= #{SIZE_L_F}
                        </if>
                        <if test="SIZE_L_T != null and SIZE_L_T != ''">
                            AND B.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                        </if>
                    </when>
                </choose>
            </if>
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_INSIDE_OUT D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
        WHERE A.DEL_YN = 'N'
            AND (A.CONTROL_STATUS IS NULL OR A.CONTROL_STATUS IN ('ORD001', 'ORD002', 'ORD005'))
        <choose>
            <!-- 작업생성일시 -->
            <when test="CONTROL_SEARCH_CONDITION == 'OCM00'">
                AND DATE_FORMAT(A.INSERT_DT, '%Y/%m/%d') BETWEEN #{CONTROL_MANAGE_START_DATE} AND #{CONTROL_MANAGE_END_DATE}
            </when>
            <!-- 가공확정일시 -->
            <when test="CONTROL_SEARCH_CONDITION == 'OCM01'">
                AND DATE_FORMAT(C.ORDER_DUE_DT, '%Y/%m/%d') BETWEEN #{CONTROL_MANAGE_START_DATE} AND #{CONTROL_MANAGE_END_DATE}
            </when>
            <!-- 가공 납기 -->
            <when test="CONTROL_SEARCH_CONDITION == 'OCM02'">
                AND DATE_FORMAT(B.INNER_DUE_DT, '%Y/%m/%d') BETWEEN #{CONTROL_MANAGE_START_DATE} AND #{CONTROL_MANAGE_END_DATE}
            </when>
        </choose>
        <if test="UNIT_PRICE_CONFIRM != null and UNIT_PRICE_CONFIRM != ''">
            AND A.PRICE_CONFIRM = #{UNIT_PRICE_CONFIRM}
        </if>
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
             AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="HIDDEN_COMP_CD != null and HIDDEN_COMP_CD != ''">
             AND A.COMP_CD IN (${HIDDEN_COMP_CD})
        </if>
        <if test="HIDDEN_ORDER_COMP_CD != null and HIDDEN_ORDER_COMP_CD != ''">
             AND A.ORDER_COMP_CD IN (${HIDDEN_ORDER_COMP_CD})
        </if>
        <if test="CONTROL_STATUS != null and CONTROL_STATUS != ''">
             AND IFNULL(A.CONTROL_STATUS,'ORDTEMP') = #{CONTROL_STATUS}
        </if>
        <if test="HIDE_OUT_FINISH != null and HIDE_OUT_FINISH != ''">
            AND A.OUT_FINISH_DT IS NULL
            AND IFNULL(A.OUT_FINISH_STATUS,'RLS') != 'RLS010'
        </if>
        ORDER BY A.CONTROL_NUM, B.PART_NUM, C.ORDER_SEQ
    </select>

    <select id="selectControlCloseVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT MAX(CLOSE_VER) AS MAX_CLOSE_VER
        FROM TBL_MONTH_CLOSE
        WHERE
            COMP_CD = #{COMP_CD}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
    </select>

    <select id="selectControlCloseLeftList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감 월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감 월 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER <!-- 차수 -->
            , COUNT(*) AS CNT <!-- 품수 -->
            , SUM(X.ORDER_QTY) AS ORDER_QTY <!-- 수량 -->
            , FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT <!-- 공급가 -->
            , FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (  SELECT A.COMP_CD
                    , A.ORDER_COMP_CD
                    , E.CLOSE_MONTH
                    , E.CLOSE_VER
                    , C.ORDER_QTY
                    , C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT
                    , E.FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD AND E.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
                WHERE A.DEL_YN = 'N'
                    AND A.COMP_CD = #{COMP_CD}
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD} ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_VER
    </select>
    <select id="selectControlCloseLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감 월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감 월 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER <!-- 차수 -->
            , COUNT(*) AS CNT <!-- 품수 -->
            , SUM(X.ORDER_QTY) AS ORDER_QTY <!-- 수량 -->
            , FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT <!-- 공급가 -->
            , FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT A.COMP_CD
                , A.ORDER_COMP_CD
                , B.CLOSE_MONTH
                , B.CLOSE_VER
                , A.ORDER_QTY
                , A.UNIT_FINAL_AMT * A.ORDER_QTY AS TOTAL_AMT
                , C.FINAL_NEGO_AMT
            FROM TBL_ORDER A
                INNER JOIN TBL_MONTH_CLOSE_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND A.COMP_CD = B.COMP_CD AND A.ORDER_COMP_CD = B.ORDER_COMP_CD
                INNER JOIN TBL_MONTH_CLOSE C ON B.CLOSE_MONTH = C.CLOSE_MONTH AND B.CLOSE_VER = C.CLOSE_VER AND B.COMP_CD = C.COMP_CD AND B.ORDER_COMP_CD = C.ORDER_COMP_CD AND C.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
            WHERE A.DEL_YN = 'N'
                AND A.COMP_CD = #{COMP_CD}
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_VER
    </select>

    <select id="selectControlCloseRightList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감월 -->
            , SUM(X.CNT) AS CNT <!-- 품수 -->
            , X.CLOSE_VER <!-- 차수 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN <!-- 차수 -->
            , CASE WHEN SUM(X.ORDER_QTY) > 0 THEN FORMAT(SUM(X.ORDER_QTY), 0) ELSE '-' END AS ORDER_QTY <!-- 수량 -->
            , CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT <!-- 공급가 -->
            , CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN FORMAT(SUM(X.FINAL_NEGO_AMT), 0) ELSE '-' END AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT
				P.COMP_CD
				, P.ORDER_COMP_CD
				, P.CLOSE_MONTH
				, COUNT(*) AS CNT
				, P.CLOSE_VER
				, SUM(P.ORDER_QTY) AS ORDER_QTY
				, SUM(P.TOTAL_AMT) AS TOTAL_AMT
				, P.FINAL_NEGO_AMT
            FROM (
				SELECT
					A.COMP_CD
					, A.ORDER_COMP_CD
					, E.CLOSE_MONTH
					, E.CLOSE_VER
					, C.ORDER_QTY
					, C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT
					, E.FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD AND E.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
                WHERE A.DEL_YN = 'N'
                	AND A.COMP_CD = #{COMP_CD}
                	AND A.ORDER_COMP_CD = #{ORDER_COMP_CD} ) P
            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
            UNION ALL
			SELECT
				Q.COMP_CD
				, Q.ORDER_COMP_CD
				, Q.CLOSE_MONTH
				, COUNT(*) AS CNT
				, Q.CLOSE_VER
				, SUM(Q.ORDER_QTY) AS ORDER_QTY
				, SUM(Q.TOTAL_AMT) AS TOTAL_AMT
				, SUM(Q.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT
					A.COMP_CD
					, A.ORDER_COMP_CD
					, CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH}) AS CLOSE_MONTH
					, #{CLOSE_VER} AS CLOSE_VER
					, C.ORDER_QTY
					, C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT
	                , C.UNIT_FINAL_AMT * C.ORDER_QTY AS FINAL_NEGO_AMT
                FROM TBL_CONTROL A
	                INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
	                INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ IN (${ORDER_SEQ})
                WHERE
                	A.DEL_YN = 'N'
                	AND A.COMP_CD = #{COMP_CD}
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                    AND NOT EXISTS (SELECT *
                                    FROM TBL_MONTH_CLOSE_ORDER M
                                    WHERE 1 = 1
                                        AND M.COMP_CD = A.COMP_CD
                                        AND M.ORDER_COMP_CD = A.ORDER_COMP_CD
                                        AND M.CONTROL_SEQ = C.CONTROL_SEQ
                                        AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                        AND M.ORDER_SEQ = C.ORDER_SEQ
                                        AND M.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH}))) Q
            GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>
    <select id="selectControlCloseRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감월 -->
            , SUM(X.CNT) AS CNT <!-- 품수 -->
            , X.CLOSE_VER <!-- 차수 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN <!-- 차수 -->
            , CASE WHEN SUM(X.ORDER_QTY) > 0 THEN FORMAT(SUM(X.ORDER_QTY), 0) ELSE '-' END AS ORDER_QTY <!-- 수량 -->
            , CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT <!-- 공급가 -->
            , CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN CAST(SUM(X.FINAL_NEGO_AMT) AS INTEGER) ELSE '-' END AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT
                P.COMP_CD
                , P.ORDER_COMP_CD
                , P.CLOSE_MONTH
                , COUNT(*) AS CNT
                , P.CLOSE_VER
                , SUM(P.ORDER_QTY) AS ORDER_QTY
                , SUM(P.TOTAL_AMT) AS TOTAL_AMT
                , P.FINAL_NEGO_AMT
            FROM (
                SELECT
                    A.COMP_CD
                    , A.ORDER_COMP_CD
                    , B.CLOSE_MONTH
                    , B.CLOSE_VER
                    , A.ORDER_QTY
                    , A.UNIT_FINAL_AMT * A.ORDER_QTY AS TOTAL_AMT
                    , C.FINAL_NEGO_AMT
                FROM TBL_ORDER A
                    INNER JOIN TBL_MONTH_CLOSE_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND A.COMP_CD = B.COMP_CD AND A.ORDER_COMP_CD = B.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE C ON B.CLOSE_MONTH = C.CLOSE_MONTH AND B.CLOSE_VER = C.CLOSE_VER AND B.COMP_CD = C.COMP_CD AND B.ORDER_COMP_CD = C.ORDER_COMP_CD AND C.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
                WHERE A.DEL_YN = 'N'
                    AND A.COMP_CD = #{COMP_CD}
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            ) P
            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
            UNION ALL
            SELECT
                Q.COMP_CD
                , Q.ORDER_COMP_CD
                , Q.CLOSE_MONTH
                , COUNT(*) AS CNT
                , Q.CLOSE_VER
                , SUM(Q.ORDER_QTY) AS ORDER_QTY
                , SUM(Q.TOTAL_AMT) AS TOTAL_AMT
                , SUM(Q.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT
                    A.COMP_CD
                    , A.ORDER_COMP_CD
                    , CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH}) AS CLOSE_MONTH
                    , #{CLOSE_VER} AS CLOSE_VER
                    , A.ORDER_QTY
                    , A.UNIT_FINAL_AMT * A.ORDER_QTY AS TOTAL_AMT
                    , A.UNIT_FINAL_AMT * A.ORDER_QTY AS FINAL_NEGO_AMT
                FROM TBL_ORDER A
                WHERE A.DEL_YN = 'N'
                    AND A.ORDER_SEQ IN (${ORDER_SEQ})
                    AND A.COMP_CD = #{COMP_CD}
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                    AND NOT EXISTS (SELECT 1
                        FROM TBL_MONTH_CLOSE_ORDER M
                        WHERE 1 = 1
                            AND M.COMP_CD = A.COMP_CD
                            AND M.ORDER_COMP_CD = A.ORDER_COMP_CD
                            AND M.ORDER_SEQ = A.ORDER_SEQ
                            AND M.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
                    )
            ) Q
            GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER
        ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectControlCloseCancelLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감 월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감 월 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER <!-- 차수 -->
            , COUNT(*) AS CNT <!-- 품수 -->
            , SUM(X.ORDER_QTY) AS ORDER_QTY <!-- 수량 -->
            , FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT <!-- 공급가 -->
            , FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT A.COMP_CD
                , A.ORDER_COMP_CD
                , C.CLOSE_MONTH
                , C.CLOSE_VER
                , A.ORDER_QTY
                , A.UNIT_FINAL_AMT  * A.ORDER_QTY AS TOTAL_AMT
                , C.FINAL_NEGO_AMT
            FROM TBL_ORDER A
                INNER JOIN TBL_MONTH_CLOSE_ORDER B ON B.ORDER_SEQ = A.ORDER_SEQ
                INNER JOIN TBL_MONTH_CLOSE C ON B.CLOSE_MONTH = C.CLOSE_MONTH AND B.CLOSE_VER = C.CLOSE_VER AND B.COMP_CD = C.COMP_CD AND B.ORDER_COMP_CD = C.ORDER_COMP_CD
            WHERE A.DEL_YN = 'N'
                AND (A.COMP_CD, A.ORDER_COMP_CD, C.CLOSE_MONTH, C.CLOSE_VER) IN (
                    SELECT M.COMP_CD, M.ORDER_COMP_CD, M.CLOSE_MONTH, M.CLOSE_VER
                    FROM TBL_MONTH_CLOSE_ORDER M
                    WHERE M.ORDER_SEQ IN (${ORDER_SEQ})
                )
        ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER

    </select>
    <select id="selectControlCloseCancelLeftList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감 월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감 월 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER <!-- 차수 -->
            , COUNT(*) AS CNT <!-- 품수 -->
            , SUM(X.ORDER_QTY) AS ORDER_QTY <!-- 수량 -->
            , FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT <!-- 공급가 -->
            , FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (  SELECT A.COMP_CD
                    , A.ORDER_COMP_CD
                    , E.CLOSE_MONTH
                    , E.CLOSE_VER
                    , C.ORDER_QTY
                    , C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT
                    , E.FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
                WHERE A.DEL_YN = 'N'
                AND (A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, D.CLOSE_VER) IN (SELECT M.COMP_CD, M.ORDER_COMP_CD, M.CLOSE_MONTH, M.CLOSE_VER FROM TBL_MONTH_CLOSE_ORDER M WHERE M.ORDER_SEQ IN (${ORDER_SEQ}))
            ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectControlCloseCancelRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감월 -->
            , SUM(X.CNT) AS CNT <!-- 품수 -->
            , X.CLOSE_VER <!-- 차수 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN <!-- 차수 -->
            , CASE WHEN SUM(X.ORDER_QTY) > 0 THEN FORMAT(SUM(X.ORDER_QTY), 0) ELSE '-' END AS ORDER_QTY <!-- 수량 -->
            , CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT <!-- 공급가 -->
            , CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN FORMAT(SUM(X.FINAL_NEGO_AMT), 0) ELSE '-' END AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT
                P.COMP_CD
                , P.ORDER_COMP_CD
                , P.CLOSE_MONTH
                , COUNT(*) AS CNT
                , P.CLOSE_VER
                , SUM(P.ORDER_QTY) AS ORDER_QTY
                , SUM(P.TOTAL_AMT) AS TOTAL_AMT
                , P.FINAL_NEGO_AMT
            FROM (
                SELECT A.COMP_CD
                    , A.ORDER_COMP_CD
                    , C.CLOSE_MONTH
                    , C.CLOSE_VER
                    , A.ORDER_QTY
                    , A.UNIT_FINAL_AMT  * A.ORDER_QTY AS TOTAL_AMT
                    , C.FINAL_NEGO_AMT
                FROM TBL_ORDER A
                    INNER JOIN TBL_MONTH_CLOSE_ORDER B ON B.ORDER_SEQ = A.ORDER_SEQ
                    INNER JOIN TBL_MONTH_CLOSE C ON B.CLOSE_MONTH = C.CLOSE_MONTH AND B.CLOSE_VER = C.CLOSE_VER AND B.COMP_CD = C.COMP_CD AND B.ORDER_COMP_CD = C.ORDER_COMP_CD
                WHERE A.DEL_YN = 'N'
                    AND (A.COMP_CD, A.ORDER_COMP_CD, C.CLOSE_MONTH, C.CLOSE_VER) IN (
                        SELECT M.COMP_CD, M.ORDER_COMP_CD, M.CLOSE_MONTH, M.CLOSE_VER
                        FROM TBL_MONTH_CLOSE_ORDER M
                        WHERE M.ORDER_SEQ IN (${ORDER_SEQ})
                    )
            ) P
            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
            UNION ALL
            SELECT Q.COMP_CD
                , Q.ORDER_COMP_CD
                , Q.CLOSE_MONTH
                , COUNT(*) * -1 AS CNT
                , Q.CLOSE_VER
                , SUM(Q.ORDER_QTY) AS ORDER_QTY
                , SUM(Q.TOTAL_AMT) AS TOTAL_AMT
                , Q.FINAL_NEGO_AMT
            FROM (
                SELECT A.COMP_CD
                    , A.ORDER_COMP_CD
                    , C.CLOSE_MONTH
                    , C.CLOSE_VER
                    , A.ORDER_QTY * -1 AS ORDER_QTY
                    , A.UNIT_FINAL_AMT  * A.ORDER_QTY * -1 AS TOTAL_AMT
                    , A.UNIT_FINAL_AMT  * A.ORDER_QTY * -1 AS FINAL_NEGO_AMT
                FROM TBL_ORDER A
                    INNER JOIN TBL_MONTH_CLOSE_ORDER B ON B.ORDER_SEQ = A.ORDER_SEQ AND B.ORDER_SEQ IN (${ORDER_SEQ})
                    INNER JOIN TBL_MONTH_CLOSE C ON B.CLOSE_MONTH = C.CLOSE_MONTH AND B.CLOSE_VER = C.CLOSE_VER AND B.COMP_CD = C.COMP_CD AND B.ORDER_COMP_CD = C.ORDER_COMP_CD
                WHERE A.DEL_YN = 'N'
            ) Q
            GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER
        ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>
    <select id="selectControlCloseCancelRightList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD <!-- 사업자 -->
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM <!-- 사업자 -->
            , X.ORDER_COMP_CD <!-- 발주처 -->
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , X.CLOSE_MONTH <!-- 마감월 -->
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN <!-- 마감월 -->
            , SUM(X.CNT) AS CNT <!-- 품수 -->
            , X.CLOSE_VER <!-- 차수 -->
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN <!-- 차수 -->
            , CASE WHEN SUM(X.ORDER_QTY) > 0 THEN FORMAT(SUM(X.ORDER_QTY), 0) ELSE '-' END AS ORDER_QTY <!-- 수량 -->
            , CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT <!-- 공급가 -->
            , CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN FORMAT(SUM(X.FINAL_NEGO_AMT), 0) ELSE '-' END AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (  SELECT
                    P.COMP_CD
                    , P.ORDER_COMP_CD
                    , P.CLOSE_MONTH
                    , COUNT(*) AS CNT
                    , P.CLOSE_VER
                    , SUM(P.ORDER_QTY) AS ORDER_QTY
                    , SUM(P.TOTAL_AMT) AS TOTAL_AMT
                    , P.FINAL_NEGO_AMT
                FROM (  SELECT A.COMP_CD
                            , A.ORDER_COMP_CD
                            , E.CLOSE_MONTH
                            , E.CLOSE_VER
                            , C.ORDER_QTY
                            , C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT
                            , E.FINAL_NEGO_AMT
                        FROM TBL_CONTROL A
                            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                            INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                            INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                            INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
                        WHERE A.DEL_YN = 'N'
                            AND (D.COMP_CD, D.CLOSE_MONTH, D.ORDER_COMP_CD, D.CLOSE_VER) IN (   SELECT M.COMP_CD, M.CLOSE_MONTH, M.ORDER_COMP_CD, M.CLOSE_VER
                                                                                                FROM TBL_MONTH_CLOSE_ORDER M
                                                                                                WHERE M.ORDER_SEQ IN (${ORDER_SEQ}))) P
	            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
	            UNION ALL
	            SELECT Q.COMP_CD
					, Q.ORDER_COMP_CD
					, Q.CLOSE_MONTH
					, COUNT(*) * -1 AS CNT
					, Q.CLOSE_VER
					, SUM(Q.ORDER_QTY) AS ORDER_QTY
					, SUM(Q.TOTAL_AMT) AS TOTAL_AMT
					, Q.FINAL_NEGO_AMT
	            FROM (  SELECT A.COMP_CD
                            , A.ORDER_COMP_CD
                            , E.CLOSE_MONTH
                            , E.CLOSE_VER
                            , C.ORDER_QTY * -1 AS ORDER_QTY
                            , C.UNIT_FINAL_AMT * C.ORDER_QTY * -1 AS TOTAL_AMT
                            , C.UNIT_FINAL_AMT * C.ORDER_QTY * -1 AS FINAL_NEGO_AMT
                        FROM TBL_CONTROL A
                            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                            INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                            INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                                AND D.ORDER_SEQ IN (${ORDER_SEQ})
                            INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
                        WHERE A.DEL_YN = 'N' ) Q
	            GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <insert id="createMonthClose" parameterType="java.util.HashMap" >
        INSERT INTO TBL_MONTH_CLOSE (
            COMP_CD
            , CLOSE_MONTH
            , ORDER_COMP_CD
            , CLOSE_VER
            , FINAL_NEGO_AMT
            , CLOSE_DT
            , CLOSE_NOTE
            , CLOSE_CONTROL_AMT
            , CLOSE_CONTROL_CNT
            , INSERT_ID
        ) VALUES (
            #{COMP_CD}
            , #{CLOSE_MONTH}
            , #{ORDER_COMP_CD}
            , #{CLOSE_VER}
            , #{FINAL_NEGO_AMT}
            , NOW()
            , #{CLOSE_NOTE}
            , #{CLOSE_CONTROL_AMT}
            , #{CLOSE_CONTROL_CNT}
            , #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
	        UPDATE
	            FINAL_NEGO_AMT = #{FINAL_NEGO_AMT}
                , CLOSE_DT = NOW()
                , CLOSE_NOTE = #{CLOSE_NOTE}
                , CLOSE_CONTROL_AMT = #{CLOSE_CONTROL_AMT}
                , CLOSE_CONTROL_CNT = #{CLOSE_CONTROL_CNT}
                , UPDATE_DT = NOW()
                , UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <insert id="createMonthCloseOrder" parameterType="java.util.HashMap" >
        INSERT INTO TBL_MONTH_CLOSE_ORDER (
            COMP_CD
            , CLOSE_MONTH
            , ORDER_COMP_CD
            , CLOSE_VER
            , CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , ORDER_SEQ
            , CLOSE_DETAIL_NOTE
            , INSERT_ID
        ) VALUES(
            #{COMP_CD}
            , #{CLOSE_MONTH}
            , #{ORDER_COMP_CD}
            , #{CLOSE_VER}
            , #{CONTROL_SEQ}
            , #{CONTROL_DETAIL_SEQ}
            , #{ORDER_SEQ}
            , #{CLOSE_DETAIL_NOTE}
            , #{LOGIN_USER_ID}
        )
    </insert>

    <update id="updateMonthCloseFinalNego" parameterType="java.util.HashMap">
        UPDATE TBL_MONTH_CLOSE
        SET
            FINAL_NEGO_AMT = REPLACE(REPLACE(#{FINAL_NEGO_AMT}, ',', SPACE(0)), '-', 0),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            COMP_CD = #{COMP_CD}
            AND CLOSE_MONTH = #{CLOSE_MONTH}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_VER = #{CLOSE_VER}
    </update>

    <delete id="deleteMonthCloseOrder" parameterType="java.util.HashMap">
        DELETE FROM TBL_MONTH_CLOSE_ORDER
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </delete>

    <insert id="createControlPart" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            PART_NUM,
            DRAWING_NUM,
            DRAWING_VER,
            DRAWING_UP_DT,
            PREV_DRAWING_NUM,
            WORK_TYPE,
            OUTSIDE_YN,
            WORK_FACTORY,
            MATERIAL_SUPPLY_YN,
            INNER_DUE_DT,
            SIZE_TXT,
            SIZE_TYPE,
            SIZE_W,
            SIZE_H,
            SIZE_T,
            SIZE_D,
            SIZE_L,
            SIZE_W_M,
            SIZE_H_M,
            SIZE_T_M,
            SIZE_D_M,
            SIZE_L_M,
            MATERIAL_TYPE,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            SURFACE_TREAT,
            MATERIAL_NOTE,
            PART_UNIT_QTY,
            MATERIAL_FINISH_GRIND,
            MATERIAL_FINISH_HEAT,
            UNIT_MATERIAL_AMT,
            UNIT_MATERIAL_FINISH_GRIND_AMT,
            UNIT_MATERIAL_FINISH_HEAT_AMT,
            UNIT_SURFACE_AMT,
            UNIT_PROCESS_AMT,
            UNIT_ETC_AMT,
            UNIT_AMT_NOTE,
            DWG_GFILE_SEQ,
            DXF_GFILE_SEQ,
            PDF_GFILE_SEQ,
            IMG_GFILE_SEQ,
            PART_STATUS,
            STATUS_DT,
            MCT_NOTE,
            MCT_WORK_TYPE,
            OUTSIDE_COMP_CD,
            OUTSIDE_ORDER_NUM,
            OUTSIDE_NOTE,
            OUTSIDE_MATERIAL_SUPPLY_YN,
            OUTSIDE_REQUEST_FINISH_YN,
            OUTSIDE_REQUEST_PROCESS_YN,
            OUTSIDE_REQUEST_GRIND_YN,
            OUTSIDE_REQUEST_SURFACE_YN,
            OUTSIDE_REQUEST_ETC,
            OUTSIDE_HOPE_DUE_DT,
            OUTSIDE_UNIT_AMT,
            OUTSIDE_IN_DT,
            OUTSIDE_STATUS,
            OUTSIDE_STATUS_DT,
            INSERT_ID
        )
        SELECT
            #{CONTROL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART),
            #{PART_NUM},
            #{ORDER_DRAWING_NUM},
            #{DRAWING_VER},
            #{DRAWING_UP_DT},
            #{PREV_DRAWING_NUM},
            #{WORK_TYPE},
            #{OUTSIDE_YN},
            #{WORK_FACTORY},
            #{MATERIAL_SUPPLY_YN},
            DATE_FORMAT(#{INNER_DUE_DT}, '%Y%m%d'),
            #{SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            #{SIZE_W_M},
            #{SIZE_H_M},
            #{SIZE_T_M},
            #{SIZE_D_M},
            #{SIZE_L_M},
            SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}), <!-- MATERIAL_TYPE -->
            #{MATERIAL_DETAIL},
            #{MATERIAL_KIND},
            #{SURFACE_TREAT},
            #{MATERIAL_NOTE},
            #{PART_UNIT_QTY},
            #{MATERIAL_FINISH_GRIND},
            #{MATERIAL_FINISH_HEAT},
            REPLACE(#{UNIT_MATERIAL_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_MATERIAL_FINISH_GRIND_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_MATERIAL_FINISH_HEAT_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_SURFACE_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_PROCESS_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_ETC_AMT}, ',', SPACE(0)),
            #{UNIT_AMT_NOTE},
            #{DWG_GFILE_SEQ},
            #{DXF_GFILE_SEQ},
            #{PDF_GFILE_SEQ},
            #{IMG_GFILE_SEQ},
            #{PART_STATUS},
            NOW(),
            #{MCT_NOTE},
            #{MCT_WORK_TYPE},
            #{OUTSIDE_COMP_CD},
            #{OUTSIDE_ORDER_NUM},
            #{OUTSIDE_NOTE},
            IFNULL(#{OUTSIDE_MATERIAL_SUPPLY_YN}, 'N'),
            IFNULL(#{OUTSIDE_REQUEST_FINISH_YN}, 'N'),
            IFNULL(#{OUTSIDE_REQUEST_PROCESS_YN}, 'N'),
            IFNULL(#{OUTSIDE_REQUEST_GRIND_YN}, 'N'),
            IFNULL(#{OUTSIDE_REQUEST_SURFACE_YN}, 'N'),
            #{OUTSIDE_REQUEST_ETC},
            CASE WHEN #{OUTSIDE_YN} = 'Y' THEN DATE_FORMAT(DATE_SUB(#{INNER_DUE_DT}, INTERVAL 1 DAY), '%Y%m%d') END, <!-- #{OUTSIDE_HOPE_DUE_DT} -->
            #{OUTSIDE_UNIT_AMT},
            #{OUTSIDE_IN_DT},
            #{OUTSIDE_STATUS},
            #{OUTSIDE_STATUS_DT},
            #{LOGIN_USER_ID}
        FROM DUAL
        WHERE 1 = 1
            AND NOT EXISTS (SELECT *
                            FROM TBL_CONTROL_PART Z
                            WHERE 1 = 1
                                AND Z.CONTROL_SEQ = #{CONTROL_SEQ}
                                AND Z.WORK_TYPE = #{WORK_TYPE}
                                <choose>
                                    <when test="PART_NUM != null and PART_NUM != ''">
                                        AND Z.PART_NUM = #{PART_NUM})
                                    </when>
                                    <otherwise>
                                        AND Z.PART_NUM IS NULL)
                                    </otherwise>
                                </choose>
    </insert>

    <insert id="createControlPartOrder" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_ORDER (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            ORDER_SEQ,
            REGIST_NUM,
            ORDER_NUM,
            ORDER_QTY,
            ORDER_DUE_DT,
            DELIVERY_DT,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            DRAWING_NUM,
            DWG_GFILE_SEQ,
            DXF_GFILE_SEQ,
            PDF_GFILE_SEQ,
            IMG_GFILE_SEQ,
            VIEW_GFILE_SEQ,
            ITEM_NM,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            ORDER_BARCODE_NUM,
            INSERT_ID
        )
        SELECT
            #{CONTROL_SEQ},
            IFNULL(#{CONTROL_DETAIL_SEQ}, ( SELECT M.CONTROL_DETAIL_SEQ
                                            FROM TBL_CONTROL_PART M
                                            WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                AND M.PART_NUM = #{PART_NUM})),
            NEXTVAL(SEQ_CONTROL_PART_ORDER),
            UPPER(TRIM(#{REGIST_NUM})),
            #{ORDER_NUM},
            #{ORDER_QTY},
            DATE_FORMAT(#{ORDER_DUE_DT}, '%Y%m%d'),
            DATE_FORMAT(#{DELIVERY_DT}, '%Y%m%d'),
            #{PROJECT_NM},
            #{MODULE_NM},
            #{DELIVERY_COMP_NM},
            #{LABEL_NOTE},
            #{ORDER_STAFF_SEQ},
            #{DESIGNER_NM},
            #{ORDER_DRAWING_NUM},
            #{DWG_GFILE_SEQ},
            #{DXF_GFILE_SEQ},
            #{PDF_GFILE_SEQ},
            #{IMG_GFILE_SEQ},
            #{VIEW_GFILE_SEQ},
            #{ITEM_NM},
            REPLACE(#{ORIGINAL_SIDE_QTY}, ',', SPACE(0)),
            REPLACE(#{OTHER_SIDE_QTY}, ',', SPACE(0)),
            REPLACE(#{UNIT_FINAL_EST_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_FINAL_AMT}, ',', SPACE(0)),
            CONCAT('O',LPAD(NEXTVAL(SEQ_ORDER_BARCODE),9,'0')),
            #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (  SELECT *
                            FROM TBL_CONTROL_PART_ORDER M
                            WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
                                AND M.ORDER_NUM = #{ORDER_NUM}
                            <if test="ORDER_DRAWING_NUM != null and ORDER_DRAWING_NUM != ''" >
                                AND M.DRAWING_NUM = #{ORDER_DRAWING_NUM}
                            </if>
                         )
    </insert>

    <insert id="createControlProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PROGRESS (
            CONTROL_SEQ,
            SEQ,
            ORDER_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ},
            NEXTVAL(SEQ_CONTROL_PROGRESS),
            #{CONTROL_STATUS},
            NOW(),
            #{LOGIN_USER_ID}
        )
    </insert>
    <insert id="createOrderProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_ORDER_PROGRESS(
            ORDER_SEQ,
            SEQ,
            ORDER_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{ORDER_SEQ},
            NEXTVAL(SEQ_ORDER_PROGRESS),
            #{ORDER_STATUS},
            NOW(),
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="createControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            #{PART_STATUS},
            NOW(),
            #{LOGIN_USER_ID}
        )
    </insert>

    <update id="removeControl" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_NUM = CONCAT('DEL_', #{CONTROL_NUM}),
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPart" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
        <if test="PART_NUM != null and PART_NUM != ''">
            PART_NUM = #{PART_NUM},
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
            DRAWING_NUM = #{DRAWING_NUM},
        </if>
        <if test="DRAWING_VER != null and DRAWING_VER != ''">
            DRAWING_VER = #{DRAWING_VER},
        </if>
        <if test="PREV_DRAWING_NUM != null and PREV_DRAWING_NUM != ''">
            PREV_DRAWING_NUM = #{PREV_DRAWING_NUM},
        </if>
        <if test="WORK_TYPE != null and WORK_TYPE != ''">
            WORK_TYPE = #{WORK_TYPE},
        </if>
        <if test="OUTSIDE_YN != null and OUTSIDE_YN != ''">
            OUTSIDE_YN = #{OUTSIDE_YN},
        </if>
        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
            WORK_FACTORY = CASE WHEN #{WORK_FACTORY} = 'null' THEN NULL ELSE #{WORK_FACTORY} END,
        </if>
        <if test="MATERIAL_SUPPLY_YN != null and MATERIAL_SUPPLY_YN != ''">
            MATERIAL_SUPPLY_YN = #{MATERIAL_SUPPLY_YN},
        </if>
        <if test="INNER_DUE_DT != null and INNER_DUE_DT != ''">
            INNER_DUE_DT = DATE_FORMAT(REPLACE(#{INNER_DUE_DT}, '/', SPACE(0)), '%Y%m%d'),
        </if>
        <if test="SIZE_TXT != null and SIZE_TXT != ''">
            SIZE_TXT = #{SIZE_TXT},
            SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
        </if>
        <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
            MATERIAL_KIND = #{MATERIAL_KIND},
        </if>
        <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
            MATERIAL_DETAIL = #{MATERIAL_DETAIL},
            MATERIAL_TYPE = SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}),
        </if>
        <if test="SURFACE_TREAT != null and SURFACE_TREAT != ''">
            SURFACE_TREAT = #{SURFACE_TREAT},
        </if>
        <if test="MATERIAL_NOTE != null and MATERIAL_NOTE != ''">
            MATERIAL_NOTE = #{MATERIAL_NOTE},
        </if>
        <if test="MATERIAL_FINISH_HEAT != null and MATERIAL_FINISH_HEAT != ''">
            MATERIAL_FINISH_HEAT = #{MATERIAL_FINISH_HEAT},
        </if>
        <if test="PART_UNIT_QTY != null and PART_UNIT_QTY != ''">
            PART_UNIT_QTY = #{PART_UNIT_QTY},
        </if>
        <if test="ADDITIONAL_QTY != null and ADDITIONAL_QTY != ''">
            ADDITIONAL_QTY = #{ADDITIONAL_QTY},
        </if>
        <if test="UNIT_MATERIAL_AMT != null and UNIT_MATERIAL_AMT != ''">
            UNIT_MATERIAL_AMT = REPLACE(#{UNIT_MATERIAL_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_MATERIAL_FINISH_GRIND_AMT != null and UNIT_MATERIAL_FINISH_GRIND_AMT != ''">
            UNIT_MATERIAL_FINISH_GRIND_AMT = REPLACE(#{UNIT_MATERIAL_FINISH_GRIND_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_MATERIAL_FINISH_HEAT_AMT != null and UNIT_MATERIAL_FINISH_HEAT_AMT != ''">
            UNIT_MATERIAL_FINISH_HEAT_AMT = REPLACE(#{UNIT_MATERIAL_FINISH_HEAT_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_SURFACE_AMT != null and UNIT_SURFACE_AMT != ''">
            UNIT_SURFACE_AMT = REPLACE(#{UNIT_SURFACE_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_PROCESS_AMT != null and UNIT_PROCESS_AMT != ''">
            UNIT_PROCESS_AMT = REPLACE(#{UNIT_PROCESS_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_ETC_AMT != null and UNIT_ETC_AMT != ''">
            UNIT_ETC_AMT = REPLACE(#{UNIT_ETC_AMT}, ',', SPACE(0)),
        </if>
        <if test="UNIT_AMT_NOTE != null and UNIT_AMT_NOTE != ''">
            UNIT_AMT_NOTE = #{UNIT_AMT_NOTE},
        </if>
        <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
            ETC_GFILE_SEQ = #{ETC_GFILE_SEQ},
        </if>
        <if test="PART_STATUS != null and PART_STATUS != ''">
            PART_STATUS = CASE WHEN #{PART_STATUS} = 'null' THEN NULL ELSE #{PART_STATUS} END,
            STATUS_DT = NOW(),
        </if>
        <if test="MCT_NOTE != null and MCT_NOTE != ''">
            MCT_NOTE = #{MCT_NOTE},
        </if>
        <if test="MCT_WORK_TYPE != null and MCT_WORK_TYPE != ''">
            MCT_WORK_TYPE = #{MCT_WORK_TYPE},
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD},
        </if>
        <if test="OUTSIDE_ORDER_NUM != null and OUTSIDE_ORDER_NUM != ''">
            OUTSIDE_ORDER_NUM = #{OUTSIDE_ORDER_NUM},
        </if>
        <if test="OUTSIDE_NOTE != null and OUTSIDE_NOTE != ''">
            OUTSIDE_NOTE = #{OUTSIDE_NOTE},
        </if>
        <if test="OUTSIDE_MATERIAL_SUPPLY_YN != null and OUTSIDE_MATERIAL_SUPPLY_YN != ''">
            OUTSIDE_MATERIAL_SUPPLY_YN = #{OUTSIDE_MATERIAL_SUPPLY_YN},
        </if>
        <if test="OUTSIDE_REQUEST_FINISH_YN != null and OUTSIDE_REQUEST_FINISH_YN != ''">
            OUTSIDE_REQUEST_FINISH_YN = #{OUTSIDE_REQUEST_FINISH_YN},
        </if>
        <if test="OUTSIDE_REQUEST_PROCESS_YN != null and OUTSIDE_REQUEST_PROCESS_YN != ''">
            OUTSIDE_REQUEST_PROCESS_YN = #{OUTSIDE_REQUEST_PROCESS_YN},
        </if>
        <if test="OUTSIDE_REQUEST_GRIND_YN != null and OUTSIDE_REQUEST_GRIND_YN != ''">
            OUTSIDE_REQUEST_GRIND_YN = #{OUTSIDE_REQUEST_GRIND_YN},
        </if>
        <if test="OUTSIDE_REQUEST_SURFACE_YN != null and OUTSIDE_REQUEST_SURFACE_YN != ''">
            OUTSIDE_REQUEST_SURFACE_YN = #{OUTSIDE_REQUEST_SURFACE_YN},
        </if>
        <if test="OUTSIDE_REQUEST_ETC != null and OUTSIDE_REQUEST_ETC != ''">
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC},
        </if>
        <if test="OUTSIDE_HOPE_DUE_DT != null and OUTSIDE_HOPE_DUE_DT != ''">
            OUTSIDE_HOPE_DUE_DT = DATE_FORMAT(REPLACE(#{OUTSIDE_HOPE_DUE_DT}, '/', SPACE(0)), '%Y%m%d'),
        </if>
        <if test="OUTSIDE_UNIT_AMT != null and OUTSIDE_UNIT_AMT != ''">
            OUTSIDE_UNIT_AMT = #{OUTSIDE_UNIT_AMT},
        </if>
        <choose>
            <when test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
                OUTSIDE_STATUS = #{OUTSIDE_STATUS},
                OUTSIDE_STATUS_DT = NOW(),
            </when>
            <when test="OUTSIDE_STATUS == null">
                OUTSIDE_STATUS = #{OUTSIDE_STATUS},
                OUTSIDE_STATUS_DT = NULL,
            </when>
        </choose>
<!--        <if test="OUTSIDE_IN_DT != null and OUTSIDE_IN_DT != ''">-->
<!--            OUTSIDE_IN_DT = #{OUTSIDE_IN_DT},-->
<!--        </if>-->
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        <choose>
            <when test="CONTROL_DETAIL_SEQ != null and CONTROL_DETAIL_SEQ != ''">
                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </when>
            <otherwise>
                AND CONTROL_DETAIL_SEQ = (  SELECT A.CONTROL_DETAIL_SEQ
                                            FROM TBL_CONTROL_PART A
                                            WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                                            AND A.PART_NUM = #{PART_NUM})
            </otherwise>
        </choose>
    </update>

    <update id="updateControlPartOrderFromControlManage" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET
            <if test="REGIST_NUM != null">
                REGIST_NUM = UPPER(TRIM(#{REGIST_NUM})),
            </if>
            <if test="ORDER_NUM != null">
                ORDER_NUM = #{ORDER_NUM},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (ORDER_QTY != null and ORDER_QTY != '')">
                ORDER_QTY = #{ORDER_QTY},
            </if>
            <if test="ORDER_DUE_DT != null and ORDER_DUE_DT != ''">
                ORDER_DUE_DT = DATE_FORMAT(#{ORDER_DUE_DT}, '%Y%m%d'),
            </if>
            <if test="DELIVERY_DT != null and DELIVERY_DT != ''">
                DELIVERY_DT = DATE_FORMAT(#{DELIVERY_DT}, '%Y%m%d'),
            </if>
            <if test="PROJECT_NM != null">
                PROJECT_NM = #{PROJECT_NM},
            </if>
            <if test="MODULE_NM != null">
                MODULE_NM = #{MODULE_NM},
            </if>
            <if test="DELIVERY_COMP_NM != null">
                DELIVERY_COMP_NM = #{DELIVERY_COMP_NM},
            </if>
            <if test="LABEL_NOTE != null">
                LABEL_NOTE = #{LABEL_NOTE},
            </if>
            <if test="ORDER_STAFF_SEQ != null and ORDER_STAFF_SEQ != ''">
                ORDER_STAFF_SEQ = #{ORDER_STAFF_SEQ},
            </if>
            <if test="DESIGNER_NM != null">
                DESIGNER_NM = #{DESIGNER_NM},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (ORDER_DRAWING_NUM != null and ORDER_DRAWING_NUM != '')">
                DRAWING_NUM = #{ORDER_DRAWING_NUM},
            </if>
            <if test="ITEM_NM != null">
                ITEM_NM = #{ITEM_NM},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002')">
                ORIGINAL_SIDE_QTY = REPLACE(#{ORIGINAL_SIDE_QTY}, ',', SPACE(0)),
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002')">
                OTHER_SIDE_QTY = REPLACE(#{OTHER_SIDE_QTY}, ',', SPACE(0)),
            </if>
            <if test="UNIT_FINAL_EST_AMT != null">
                UNIT_FINAL_EST_AMT = REPLACE(#{UNIT_FINAL_EST_AMT}, ',', SPACE(0)),
            </if>
            <if test="UNIT_FINAL_AMT != null">
                UNIT_FINAL_AMT = REPLACE(#{UNIT_FINAL_AMT}, ',', SPACE(0)),
            </if>
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
          AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateControlPartOrderFromControlManage_old" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET
            REGIST_NUM = UPPER(TRIM(#{REGIST_NUM})),
            ORDER_NUM = #{ORDER_NUM},
            ORDER_QTY = #{ORDER_QTY},
            ORDER_DUE_DT = DATE_FORMAT(#{ORDER_DUE_DT}, '%Y%m%d'),
            DELIVERY_DT = DATE_FORMAT(#{DELIVERY_DT}, '%Y%m%d'),
            PROJECT_NM = #{PROJECT_NM},
            MODULE_NM = #{MODULE_NM},
            DELIVERY_COMP_NM = #{DELIVERY_COMP_NM},
            LABEL_NOTE = #{LABEL_NOTE},
            ORDER_STAFF_SEQ = #{ORDER_STAFF_SEQ},
            DESIGNER_NM = #{DESIGNER_NM},
            DRAWING_NUM = #{ORDER_DRAWING_NUM},
            ITEM_NM = #{ITEM_NM},
            ORIGINAL_SIDE_QTY = REPLACE(#{ORIGINAL_SIDE_QTY}, ',', SPACE(0)),
            OTHER_SIDE_QTY = REPLACE(#{OTHER_SIDE_QTY}, ',', SPACE(0)),
            UNIT_FINAL_EST_AMT = REPLACE(#{UNIT_FINAL_EST_AMT}, ',', SPACE(0)),
            UNIT_FINAL_AMT = REPLACE(#{UNIT_FINAL_AMT}, ',', SPACE(0)),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
              AND ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <select id="selectConfirmOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT,
            IFNULL(C.REGIST_NUM,SPACE(0)) AS REGIST_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001', 'ORD005')
            AND A.OUT_FINISH_DT IS NULL
            AND IFNULL(B.OUTSIDE_YN, 'N') = 'N'
            AND (IFNULL(B.PART_STATUS, 'PRO003') = 'PRO003' OR A.CONTROL_STATUS IN ('ORD005'))
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
                AND B.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
            </if>
        ORDER BY A.STATUS_DT DESC, A.CONTROL_SEQ, B.PART_NUM
    </select>

    <!-- 유효 도면(바코드 스캔) -->
    <select id="selectIsBarcodeValid" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT NOT EXISTS ( SELECT *
                            FROM TBL_CONTROL_BARCODE
                            WHERE 1 = 1
                                AND BARCODE_NUM = #{BARCODE_NUM}
                                AND DEL_YN = 'N' ) AS FLAG
    </select>

    <!-- 주문상태가 대기 또는 취소가 아닌지 확인 -->
    <select id="selectHasControlStatusConfirm" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT NOT EXISTS ( SELECT *
                            FROM TBL_CONTROL
                            WHERE 1 = 1
                                AND CONTROL_SEQ = #{CONTROL_SEQ}
                                AND (CONTROL_STATUS IS NULL OR CONTROL_STATUS = 'ORD002')
                          ) AS FLAG
    </select>

    <!-- 주문상태 확정 확인(바코드 스캔) -->
    <select id="selectHasControlStatusConfirmFromBarcode" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT NOT EXISTS ( SELECT *
                            FROM TBL_CONTROL
                            WHERE 1 = 1
                                AND CONTROL_SEQ = ( SELECT CONTROL_SEQ
                                                    FROM TBL_CONTROL_BARCODE
                                                    WHERE 1 = 1
                                                        AND BARCODE_NUM = #{BARCODE_NUM}
                                                        AND DEL_YN = 'N'
                                                  )
                                AND CONTROL_STATUS = 'ORD001'
                          ) AS FLAG
    </select>

    <!-- 파트 가공 확정(바코드 스캔) -->
    <select id="selectHasPartStatusConfirm" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT PART_STATUS
                        FROM TBL_CONTROL_PART
                        WHERE 1 = 1
                            AND (CONTROL_SEQ, CONTROL_DETAIL_SEQ) IN (  SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                                        FROM TBL_CONTROL_BARCODE
                                                                        WHERE 1 = 1
                                                                            AND BARCODE_NUM = #{BARCODE_NUM}
                                                                            AND DEL_YN = 'N'
                                                                     )
                            AND PART_STATUS = 'PRO002'
                      ) AS FLAG
    </select>

    <!-- 이미 외주 전환(바코드 스캔) -->
    <select id="selectHasPartStatusConversion" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT PART_STATUS
                        FROM TBL_CONTROL_PART
                        WHERE 1 = 1
                            AND (CONTROL_SEQ, CONTROL_DETAIL_SEQ) IN (  SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                                        FROM TBL_CONTROL_BARCODE
                                                                        WHERE 1 = 1
                                                                            AND BARCODE_NUM = #{BARCODE_NUM}
                                                                            AND DEL_YN = 'N'
                                                                     )
                            AND PART_STATUS = 'PRO001'
                      ) AS FLAG
    </select>

    <!-- 외주 확정 -->
    <select id="selectHasOutsideConfirmDt" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_CONTROL_PART
                        WHERE 1 = 1
                            AND CONTROL_SEQ = #{CONTROL_SEQ}
                            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                            AND OUTSIDE_CONFIRM_DT IS NOT NULL
                      ) AS FLAG
    </select>

    <!-- 외주(바코드 스캔) -->
    <select id="selectHasInOutside" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_CONTROL_PART
                        WHERE 1 = 1
                            AND (CONTROL_SEQ, CONTROL_DETAIL_SEQ) IN (  SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                                        FROM TBL_CONTROL_BARCODE
                                                                        WHERE 1 = 1
                                                                            AND BARCODE_NUM = #{BARCODE_NUM}
                                                                            AND DEL_YN = 'N'
                                                                     )
                            AND OUTSIDE_YN = 'Y'
                      ) AS FLAG
    </select>

    <!-- 소재 입고 -->
    <select id="selectHasInStock" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_MATERIAL_ORDER
                        WHERE 1 = 1
                            AND CONTROL_SEQ = #{CONTROL_SEQ}
                            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                            AND ORDER_STATUS IN ('MST001', 'MST002', 'MST004')
                      ) AS FLAG
    </select>

    <!-- 소재 입고(바코드 스캔) -->
    <select id="selectHasInStockFromBarcode" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_MATERIAL_ORDER
                        WHERE 1 = 1
                            AND (CONTROL_SEQ, CONTROL_DETAIL_SEQ) IN (  SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                                        FROM TBL_CONTROL_BARCODE
                                                                        WHERE 1 = 1
                                                                            AND BARCODE_NUM = #{BARCODE_NUM}
                                                                            AND DEL_YN = 'N'
                                                                     )
                            AND ORDER_STATUS IN ('MST001', 'MST002', 'MST004')
                      ) AS FLAG
    </select>

    <!-- 출고 확인 (바코드 스캔) -->
    <select id="selectHasOut" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_CONTROL A
                            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                AND (B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN (  SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                                                FROM TBL_CONTROL_BARCODE
                                                                                WHERE 1 = 1
                                                                                    AND BARCODE_NUM = #{BARCODE_NUM}
                                                                                    AND DEL_YN = 'N'
                                                                             )
                            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                AND C.OUT_FINISH_DT IS NOT NULL
                        WHERE 1 = 1
                            AND A.DEL_YN = 'N'
                      ) AS FLAG
    </select>

    <!-- MCT -->
    <select id="selectHasMctWork" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
    SELECT EXISTS ( SELECT *
                    FROM TBL_MCT_WORK
                    WHERE 1 = 1
                        AND CONTROL_SEQ = #{CONTROL_SEQ}
                        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  ) AS FLAG
    </select>

    <!-- CAM -->
    <select id="selectHasCam" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_CAM
                        WHERE 1 = 1
                            AND CONTROL_SEQ = #{CONTROL_SEQ}
                            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                      ) AS FLAG
    </select>

    <!-- 검사 -->
    <select id="selectHasInspect" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT *
                        FROM TBL_INSPECT
                        WHERE 1 = 1
                            AND CONTROL_SEQ =  #{CONTROL_SEQ}
                            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                      ) AS FLAG
    </select>

    <update id="updateControlStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_STATUS = #{CONTROL_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = #{PART_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateOutsideConversion" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = NULL,
            OUTSIDE_YN = 'Y',
            OUTSIDE_HOPE_DUE_DT = DATE_FORMAT(DATE_SUB(INNER_DUE_DT, INTERVAL 1 DAY), '%Y%m%d'),
            WORK_FACTORY = NULL,
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectProcessConfirmList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT,
            SF_GET_CODE_NM('1009', D.POP_POSITION, #{LOGIN_LOCALE}) AS LAST_POP_POSITION, <!-- 현재 등록된 위치 -->
            IFNULL(C.REGIST_NUM, SPACE(0)) AS REGIST_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN TBL_POP D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                AND D.POP_SEQ = (SELECT MAX(X.POP_SEQ) FROM TBL_POP X WHERE X.CONTROL_SEQ = D.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ)
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS = 'ORD001'
            AND A.OUT_FINISH_DT IS NULL
            AND IFNULL(B.OUTSIDE_YN, 'N') = 'N'
            AND IFNULL(B.PART_STATUS, 'PRO003') != 'PRO003'
            AND B.INNER_WORK_FINISH_DT IS NULL
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="EMERGENCY_YN != null and EMERGENCY_YN != ''">
                AND A.EMERGENCY_YN = 'Y'
            </if>
            <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
                AND B.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
            </if>
        ORDER BY A.STATUS_DT DESC, A.CONTROL_SEQ, B.PART_NUM
    </select>

    <select id="selectOutsideProcessingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT,
            IFNULL(C.REGIST_NUM,SPACE(0)) AS REGIST_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS = 'ORD001'
            AND A.OUT_FINISH_DT IS NULL
            AND B.OUTSIDE_YN = 'Y'
            AND B.OUTSIDE_IN_DT IS NULL
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            </if>
        ORDER BY A.STATUS_DT DESC, A.CONTROL_SEQ, B.PART_NUM
    </select>

    <select id="selectProcessCompleteList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT,
            SF_GET_CODE_NM('1040', D.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM,
            SF_GET_CODE_NM('1009', E.POP_POSITION, #{LOGIN_LOCALE}) AS LAST_POP_POSITION, <!-- 현재 등록된 위치 -->
            IFNULL(C.REGIST_NUM, SPACE(0)) AS REGIST_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN TBL_INSPECT D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                AND D.INSPECT_SEQ = (SELECT MAX(M.INSPECT_SEQ) FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = D.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ)
            LEFT OUTER JOIN TBL_POP E ON B.CONTROL_SEQ = E.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
                AND E.POP_SEQ = (SELECT MAX(M.POP_SEQ) FROM TBL_POP M WHERE M.CONTROL_SEQ = E.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ)
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS = 'ORD001'
            AND A.OUT_FINISH_DT IS NULL
            AND B.WORK_TYPE != 'WTP020'
            AND (( IFNULL(B.OUTSIDE_YN, 'N') = 'Y' AND B.OUTSIDE_IN_DT IS NOT NULL ) OR ( IFNULL(B.OUTSIDE_YN, 'N') = 'N' AND B.INNER_WORK_FINISH_DT IS NOT NULL ))
        ORDER BY A.STATUS_DT DESC, A.CONTROL_SEQ, B.PART_NUM
    </select>

    <select id="manageControlCadFiles_select" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            UUID() AS ROW_NUM,
            ROW_NUMBER() OVER(ORDER BY C.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS NO,
            C.CONTROL_SEQ,
            C.CONTROL_STATUS,
            B.CONTROL_DETAIL_SEQ,
            C.CONTROL_NUM, <!-- 작업지시번호 -->
            B.ITEM_NM, <!-- 품명 -->
            B.PART_NUM, <!-- Part -->
            B.DRAWING_NUM,
            B.DRAWING_VER,
            CONCAT(C.CONTROL_NUM, IFNULL(B.PART_NUM, 0)) AS SORTKEY,
            #{DXF_GFILE_SEQ} AS DXF_GFILE_SEQ,
            #{PDF_GFILE_SEQ} AS PDF_GFILE_SEQ,
            #{IMG_GFILE_SEQ} AS IMG_GFILE_SEQ
        FROM TBL_CONTROL C
            INNER JOIN TBL_CONTROL_PART B ON C.CONTROL_SEQ = B.CONTROL_SEQ
        WHERE 1 = 1
            AND C.DEL_YN = 'N'
            AND IFNULL(C.CONTROL_STATUS, 'ORD002') IN ('ORD002')    <!-- 확정/종료/마감 완료된 대상은 업로드 불가 추소 & 대기만 업로드 가능 -->
            AND UPPER(B.DRAWING_NUM) = #{MAPPING_STR}
        ORDER BY C.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
    </select>

    <update id="manageControlCadFiles" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            DRAWING_UP_DT = NOW(),
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <!-- 캐드 도면 교체 -->
    <select id="manageControlCadRevFiles_select" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            UUID() AS ROW_NUM,
            'VER_UP' AS UPDATE_TYPE,
            C.CONTROL_SEQ,
            C.CONTROL_STATUS,
            B.CONTROL_DETAIL_SEQ,
            C.CONTROL_NUM, <!-- 작업지시번호 -->
            B.ITEM_NM, <!-- 품명 -->
            B.PART_NUM, <!-- Part -->
            B.DRAWING_NUM,
            B.DRAWING_VER,
            B.SIZE_TXT, <!-- 규격 -->
            CONCAT(C.CONTROL_NUM, IFNULL(B.PART_NUM, 0)) AS SORTKEY,
            CASE WHEN B.DRAWING_VER IS NOT NULL THEN IFNULL(SF_GET_DATE_F(B.DRAWING_UP_DT, 'YY', 'M'), SPACE(0))
                    ELSE SPACE(0) END AS DRAWING_UP_DT, <!-- 도면업로드시간 -->
            #{DXF_GFILE_SEQ} AS DXF_GFILE_SEQ,
            #{PDF_GFILE_SEQ} AS PDF_GFILE_SEQ,
            #{IMG_GFILE_SEQ} AS IMG_GFILE_SEQ
        FROM TBL_CONTROL C
            INNER JOIN TBL_CONTROL_PART B ON C.CONTROL_SEQ = B.CONTROL_SEQ
        WHERE 1 = 1
            AND C.DEL_YN = 'N'
            AND IFNULL(C.CONTROL_STATUS, 'ORD002') IN ('ORD001', 'ORD003') <!-- 확정/마감 대상이며  -->
            AND C.OUT_FINISH_DT IS NULL <!-- 확정 마감상태의 출고 완료 이전에 변경 가능 -->
            AND UPPER(B.DRAWING_NUM) = #{MAPPING_STR}
    </select>

    <update id="manageControlCadRevFiles" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            DRAWING_VER = IFNULL(DRAWING_VER, 0) + 1,
            DRAWING_UP_DT = NOW(),
            PREV_DRAWING_NUM = DRAWING_NUM,
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="manageControlCadRevFiles_revDelete" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_BARCODE
        SET
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND DEL_YN = 'N'
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}

    </update>

    <update id="manageControlCadRevFiles_revInsert" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_BARCODE (BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, CONTROL_VER, DRAWING_VER, DEL_YN, INSERT_ID)
        SELECT
            CONCAT('C', LPAD(NEXTVAL(SEQ_BARCODE), 9, '0')) as BARCODE_NUM, A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.CONTROL_VER, IFNULL(B.DRAWING_VER, 1), 'N' AS DEL_YN, #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                AND B.CONTROL_SEQ = #{CONTROL_SEQ}
                AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
    </update>

    <select id="selectControlCloseHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            <include refid="controlPartOrder"/>,
            D.CLOSE_MONTH,
            D.CLOSE_VER,
            CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS ORDER_DRAWING_NUM,
            CASE WHEN B.PART_NUM IS NULL THEN C.IMG_GFILE_SEQ ELSE B.IMG_GFILE_SEQ END AS ORDER_IMG_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.DXF_GFILE_SEQ ELSE B.DXF_GFILE_SEQ END AS ORDER_DXF_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.PDF_GFILE_SEQ ELSE B.PDF_GFILE_SEQ END AS ORDER_PDF_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_PART_NUM, <!-- 작업지시번호 -->
            (SELECT M.INVOICE_NUM FROM TBL_INVOICE_DETAIL M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.ORDER_SEQ =  C.ORDER_SEQ) AS INVOICE_NUM, <!-- 인보이스 번호 -->
            SF_GET_DATE_F(D.CLOSE_DT, 'YYYY', '') AS CLOSE_DT,
            SF_GET_UNIT_SUM_AUTO_AMT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS UNIT_SUM_AUTO_AMT,
            C.UNIT_FINAL_AMT * C.ORDER_QTY AS FINAL_TOTAL_AMT, <!-- 합계 금액 -->
            IFNULL( CASE
                        WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.UNIT_FINAL_AMT
                                                                    FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                        AND N.DEL_YN = 'N'
                                                                        AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                        AND O.WORK_TYPE = B.WORK_TYPE
                                                                        AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                    LIMIT 1)
                        ELSE (  SELECT M.UNIT_FINAL_AMT
                                FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND N.CONTROL_STATUS = 'ORD003'
                                    AND N.DEL_YN = 'N'
                                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                    AND M.DRAWING_NUM = B.DRAWING_NUM
                                    AND O.WORK_TYPE = B.WORK_TYPE
                                    AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                ORDER BY M.CONTROL_SEQ DESC
                                LIMIT 1)
                    END, SPACE(0)) AS PREV_UNIT_FINAL_AMT, <!-- 종전가 -->
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_FINAL_AMT, <!-- 외주 합계 금액 -->
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT_F,
            (SELECT M.BARCODE_NUM FROM TBL_CONTROL_BARCODE M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS CONTROL_BARCODE_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            <if test="VISIBLE_PART == null">
                AND IFNULL(B.WORK_TYPE, SPACE(0)) != 'WTP050'
            </if>
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                AND B.MATERIAL_KIND = #{MATERIAL_KIND}
            </if>
            <if test="SIZE_TYPE != null and SIZE_TYPE != ''">
                AND B.SIZE_TYPE = #{SIZE_TYPE}
                <choose>
                    <when test="SIZE_TYPE == 'XYZ010'">
                        <if test="SIZE_W_F != null and SIZE_W_F != ''">
                            AND B.SIZE_W >= #{SIZE_W_F}
                        </if>
                        <if test="SIZE_W_T != null and SIZE_W_T != ''">
                            AND B.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                        </if>
                        <if test="SIZE_H_F != null and SIZE_H_F != ''">
                            AND B.SIZE_H >= #{SIZE_H_F}
                        </if>
                        <if test="SIZE_H_T != null and SIZE_H_T != ''">
                            AND B.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                        </if>
                        <if test="SIZE_T_F != null and SIZE_T_F != ''">
                            AND B.SIZE_T >= #{SIZE_T_F}
                        </if>
                        <if test="SIZE_T_T != null and SIZE_T_T != ''">
                            AND B.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                        </if>
                    </when>
                    <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                        <if test="SIZE_D_F != null and SIZE_D_F != ''">
                            AND B.SIZE_D >= #{SIZE_D_F}
                        </if>
                        <if test="SIZE_D_T != null and SIZE_D_T != ''">
                            AND B.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                        </if>
                        <if test="SIZE_L_F != null and SIZE_L_F != ''">
                            AND B.SIZE_L >= #{SIZE_L_F}
                        </if>
                        <if test="SIZE_L_T != null and SIZE_L_T != ''">
                            AND B.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                        </if>
                    </when>
                </choose>
            </if>
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                <if test="UNIT_PRICE_F != null and UNIT_PRICE_F != ''">
                    AND IFNULL(C.UNIT_FINAL_AMT,0) <![CDATA[ >= ]]> #{UNIT_PRICE_F} <!-- 단가 - 공급단가 기준 -->
                </if>
                <if test="UNIT_PRICE_T != null and UNIT_PRICE_T != ''">
                    AND IFNULL(C.UNIT_FINAL_AMT,0) <![CDATA[ <= ]]> #{UNIT_PRICE_T}
                </if>
            INNER JOIN TBL_MONTH_CLOSE D ON D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                AND D.CLOSE_MONTH BETWEEN DATE_FORMAT(STR_TO_DATE(#{CONTROL_CLOSE_HISTORY_START_DATE}, '%Y/%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(#{CONTROL_CLOSE_HISTORY_END_DATE}, '%Y/%m'), '%Y%m')
            INNER JOIN TBL_MONTH_CLOSE_ORDER E ON E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD AND E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.CONTROL_SEQ = C.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND E.ORDER_SEQ = C.ORDER_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS = 'ORD003'
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND (UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%') OR UPPER(C.REGIST_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%'))
        </if>
        <if test="ORDER_NUM != null and ORDER_NUM != ''">
            AND C.ORDER_NUM LIKE CONCAT('%', #{ORDER_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
            AND UPPER(C.ITEM_NM) LIKE CONCAT('%', UPPER(#{ITEM_NM}), '%')
        </if>
        <if test="PROJECT_NM_OR_MODULE_NM != null and PROJECT_NM_OR_MODULE_NM != ''">
            AND (UPPER(C.PROJECT_NM) LIKE CONCAT('%', UPPER(#{PROJECT_NM_OR_MODULE_NM}), '%') OR UPPER(C.MODULE_NM) LIKE CONCAT('%', UPPER(#{PROJECT_NM_OR_MODULE_NM}), '%'))
        </if>
        ORDER BY A.CONTROL_NUM, B.PART_NUM, C.ORDER_NUM
    </select>

    <select id="selectControlEndHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            <include refid="controlPartOrder"/>,
            CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS ORDER_DRAWING_NUM,
            CASE WHEN B.PART_NUM IS NULL THEN C.IMG_GFILE_SEQ ELSE B.IMG_GFILE_SEQ END AS ORDER_IMG_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.DXF_GFILE_SEQ ELSE B.DXF_GFILE_SEQ END AS ORDER_DXF_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN C.PDF_GFILE_SEQ ELSE B.PDF_GFILE_SEQ END AS ORDER_PDF_GFILE_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_PART_NUM, <!-- 작업지시번호 -->
            (SELECT M.INVOICE_NUM FROM TBL_INVOICE_DETAIL M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.ORDER_SEQ =  C.ORDER_SEQ) AS INVOICE_NUM, <!-- 인보이스 번호 -->
            (SELECT SF_GET_DATE_F(M.CLOSE_DT, 'YYYY', '') FROM TBL_MONTH_CLOSE M, TBL_MONTH_CLOSE_ORDER N WHERE N.COMP_CD = M.COMP_CD AND M.ORDER_COMP_CD = N.ORDER_COMP_CD AND N.CLOSE_MONTH = M.CLOSE_MONTH AND N.CLOSE_VER = M.CLOSE_VER AND N.CONTROL_SEQ = C.CONTROL_SEQ AND N.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND N.ORDER_SEQ = C.ORDER_SEQ ORDER BY N.INSERT_DT DESC LIMIT 1) AS CLOSE_DT,
            SF_GET_UNIT_SUM_AUTO_AMT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS UNIT_SUM_AUTO_AMT,
            C.UNIT_FINAL_AMT * C.ORDER_QTY AS FINAL_TOTAL_AMT, <!-- 합계 금액 -->
            IFNULL( CASE
                        WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.UNIT_FINAL_AMT
                                                                    FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                        AND N.DEL_YN = 'N'
                                                                        AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                        AND O.WORK_TYPE = B.WORK_TYPE
                                                                        AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                    LIMIT 1)
                        ELSE (  SELECT M.UNIT_FINAL_AMT
                                FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND O.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND N.CONTROL_STATUS = 'ORD003'
                                    AND N.DEL_YN = 'N'
                                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                    AND M.DRAWING_NUM = B.DRAWING_NUM
                                    AND O.WORK_TYPE = B.WORK_TYPE
                                    AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                                ORDER BY M.CONTROL_SEQ DESC
                                LIMIT 1)
                    END, SPACE(0)) AS PREV_UNIT_FINAL_AMT, <!-- 종전가 -->
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_FINAL_AMT, <!-- 외주 합계 금액 -->
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT_F,
            (SELECT M.BARCODE_NUM FROM TBL_CONTROL_BARCODE M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS CONTROL_BARCODE_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            <if test="VISIBLE_PART == null">
                AND IFNULL(B.WORK_TYPE, SPACE(0)) != 'WTP050'
            </if>
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                AND B.MATERIAL_KIND = #{MATERIAL_KIND}
            </if>
            <if test="SIZE_TYPE != null and SIZE_TYPE != ''">
                AND B.SIZE_TYPE = #{SIZE_TYPE}
                <choose>
                    <when test="SIZE_TYPE == 'XYZ010'">
                        <if test="SIZE_W_F != null and SIZE_W_F != ''">
                            AND B.SIZE_W >= #{SIZE_W_F}
                        </if>
                        <if test="SIZE_W_T != null and SIZE_W_T != ''">
                            AND B.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                        </if>
                        <if test="SIZE_H_F != null and SIZE_H_F != ''">
                            AND B.SIZE_H >= #{SIZE_H_F}
                        </if>
                        <if test="SIZE_H_T != null and SIZE_H_T != ''">
                            AND B.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                        </if>
                        <if test="SIZE_T_F != null and SIZE_T_F != ''">
                            AND B.SIZE_T >= #{SIZE_T_F}
                        </if>
                        <if test="SIZE_T_T != null and SIZE_T_T != ''">
                            AND B.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                        </if>
                    </when>
                    <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                        <if test="SIZE_D_F != null and SIZE_D_F != ''">
                            AND B.SIZE_D >= #{SIZE_D_F}
                        </if>
                        <if test="SIZE_D_T != null and SIZE_D_T != ''">
                            AND B.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                        </if>
                        <if test="SIZE_L_F != null and SIZE_L_F != ''">
                            AND B.SIZE_L >= #{SIZE_L_F}
                        </if>
                        <if test="SIZE_L_T != null and SIZE_L_T != ''">
                            AND B.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                        </if>
                    </when>
                </choose>
            </if>
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            <if test="UNIT_PRICE_F != null and UNIT_PRICE_F != ''">
                AND IFNULL(C.UNIT_FINAL_AMT,0) >= #{UNIT_PRICE_F} <!-- 단가 - 공급단가 기준 -->
            </if>
            <if test="UNIT_PRICE_T != null and UNIT_PRICE_T != ''">
                AND IFNULL(C.UNIT_FINAL_AMT,0) <![CDATA[ <= ]]> #{UNIT_PRICE_T}
            </if>
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS = 'ORD004'
            AND A.STATUS_DT BETWEEN STR_TO_DATE(CONCAT(#{CONTROL_CLOSE_HISTORY_START_DATE}, '/01'), '%Y/%m/%d %k:%i:%s') AND STR_TO_DATE(CONCAT(LAST_DAY(STR_TO_DATE(#{CONTROL_CLOSE_HISTORY_END_DATE}, '%Y/%m')), '23:59:59'), '%Y-%m-%d %k:%i:%s')
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND (UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%') OR UPPER(C.REGIST_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%'))
        </if>
        <if test="ORDER_NUM != null and ORDER_NUM != ''">
            AND C.ORDER_NUM LIKE CONCAT('%', #{ORDER_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
            AND UPPER(C.ITEM_NM) LIKE CONCAT('%', UPPER(#{ITEM_NM}), '%')
        </if>
        <if test="PROJECT_NM_OR_MODULE_NM != null and PROJECT_NM_OR_MODULE_NM != ''">
            AND (UPPER(C.PROJECT_NM) LIKE CONCAT('%', UPPER(#{PROJECT_NM_OR_MODULE_NM}), '%') OR UPPER(C.MODULE_NM) LIKE CONCAT('%', UPPER(#{PROJECT_NM_OR_MODULE_NM}), '%'))
        </if>
        ORDER BY A.CONTROL_NUM, B.PART_NUM, C.ORDER_NUM
    </select>

    <select id="selectSalesClosingHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.GROUP_KEY
            , ROW_NUMBER () OVER(ORDER BY X.COMP_NM, X.`YEAR`, X.QUARTER, X.FINISH_MONTH, X.ORDER_COMP_NM, X.CLOSE_VER) AS ROW_NUM
            , X.COMP_CD
            , X.COMP_NM
            , X.CLOSE_MONTH
            , X.`YEAR`
            , X.QUARTER
            , X.FINISH_MONTH
            , X.CLOSE_VER
            , X.CLOSE_VER_TRAN
            , X.ORDER_COMP_CD
            , X.ORDER_COMP_NM
            , COUNT(*) AS ITEM_NUMBER <!-- 품수 -->
            , SUM(X.TOTAL_AMT) AS TOTAL_AMT
            , X.FINAL_NEGO_AMT
            , X.VAT_AMOUNT
            , X.TOTAL_AMOUNT
            , X.CLOSE_NOTE
        FROM (
            SELECT 1 AS GROUP_KEY
                , A.COMP_CD
                , SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM
                , D.CLOSE_MONTH
                , SUBSTR(D.CLOSE_MONTH, 1, 4) AS `YEAR`
                , CONCAT(QUARTER(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m')), '분기') AS QUARTER
                , CONCAT(SUBSTR(D.CLOSE_MONTH, 5), '월') AS FINISH_MONTH
                , D.CLOSE_VER <!-- 차수 -->
                , CONCAT(D.CLOSE_VER, '차') AS CLOSE_VER_TRAN <!-- 차수 -->
                , A.ORDER_COMP_CD
                , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
                , C.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT <!-- 공급가 -->
                , E.FINAL_NEGO_AMT
                , E.FINAL_NEGO_AMT * 0.1 AS VAT_AMOUNT <!-- 부가세액 -->
                , E.FINAL_NEGO_AMT + E.FINAL_NEGO_AMT * 0.1 AS TOTAL_AMOUNT <!-- 합계금액 -->
                , E.CLOSE_NOTE <!-- 비고 -->
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
                INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
            WHERE A.DEL_YN = 'N'
            <choose>
                <when test="RANGE_SEARCH != null and RANGE_SEARCH != ''">
                    AND (D.CLOSE_MONTH BETWEEN DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_RIGHT}, #{CLOSE_MONTH_RIGHT}), '%Y%m'), '%Y%m'))
                </when>
                <otherwise>
                    AND D.CLOSE_MONTH = DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m')
                </otherwise>
            </choose>
            <if test="COMP_CD != null and COMP_CD != ''">
                AND A.COMP_CD = #{COMP_CD}
            </if>
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="CLOSE_VER != null and CLOSE_VER != ''">
                AND D.CLOSE_VER = #{CLOSE_VER}
            </if>
            <if test="NOTE != null and NOTE != ''">
                AND UPPER(A.NOTE) LIKE CONCAT('%', UPPER(#{NOTE}), '%')
            </if>
        ) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_NM, X.`YEAR`, X.QUARTER, X.FINISH_MONTH, X.ORDER_COMP_NM, X.CLOSE_VER
    </select>

    <select id="selectMonthSaleStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER (ORDER BY K.YYYY, K.COMP_CD, K.ORDER_COMP_CD, K.`TYPE`) AS ROW_NUM
            , K.COMP_CD
            , K.COMP_NM
            , K.ORDER_COMP_CD
            , K.ORDER_COMP_NM
            , K.YYYY
            , K.MM
            , CASE WHEN K.`TYPE` = '1' THEN '입금' ELSE '매출' END AS `TYPE`
            , K.CLOSE_MONTH
            , SUM(K.AMT_01) AS AMT_01
            , SUM(K.AMT_02) AS AMT_02
            , SUM(K.AMT_03) AS AMT_03
            , SUM(K.Q1_SUM) AS Q1_SUM
            , SUM(K.AMT_04) AS AMT_04
            , SUM(K.AMT_05) AS AMT_05
            , SUM(K.AMT_06) AS AMT_06
            , SUM(K.Q2_SUM) AS Q2_SUM
            , SUM(K.AMT_07) AS AMT_07
            , SUM(K.AMT_08) AS AMT_08
            , SUM(K.AMT_09) AS AMT_09
            , SUM(K.Q3_SUM) AS Q3_SUM
            , SUM(K.AMT_10) AS AMT_10
            , SUM(K.AMT_11) AS AMT_11
            , SUM(K.AMT_12) AS AMT_12
            , SUM(K.Q4_SUM) AS Q4_SUM
            , SUM(K.TOTAL_AMT) AS TOTAL_AMT
        FROM (	SELECT F.COMP_CD
                    , F.COMP_NM
                    , F.ORDER_COMP_CD
                    , F.ORDER_COMP_NM
                    , G.YYYY
                    , G.MM
                    , G.`TYPE`
                    , H.CLOSE_MONTH
                    , CASE WHEN G.MM = '01' THEN H.AMT ELSE 0 END AS AMT_01
                    , CASE WHEN G.MM = '02' THEN H.AMT ELSE 0 END AS AMT_02
                    , CASE WHEN G.MM = '03' THEN H.AMT ELSE 0 END AS AMT_03
                    , CASE WHEN G.MM IN ('01', '02', '03') THEN H.AMT ELSE 0 END AS Q1_SUM
                    , CASE WHEN G.MM = '04' THEN H.AMT ELSE 0 END AS AMT_04
                    , CASE WHEN G.MM = '05' THEN H.AMT ELSE 0 END AS AMT_05
                    , CASE WHEN G.MM = '06' THEN H.AMT ELSE 0 END AS AMT_06
                    , CASE WHEN G.MM IN ('04', '05', '06') THEN H.AMT ELSE 0 END AS Q2_SUM
                    , CASE WHEN G.MM = '07' THEN H.AMT ELSE 0 END AS AMT_07
                    , CASE WHEN G.MM = '08' THEN H.AMT ELSE 0 END AS AMT_08
                    , CASE WHEN G.MM = '09' THEN H.AMT ELSE 0 END AS AMT_09
                    , CASE WHEN G.MM IN ('07', '08', '09') THEN H.AMT ELSE 0 END AS Q3_SUM
                    , CASE WHEN G.MM = '10' THEN H.AMT ELSE 0 END AS AMT_10
                    , CASE WHEN G.MM = '11' THEN H.AMT ELSE 0 END AS AMT_11
                    , CASE WHEN G.MM = '12' THEN H.AMT ELSE 0 END AS AMT_12
                    , CASE WHEN G.MM IN ('10', '11', '12') THEN H.AMT ELSE 0 END AS Q4_SUM
                    , IFNULL(H.AMT, 0) AS TOTAL_AMT
                FROM (	SELECT A.COMP_CD
                            , A.COMP_NM
                            , B.COMP_CD AS ORDER_COMP_CD
                            , B.COMP_NM AS ORDER_COMP_NM
                        FROM (	SELECT COMP_CD
                                    , COMP_NM
                                FROM TBL_COMPANY
                                WHERE ACTIVE_YN = 'Y'
                                    AND FAMILY_COMPANY_YN = 'Y' ) A
                        CROSS JOIN (	SELECT COMP_CD
                                            , COMP_NM
                                        FROM TBL_COMPANY
                                        WHERE ACTIVE_YN = 'Y'
                                            AND ORDER_COMPANY_YN = 'Y' ) B ) F <!-- COMP * ORDER_COMP_CD -->
                CROSS JOIN (	SELECT '1' AS `TYPE`
                                    , YYYY
                                    , MM
                                FROM TBL_YYYYMMDD
                                WHERE YYYY = #{MONTH_SALE_YEAR}
                                GROUP BY YYYY, MM
                                UNION ALL
                                SELECT 2 AS `TYPE`
                                    , YYYY
                                    , MM
                                FROM TBL_YYYYMMDD
                                WHERE YYYY = #{MONTH_SALE_YEAR}
                                GROUP BY YYYY, MM ) G <!-- 12Month * 2Type -->
                LEFT OUTER JOIN (   SELECT '1' AS `TYPE` <!-- 입금 -->
                                        , COMP_CD
                                        , ORDER_COMP_CD
                                        , DATE_FORMAT(DEPOSIT_DT, '%Y%m') AS CLOSE_MONTH
                                        , DEPOSIT_AMT AS AMT
                                    FROM TBL_MONEY_DEPOSIT
                                    WHERE SUBSTR(DEPOSIT_DT, 1, 4) = #{MONTH_SALE_YEAR}
                                    <if test="COMP_CD != null and COMP_CD != ''">
                                        AND COMP_CD = #{COMP_CD}
                                    </if>
                                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                        AND ORDER_COMP_CD = #{ORDER_COMP_CD}
                                    </if>
                                    GROUP BY COMP_CD, ORDER_COMP_CD, DATE_FORMAT(DEPOSIT_DT, '%Y%m')
                                    UNION ALL
                                    SELECT '2' AS `TYPE` <!-- 매출 -->
                                        , F.COMP_CD
                                        , F.ORDER_COMP_CD
                                        , F.CLOSE_MONTH
                                        , SUM(F.AMT) AS AMT
                                    FROM ( 	SELECT A.COMP_CD
                                                , A.ORDER_COMP_CD
                                                , D.CLOSE_MONTH
                                                , E.FINAL_NEGO_AMT + E.FINAL_NEGO_AMT * 0.1 AS AMT
                                            FROM TBL_CONTROL A
											    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
											    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
											    	AND IFNULL(B.PART_NUM, '0') = '0'
											    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
											    INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
											    	AND SUBSTR(E.CLOSE_MONTH, 1, 4) = #{MONTH_SALE_YEAR}
                                            WHERE A.DEL_YN = 'N'
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND A.COMP_CD = #{COMP_CD}
                                            </if>
                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                            </if>
                                            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, D.CLOSE_VER ) F
                                    GROUP BY F.COMP_CD, F.ORDER_COMP_CD, F.CLOSE_MONTH ) H ON H.COMP_CD = F.COMP_CD AND H.ORDER_COMP_CD = F.ORDER_COMP_CD AND H.CLOSE_MONTH = CONCAT(G.YYYY, G.MM) AND H.`TYPE` = G.`TYPE`
                GROUP BY G.YYYY, G.MM, F.COMP_CD, F.ORDER_COMP_CD, G.`TYPE` ) K
        WHERE 1 = 1
        <if test="DEPOSIT_STATUS_INDICATION == null">
            AND K.`TYPE` = '2' <!-- 매출 -->
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND K.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND K.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        GROUP BY K.YYYY, K.COMP_CD, K.ORDER_COMP_CD, K.`TYPE`
        ORDER BY K.YYYY, K.COMP_CD, K.ORDER_COMP_CD, K.`TYPE`
    </select>
    <select id="selectMonthSaleStatusSummary" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT NULL AS ROW_NUM
            , NULL AS COMP_CD
            , NULL AS COMP_NM
            , NULL AS ORDER_COMP_CD
            , NULL AS ORDER_COMP_NM
            , K.YYYY
            , K.MM
            , CASE WHEN K.`TYPE` = '1' THEN '입금' ELSE '매출' END AS `TYPE`
            , K.CLOSE_MONTH
            , SUM(K.AMT_01) AS AMT_01
            , SUM(K.AMT_02) AS AMT_02
            , SUM(K.AMT_03) AS AMT_03
            , SUM(K.Q1_SUM) AS Q1_SUM
            , SUM(K.AMT_04) AS AMT_04
            , SUM(K.AMT_05) AS AMT_05
            , SUM(K.AMT_06) AS AMT_06
            , SUM(K.Q2_SUM) AS Q2_SUM
            , SUM(K.AMT_07) AS AMT_07
            , SUM(K.AMT_08) AS AMT_08
            , SUM(K.AMT_09) AS AMT_09
            , SUM(K.Q3_SUM) AS Q3_SUM
            , SUM(K.AMT_10) AS AMT_10
            , SUM(K.AMT_11) AS AMT_11
            , SUM(K.AMT_12) AS AMT_12
            , SUM(K.Q4_SUM) AS Q4_SUM
            , SUM(K.TOTAL_AMT) AS TOTAL_AMT
        FROM (	SELECT F.COMP_CD
                    , F.COMP_NM
                    , F.ORDER_COMP_CD
                    , F.ORDER_COMP_NM
                    , G.YYYY
                    , G.MM
                    , G.`TYPE`
                    , H.CLOSE_MONTH
                    , CASE WHEN G.MM = '01' THEN H.AMT ELSE 0 END AS AMT_01
                    , CASE WHEN G.MM = '02' THEN H.AMT ELSE 0 END AS AMT_02
                    , CASE WHEN G.MM = '03' THEN H.AMT ELSE 0 END AS AMT_03
                    , CASE WHEN G.MM IN ('01', '02', '03') THEN H.AMT ELSE 0 END AS Q1_SUM
                    , CASE WHEN G.MM = '04' THEN H.AMT ELSE 0 END AS AMT_04
                    , CASE WHEN G.MM = '05' THEN H.AMT ELSE 0 END AS AMT_05
                    , CASE WHEN G.MM = '06' THEN H.AMT ELSE 0 END AS AMT_06
                    , CASE WHEN G.MM IN ('04', '05', '06') THEN H.AMT ELSE 0 END AS Q2_SUM
                    , CASE WHEN G.MM = '07' THEN H.AMT ELSE 0 END AS AMT_07
                    , CASE WHEN G.MM = '08' THEN H.AMT ELSE 0 END AS AMT_08
                    , CASE WHEN G.MM = '09' THEN H.AMT ELSE 0 END AS AMT_09
                    , CASE WHEN G.MM IN ('07', '08', '09') THEN H.AMT ELSE 0 END AS Q3_SUM
                    , CASE WHEN G.MM = '10' THEN H.AMT ELSE 0 END AS AMT_10
                    , CASE WHEN G.MM = '11' THEN H.AMT ELSE 0 END AS AMT_11
                    , CASE WHEN G.MM = '12' THEN H.AMT ELSE 0 END AS AMT_12
                    , CASE WHEN G.MM IN ('10', '11', '12') THEN H.AMT ELSE 0 END AS Q4_SUM
                    , IFNULL(H.AMT, 0) AS TOTAL_AMT
                FROM (	SELECT A.COMP_CD
                            , A.COMP_NM
                            , B.COMP_CD AS ORDER_COMP_CD
                            , B.COMP_NM AS ORDER_COMP_NM
                        FROM (	SELECT COMP_CD
                                    , COMP_NM
                                FROM TBL_COMPANY
                                WHERE ACTIVE_YN = 'Y'
                                    AND FAMILY_COMPANY_YN = 'Y' ) A
                        CROSS JOIN (	SELECT COMP_CD
                                            , COMP_NM
                                        FROM TBL_COMPANY
                                        WHERE ACTIVE_YN = 'Y'
                                            AND ORDER_COMPANY_YN = 'Y' ) B ) F <!-- COMP * ORDER_COMP_CD -->
                CROSS JOIN (	SELECT '1' AS `TYPE`
                                    , YYYY
                                    , MM
                                FROM TBL_YYYYMMDD
                                WHERE YYYY = #{MONTH_SALE_YEAR}
                                GROUP BY YYYY, MM
                                UNION ALL
                                SELECT 2 AS `TYPE`
                                    , YYYY
                                    , MM
                                FROM TBL_YYYYMMDD
                                WHERE YYYY = #{MONTH_SALE_YEAR}
                                GROUP BY YYYY, MM ) G <!-- 12Month * 2Type -->
                LEFT OUTER JOIN (   SELECT '1' AS `TYPE` <!-- 입금 -->
                                        , COMP_CD
                                        , ORDER_COMP_CD
                                        , DATE_FORMAT(DEPOSIT_DT, '%Y%m') AS CLOSE_MONTH
                                        , DEPOSIT_AMT AS AMT
                                    FROM TBL_MONEY_DEPOSIT
                                    WHERE SUBSTR(DEPOSIT_DT, 1, 4) = #{MONTH_SALE_YEAR}
                                    <if test="COMP_CD != null and COMP_CD != ''">
                                        AND COMP_CD = #{COMP_CD}
                                    </if>
                                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                        AND ORDER_COMP_CD = #{ORDER_COMP_CD}
                                    </if>
                                    GROUP BY COMP_CD, ORDER_COMP_CD, DATE_FORMAT(DEPOSIT_DT, '%Y%m')
                                    UNION ALL
                                    SELECT '2' AS `TYPE` <!-- 매출 -->
                                        , F.COMP_CD
                                        , F.ORDER_COMP_CD
                                        , F.CLOSE_MONTH
                                        , SUM(F.AMT) AS AMT
                                    FROM ( 	SELECT A.COMP_CD
                                                , A.ORDER_COMP_CD
                                                , D.CLOSE_MONTH
                                                , E.FINAL_NEGO_AMT + E.FINAL_NEGO_AMT * 0.1 AS AMT
                                            FROM TBL_CONTROL A
											    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
											    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
											    	AND IFNULL(B.PART_NUM, '0') = '0'
											    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
											    INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
											    	AND SUBSTR(E.CLOSE_MONTH, 1, 4) = #{MONTH_SALE_YEAR}
                                            WHERE A.DEL_YN = 'N'
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND A.COMP_CD = #{COMP_CD}
                                            </if>
                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                            </if>
                                            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, D.CLOSE_VER ) F
                                    GROUP BY F.COMP_CD, F.ORDER_COMP_CD, F.CLOSE_MONTH ) H ON H.COMP_CD = F.COMP_CD AND H.ORDER_COMP_CD = F.ORDER_COMP_CD AND H.CLOSE_MONTH = CONCAT(G.YYYY, G.MM) AND H.`TYPE` = G.`TYPE`
                GROUP BY G.YYYY, G.MM, F.COMP_CD, F.ORDER_COMP_CD, G.`TYPE` ) K
        WHERE 1 = 1
        <if test="DEPOSIT_STATUS_INDICATION == null">
            AND K.`TYPE` = '2' <!-- 매출 -->
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND K.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND K.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        GROUP BY K.YYYY, K.`TYPE`
        ORDER BY K.YYYY, K.`TYPE`
    </select>

    <insert id="createControlBarcode" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_BARCODE (
            BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, CONTROL_VER, DRAWING_VER)
        SELECT
            CONCAT('C',LPAD(NEXTVAL(SEQ_BARCODE),9,'0')) AS BARCODE_NUM, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.CONTROL_VER, B.DRAWING_VER
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
        WHERE 1 = 1
                AND A.DEL_YN = 'N'
                AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                AND B.CONTROL_DETAIL_SEQ = (SELECT Q.CONTROL_DETAIL_SEQ
                                            FROM TBL_CONTROL_PART Q
                                            WHERE 1 = 1
                                                AND Q.CONTROL_SEQ = #{CONTROL_SEQ}
                                                <choose>
                                                    <when test="PART_NUM != null and PART_NUM != ''">
                                                        AND Q.PART_NUM = #{PART_NUM}
                                                    </when>
                                                    <otherwise>
                                                        AND Q.PART_NUM IS NULL
                                                    </otherwise>
                                                </choose>
                                            )
                AND NOT EXISTS (SELECT *
                                FROM TBL_CONTROL_BARCODE X
                                WHERE 1 = 1
                                    AND X.CONTROL_SEQ = #{CONTROL_SEQ}
                                    AND X.CONTROL_DETAIL_SEQ = ( SELECT Q.CONTROL_DETAIL_SEQ
                                                                 FROM TBL_CONTROL_PART Q
                                                                 WHERE 1 = 1
                                                                    AND Q.CONTROL_SEQ = #{CONTROL_SEQ}
                                                                    <choose>
                                                                        <when test="PART_NUM != null and PART_NUM != ''">
                                                                            AND Q.PART_NUM = #{PART_NUM}
                                                                        </when>
                                                                        <otherwise>
                                                                            AND Q.PART_NUM IS NULL
                                                                        </otherwise>
                                                                    </choose>
                                                                    )
                                    AND X.DEL_YN = 'N')
    </insert>

    <select id="selectControlTransactionStatementInfo_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.ORDER_COMP_CD, <!-- 발주사 -->
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM , <!-- 발주사 -->
            A.COMP_CD, <!-- 공급사 -->
            (SELECT IFNULL(M.COMP_NM2, M.COMP_NM) FROM TBL_COMPANY M WHERE M.COMP_CD = A.COMP_CD) AS COMP_NM, <!-- 공급사 Full Name -->
            E.INVOICE_NUM, <!-- 인보이스 넘버 -->
            FORMAT(SUM(C.UNIT_FINAL_AMT * SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ)), 0) AS TOTAL_AMT <!-- 금액 합계 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT JOIN TBL_INVOICE_DETAIL D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
            LEFT JOIN TBL_INVOICE E ON D.INVOICE_NUM = E.INVOICE_NUM
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND IFNULL(B.WORK_TYPE, SPACE(0)) != 'WTP050' <!-- Part 부속은 제외(작업형태 파트가공) -->
            AND CONCAT(A.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ) IN (${CONTROL_SEQ_STR})
            AND A.COMP_CD = #{COMP_CD}
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        GROUP BY
            A.COMP_CD,
            A.ORDER_COMP_CD
    </select>
    <select id="selectControlTransactionStatementInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ORDER_COMP_CD,
           SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM ,
           A.COMP_CD,
           (SELECT IFNULL(M.COMP_NM2, M.COMP_NM) FROM TBL_COMPANY M WHERE M.COMP_CD = A.COMP_CD) AS COMP_NM,
           E.INVOICE_NUM,
           FORMAT(SUM(A.UNIT_FINAL_AMT * A.ORDER_QTY), 0) AS TOTAL_AMT
        FROM TBL_ORDER A
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
            LEFT OUTER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_CONTROL_PART D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND IFNULL(D.WORK_TYPE,SPACE(0)) != 'WTP050'
	        LEFT OUTER JOIN TBL_INVOICE_DETAIL E ON E.ORDER_SEQ = A.ORDER_SEQ
            LEFT OUTER JOIN TBL_INVOICE F ON E.INVOICE_NUM = F.INVOICE_NUM
        WHERE A.DEL_YN = 'N'
          AND IFNULL(D.WORK_TYPE,SPACE(0)) != 'WTP050'
          AND A.COMP_CD = #{COMP_CD}
          AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
          AND A.ORDER_SEQ IN (${ORDER_SEQ_STR})
        GROUP BY A.COMP_CD, A.ORDER_COMP_CD
    </select>
    <select id="selectControlTransactionStatementList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            X.*
        FROM (
             SELECT
                 B.CONTROL_SEQ,
                 B.CONTROL_DETAIL_SEQ,
                 A.ORDER_SEQ,
                 SF_GET_CODE_NM('1091', A.ORDER_STATUS , #{LOGIN_LOCALE}) AS ORDER_STATUS_NM, -- 주문관리상태 -->
                 C.CONTROL_NUM,
                 A.REGIST_NUM,
                 A.ORDER_NUM,
                 A.DRAWING_NUM,
                 A.SIZE_TXT,
                 IFNULL(SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM,
                 A.UNIT_FINAL_AMT,
                 A.ORDER_QTY AS CONTROL_ORDER_QTY,
                 B.ORDER_QTY AS CONTROL_PART_QTY,
                 (A.UNIT_FINAL_AMT * A.ORDER_QTY) AS TOTAL_AMT,
                 A.PACKING_CNT,
                 '' AS NOTE,
                 A.IMG_GFILE_SEQ
             FROM TBL_ORDER A
                  LEFT OUTER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
                  LEFT OUTER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
             WHERE A.DEL_YN = 'N'
                AND IFNULL(A.WORK_TYPE,SPACE(0)) != 'WTP050'
                AND A.ORDER_SEQ IN (${ORDER_SEQ_STR})
                AND NOT EXISTS (SELECT * FROM TBL_INVOICE WHERE INVOICE_NUM = #{INVOICE_NUM})
             UNION ALL
             SELECT
                 C.CONTROL_SEQ,
                 C.CONTROL_DETAIL_SEQ,
                 A.ORDER_SEQ,
                 SF_GET_CODE_NM('1091', A.ORDER_STATUS , #{LOGIN_LOCALE}) AS ORDER_STATUS_NM, -- 주문관리상태 -->
                 D.CONTROL_NUM,
                 A.REGIST_NUM,
                 A.ORDER_NUM,
                 A.DRAWING_NUM,
                 A.SIZE_TXT,
                 IFNULL(SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM,
                 A.UNIT_FINAL_AMT,
                 A.ORDER_QTY AS CONTROL_ORDER_QTY,
                 C.ORDER_QTY AS CONTROL_PART_QTY,
                 (A.UNIT_FINAL_AMT * A.ORDER_QTY) AS TOTAL_AMT,
                 A.PACKING_CNT,
                 B.NOTE AS NOTE,
                 A.IMG_GFILE_SEQ
             FROM TBL_ORDER A
                 INNER JOIN TBL_INVOICE_DETAIL B ON B.ORDER_SEQ = A.ORDER_SEQ AND B.INVOICE_NUM = #{INVOICE_NUM}
                 LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.ORDER_SEQ = C.ORDER_SEQ
                 LEFT OUTER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND D.DEL_YN = 'N'
             WHERE A.DEL_YN = 'N'
               AND IFNULL(A.WORK_TYPE,SPACE(0)) != 'WTP050'
               AND A.ORDER_SEQ IN (${ORDER_SEQ_STR})
        ) X
        ORDER BY X.CONTROL_NUM, X.ORDER_NUM
    </select>

    <select id="selectControlTransactionStatementList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            X.*
        FROM (
            SELECT
                A.CONTROL_SEQ,
                B.CONTROL_DETAIL_SEQ,
                C.ORDER_SEQ,
                SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
                A.CONTROL_NUM, <!-- 작업지시번호 -->
                C.REGIST_NUM, <!-- 접수번호 -->
                C.ORDER_NUM, <!-- 발주번호 -->
                C.DRAWING_NUM, <!-- 도면번호 -->
                B.SIZE_TXT, <!-- 규격 -->
                IFNULL(SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM, <!-- 작업형태 -->
                C.UNIT_FINAL_AMT, <!-- 최종공급단가 -->
                SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ) AS CONTROL_ORDER_QTY,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY, <!-- 수량 -->
                C.UNIT_FINAL_AMT * SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ) AS TOTAL_AMT, <!-- 금액 계 -->
                C.PACKING_CNT, <!-- 포장수량 -->
                '' AS NOTE, <!-- 비고 -->
                B.IMG_GFILE_SEQ
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND IFNULL(B.WORK_TYPE, SPACE(0)) != 'WTP050' <!-- Part 부속은 제외(작업형태 파트) -->
                INNER JOIN TBL_CONTROL_PART_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ
            WHERE 1 = 1
                AND A.DEL_YN = 'N'
                AND CONCAT(A.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ) IN (${CONTROL_SEQ_STR})
                AND A.COMP_CD = #{COMP_CD}
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                AND NOT EXISTS (SELECT * FROM TBL_INVOICE WHERE INVOICE_NUM = #{INVOICE_NUM})
            UNION ALL
            SELECT
                A.CONTROL_SEQ,
                B.CONTROL_DETAIL_SEQ,
                C.ORDER_SEQ,
                SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
                A.CONTROL_NUM, <!-- 작업지시번호 -->
                C.REGIST_NUM, <!-- 접수번호 -->
                C.ORDER_NUM, <!-- 발주번호 -->
                C.DRAWING_NUM, <!-- 도면번호 -->
                B.SIZE_TXT, <!-- 규격 -->
                IFNULL(SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM, <!-- 작업형태 -->
                C.UNIT_FINAL_AMT, <!-- 최종공급단가 -->
                SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ) AS CONTROL_ORDER_QTY,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY, <!-- 수량 -->
                C.UNIT_FINAL_AMT * SF_GET_CONTROL_ORDER_QTY(C.CONTROL_SEQ, C.ORDER_SEQ) AS TOTAL_AMT, <!-- 금액 계 -->
                C.PACKING_CNT, <!-- 포장수량 -->
                D.NOTE, <!-- 비고 -->
                B.IMG_GFILE_SEQ
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND IFNULL(B.WORK_TYPE, SPACE(0)) != 'WTP050' <!-- Part 부속은 제외(작업형태 파트) -->
                INNER JOIN TBL_CONTROL_PART_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ
                INNER JOIN TBL_INVOICE_DETAIL D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                                   AND C.ORDER_SEQ = D.ORDER_SEQ
                                                   AND D.INVOICE_NUM = #{INVOICE_NUM}
            WHERE 1 = 1
                AND A.DEL_YN = 'N'
        ) X
        ORDER BY X.CONTROL_NUM, X.ORDER_NUM
    </select>

    <insert id="createInvoice" parameterType="java.util.HashMap" >
        INSERT INTO TBL_INVOICE (
            INVOICE_NUM,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            INVOICE_TITLE,
            INVOICE_DT,
            INSERT_ID
        ) VALUES (
            #{INVOICE_NUM},
            #{COMP_CD},
            #{ORDER_COMP_CD},
            #{ORDER_STAFF_SEQ},
            #{INVOICE_TITLE},
            NOW(),
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                INVOICE_TITLE = #{INVOICE_TITLE},
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <select id="selectInvoiceDetailDuplicateCheck" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS ( SELECT * FROM TBL_INVOICE_DETAIL
                        WHERE 1 = 1
                        	AND ORDER_SEQ = #{ORDER_SEQ}
                            AND INVOICE_NUM != #{INVOICE_NUM} ) AS FLAG
    </select>

    <insert id="createInvoiceDetail" parameterType="java.util.HashMap" >
        INSERT INTO TBL_INVOICE_DETAIL (
            INVOICE_NUM,
            CONTROL_SEQ,
            ORDER_SEQ,
            NOTE,
            INSERT_ID
        ) VALUES (
            #{INVOICE_NUM},
            #{CONTROL_SEQ},
            #{ORDER_SEQ},
            #{NOTE},
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updatePackingCnt" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET PACKING_CNT = #{PACKING_CNT}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <select id="moneyReceiveStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            1 AS GROUP_KEY,
            ROW_NUMBER() OVER(ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD) AS ROW_NUM,
            Z.COMP_CD, (SELECT A.COMP_NM FORM FROM TBL_COMPANY A WHERE A.COMP_CD = Z.COMP_CD) AS COMP_CD_NM,
            Z.ORDER_COMP_CD, (SELECT A.COMP_NM FORM FROM TBL_COMPANY A WHERE A.COMP_CD = Z.ORDER_COMP_CD) AS ORDER_COMP_NM,
            Z.CLOSE_YEAR, SUM(Z.SALE_AMT) AS SALE_AMT, SUM(Z.CASH_AMT) AS CASH_AMT, SUM(Z.PAPER_AMT) AS PAPER_AMT,
            SUM(Z.DEPOSIT_TOTAL_AMT) AS DEPOSIT_TOTAL_AMT, SUM(Z.NOT_DEPOSIT_AMT) AS NOT_DEPOSIT_AMT,
            (SUM(Z.SALE_AMT) + SUM(Z.NOT_DEPOSIT_AMT)) - SUM(Z.DEPOSIT_TOTAL_AMT) AS NOT_DEPOSIT_TOTAL_AMT,
            Y.NOTE
        FROM (
            SELECT
                Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_YEAR, SUM(Z.SALE_AMT) AS SALE_AMT,
                0 AS CASH_AMT, 0 AS PAPER_AMT, 0 AS DEPOSIT_TOTAL_AMT, 0 AS NOT_DEPOSIT_AMT
            FROM (
                SELECT
                    A.COMP_CD, A.ORDER_COMP_CD, DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y') as CLOSE_YEAR, E.FINAL_NEGO_AMT + E.FINAL_NEGO_AMT * 0.1 AS SALE_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND IFNULL(B.PART_NUM, '0') = '0'
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_MONTH_CLOSE_ORDER D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ AND A.COMP_CD = D.COMP_CD AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD AND D.CLOSE_MONTH = E.CLOSE_MONTH AND D.ORDER_COMP_CD = E.ORDER_COMP_CD AND D.CLOSE_VER = E.CLOSE_VER
                        AND DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y') = #{MONEY_MANAGE_STATUS_YEAR}
                WHERE A.DEL_YN = 'N'
                    <if test="COMP_CD != null and COMP_CD != ''">
                        AND A.COMP_CD = #{COMP_CD}
                    </if>
                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                        AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                    </if>
                GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, D.CLOSE_VER
            ) Z
            GROUP BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_YEAR
            UNION ALL
            <!-- 선택 년도 금액 -->
            SELECT
                A.COMP_CD, A.ORDER_COMP_CD,
                DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') as CLOSE_YEAR,
                0 as SALE_AMT,
                SUM(CASE WHEN A.DEPOSIT_TYPE IN ('1') THEN A.DEPOSIT_AMT ELSE 0 END) AS CASH_AMT,
                SUM(CASE WHEN A.DEPOSIT_TYPE IN ('2', '3') THEN A.DEPOSIT_AMT ELSE 0 END) AS PAPER_AMT,
                SUM(A.DEPOSIT_AMT + A.DEPOSIT_AMT * 0.1) AS DEPOSIT_TOTAL_AMT, 0 AS NOT_DEPOSIT_AMT
            FROM TBL_MONEY_DEPOSIT A
            WHERE DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') = #{MONEY_MANAGE_STATUS_YEAR}
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y')
            UNION ALL
            <!-- 전년도 미수 금액 -->
            SELECT
                A.COMP_CD, A.ORDER_COMP_CD,
                #{MONEY_MANAGE_STATUS_YEAR} as CLOSE_YEAR,
                0 as SALE_AMT, 0 AS CASH_AMT, 0 AS PAPER_AMT, 0 AS DEPOSIT_TOTAL_AMT, SUM(A.DEPOSIT_AMT + A.DEPOSIT_AMT * 0.1) AS NOT_DEPOSIT_AMT
            FROM TBL_MONEY_DEPOSIT A
            WHERE DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') <![CDATA[ < ]]> #{MONEY_MANAGE_STATUS_YEAR}
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
                AND A.DEPOSIT_TYPE IN ('2', '3') AND A.DUE_PAY_YN = 'N'
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD
        ) Z
            LEFT OUTER JOIN TBL_MONEY_YEAR_NOTE Y ON Z.COMP_CD = Y.COMP_CD AND Z.ORDER_COMP_CD = Y.ORDER_COMP_CD AND Z.CLOSE_YEAR = Y.YYYY
        WHERE 1 = 1
        GROUP BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_YEAR
        ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD
    </select>

    <insert id="insertMoneyYearNote" parameterType="java.util.HashMap">
        INSERT INTO TBL_MONEY_YEAR_NOTE
            (YYYY, COMP_CD, ORDER_COMP_CD, NOTE, INSERT_ID)
        VALUES
            (#{CLOSE_YEAR}, #{COMP_CD}, #{ORDER_COMP_CD}, #{NOTE}, 'system')
        ON DUPLICATE KEY
            UPDATE
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = 'system'
    </insert>

    <select id="moneyManageSalesList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER () AS ROW_NUM,
            Z.COMP_CD, Z.COMP_NM, Z.ORDER_COMP_CD, Z.ORDER_COMP_NM, Z.CLOSE_MONTH, SUM(Z.ORDER_AMT) AS ORDER_AMT, SUM(Z.ORDER_AMT + Z.ORDER_AMT * 0.1) AS VAT_INCLUDED_AMOUNT, Z.CLOSE_MONTH_NM, E.NOTE
        FROM (
            SELECT
                A.COMP_CD,
                (SELECT Z.COMP_NM FORM FROM TBL_COMPANY Z WHERE Z.COMP_CD = A.COMP_CD) AS COMP_NM,
                A.ORDER_COMP_CD,
                (SELECT Z.COMP_NM FORM FROM TBL_COMPANY Z WHERE Z.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                D.CLOSE_MONTH, DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y-%m') as CLOSE_MONTH_NM,
                E.FINAL_NEGO_AMT AS ORDER_AMT
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND IFNULL(B.PART_NUM, '0') = '0'
                INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                INNER JOIN TBL_MONTH_CLOSE_ORDER D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.COMP_CD = D.COMP_CD AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                INNER JOIN TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD AND D.CLOSE_MONTH = E.CLOSE_MONTH AND D.ORDER_COMP_CD = E.ORDER_COMP_CD AND D.CLOSE_VER = E.CLOSE_VER
                    <if test="MONEY_RECEIVE_CLOSE_YEAR_ST != null and MONEY_RECEIVE_CLOSE_YEAR_ST != ''">
                        AND E.CLOSE_MONTH BETWEEN CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ST}, #{MONEY_RECEIVE_CLOSE_MONTH_ST})
                            AND CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ED}, #{MONEY_RECEIVE_CLOSE_MONTH_ED})
                    </if>
            WHERE A.DEL_YN = 'N'
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, D.CLOSE_VER
        ) Z
            LEFT OUTER JOIN TBL_MONEY_MONTH_NOTE E ON Z.CLOSE_MONTH = E.YYYYMM AND E.COMP_CD = Z.COMP_CD AND E.ORDER_COMP_CD = Z.ORDER_COMP_CD
        GROUP BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_MONTH
        ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_MONTH
    </select>

    <select id="moneyManageReceiveList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.DEPOSIT_SEQ,
            A.COMP_CD,
            (SELECT Z.COMP_NM FORM FROM TBL_COMPANY Z WHERE Z.COMP_CD = A.COMP_CD) AS COMP_CD_NM,
            A.ORDER_COMP_CD,
            (SELECT Z.COMP_NM FORM FROM TBL_COMPANY Z WHERE Z.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            A.DEPOSIT_DT, DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y-%m-%d') AS DEPOSIT_DATE, A.DEPOSIT_AMT,
            A.DEPOSIT_TYPE, SF_GET_CODE_NM('1074', A.DEPOSIT_TYPE, #{LOGIN_LOCALE}) AS DEPOSIT_TYPE_NM,
            A.DUE_DT, DATE_FORMAT(STR_TO_DATE(A.DUE_DT, '%Y%m%d'), '%Y-%m-%d') AS DUE_DATE,
            CASE WHEN IFNULL(A.DUE_DT, '99991231') <![CDATA[ <= ]]> DATE_FORMAT(NOW(), '%Y%m%d') AND DEPOSIT_TYPE IN ('2', '3') THEN 'Y' ELSE 'N' END OVER_DATE_YN,
            A.DUE_PAY_YN, A.DUE_PAY_AMT, A.NOTE
        FROM TBL_MONEY_DEPOSIT A
        WHERE 1 = 1
            <if test="COMP_CD != null and COMP_CD != ''">
                AND A.COMP_CD = #{COMP_CD}
            </if>
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="MONEY_RECEIVE_CLOSE_YEAR_ST != null and MONEY_RECEIVE_CLOSE_YEAR_ST != ''">
                AND A.DEPOSIT_DT BETWEEN CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ST}, #{MONEY_RECEIVE_CLOSE_MONTH_ST}, '01') AND CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ED}, #{MONEY_RECEIVE_CLOSE_MONTH_ED}, '31')
            </if>
        ORDER BY A.COMP_CD, A.ORDER_COMP_CD, A.DEPOSIT_DT
    </select>

    <delete id="deleteMoneyManageReceive" parameterType="java.util.HashMap">
        DELETE FROM TBL_MONEY_DEPOSIT
        WHERE DEPOSIT_SEQ = ${DEPOSIT_SEQ}
    </delete>

    <insert id="insertMoneyManageReceive" parameterType="java.util.HashMap">
        INSERT INTO TBL_MONEY_DEPOSIT
            (DEPOSIT_SEQ, COMP_CD, ORDER_COMP_CD, DEPOSIT_DT,
             DEPOSIT_AMT, DEPOSIT_TYPE, DUE_DT, DUE_PAY_YN, DUE_PAY_AMT, NOTE, INSERT_ID)
        VALUES
            (NEXTVAL(SEQ_MONEY_DEPOSIT), #{COMP_CD}, #{ORDER_COMP_CD}, REPLACE(#{DEPOSIT_DATE}, '-', SPACE(0)),
             #{DEPOSIT_AMT}, #{DEPOSIT_TYPE}, REPLACE(#{DUE_DATE}, '-', SPACE(0)), IFNULL(#{DUE_PAY_YN}, 'N'), #{DUE_PAY_AMT}, #{NOTE}, 'system');
    </insert>

    <update id="updateMoneyManageReceive" parameterType="java.util.HashMap">
        UPDATE TBL_MONEY_DEPOSIT
            SET
                COMP_CD = #{COMP_CD},
                ORDER_COMP_CD = #{ORDER_COMP_CD},
                DEPOSIT_DT = REPLACE(#{DEPOSIT_DATE}, '-', SPACE(0)),
                DEPOSIT_AMT = #{DEPOSIT_AMT},
                DEPOSIT_TYPE = #{DEPOSIT_TYPE},
                DUE_DT = REPLACE(#{DUE_DATE}, '-', SPACE(0)),
                DUE_PAY_YN = IFNULL(#{DUE_PAY_YN}, 'N'),
                DUE_PAY_AMT = #{DUE_PAY_AMT},
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
        WHERE DEPOSIT_SEQ = ${DEPOSIT_SEQ}
    </update>

    <delete id="removeInvoice" parameterType="java.util.HashMap">
        DELETE FROM TBL_INVOICE
        WHERE INVOICE_NUM = #{INVOICE_NUM};
    </delete>

    <delete id="removeInvoiceDetail" parameterType="java.util.HashMap">
        DELETE FROM TBL_INVOICE_DETAIL
        WHERE INVOICE_NUM = #{INVOICE_NUM};
    </delete>

    <insert id="createControlExcel_stock" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_EXCEL (
            JOB_SEQ,
            JOB_SEQ_KEY,
            PRICE_CONFIRM,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            NOTE,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            MAIN_INSPECTION,
            EMERGENCY_YN,
            CONTROL_NUM,
            PART_NUM,
            DRAWING_NUM,
            ITEM_NM,
            WORK_TYPE,
            OUTSIDE_YN,
            WORK_FACTORY,
            MATERIAL_SUPPLY_YN,
            INNER_DUE_DT,
            SIZE_TXT,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            SURFACE_TREAT,
            MATERIAL_NOTE,
            PART_UNIT_QTY,
            ADDITIONAL_QTY,
            SAME_SIDE_YN,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            MATERIAL_FINISH_GRIND,
            MATERIAL_FINISH_HEAT,
            REGIST_NUM,
            ORDER_NUM,
            ORDER_QTY,
            ORDER_DUE_DT,
            DELIVERY_DT,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            PREV_DRAWING_NUM,
            CONTROL_STATUS,
            TOTAL_SHEET,
            INSERT_ID,
            DWG_GFILE_SEQ,
            DXF_GFILE_SEQ,
            PDF_GFILE_SEQ,
            IMG_GFILE_SEQ,
            VIEW_GFILE_SEQ,
            INSIDE_STOCK_SEQ,
            MATERIAL_FINISH_GRIND_YN,
            MATERIAL_FINISH_HEAT_YN
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            NEXTVAL(SEQ_DUMMY),
            #{IN_UID},
            #{item.PRICE_CONFIRM},
            #{item.COMP_CD},
            #{item.ORDER_COMP_CD},
            #{item.ORDER_STAFF_SEQ},
            #{item.DESIGNER_NM},
            #{item.NOTE},
            #{item.PROJECT_NM},
            #{item.MODULE_NM},
            #{item.DELIVERY_COMP_NM},
            #{item.LABEL_NOTE},
            #{item.MAIN_INSPECTION},
            IFNULL(#{item.EMERGENCY_YN}, 'N'),
            UPPER(TRIM(#{item.CONTROL_NUM})),
            #{item.PART_NUM},
            #{item.INSIDE_STOCK_NUM},
            #{item.ITEM_NM},
            #{item.WORK_TYPE},
            IFNULL(#{item.OUTSIDE_YN}, 'N'),
            #{item.WORK_FACTORY},
            IFNULL(#{item.MATERIAL_SUPPLY_YN}, 'N'),
            DATE_FORMAT(REPLACE(#{item.INNER_DUE_DT},'/',SPACE(0)), '%Y%m%d'),
            #{item.SIZE_TXT},
            #{item.MATERIAL_DETAIL},
            #{item.MATERIAL_KIND},
            #{item.SURFACE_TREAT},
            #{item.MATERIAL_NOTE},
            #{item.PART_UNIT_QTY},
            #{item.ADDITIONAL_QTY},
            IFNULL(#{item.SAME_SIDE_YN}, 'N'),
            #{item.ORIGINAL_SIDE_QTY},
            #{item.OTHER_SIDE_QTY},
            #{item.MATERIAL_FINISH_GRIND},
            #{item.MATERIAL_FINISH_HEAT},
            UPPER(TRIM(#{item.REGIST_NUM})),
            #{item.ORDER_NUM},
            #{item.ORDER_QTY},
            DATE_FORMAT(#{item.ORDER_DUE_DT}, '%Y%m%d'),
            DATE_FORMAT(#{item.DELIVERY_DT}, '%Y%m%d'),
            CAST(REPLACE(#{item.UNIT_FINAL_EST_AMT}, ',' ,SPACE(0)) AS INTEGER),
            CAST(REPLACE(#{item.UNIT_FINAL_AMT}, ',' ,SPACE(0)) AS INTEGER),
            #{item.PREV_DRAWING_NUM},
            #{item.CONTROL_STATUS},
            #{item.TOTAL_SHEET},
            #{LOGIN_USER_ID},
            #{item.DWG_GFILE_SEQ},
            #{item.DXF_GFILE_SEQ},
            #{item.PDF_GFILE_SEQ},
            #{item.IMG_GFILE_SEQ},
            #{item.VIEW_GFILE_SEQ},
            #{item.INSIDE_STOCK_SEQ},
            CASE WHEN #{item.SPECIAL_TREATMENT} = 'MATERIAL_FINISH_GRIND_YN' THEN 'Y' ELSE NULL END,
            CASE WHEN #{item.SPECIAL_TREATMENT} = 'MATERIAL_FINISH_HEAT_YN' THEN 'Y' ELSE NULL END
        )
        </foreach>
    </insert>

    <select id="selectBeforeInsertDuplicationControlList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_NUM
        FROM TBL_CONTROL_EXCEL X
            INNER JOIN (SELECT A.CONTROL_NUM, C.ORDER_NUM, C.DRAWING_NUM
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C
                        WHERE C.CONTROL_SEQ = A.CONTROL_SEQ
                            AND B.CONTROL_SEQ = A.CONTROL_SEQ
                            AND A.DEL_YN = 'N') Y ON Y.CONTROL_NUM = X.CONTROL_NUM
        WHERE X.JOB_SEQ_KEY = #{IN_UID}
        GROUP BY X.CONTROL_NUM
    </select>

    <select id="selectBeforeInsertDuplicationRegistList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.REGIST_NUM
        FROM TBL_CONTROL_PART_ORDER X, TBL_CONTROL Y
        WHERE X.REGIST_NUM IN
        <foreach collection="list" item="item"  index="index"  open="(" close=")" separator=",">
            #{item.REGIST_NUM}
        </foreach>
            AND X.CONTROL_SEQ = Y.CONTROL_SEQ
            AND Y.DEL_YN = 'N'
        GROUP BY X.REGIST_NUM
    </select>

    <delete id="deleteControlExcel" parameterType="java.util.HashMap">
        DELETE FROM TBL_CONTROL_EXCEL WHERE JOB_SEQ_KEY = #{IN_UID}
    </delete>

    <select id="businessOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, B.IMG_GFILE_SEQ,
            SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
            CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴' ELSE SPACE(0) END EMERGENCY_YN_NM,
            A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT, <!-- 발주납기 -->
            SF_GET_DATE_F(C.DELIVERY_DT, '', '') AS DELIVERY_DT, <!-- 발주정보_납품확인 -->
            SF_GET_DATE_F(C.OUT_FINISH_DT, '', '') AS OUT_FINISH_DT, <!-- 출고완료일 -->
            C.ORDER_QTY, C.ORDER_NUM, C.DRAWING_NUM, IFNULL(C.REGIST_NUM,SPACE(0)) AS REGIST_NUM,
            SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS,
            SF_GET_CODE_NM('1009', D.POP_POSITION, #{LOGIN_LOCALE}) AS LAST_POP_POSITION, <!-- 현재 등록된 위치 -->
            H.INSPECT_GRADE, SF_GET_CODE_NM('1040', H.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM, <!-- 등급 -->
            G.USER_NM, F.STAFF_NM,
            A.CONTROL_VER,
            B.SIZE_TXT,
            SF_GET_CODE_NM('1027',B.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM,
            CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM,'#',B.PART_NUM) END AS CONTROL_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE NOT IN ('WTP020') <!-- 21.03.30 작업형태 '파트'인것 제외, 21.08.27 조립제외, 파트표기 -->
            INNER JOIN TBL_CONTROL_PART_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ
                <if test="INNER_DUE_DT != null and INNER_DUE_DT != ''">
                    AND C.ORDER_DUE_DT = REPLACE(#{INNER_DUE_DT}, '/', SPACE(0))
                </if>
                <if test="ORDER_STAFF_SEQ != null and ORDER_STAFF_SEQ != ''">
                    AND C.ORDER_STAFF_SEQ = #{ORDER_STAFF_SEQ}
                </if>
            LEFT OUTER JOIN TBL_POP D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
               AND D.POP_SEQ = (SELECT MAX(X.POP_SEQ) FROM TBL_POP X WHERE X.CONTROL_SEQ = D.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ)
            LEFT OUTER JOIN TBL_COMPANY E ON A.ORDER_COMP_CD = E.COMP_CD AND E.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_COMPANY_STAFF F ON E.COMP_CD = F.COMP_CD AND C.ORDER_STAFF_SEQ = F.STAFF_SEQ
            LEFT OUTER JOIN TBL_USER G ON E.CHARGE_USER_ID = G.USER_ID AND G.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_INSPECT H ON C.CONTROL_SEQ = H.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = H.CONTROL_DETAIL_SEQ  AND H.INSPECT_TYPE =  '1'
               AND H.INSPECT_SEQ = (SELECT MAX(X.INSPECT_SEQ) FROM TBL_INSPECT X WHERE H.CONTROL_SEQ = X.CONTROL_SEQ AND H.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ  AND H.INSPECT_TYPE =  '1')
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001', 'ORD002', 'ORD003', 'ORD005')
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        ORDER BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, C.ORDER_NUM, C.DRAWING_NUM
    </select>

    <select id="businessMonthOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT DATE_FORMAT(STR_TO_DATE(X.ORDER_DUE_DT, '%Y%m%d'), '%Y-%m-%d') AS `start`
            , CONCAT(Y.COMP_NM, ' ', X.OUT_FINISH_CNT, ' / ', X.ORDER_CNT) AS `title`
            , CASE WHEN X.OUT_FINISH_CNT = X.ORDER_CNT THEN '#E1F7FF'                                                                                 <!-- 출고가 모두 완료되었을 때 -->
                 WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') <![CDATA[ <= ]]> X.ORDER_DUE_DT THEN '#FFFDA9'   <!-- 아직 출고가 완료되지 않은상태 이면서 납기 안지난 경우 -->
                 WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') > X.ORDER_DUE_DT THEN '#FFECDD'                  <!-- 아직 출고가 완료되지 않은상태 이면서 납기 지난 경우 -->
            END AS `color`
            , CASE
                WHEN X.OUT_FINISH_CNT = X.ORDER_CNT THEN 3   <!-- 출고가 모두 완료되었을 때 -->
                WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') <![CDATA[ <= ]]> X.ORDER_DUE_DT THEN 2   <!-- 아직 출고가 완료되지 않은상태 이면서 납기 안지난 경우 -->
                WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') > X.ORDER_DUE_DT THEN 1 <!-- 아직 출고가 완료되지 않은상태 이면서 납기 지난 경우 -->
            END AS SORT_1
            , X.ORDER_CNT AS SORT_2
        FROM (  SELECT C.ORDER_DUE_DT
                    , A.ORDER_COMP_CD
                    , SUM(CASE WHEN C.OUT_FINISH_DT IS NOT NULL THEN 1 ELSE 0 END) AS OUT_FINISH_CNT
                    , COUNT(*) AS ORDER_CNT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ AND B.WORK_TYPE NOT IN ('WTP020') <!-- 21.03.30 작업형태 '파트'인것 제외, 21.08.27 조립제외, 파트표기 -->
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = A.CONTROL_SEQ
                        AND C.ORDER_DUE_DT BETWEEN #{SEL_START_DATE} AND #{SEL_END_DATE}
                WHERE 1 = 1
                    AND A.DEL_YN = 'N'
                    AND A.CONTROL_STATUS IN ('ORD001', 'ORD002', 'ORD003', 'ORD005')
                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                        AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                    </if>
                GROUP BY C.ORDER_DUE_DT, A.ORDER_COMP_CD
             ) X LEFT OUTER JOIN TBL_COMPANY Y ON Y.COMP_CD = X.ORDER_COMP_CD
        ORDER BY X.ORDER_DUE_DT
            , CASE
                WHEN X.OUT_FINISH_CNT = X.ORDER_CNT THEN 3   <!-- 출고가 모두 완료되었을 때 -->
                WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') <![CDATA[ <= ]]> X.ORDER_DUE_DT THEN 2   <!-- 아직 출고가 완료되지 않은상태 이면서 납기 안지난 경우 -->
                WHEN X.OUT_FINISH_CNT <![CDATA[ < ]]> X.ORDER_CNT AND DATE_FORMAT(NOW(),'%Y%m%d') > X.ORDER_DUE_DT THEN 1 <!-- 아직 출고가 완료되지 않은상태 이면서 납기 지난 경우 -->
            END
            , X.ORDER_CNT DESC
    </select>

    <select id="businessEmergencyList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 21.03.30 현재 미사용 -->
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND IFNULL(A.EMERGENCY_YN, 'N') = 'Y'
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

    <select id="businessOverOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 21.03.30 현재 미사용 -->
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS, G.USER_NM
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 INNER JOIN TBL_USER G ON F.CHARGE_USER_ID = G.USER_ID
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND A.OUT_FINISH_DT IS NULL
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

    <select id="businessOverDangerList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 21.03.30 현재 미사용 -->
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS, G.USER_NM
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 INNER JOIN TBL_USER G ON F.CHARGE_USER_ID = G.USER_ID
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND A.OUT_FINISH_DT IS NULL
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

    <update id="updateMonthCloseDetailNote" parameterType="java.util.HashMap">
        UPDATE TBL_MONTH_CLOSE_ORDER
        SET
            CLOSE_DETAIL_NOTE = #{CLOSE_DETAIL_NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            COMP_CD = #{COMP_CD}
            AND CLOSE_MONTH = #{CLOSE_MONTH}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_VER = #{CLOSE_VER}
            AND CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <delete id="deleteMonthCloseDetail" parameterType="java.util.HashMap">
        DELETE FROM TBL_MONTH_CLOSE_ORDER
        WHERE
            COMP_CD = #{COMP_CD}
            AND CLOSE_MONTH = #{CLOSE_MONTH}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_VER = #{CLOSE_VER}
            AND CONTROL_SEQ IN (${CONTROL_SEQ})
    </delete>

    <delete id="deleteMonthClose" parameterType="java.util.HashMap">
        DELETE FROM TBL_MONTH_CLOSE
        WHERE
            COMP_CD = #{COMP_CD}
            AND CLOSE_MONTH = #{CLOSE_MONTH}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_VER = #{CLOSE_VER}
            AND NOT EXISTS (SELECT *
                            FROM TBL_MONTH_CLOSE_ORDER M
                            WHERE
                                M.COMP_CD = #{COMP_CD}
                                AND M.CLOSE_MONTH = #{CLOSE_MONTH}
                                AND M.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                AND M.CLOSE_VER = #{CLOSE_VER})
    </delete>

    <update id="updateControlRevision" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
            SET A.CONTROL_VER = A.CONTROL_VER + 1, A.UPDATE_DT = NOW(), A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND 'ORD001' = #{CONTROL_STATUS}
            AND EXISTS (SELECT * FROM TBL_CONTROL B WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS = 'ORD002')
    </update>

    <update id="updateControlBarcodeRevision" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_BARCODE A
            SET A.DEL_YN = 'Y', A.UPDATE_DT = NOW(), A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND NOT EXISTS (SELECT * FROM  TBL_CONTROL B, TBL_CONTROL_PART C WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_SEQ = C.CONTROL_SEQ
                                AND A.CONTROL_VER = B.CONTROL_VER AND IFNULL(A.DRAWING_VER, SPACE(0)) = IFNULL(C.DRAWING_VER, SPACE(0)))
    </update>

    <insert id="insertControlBarcodeRevision" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_BARCODE (BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, CONTROL_VER, DRAWING_VER)
        SELECT CONCAT('C', LPAD(NEXTVAL(SEQ_BARCODE), 9, '0')) AS BARCODE_NUM
          , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.CONTROL_VER, B.DRAWING_VER
        FROM TBL_CONTROL A, TBL_CONTROL_PART B
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND NOT EXISTS (SELECT * FROM  TBL_CONTROL_BARCODE C WHERE B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                AND A.CONTROL_VER = C.CONTROL_VER AND IFNULL(B.DRAWING_VER, SPACE(0)) = IFNULL(C.DRAWING_VER, SPACE(0)))
    </insert>

    <select id="selectControlCadBarcodeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ,
            (SELECT MAX(G.BARCODE_NUM) FROM TBL_CONTROL_BARCODE G WHERE B.CONTROL_SEQ = G.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ AND G.DEL_YN = 'N') AS BARCODE_NUM,
            IFNULL(A.CONTROL_VER, '0') AS CONTROL_VER, <!-- 작업지시번호 버전 -->
            IFNULL(B.DRAWING_VER, '0') AS DRAWING_VER, <!-- 도면번호 버전 -->
            IFNULL(SF_GET_COMP_NM(A.ORDER_COMP_CD), SPACE(0)) AS ORDER_COMP_NM, <!-- 발주업체 -->
            IFNULL(A.CONTROL_NUM, SPACE(0)) AS CONTROL_NUM, <!-- 작업지시번호 -->
            CASE WHEN B.PART_NUM IS NULL THEN IFNULL(A.CONTROL_NUM, SPACE(0)) ELSE CONCAT(IFNULL(A.CONTROL_NUM, SPACE(0)), ' #', B.PART_NUM) END AS CONTROL_NUM_PART, <!-- 작업지시번호 -->
            IFNULL(B.SIZE_TXT, SPACE(0)) AS SIZE_TXT, <!-- 규격 문자열 -->
            IFNULL(B.PART_NUM, SPACE(0)) AS PART_NUM, <!-- Part -->
            CASE WHEN A.TOTAL_SHEET IS NULL THEN SPACE(0) ELSE A.TOTAL_SHEET END AS TOTAL_SHEET, <!-- 총장 -->
            CASE WHEN B.SURFACE_TREAT IS NOT NULL AND B.MATERIAL_NOTE IS NOT NULL THEN
                     CONCAT(SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}), ', ', IFNULL(B.MATERIAL_NOTE, SPACE(0)))
                 WHEN B.SURFACE_TREAT IS NOT NULL AND B.MATERIAL_NOTE IS NULL THEN
                     SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE})
                 WHEN B.SURFACE_TREAT IS NULL AND B.MATERIAL_NOTE IS NOT NULL THEN
                    B.MATERIAL_NOTE
            END AS SURFACE_TREAT_NM, <!-- 표면처리 -->
            CASE WHEN C.REF_CD = 'Y'
                    THEN IFNULL(SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}), SPACE(0))
                 ELSE
                    IFNULL(SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0))
            END AS MATERIAL_NM, <!-- 재질의 표시여부에 따른 소재 종류 선택에 따른 표시 처리 -->
            IFNULL(SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_TYPE_NM, <!-- 재질 -->
            IFNULL(SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            IFNULL(B.WORK_TYPE,SPACE(0)) AS WORK_TYPE,
            IFNULL(SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM, <!-- 작업형태 -->
            CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴급' ELSE SPACE(0) END AS EMERGENCY_BARCODE_NM, <!-- 바코드 긴급 -->
            IFNULL(SF_GET_CODE_NM('1058', B.MATERIAL_FINISH_HEAT, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 열처리 -->
            IFNULL(SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION_NM, <!-- 주요검사품 -->
            IFNULL(B.PART_UNIT_QTY, 0) AS PART_UNIT_QTY,
            IFNULL(B.ADDITIONAL_QTY, 0) AS ADDITIONAL_QTY,
            (SELECT IFNULL(SUM(M.ORDER_QTY), 0) FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ) AS ORDER_QTY,
            IFNULL((SELECT IFNULL(SUM(M.REQUEST_QTY),0) FROM TBL_INSIDE_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ),0) AS STOCK_REQUEST_QTY,
            CONCAT(IFNULL(SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), 0), SPACE(0)) AS CONTROL_ORDER_QTY, <!-- 주문 수량 -->
            IFNULL(A.SAME_SIDE_YN,'N') AS SAME_SIDE_YN, <!-- 대칭 여부 -->
            IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1), 0)AS ORIGINAL_SIDE_QTY, <!-- 대칭_원칭 -->
            IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1), 0) AS OTHER_SIDE_QTY, <!-- 대칭_대칭 -->
            IFNULL(SF_GET_DATE_F(B.INNER_DUE_DT, 'MM', ''), SPACE(0)) AS INNER_DUE_DT, <!-- 가공납기 -->
            CASE WHEN B.WORK_TYPE = 'WTP040' AND B.INSIDE_STOCK_SEQ IS NOT NULL THEN (SELECT M.INSIDE_STOCK_NUM FROM TBL_INSIDE_STOCK M WHERE M.INSIDE_STOCK_SEQ = B.INSIDE_STOCK_SEQ)
            END AS INSIDE_STOCK_NUM,
            IFNULL((SELECT M.ITEM_NM FROM TBL_CONTROL_PART_ORDER_MAIN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ),SPACE(0)) AS ITEM_NM,
            (SELECT M.FILE_PATH FROM TBL_FILE M WHERE M.GFILE_SEQ = B.IMG_GFILE_SEQ) AS IMAGE_PATH,
            IFNULL((SELECT CASE WHEN COUNT(DISTINCT M.DRAWING_NUM) > 1 THEN 'Y' ELSE 'N' END FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ), 'N') AS MULTI_ORDER_YN
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                AND CONCAT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN
                    <foreach collection="selectControlLists" item="bean" index="index"  open="(" close=")" separator=",">
                        #{bean}
                    </foreach>
            LEFT OUTER JOIN TBL_CODE C ON B.MATERIAL_TYPE = C.CODE_CD AND C.HIGH_CD = '1035'
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
        ORDER BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
    </select>

    <select id="selectControlCadOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT C.ORDER_SEQ
            , IFNULL(C.REGIST_NUM, SPACE(0)) AS REGIST_NUM
            , IFNULL(C.ORDER_NUM, SPACE(0)) AS ORDER_NUM
            , IFNULL(C.DRAWING_NUM, SPACE(0)) AS DRAWING_NUM
--             , IFNULL(C.ORDER_QTY, SPACE(0)) AS ORDER_QTY
            , CASE WHEN C.ORDER_QTY > 9999 THEN 9999
                   ELSE IFNULL(C.ORDER_QTY,SPACE(0))
              END ORDER_QTY
            , IFNULL(SF_GET_DATE_F(C.ORDER_DUE_DT, 'MM', ''), SPACE(0)) AS ORDER_DUE_DT <!-- 납기 -->
            , IFNULL(C.ORIGINAL_SIDE_QTY,0) AS ORIGINAL_SIDE_QTY
            , IFNULL(C.OTHER_SIDE_QTY,0) AS OTHER_SIDE_QTY
        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C
        WHERE 1 = 1
            AND C.CONTROL_SEQ = B.CONTROL_SEQ
            AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            AND B.CONTROL_SEQ = A.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND C.CONTROL_SEQ = #{CONTROL_SEQ}
            AND C.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <update id="updateMonthCloseNegoAndNote" parameterType="java.util.HashMap">
        UPDATE TBL_MONTH_CLOSE
        SET
            FINAL_NEGO_AMT = #{FINAL_NEGO_AMT},
            CLOSE_NOTE = #{CLOSE_NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            COMP_CD = #{COMP_CD}
            AND CLOSE_MONTH = #{CLOSE_MONTH}
            AND ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND CLOSE_VER = #{CLOSE_VER}
    </update>

    <select id="selectControlDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.CONTROL_SEQ, B.PART_NUM, C.ORDER_NUM) AS ROW_NUM,
            <include refid="control"/>,
            <include refid="controlPart"/>,
            <include refid="controlPartOrder"/>,
            C.UNIT_FINAL_AMT * SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, C.ORDER_SEQ) AS FINAL_AMT <!-- 합계 금액 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_MONTH_CLOSE_ORDER D ON D.CONTROL_SEQ = C.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ AND D.COMP_CD = A.COMP_CD AND D.ORDER_COMP_CD = A.ORDER_COMP_CD
            INNER JOIN TBL_MONTH_CLOSE E ON E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER AND E.COMP_CD = D.COMP_CD AND E.ORDER_COMP_CD = D.ORDER_COMP_CD
                AND E.COMP_CD = #{COMP_CD}
                AND E.CLOSE_MONTH = #{CLOSE_MONTH}
                AND E.ORDER_COMP_CD = #{ORDER_COMP_CD}
                AND E.CLOSE_VER = #{CLOSE_VER}
        WHERE A.DEL_YN = 'N'
    </select>

    <insert id="createOutBarcode" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT_BARCODE (
            BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM, INSERT_ID)
        SELECT
            CONCAT('L',LPAD(NEXTVAL(SEQ_BARCODE),9,'0')) AS BARCODE_NUM, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, B.ORDER_SEQ, 1 AS PACKING_NUM, #{LOGIN_USER_ID}
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                AND B.ORDER_SEQ = ( SELECT Q.ORDER_SEQ
                                    FROM TBL_CONTROL_PART_ORDER Q
                                        INNER JOIN TBL_OUT_BARCODE R ON Q.CONTROL_SEQ = R.CONTROL_SEQ AND Q.CONTROL_DETAIL_SEQ = R.CONTROL_DETAIL_SEQ AND Q.ORDER_SEQ = R.ORDER_SEQ
                                    WHERE 1 = 1
                                        AND R.DEL_YN = 'N'
                                        AND Q.ORDER_SEQ = #{ORDER_SEQ})
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND A.CONTROL_NUM = #{CONTROL_NUM}
            AND B.ORDER_NUM = #{ORDER_NUM}
    </insert>

    <update id="updateOutsideConfirmDt" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
        SET
            A.OUTSIDE_CONFIRM_DT =  CASE
                                        WHEN B.CONTROL_STATUS = 'ORD001' AND A.OUTSIDE_YN = 'Y' THEN NOW()
                                        WHEN B.CONTROL_STATUS = 'ORD001' AND A.OUTSIDE_YN = 'N' THEN NULL
                                        WHEN B.CONTROL_STATUS = 'ORD002'                        THEN NULL
                                    END,
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND B.DEL_YN = 'N'
            AND EXISTS(SELECT * FROM TBL_CONTROL B
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS IN ('ORD001', 'ORD002') AND B.DEL_YN = 'N')
    </update>

    <update id="updateControlPartFromControlManage" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (PART_NUM != null and PART_NUM != '')">
                PART_NUM = #{PART_NUM},
            </if>
            <if test="ORDER_DRAWING_NUM != null and ORDER_DRAWING_NUM != ''">
                DRAWING_NUM = #{ORDER_DRAWING_NUM},
            </if>
            <if test="PREV_DRAWING_NUM != null and PREV_DRAWING_NUM != ''">
                PREV_DRAWING_NUM = #{PREV_DRAWING_NUM},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (WORK_TYPE != null and WORK_TYPE != '')">
                WORK_TYPE = #{WORK_TYPE},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (OUTSIDE_YN != null and OUTSIDE_YN != '')">
                OUTSIDE_YN = #{OUTSIDE_YN},
            </if>
            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                WORK_FACTORY = CASE WHEN #{WORK_FACTORY} = 'null' THEN NULL ELSE #{WORK_FACTORY} END,
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (MATERIAL_SUPPLY_YN != null and MATERIAL_SUPPLY_YN != '')">
                MATERIAL_SUPPLY_YN = IFNULL(#{MATERIAL_SUPPLY_YN}, 'N'),
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (INNER_DUE_DT != null and INNER_DUE_DT != '')">
                INNER_DUE_DT = DATE_FORMAT(#{INNER_DUE_DT}, '%Y%m%d'),
            </if>
            <if test="SIZE_TXT != null and SIZE_TXT != ''">
                SIZE_TXT = #{SIZE_TXT},
                SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
                SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
                SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
                SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
                SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
                SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            </if>
            <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
                MATERIAL_DETAIL = #{MATERIAL_DETAIL},
                MATERIAL_TYPE = SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}),
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                MATERIAL_KIND = #{MATERIAL_KIND},
            </if>
            <if test="SURFACE_TREAT != null and SURFACE_TREAT != ''">
                SURFACE_TREAT = #{SURFACE_TREAT},
            </if>
            <if test="MATERIAL_NOTE != null">
                MATERIAL_NOTE = #{MATERIAL_NOTE},
            </if>
            <if test="PART_UNIT_QTY != null and PART_UNIT_QTY != ''">
                PART_UNIT_QTY = #{PART_UNIT_QTY},
            </if>
            <if test="ADDITIONAL_QTY != null and ADDITIONAL_QTY != ''">
                ADDITIONAL_QTY = #{ADDITIONAL_QTY},
            </if>
            <if test="MATERIAL_FINISH_GRIND != null and MATERIAL_FINISH_GRIND != ''">
                MATERIAL_FINISH_GRIND = #{MATERIAL_FINISH_GRIND},
            </if>
            <if test="MATERIAL_FINISH_HEAT != null and MATERIAL_FINISH_HEAT != ''">
                MATERIAL_FINISH_HEAT = #{MATERIAL_FINISH_HEAT},
            </if>
            <if test="UNIT_MATERIAL_AMT != null and UNIT_MATERIAL_AMT != ''">
                UNIT_MATERIAL_AMT = #{UNIT_MATERIAL_AMT},
            </if>
            <if test="UNIT_MATERIAL_FINISH_GRIND_AMT != null and UNIT_MATERIAL_FINISH_GRIND_AMT != ''">
                UNIT_MATERIAL_FINISH_GRIND_AMT = #{UNIT_MATERIAL_FINISH_GRIND_AMT},
            </if>
            <if test="UNIT_MATERIAL_FINISH_HEAT_AMT != null and UNIT_MATERIAL_FINISH_HEAT_AMT != ''">
                UNIT_MATERIAL_FINISH_HEAT_AMT = #{UNIT_MATERIAL_FINISH_HEAT_AMT},
            </if>
            <if test="UNIT_SURFACE_AMT != null and UNIT_SURFACE_AMT != ''">
                UNIT_SURFACE_AMT = #{UNIT_SURFACE_AMT},
            </if>
            <if test="UNIT_PROCESS_AMT != null and UNIT_PROCESS_AMT != ''">
                UNIT_PROCESS_AMT = #{UNIT_PROCESS_AMT},
            </if>
            <if test="UNIT_ETC_AMT != null and UNIT_ETC_AMT != ''">
                UNIT_ETC_AMT = #{UNIT_ETC_AMT},
            </if>
            <if test="UNIT_AMT_NOTE != null">
                UNIT_AMT_NOTE = #{UNIT_AMT_NOTE},
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
                ETC_GFILE_SEQ = #{ETC_GFILE_SEQ},
            </if>
            OUTSIDE_HOPE_DUE_DT = CASE WHEN OUTSIDE_YN = 'Y' AND OUTSIDE_HOPE_DUE_DT IS NULL THEN DATE_FORMAT(DATE_SUB(INNER_DUE_DT, INTERVAL 1 DAY), '%Y%m%d') ELSE OUTSIDE_HOPE_DUE_DT END,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
        <choose>
            <when test="CONTROL_DETAIL_SEQ != null and CONTROL_DETAIL_SEQ != ''">
                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </when>
            <otherwise>
                AND CONTROL_DETAIL_SEQ = (
                    SELECT A.CONTROL_DETAIL_SEQ
                    FROM TBL_CONTROL_PART A
                    WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                    AND A.PART_NUM = #{PART_NUM}
                )
            </otherwise>
        </choose>
    </update>

    <update id="updateControlPartFromControlManage_old" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_NUM = #{PART_NUM},
            DRAWING_NUM = #{ORDER_DRAWING_NUM},
            PREV_DRAWING_NUM = #{PREV_DRAWING_NUM},
            WORK_TYPE = #{WORK_TYPE},
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (OUTSIDE_EDIT != null)">
                OUTSIDE_YN = #{OUTSIDE_YN},
            </if>
            WORK_FACTORY = CASE WHEN #{WORK_FACTORY} = 'null' THEN NULL ELSE #{WORK_FACTORY} END,
            MATERIAL_SUPPLY_YN = IFNULL(#{MATERIAL_SUPPLY_YN}, 'N'),
            INNER_DUE_DT = DATE_FORMAT(#{INNER_DUE_DT}, '%Y%m%d'),
            SIZE_TXT = #{SIZE_TXT},
            SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            MATERIAL_DETAIL = #{MATERIAL_DETAIL},
            MATERIAL_TYPE = SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}),
            MATERIAL_KIND = #{MATERIAL_KIND},
            SURFACE_TREAT = #{SURFACE_TREAT},
            MATERIAL_NOTE = #{MATERIAL_NOTE},
            PART_UNIT_QTY = #{PART_UNIT_QTY},
            ADDITIONAL_QTY = #{ADDITIONAL_QTY},
            MATERIAL_FINISH_GRIND = #{MATERIAL_FINISH_GRIND},
            MATERIAL_FINISH_HEAT = #{MATERIAL_FINISH_HEAT},
            UNIT_MATERIAL_AMT = #{UNIT_MATERIAL_AMT},
            UNIT_MATERIAL_FINISH_GRIND_AMT = #{UNIT_MATERIAL_FINISH_GRIND_AMT},
            UNIT_MATERIAL_FINISH_HEAT_AMT = #{UNIT_MATERIAL_FINISH_HEAT_AMT},
            UNIT_SURFACE_AMT = #{UNIT_SURFACE_AMT},
            UNIT_PROCESS_AMT = #{UNIT_PROCESS_AMT},
            UNIT_ETC_AMT = #{UNIT_ETC_AMT},
            UNIT_AMT_NOTE = #{UNIT_AMT_NOTE},
            ETC_GFILE_SEQ = #{ETC_GFILE_SEQ},
            OUTSIDE_HOPE_DUE_DT = CASE WHEN OUTSIDE_YN = 'Y' AND OUTSIDE_HOPE_DUE_DT IS NULL THEN DATE_FORMAT(DATE_SUB(INNER_DUE_DT, INTERVAL 1 DAY), '%Y%m%d') ELSE OUTSIDE_HOPE_DUE_DT END,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        <choose>
            <when test="CONTROL_DETAIL_SEQ != null and CONTROL_DETAIL_SEQ != ''">
                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </when>
            <otherwise>
                AND CONTROL_DETAIL_SEQ = (  SELECT A.CONTROL_DETAIL_SEQ
                FROM TBL_CONTROL_PART A
                WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                AND A.PART_NUM = #{PART_NUM})
            </otherwise>
        </choose>
    </update>

    <update id="updateControlPartFromCloseHistory" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET
            UNIT_FINAL_EST_AMT = REPLACE(#{UNIT_FINAL_EST_AMT, jdbcType=VARCHAR}, ',', SPACE(0)),
            UNIT_FINAL_AMT = REPLACE(#{UNIT_FINAL_AMT, jdbcType=VARCHAR}, ',', SPACE(0)),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>
    <update id="updateControlFromControlManage" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (CONTROL_NUM != null and CONTROL_NUM != '')">
                CONTROL_NUM = UPPER(#{CONTROL_NUM}),
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (COMP_CD != null and COMP_CD != '')">
                COMP_CD = #{COMP_CD},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (ORDER_COMP_CD != null and ORDER_COMP_CD != '')">
                ORDER_COMP_CD = #{ORDER_COMP_CD},
            </if>
            <if test="CONTROL_NOTE != null">
                NOTE = #{CONTROL_NOTE},
            </if>
            <if test="MAIN_INSPECTION != null and MAIN_INSPECTION != ''">
                MAIN_INSPECTION = #{MAIN_INSPECTION},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (EMERGENCY_YN != null and EMERGENCY_YN != '')">
                EMERGENCY_YN = IFNULL(#{EMERGENCY_YN}, 'N'),
            </if>
            <if test="PRICE_CONFIRM != null and PRICE_CONFIRM != ''">
                PRICE_CONFIRM = #{PRICE_CONFIRM},
            </if>
            <if test="(CONTROL_STATUS == null or CONTROL_STATUS == 'ORD002') and (SAME_SIDE_YN != null and SAME_SIDE_YN != '')">
                SAME_SIDE_YN = IFNULL(#{SAME_SIDE_YN}, 'N'),
            </if>
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlFromControlManage_old" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_NUM = UPPER(#{CONTROL_NUM}),
            COMP_CD = #{COMP_CD},
            ORDER_COMP_CD = #{ORDER_COMP_CD},
            NOTE = #{CONTROL_NOTE},
            MAIN_INSPECTION = #{MAIN_INSPECTION},
            EMERGENCY_YN = IFNULL(#{EMERGENCY_YN}, 'N'),
            TOTAL_SHEET = #{TOTAL_SHEET},
            PRICE_CONFIRM = #{PRICE_CONFIRM},
            SAME_SIDE_YN = IFNULL(#{SAME_SIDE_YN}, 'N'),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <select id="selectBusinessEmergencyList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        --  하단 그리드 2 (긴급주문 진행현황) -->
       SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
           , SF_GET_DATE_F(X.ORDER_DUE_DT,'YYYY','') AS ORDER_DUE_DT
           , X.ORDER_COMP_NM
           , X.IMG_GFILE_SEQ
           , X.CONTROL_PART_INFO
           , X.CONTROL_PART_QTY
           , CASE WHEN X.RETURN_QTY IS NOT NULL THEN X.RETURN_QTY ELSE X.CONTROL_PART_QTY END AS CONTROL_PART_QTY_INFO
--            , CONCAT(CASE WHEN X.RETURN_QTY IS NOT NULL THEN X.RETURN_QTY ELSE X.CONTROL_PART_QTY END,'ea') AS CONTROL_PART_QTY_INFO
       --     , CONCAT(X.CONTROL_PART_QTY,'ea') AS CONTROL_PART_QTY_INFO
           , X.PART_STATUS_NM
           , CASE WHEN X.RETURN_QTY IS NULL THEN '긴급' ELSE '반품' END AS TYPE_NM
           , X.CONTROL_PART_INFO AS CONTROL_NUM
           , X.CONTROL_VER
           , X.MATERIAL_DETAIL_NM
           , IFNULL(X.REGIST_NUM,SPACE(0)) AS REGIST_NUM
           , X.SIZE_TXT
           , X.DRAWING_NUM
       FROM (   --  출고일 없는경우 -->
               SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                   , B.IMG_GFILE_SEQ
                   , C.ORDER_DUE_DT
                   , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM
                   , SF_GET_CONTROL_PART_INFO(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO
                   , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY
                   , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                   , (SELECT
       					SUM(I.ERROR_QTY)
       				FROM TBL_INSPECT I
       				WHERE 1 = 1
       					AND I.CONTROL_SEQ = C.CONTROL_SEQ AND I.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND I.ORDER_SEQ = C.ORDER_SEQ
       					AND I.INSPECT_TYPE = '2'
       					AND I.RETURN_SETTLEMENT_DT IS NULL
       			   ) AS RETURN_QTY
                   , A.CONTROL_VER
                   , B.SIZE_TXT
                   , SF_GET_CODE_NM('1027',B.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                   , C.REGIST_NUM
                   , B.DRAWING_NUM
               FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C
               WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.PART_NUM IS NULL
                    AND B.WORK_TYPE NOT IN ('WTP050')   <!-- 21.03.30 작업형태 '파트'인것 제외 -->
--                     AND A.CONTROL_STATUS IN ('ORD001','ORD003')
                    AND (
                            (A.EMERGENCY_YN = 'Y' AND A.CONTROL_STATUS NOT IN ('ORD004') AND A.OUT_FINISH_DT IS NULL) <!-- 21.09.01  1) 미출고 2) 종료아님 3) 납기상관없음 -->
                    	OR
                    		(EXISTS (SELECT 1 FROM TBL_INSPECT D WHERE 1 = 1
        	            		AND D.CONTROL_SEQ = C.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND D.ORDER_SEQ = C.ORDER_SEQ
        						AND D.INSPECT_TYPE = '2'
        						AND D.RETURN_SETTLEMENT_DT IS NULL) <!-- 21.09.01 반품은 상태 상관없이, 반품에 대한 처리가 완료되지 않았으면 무조건 나와야함 -->
        					)
        			)
                    AND IFNULL(A.OUT_FINISH_STATUS, 'RLS030') NOT IN ('RLS010', 'RLS020')
           ) X
       ORDER BY CASE WHEN X.RETURN_QTY IS NULL THEN 1 ELSE 0 END, X.ORDER_DUE_DT, X.CONTROL_PART_INFO
    </select>

    <select id="selectBusinessOverOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 하단 그리드 3 (납기지연목록) -->
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
            , SF_GET_DATE_F(X.ORDER_DUE_DT,'YYYY','') AS ORDER_DUE_DT
            , X.ORDER_COMP_NM
            , X.IMG_GFILE_SEQ
            , X.CONTROL_PART_INFO
            , X.CONTROL_PART_QTY
            , X.CONTROL_PART_QTY AS CONTROL_PART_QTY_INFO
            , X.CONTROL_ORDER_QTY
--             , CONCAT(X.CONTROL_PART_QTY,'ea') AS CONTROL_PART_QTY_INFO
            , X.PART_STATUS_NM
            , X.CHARGE_USER_NM
            , X.CONTROL_PART_INFO AS CONTROL_NUM
            , X.CONTROL_VER
            , X.MATERIAL_DETAIL_NM
            , IFNULL(X.REGIST_NUM,SPACE(0)) AS REGIST_NUM
            , X.SIZE_TXT
            , X.DRAWING_NUM
        FROM (  <!-- 출고일 없는경우 -->
            SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
                , B.IMG_GFILE_SEQ
                , C.ORDER_DUE_DT
                , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM
                , SF_GET_CONTROL_PART_INFO(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO
                , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY
                , C.ORDER_QTY AS CONTROL_ORDER_QTY
                , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                , (SELECT M.USER_NM FROM TBL_USER M, TBL_COMPANY N WHERE M.USER_ID = N.CHARGE_USER_ID AND N.COMP_CD = A.ORDER_COMP_CD) AS CHARGE_USER_NM
                , A.CONTROL_VER
                , B.SIZE_TXT
                , SF_GET_CODE_NM('1027',B.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , C.REGIST_NUM
                , B.DRAWING_NUM
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE NOT IN ('WTP020') <!-- 21.03.30 작업형태 '파트'인것 제외, 21.08.27 조립제외 파트표기 -->
                INNER JOIN TBL_CONTROL_PART_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ
            WHERE A.DEL_YN = 'N'
                AND A.CONTROL_STATUS IN ('ORD001','ORD003')
                AND IFNULL(A.OUT_FINISH_STATUS, SPACE(0)) NOT IN ('RLS020') -- 폐기 제외 -->
                AND A.OUT_FINISH_DT IS NULL
                AND C.ORDER_DUE_DT <![CDATA[ < ]]> DATE_FORMAT(NOW(),'%Y%m%d')
                AND C.OUT_FINISH_DT IS NULL
        ) X
        ORDER BY X.ORDER_DUE_DT, X.CONTROL_PART_INFO
    </select>

    <select id="selectImgGfileSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT IMG_GFILE_SEQ
            , DXF_GFILE_SEQ
            , FILE_SEQ
            , TIME_PATH
            , FILE_PATH
            , ORGINAL_FILE_NM
            , FILE_NM
            , FILE_SIZE
            , INSERT_DT
            , ORDER_NUM
            , DRAWING_NUM
            , ORDER_QTY
        FROM (
            SELECT C.IMG_GFILE_SEQ, C.ORDER_SEQ, C.ORDER_NUM, C.DRAWING_NUM, C.ORDER_QTY
            FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C
            WHERE 1 = 1
                AND C.CONTROL_SEQ = B.CONTROL_SEQ
                AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.CONTROL_SEQ = A.CONTROL_SEQ
                AND A.DEL_YN = 'N'
                AND C.CONTROL_SEQ = #{CONTROL_SEQ}
                AND C.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ) X
        LEFT OUTER JOIN (
            SELECT
                A.GFILE_SEQ AS DXF_GFILE_SEQ, B.FILE_SEQ, B.TIME_PATH, B.FILE_PATH, REPLACE(B.ORGINAL_FILE_NM, CONCAT('.', B.FILE_EXT), SPACE(0)) AS ORGINAL_FILE_NM,
                REPLACE(B.FILE_NM, CONCAT('.', B.FILE_EXT), SPACE(0)) AS FILE_NM, B.FILE_SIZE, SF_GET_DATE_F(B.INSERT_DT, 'YYYY', '') AS INSERT_DT
            FROM TBL_FILE_GROUP A, TBL_FILE B
            WHERE A.GFILE_SEQ = B.GFILE_SEQ) Y ON Y.DXF_GFILE_SEQ = X.IMG_GFILE_SEQ
        GROUP BY DRAWING_NUM
        ORDER BY X.ORDER_SEQ
    </select>

    <select id="selectControlDrawingInfoList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.FILE_PATH
        FROM
            (
            SELECT A.GFILE_SEQ, B.FILE_PATH
            FROM TBL_FILE_GROUP A
                INNER JOIN TBL_FILE B ON A.GFILE_SEQ = B.GFILE_SEQ
            WHERE A.GFILE_SEQ ) X,
            (
            SELECT
                CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS DRAWING_NUM,
                CASE WHEN B.PART_NUM IS NULL THEN C.IMG_GFILE_SEQ ELSE B.IMG_GFILE_SEQ END AS IMG_GFILE_SEQ
            FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                AND CONCAT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN
                <foreach collection="selectControlLists" item="bean" index="index"  open="(" close=")" separator=",">
                    #{bean}
                </foreach>
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            WHERE A.DEL_YN = 'N'
            GROUP BY DRAWING_NUM) Y
        WHERE X.GFILE_SEQ = Y.IMG_GFILE_SEQ
    </select>
    <select id="selectOrderDrawingInfoList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.FILE_PATH
        FROM (
                 SELECT A.GFILE_SEQ, B.FILE_PATH
                 FROM TBL_FILE_GROUP A
                          INNER JOIN TBL_FILE B ON A.GFILE_SEQ = B.GFILE_SEQ
                 WHERE A.GFILE_SEQ
             ) X,
             (
                 SELECT A.DRAWING_NUM, A.IMG_GFILE_SEQ
                 FROM TBL_ORDER A
                 WHERE A.DEL_YN = 'N'
                   AND A.ORDER_SEQ  IN
                    <foreach collection="selectControlLists" item="bean" index="index"  open="(" close=")" separator=",">
                        #{bean}
                    </foreach>
                 GROUP BY A.DRAWING_NUM
             ) Y
        WHERE X.GFILE_SEQ = Y.IMG_GFILE_SEQ
    </select>

    <insert id="createPartOrderToMerge" parameterType="java.util.HashMap" >
        <selectKey keyProperty="NEXT_ORDER_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_CONTROL_PART_ORDER) FROM DUAL
        </selectKey>
        INSERT INTO TBL_CONTROL_PART_ORDER (
            CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , ORDER_SEQ
            , ORDER_NUM
            , ORDER_QTY
            , ORDER_DUE_DT
            , DELIVERY_DT
            , PACKING_CNT
            , OUT_FINISH_DT
            , PROJECT_NM
            , MODULE_NM
            , DELIVERY_COMP_NM
            , LABEL_NOTE
            , ORDER_STAFF_SEQ
            , DESIGNER_NM
            , DRAWING_NUM
            , DWG_GFILE_SEQ
            , DXF_GFILE_SEQ
            , PDF_GFILE_SEQ
            , IMG_GFILE_SEQ
            , VIEW_GFILE_SEQ
            , ITEM_NM
            , ORIGINAL_SIDE_QTY
            , OTHER_SIDE_QTY
            , UNIT_FINAL_EST_AMT
            , UNIT_FINAL_AMT
            , ORDER_BARCODE_NUM
            , INSERT_ID
        )
        SELECT #{STANDARD_CONTROL_SEQ}
            , #{STANDARD_CONTROL_DETAIL_SEQ}
            , #{NEXT_ORDER_SEQ}
            , ORDER_NUM
            , ORDER_QTY
            , ORDER_DUE_DT
            , DELIVERY_DT
            , PACKING_CNT
            , OUT_FINISH_DT
            , PROJECT_NM
            , MODULE_NM
            , DELIVERY_COMP_NM
            , LABEL_NOTE
            , ORDER_STAFF_SEQ
            , DESIGNER_NM
            , DRAWING_NUM
            , DWG_GFILE_SEQ
            , DXF_GFILE_SEQ
            , PDF_GFILE_SEQ
            , IMG_GFILE_SEQ
            , VIEW_GFILE_SEQ
            , ITEM_NM
            , ORIGINAL_SIDE_QTY
            , OTHER_SIDE_QTY
            , UNIT_FINAL_EST_AMT
            , UNIT_FINAL_AMT
            , CONCAT('O',LPAD(NEXTVAL(SEQ_ORDER_BARCODE),9,'0'))
            , #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART_ORDER
        WHERE ORDER_SEQ = #{ORDER_SEQ}
        AND NOT EXISTS (SELECT *
                        FROM TBL_CONTROL_PART_ORDER M
                        WHERE M.CONTROL_SEQ = #{STANDARD_CONTROL_SEQ}
                            AND M.CONTROL_DETAIL_SEQ = #{STANDARD_CONTROL_DETAIL_SEQ}
                            <choose>
                                <when test="PART_NUM != null and PART_NUM != ''">
                                    AND M.ORDER_NUM = #{ORDER_NUM}
                                </when>
                                <otherwise>
                                    AND M.ORDER_NUM IS NULL
                                </otherwise>
                            </choose>
                            <choose>
                                <when test="ORDER_DRAWING_NUM != null and ORDER_DRAWING_NUM != ''">
                                    AND M.DRAWING_NUM = #{ORDER_DRAWING_NUM}
                                </when>
                                <otherwise>
                                    AND M.DRAWING_NUM IS NULL
                                </otherwise>
                            </choose>
                        )
    </insert>

    <insert id="createOutBarcodeToMerge" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUT_BARCODE (
            BARCODE_NUM
            , CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , ORDER_SEQ
            , PACKING_NUM
            , INSERT_ID
        )
        SELECT
            CONCAT('L', LPAD(NEXTVAL(SEQ_BARCODE), 9, '0')) AS BARCODE_NUM
            , B.CONTROL_SEQ
            , B.CONTROL_DETAIL_SEQ
            , B.ORDER_SEQ
            , B.PACKING_CNT
            , #{LOGIN_USER_ID}
        FROM TBL_CONTROL A
            , TBL_CONTROL_PART_ORDER B
        WHERE B.CONTROL_SEQ = A.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND B.ORDER_SEQ = #{NEXT_ORDER_SEQ}
    </insert>

    <select id="selectCheckControlDuplicate" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS (	SELECT *
                        FROM TBL_CONTROL
                        WHERE DEL_YN = 'N'
                            AND CONTROL_NUM = #{CONTROL_NUM}
                      )
    </select>
    <select id="selectCheckRegistNumDuplicate" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS (	SELECT *
                       FROM TBL_CONTROL A, TBL_CONTROL_PART_ORDER B
                       WHERE B.REGIST_NUM = #{REGIST_NUM}
                           AND A.CONTROL_SEQ = B.CONTROL_SEQ
                           AND A.DEL_YN = 'N'
                   )
    </select>
    <select id="selectProcessingRequirementsBasicInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CONTROL_NUM
            , B.CONTROL_SEQ AS SEQ1
            , B.CONTROL_DETAIL_SEQ AS SEQ2
            , IFNULL(C.DRAWING_NUM, B.DRAWING_NUM) AS DRAWING_NUM
            , IFNULL(C.IMG_GFILE_SEQ, B.IMG_GFILE_SEQ) AS IMG_GFILE_SEQ
            , SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
            , B.SIZE_TXT
            , D.SIZE_LEVEL <!-- 규격 Level -->
            , FORMAT(D.UNIT_BASIC_AMT, 0) AS UNIT_BASIC_AMT <!-- 기본가공비 -->
            , (	SELECT FORMAT(SUM(P.PROCESS_CNT * N.UNIT_AMT) + D.UNIT_BASIC_AMT, 0)
                FROM TBL_PROCESS_FACTOR M
                    INNER JOIN TBL_CALC_PROCESS_FACTOR N ON N.FACTOR_CD = M.FACTOR_CD
                    INNER JOIN TBL_CALC_PROCESS O ON O.CALC_SEQ = N.CALC_SEQ
                    INNER JOIN TBL_CONTROL_PART_PROCESS P ON P.FACTOR_CD = M.FACTOR_CD
                WHERE O.CALC_SEQ = SF_GET_CALC_PROCESS_SEQ('CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
                    AND P.CONTROL_SEQ = #{CONTROL_SEQ}
                    AND P.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} ) AS TOTAL_PROCESSING_COST <!-- 총가공비 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN TBL_CALC_PROCESS D ON CALC_SEQ = SF_GET_CALC_PROCESS_SEQ('CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
        WHERE A.DEL_YN = 'N'
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectProcessingRequirementsInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER() AS ROW_NUM
            , B.CALC_SEQ
            , A.GROUP_CD
            , A.FACTOR_CD
            , A.LEVEL_1
            , A.LEVEL_2
            , B.UNIT_AMT
            , SUM(D.PROCESS_CNT) AS PROCESS_CNT
            , SUM(B.UNIT_AMT * D.PROCESS_CNT) AS TOTAL
        FROM TBL_PROCESS_FACTOR A
            INNER JOIN TBL_CALC_PROCESS_FACTOR B ON B.FACTOR_CD = A.FACTOR_CD
            INNER JOIN TBL_CALC_PROCESS C ON C.CALC_SEQ = B.CALC_SEQ
                AND C.CALC_SEQ = SF_GET_CALC_PROCESS_SEQ(#{TYPE}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
            LEFT OUTER JOIN TBL_CONTROL_PART_PROCESS D ON D.FACTOR_CD = A.FACTOR_CD
                AND D.CONTROL_SEQ = #{CONTROL_SEQ}
                AND D.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        GROUP BY A.FACTOR_CD WITH ROLLUP
    </select>

    <insert id="insertControlPartProcess" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PART_PROCESS (
            CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , FACTOR_CD
            , PROCESS_CNT
            , INSERT_DT
            , INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ}
            , #{CONTROL_DETAIL_SEQ}
            , #{FACTOR_CD}
            , #{PROCESS_CNT}
            , NOW()
            , NULL
        )
        ON DUPLICATE KEY UPDATE
            PROCESS_CNT = #{PROCESS_CNT}
	        , UPDATE_DT = NOW()
	        , UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateControlAutomaticQuote" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            UNIT_MATERIAL_AUTO_AMT = SF_GET_CALC_MATERIAL_AMT('CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
            , UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT = SF_GET_CALC_MATERIAL_FINISH_AMT('GRIND', 'CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
            , UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT = SF_GET_CALC_MATERIAL_FINISH_AMT('HEAT', 'CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
            , UNIT_SURFACE_AUTO_AMT = SF_GET_CALC_SURFACE_AMT('CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
            , UNIT_PROCESS_AUTO_AMT = SF_GET_CALC_PROCESS_AMT('CONTROL', #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ})
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectControlSalesCadBarcodeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM
            , A.PROJECT_NM
            , A.MODULE_NM
            , A.DRAWING_NUM
            , A.REGIST_NUM
            , A.ORDER_NUM
            , A.ITEM_NM
            , A.SIZE_TXT
            , SF_GET_CODE_NM('1039', A.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM <!-- 표면처리 -->
            , SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM <!-- 작업 형태 -->
            , SF_GET_CODE_NM('1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM <!-- 재질 -->
            , CAST(IFNULL(A.ORDER_QTY, 0) AS CHAR) AS ORDER_QTY
            , A.SAME_SIDE_YN
            , CASE
                WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT('(', IFNULL(A.ORIGINAL_SIDE_QTY,0), ',', IFNULL(A.OTHER_SIDE_QTY,0), ')')
              END AS SIDE_QTY
            , SF_GET_DATE_F(B.INNER_DUE_DT, '', '') AS INNER_DUE_DT
            , SF_GET_DATE_F(A.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT
            , A.ORDER_BARCODE_NUM
            , (SELECT M.FILE_PATH FROM TBL_FILE M WHERE M.GFILE_SEQ = A.IMG_GFILE_SEQ) AS IMAGE_PATH
            , GROUP_CONCAT(B.CONTROL_NUM SEPARATOR '\n') AS CONTROL_NUM
        FROM TBL_ORDER A
        LEFT OUTER JOIN (
            SELECT X.ORDER_SEQ, Y.CONTROL_NUM, Z.INNER_DUE_DT
            FROM TBL_CONTROL_PART_ORDER X
                INNER JOIN TBL_CONTROL Y ON X.CONTROL_SEQ = Y.CONTROL_SEQ AND Y.DEL_YN = 'N'
                INNER JOIN TBL_CONTROL_PART Z ON Y.CONTROL_SEQ = Z.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
        ) B ON B.ORDER_SEQ = A.ORDER_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.ORDER_SEQ IN
            <foreach collection="selectOrderLists" item="bean" index="index"  open="(" close=")" separator=",">
                #{bean}
            </foreach>
        GROUP BY A.ORDER_SEQ
        ORDER BY A.ORDER_SEQ;
    </select>
    <select id="selectControlSalesCadBarcodeList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CONTROL_SEQ
            , B.CONTROL_DETAIL_SEQ
            , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM
            , C.PROJECT_NM
            , C.MODULE_NM
            , C.DRAWING_NUM
            , IFNULL(C.REGIST_NUM,SPACE(0)) AS REGIST_NUM
            , C.ORDER_NUM
            , C.ITEM_NM
            , B.SIZE_TXT
            , SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM <!-- 표면처리 -->
            , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM <!-- 작업 형태 -->
            , SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM <!-- 재질 -->
            , CAST(IFNULL(C.ORDER_QTY, 0) AS CHAR) AS ORDER_QTY
            , A.SAME_SIDE_YN
            , CASE
                  WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT('(', IFNULL(IFNULL(C.ORIGINAL_SIDE_QTY,0) * IFNULL(B.PART_UNIT_QTY, 1), 0), ',', IFNULL(IFNULL(C.OTHER_SIDE_QTY,0) * IFNULL(B.PART_UNIT_QTY, 1), 0), ')')
              END AS SIDE_QTY
            , SF_GET_DATE_F(B.INNER_DUE_DT, '', '') AS INNER_DUE_DT
            , SF_GET_DATE_F(C.ORDER_DUE_DT, '', '') AS ORDER_DUE_DT
            , C.ORDER_BARCODE_NUM
            , A.CONTROL_NUM
            , A.TOTAL_SHEET
            , (SELECT M.FILE_PATH FROM TBL_FILE M WHERE M.GFILE_SEQ = C.IMG_GFILE_SEQ) AS IMAGE_PATH
        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C
        WHERE C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            AND B.CONTROL_SEQ = A.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND CONCAT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN
                <foreach collection="selectControlLists" item="bean" index="index"  open="(" close=")" separator=",">
                    #{bean}
                </foreach>
        ORDER BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
    </select>

    <update id="updateControlStatusFromMonthClose" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_STATUS = #{CONTROL_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND NOT EXISTS (    SELECT 1
                                FROM TBL_CONTROL_PART_ORDER M
                                        LEFT OUTER JOIN TBL_MONTH_CLOSE_ORDER N ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = N.ORDER_SEQ
                                WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
                                    AND N.COMP_CD IS NULL
                            )
    </update>
    <update id="updateOrderStatusFromMonthClose" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            ORDER_STATUS = #{ORDER_STATUS},
            ORDER_STATUS_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW()
        WHERE ORDER_SEQ = #{ORDER_SEQ}
            AND NOT EXISTS (
                SELECT 1
                FROM TBL_ORDER M
                    LEFT OUTER JOIN TBL_MONTH_CLOSE_ORDER N ON M.ORDER_SEQ = N.ORDER_SEQ
                WHERE M.ORDER_SEQ = #{ORDER_SEQ}
                  AND N.COMP_CD IS NULL
            )
    </update>
    <insert id="createOrderProgressFromMonthClose" parameterType="java.util.HashMap">
        INSERT INTO TBL_ORDER_PROGRESS (
                ORDER_SEQ,
                SEQ,
                ORDER_STATUS,
                STATUS_DT,
                INSERT_ID
        )
        SELECT #{ORDER_SEQ},
               NEXTVAL(SEQ_ORDER_PROGRESS),
               #{ORDER_STATUS},
               NOW(),
               #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (
                SELECT 1
                FROM TBL_ORDER M
                         LEFT OUTER JOIN TBL_MONTH_CLOSE_ORDER N ON M.ORDER_SEQ = N.ORDER_SEQ
                WHERE M.ORDER_SEQ = #{ORDER_SEQ}
                  AND N.COMP_CD IS NULL
        )
    </insert>

    <insert id="createControlProgressFromMonthClose" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PROGRESS (
                    CONTROL_SEQ,
                    SEQ,
                    ORDER_STATUS,
                    STATUS_DT,
                    INSERT_ID )
        SELECT #{CONTROL_SEQ},
                NEXTVAL(SEQ_CONTROL_PROGRESS),
                #{CONTROL_STATUS},
                NOW(),
                #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (    SELECT 1
                                FROM TBL_CONTROL_PART_ORDER M
                                        LEFT OUTER JOIN TBL_MONTH_CLOSE_ORDER N ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = N.ORDER_SEQ
                                WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
                                    AND N.COMP_CD IS NULL
                            )
    </insert>

    <delete id="deleteControlPartOrder" parameterType="java.util.HashMap">
        DELETE FROM TBL_CONTROL_PART_ORDER
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </delete>

    <update id="updateControlStatusFromMonthCloseCancel" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_STATUS = #{CONTROL_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND NOT EXISTS (    SELECT 1
                                FROM TBL_CONTROL_PART_ORDER M
                                    INNER JOIN TBL_MONTH_CLOSE_ORDER N ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = N.ORDER_SEQ
                                WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
           )
    </update>
    <update id="updateOrderStatusFromMonthCloseCancel" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            ORDER_STATUS = #{ORDER_STATUS},
            ORDER_STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
            AND NOT EXISTS (
                SELECT 1
                FROM TBL_ORDER M
                    INNER JOIN TBL_MONTH_CLOSE_ORDER N ON M.ORDER_SEQ = N.ORDER_SEQ
                WHERE M.ORDER_SEQ = #{ORDER_SEQ}
            )
    </update>
    <insert id="createOrderProgressFromMonthCloseCancel" parameterType="java.util.HashMap">
        INSERT INTO TBL_ORDER_PROGRESS (
            ORDER_SEQ,
            SEQ,
            ORDER_STATUS,
            STATUS_DT,
            INSERT_ID
        )
        SELECT #{ORDER_SEQ},
               NEXTVAL(SEQ_ORDER_PROGRESS),
               #{ORDER_STATUS},
               NOW(),
               #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (
                SELECT 1
                FROM TBL_ORDER M
                    INNER JOIN TBL_MONTH_CLOSE_ORDER N ON M.ORDER_SEQ = N.ORDER_SEQ
                WHERE M.ORDER_SEQ = #{ORDER_SEQ}
        )
    </insert>

    <insert id="createControlProgressFromMonthCloseCancel" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PROGRESS (
                    CONTROL_SEQ,
                    SEQ,
                    ORDER_STATUS,
                    STATUS_DT,
                    INSERT_ID )
        SELECT #{CONTROL_SEQ},
                NEXTVAL(SEQ_CONTROL_PROGRESS),
                #{CONTROL_STATUS},
                NOW(),
                #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (  SELECT 1
                            FROM TBL_CONTROL_PART_ORDER M
                                INNER JOIN TBL_MONTH_CLOSE_ORDER N ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = N.ORDER_SEQ
                            WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
                         )
    </insert>
    <select id="selectMatchStockList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT IFNULL(Z.RNUM,SPACE(0)) AS RNUM,
            ROW_NUMBER() OVER(ORDER BY Z.CONTROL_NUM, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.SORT, Z.INSIDE_STOCK_NUM) AS RNUM_SUB,
            Z.CONTROL_NUM, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.SIZE_TXT, Z.MATERIAL_DETAIL, Z.MATERIAL_DETAIL_NM, '' AS CHECK_BOX,
            IFNULL(Z.INSIDE_OUT_SEQ,SPACE(0)) AS INSIDE_OUT_SEQ,
            SF_GET_CONTROL_PART_INFO(Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO,
            Z.ORDER_QTY, Z.INSIDE_STOCK_NUM, Z.SORT, Z.OUT_QTY, DATE_FORMAT(Z.OUT_DT, '%Y/%m/%d') AS OUT_DT, IFNULL(Z.OUT_STATUS,'OUT001') AS OUT_STATUS,
            Z.INSIDE_STOCK_REQUEST_QTY, Z.CURR_QTY, Z.INSIDE_STOCK_PROCESS_QTY, Z.REQUEST_QTY, IFNULL(Z.IMG_GFILE_SEQ,SPACE(0)) AS IMG_GFILE_SEQ, Z.INSIDE_STOCK_SEQ
        FROM (
                 SELECT ROW_NUMBER() OVER(ORDER BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS RNUM, A.CONTROL_NUM, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, B.SIZE_TXT, B.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                        SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY,
                        '' AS INSIDE_STOCK_NUM, 1 AS SORT, SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS REQUEST_QTY, '' AS OUT_QTY, '' AS OUT_DT, '' AS OUT_STATUS,
                        '' AS INSIDE_STOCK_REQUEST_QTY, '' AS CURR_QTY, '' AS INSIDE_STOCK_PROCESS_QTY, B.IMG_GFILE_SEQ, '' AS INSIDE_OUT_SEQ, '' AS INSIDE_STOCK_SEQ
                 FROM TBL_CONTROL A
                          INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                 WHERE 1=1
                    <choose>
                        <when test="CONTROL_SEQ != '' and CONTROL_SEQ != null">
                            AND A.CONTROL_SEQ IN (${CONTROL_SEQ})
                        </when>
                        <otherwise>
                            AND A.CONTROL_SEQ = ''
                        </otherwise>
                    </choose>
                    AND A.DEL_YN = 'N'
                 GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                 UNION ALL
                 SELECT '' AS RNUM, A.CONTROL_NUM, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, B.SIZE_TXT, B.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, 'KO') AS MATERIAL_DETAIL_NM, '' AS ORDER_QTY,
                     D.INSIDE_STOCK_NUM, 2 AS SORT, E.REQUEST_QTY, E.OUT_QTY, E.OUT_DT, E.OUT_STATUS,
                     (SELECT IFNULL(SUM(H.REQUEST_QTY),0) FROM TBL_INSIDE_OUT H WHERE H.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ AND H.OUT_STATUS = 'OUT001') AS INSIDE_STOCK_REQUEST_QTY,
                     (SELECT IFNULL(SUM(H.IN_QTY),0) FROM TBL_INSIDE_IN H WHERE H.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ) - (SELECT IFNULL(SUM(I.OUT_QTY),0) FROM TBL_INSIDE_OUT I WHERE I.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ AND I.OUT_STATUS = 'OUT002') AS CURR_QTY,
                     (
                        SELECT SUM(T.ORDER_QTY)
                        FROM TBL_CONTROL_PART X
                            INNER JOIN TBL_CONTROL Y ON X.CONTROL_SEQ = Y.CONTROL_SEQ AND Y.DEL_YN = 'N' AND Y.OUT_FINISH_DT IS NULL
                            INNER JOIN TBL_CONTROL_PART_ORDER T ON T.CONTROL_SEQ = X.CONTROL_SEQ AND T.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                            INNER JOIN TBL_INSIDE_STOCK Z ON X.INSIDE_STOCK_SEQ = Z.INSIDE_STOCK_SEQ
                            LEFT OUTER JOIN TBL_POP Q ON Q.CONTROL_SEQ = X.CONTROL_SEQ AND Q.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                AND Q.POP_SEQ = (
                                    SELECT MAX(M.POP_SEQ)
                                    FROM TBL_POP M
                                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                        AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                )
                        WHERE 1=1
                            AND Z.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ
                            AND (
                                EXISTS (SELECT 1 FROM TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001')
                                OR (
                                    EXISTS(
                                        SELECT 1 FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    )
                                )
                            )
                     ) AS INSIDE_STOCK_PROCESS_QTY,
                     D.IMG_GFILE_SEQ, E.INSIDE_OUT_SEQ, D.INSIDE_STOCK_SEQ
                 FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    INNER JOIN TBL_INSIDE_STOCK D ON CASE WHEN B.MATERIAL_TYPE IS NULL THEN D.SIZE_TXT = B.SIZE_TXT
                                                          ELSE D.MATERIAL_TYPE = B.MATERIAL_TYPE AND B.SIZE_TXT = D.SIZE_TXT END
                    INNER JOIN TBL_INSIDE_OUT E ON D.INSIDE_STOCK_SEQ = E.INSIDE_STOCK_SEQ AND E.CONTROL_SEQ = B.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                 WHERE 1=1
                    <choose>
                        <when test="CONTROL_SEQ != '' and CONTROL_SEQ != null">
                            AND A.CONTROL_SEQ IN (${CONTROL_SEQ})
                        </when>
                        <otherwise>
                            AND A.CONTROL_SEQ = ''
                        </otherwise>
                    </choose>
                    AND A.DEL_YN = 'N'
                 GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, D.INSIDE_STOCK_NUM
                 UNION ALL
                 SELECT '' AS RNUM, A.CONTROL_NUM, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, B.SIZE_TXT, D.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', D.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM, '' AS ORDER_QTY,
                        D.INSIDE_STOCK_NUM, 2 AS SORT, '' AS REQUEST_QTY, '' AS OUT_QTY, '' AS OUT_DT, '' AS OUT_STATUS,
                        (SELECT IFNULL(SUM(H.REQUEST_QTY),0) FROM TBL_INSIDE_OUT H WHERE H.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ AND H.OUT_STATUS = 'OUT001') AS INSIDE_STOCK_REQUEST_QTY,
                        (SELECT IFNULL(SUM(H.IN_QTY),0) FROM TBL_INSIDE_IN H WHERE H.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ) - (SELECT IFNULL(SUM(I.OUT_QTY),0) FROM TBL_INSIDE_OUT I WHERE I.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ AND I.OUT_STATUS = 'OUT002') AS CURR_QTY,
                        (
                            SELECT SUM(T.ORDER_QTY)
                            FROM TBL_CONTROL_PART X
                                INNER JOIN TBL_CONTROL Y ON X.CONTROL_SEQ = Y.CONTROL_SEQ AND Y.DEL_YN = 'N' AND Y.OUT_FINISH_DT IS NULL
                                INNER JOIN TBL_CONTROL_PART_ORDER T ON T.CONTROL_SEQ = X.CONTROL_SEQ AND T.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                INNER JOIN TBL_INSIDE_STOCK Z ON X.INSIDE_STOCK_SEQ = Z.INSIDE_STOCK_SEQ
                                LEFT OUTER JOIN TBL_POP Q ON Q.CONTROL_SEQ = X.CONTROL_SEQ AND Q.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    AND Q.POP_SEQ = (
                                        SELECT MAX(M.POP_SEQ)
                                        FROM TBL_POP M
                                        WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                            AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    )
                            WHERE 1=1
                                AND Z.INSIDE_STOCK_SEQ = D.INSIDE_STOCK_SEQ
                                AND (
                                    EXISTS (SELECT 1 FROM TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001')
                                    OR (
                                        EXISTS(
                                            SELECT 1 FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                        )
                                    )
                                )
                        ) AS INSIDE_STOCK_PROCESS_QTY,
                        D.IMG_GFILE_SEQ, '' AS INSIDE_OUT_SEQ, D.INSIDE_STOCK_SEQ
                 FROM TBL_CONTROL A
                          INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                          INNER JOIN TBL_INSIDE_STOCK D ON CASE WHEN B.MATERIAL_TYPE IS NULL THEN D.SIZE_TXT = B.SIZE_TXT
                                                                ELSE D.MATERIAL_TYPE = B.MATERIAL_TYPE AND B.SIZE_TXT = D.SIZE_TXT END
                WHERE 1=1
                   <choose>
                       <when test="CONTROL_SEQ != '' and CONTROL_SEQ != null">
                           AND A.CONTROL_SEQ IN (${CONTROL_SEQ})
                       </when>
                        <otherwise>
                            AND A.CONTROL_SEQ = ''
                        </otherwise>
                   </choose>
                    AND A.DEL_YN = 'N'
                    AND NOT EXISTS (
                        SELECT 1
                        FROM TBL_INSIDE_OUT Y
                        WHERE Y.CONTROL_SEQ = B.CONTROL_SEQ AND Y.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    )
                 GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, D.INSIDE_STOCK_NUM
             ) Z
        ORDER BY Z.CONTROL_NUM, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.SORT, Z.INSIDE_STOCK_NUM;
    </select>
    <insert id="insertRequestStock" parameterType="java.util.HashMap">
        INSERT INTO TBL_INSIDE_OUT (
            INSIDE_OUT_SEQ,
            INSIDE_STOCK_SEQ,
            INSIDE_STOCK_NUM,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            OUT_STATUS,
            REQUEST_QTY,
            REQUEST_DT,
            REQUEST_ID,
            INSERT_ID
        )
        VALUES (
           NEXTVAL(SEQ_INSIDE_OUT),
           #{INSIDE_STOCK_SEQ},
           #{INSIDE_STOCK_NUM},
           #{CONTROL_SEQ},
           #{CONTROL_DETAIL_SEQ},
           'OUT001',
           IFNULL(#{REQUEST_QTY},0),
           now(),
           #{LOGIN_USER_ID},
           #{LOGIN_USER_ID}
       )
    </insert>
    <update id="updateRequestStock" parameterType="java.util.HashMap">
        UPDATE TBL_INSIDE_OUT
        SET REQUEST_QTY = #{REQUEST_QTY},
            UPDATE_DT = now(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE INSIDE_OUT_SEQ = #{INSIDE_OUT_SEQ}
    </update>
    <select id="selectRequestStockStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.OUT_STATUS
        FROM TBL_INSIDE_OUT A
        WHERE A.INSIDE_OUT_SEQ = #{INSIDE_OUT_SEQ}
    </select>
        <delete id="deleteRequestStock" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSIDE_OUT
        WHERE INSIDE_OUT_SEQ = #{INSIDE_OUT_SEQ}
    </delete>

    <select id="selectOrderManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.REGIST_NUM, A.ORDER_NUM, A.ORDER_SEQ) AS ROW_NUM,
            A.ORDER_SEQ,
            A.ORDER_STATUS AS ORDER_STATUS,
            IFNULL(SF_GET_CODE_NM('1091', A.ORDER_STATUS, #{LOGIN_LOCALE}), SPACE(0)) AS ORDER_STATUS_NM,
            IFNULL(SF_GET_DATE_F(A.ORDER_STATUS_DT, '', ''),SPACE(0)) AS ORDER_STATUS_DT,
            A.PRICE_CONFIRM, A.COMP_CD,
            A.ORDER_COMP_CD, A.NOTE,
            A.REGIST_NUM, A.DRAWING_NUM,
            A.IMG_GFILE_SEQ, A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ,
            A.ORDER_NUM, A.ORDER_QTY,
            IFNULL(A.ORIGINAL_SIDE_QTY,SPACE(0)) AS ORIGINAL_SIDE_QTY,
            IFNULL(A.OTHER_SIDE_QTY,SPACE(0)) AS OTHER_SIDE_QTY,
            SF_GET_DATE_F(A.ORDER_DUE_DT,'','') AS ORDER_DUE_DT, A.WORK_TYPE,
            A.MATERIAL_SUPPLY_YN, A.MAIN_INSPECTION,
            IFNULL(SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION_NM,
            A.SAME_SIDE_YN, A.SIZE_TXT,
            SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            A.MATERIAL_DETAIL, A.MATERIAL_KIND, A.MATERIAL_TYPE,
            A.SURFACE_TREAT, A.MATERIAL_FINISH_GRIND_YN,
            A.MATERIAL_FINISH_HEAT_YN, SF_GET_DATE_F(A.DELIVERY_DT,'','') AS DELIVERY_DT,
            CASE WHEN A.MATERIAL_FINISH_GRIND_YN = 'Y' THEN 'MATERIAL_FINISH_GRIND_YN'
                 WHEN A.MATERIAL_FINISH_HEAT_YN = 'Y' THEN 'MATERIAL_FINISH_HEAT_YN'
            END AS SPECIAL_TREATMENT,
            A.UNIT_FINAL_EST_AMT,A.UNIT_FINAL_AMT,
            A.PREV_DRAWING_NUM,
            A.PROJECT_NM, A.MODULE_NM,
            A.DELIVERY_COMP_NM, A.LABEL_NOTE,
            A.ITEM_NM, A.ORDER_STAFF_SEQ,
            B.ORDER_SEQ, B.CONTROL_NUM,
            (SELECT Q.INVOICE_NUM FROM TBL_INVOICE_DETAIL Q WHERE Q.ORDER_SEQ = A.ORDER_SEQ) AS INVOICE_NUM,
            B.DRAWING_VER, B.DRAWING_UP_DT, B.DRAWING_VER AS CONTROL_VER,
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ,
            B.PART_STATUS, A.UNIT_MATERIAL_AUTO_AMT,
            A.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT, A.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT,
            A.UNIT_SURFACE_AUTO_AMT, A.UNIT_PROCESS_AUTO_AMT,
            A.UNIT_ETC_AMT, A.UNIT_AMT_NOTE,
            (SELECT SUM(M.OUT_QTY) FROM TBL_OUT M
             WHERE M.ORDER_SEQ = A.ORDER_SEQ
             GROUP BY M.ORDER_SEQ
            ) AS OUT_QTY,
            IFNULL(SF_GET_DATE_F(A.OUT_FINISH_DT, '', 'M'),SPACE(0)) AS OUT_FINISH_DT,
            (A.UNIT_FINAL_AMT * A.ORDER_QTY) AS FINAL_TOTAL_AMT,
            SF_GET_DATE_F(A.INSERT_DT , '', 'M') AS ORDER_INSERT_DT,
            (IFNULL(A.UNIT_MATERIAL_AUTO_AMT, 0) + IFNULL(A.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT,0) + IFNULL(A.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT,0) + IFNULL(A.UNIT_SURFACE_AUTO_AMT ,0) + IFNULL(A.UNIT_PROCESS_AUTO_AMT ,0) + IFNULL(A.UNIT_ETC_AMT, 0)) AS UNIT_SUM_AUTO_AMT,
            IFNULL(
                CASE WHEN A.PREV_DRAWING_NUM IS NOT NULL THEN (
                    SELECT M.UNIT_FINAL_AMT
                    FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                        AND O.CONTROL_SEQ = N.CONTROL_SEQ
                        AND N.CONTROL_STATUS = 'ORD003'
                        AND N.DEL_YN = 'N'
                        AND M.DRAWING_NUM = A.PREV_DRAWING_NUM
                        AND O.WORK_TYPE = A.WORK_TYPE
                        AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                    ORDER BY M.CONTROL_SEQ DESC
                    LIMIT 1
                )
                ELSE (
                    SELECT M.UNIT_FINAL_AMT
                    FROM TBL_CONTROL_PART_ORDER_MAIN M, TBL_CONTROL N, TBL_CONTROL_PART O
                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                        AND O.CONTROL_SEQ = N.CONTROL_SEQ
                        AND N.CONTROL_STATUS = 'ORD003'
                        AND N.DEL_YN = 'N'
                        AND M.ORDER_SEQ != A.ORDER_SEQ
                        AND M.DRAWING_NUM = A.DRAWING_NUM
                        AND O.WORK_TYPE = A.WORK_TYPE
                        AND N.ORDER_COMP_CD = A.ORDER_COMP_CD
                    ORDER BY M.CONTROL_SEQ DESC
                    LIMIT 1
                )
                END, SPACE(0)
            ) AS PREV_UNIT_FINAL_AMT <!-- 종전가 -->
        FROM TBL_ORDER A
            LEFT OUTER JOIN (
                <choose>
                    <when test="HIDE_CONTROL_NUM != null and HIDE_CONTROL_NUM != ''">
                        SELECT
                            '' as ORDER_SEQ,
                            '' AS CONTROL_NUM,
                            '' AS OUT_FINISH_DT,
                            '' AS INVOICE_NUM,
                            '' AS CONTROL_SEQ,
                            '' AS CONTROL_DETAIL_SEQ,
                            '' AS PART_STATUS,
                            '' AS DRAWING_VER,
                            '' AS INNER_DUE_DT,
                            '' AS DRAWING_UP_DT
                        FROM DUAL
                    </when>
                    <otherwise>
                        SELECT
                            X.ORDER_SEQ,
                            Y.CONTROL_NUM, Y.OUT_FINISH_DT, X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ,
                            CASE WHEN (Z.PART_STATUS = 'PRO003') THEN SPACE(0)
                                 WHEN Z.PART_STATUS IS NULL THEN SPACE(0)
                                 ELSE '확정'
                            END AS PART_STATUS,
                            Z.DRAWING_VER,
                            Z.INNER_DUE_DT,
                            CASE WHEN Z.DRAWING_VER IS NOT NULL THEN IFNULL(SF_GET_DATE_F(Z.DRAWING_UP_DT, '', 'M'), SPACE(0))
                                 ELSE SPACE(0)
                            END AS DRAWING_UP_DT <!-- 도면업로드시간 -->
                        FROM TBL_CONTROL_PART_ORDER X
                            INNER JOIN TBL_CONTROL Y ON X.CONTROL_SEQ = Y.CONTROL_SEQ AND Y.DEL_YN = 'N'
                            INNER JOIN TBL_CONTROL_PART Z ON Y.CONTROL_SEQ = Z.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
                    </otherwise>
                </choose>
            ) B ON A.ORDER_SEQ = B.ORDER_SEQ
        WHERE A.DEL_YN = 'N'
            <if test="HIDDEN_WORK_TYPE != null and HIDDEN_WORK_TYPE != ''">
                AND A.WORK_TYPE IN (${HIDDEN_WORK_TYPE})
            </if>
            <if test="SIZE_TYPE != null and SIZE_TYPE != ''">
                AND A.SIZE_TYPE = #{SIZE_TYPE}
                <choose>
                    <when test="SIZE_TYPE == 'XYZ010'">
                        <if test="SIZE_W_F != null and SIZE_W_F != ''">
                            AND A.SIZE_W >= #{SIZE_W_F}
                        </if>
                        <if test="SIZE_W_T != null and SIZE_W_T != ''">
                            AND A.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                        </if>
                        <if test="SIZE_H_F != null and SIZE_H_F != ''">
                            AND A.SIZE_H >= #{SIZE_H_F}
                        </if>
                        <if test="SIZE_H_T != null and SIZE_H_T != ''">
                            AND A.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                        </if>
                        <if test="SIZE_T_F != null and SIZE_T_F != ''">
                            AND A.SIZE_T >= #{SIZE_T_F}
                        </if>
                        <if test="SIZE_T_T != null and SIZE_T_T != ''">
                            AND A.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                        </if>
                    </when>
                    <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                        <if test="SIZE_D_F != null and SIZE_D_F != ''">
                            AND A.SIZE_D >= #{SIZE_D_F}
                        </if>
                        <if test="SIZE_D_T != null and SIZE_D_T != ''">
                            AND A.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                        </if>
                        <if test="SIZE_L_F != null and SIZE_L_F != ''">
                            AND A.SIZE_L >= #{SIZE_L_F}
                        </if>
                        <if test="SIZE_L_T != null and SIZE_L_T != ''">
                            AND A.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                        </if>
                    </when>
                </choose>
            </if>
            <choose>
                <!-- 생성 일시 -->
                <when test="ORDER_SEARCH_CONDITION == 'ROM001'">
                    AND DATE_FORMAT(A.INSERT_DT, '%Y/%m/%d') BETWEEN #{ORDER_MANAGE_START_DATE} AND #{ORDER_MANAGE_END_DATE}
                </when>
                <!-- 주문확정 일자 -->
                <when test="ORDER_SEARCH_CONDITION == 'ROM002'">
                    AND A.ORDER_STATUS = 'REG001'
                    AND DATE_FORMAT(A.ORDER_STATUS_DT, '%Y/%m/%d') BETWEEN #{ORDER_MANAGE_START_DATE} AND #{ORDER_MANAGE_END_DATE}
                </when>
                <!-- 발주 납기 -->
                <when test="ORDER_SEARCH_CONDITION == 'ROM003'">
                    AND DATE_FORMAT(A.ORDER_DUE_DT, '%Y/%m/%d') BETWEEN #{ORDER_MANAGE_START_DATE} AND #{ORDER_MANAGE_END_DATE}
                </when>
                <!-- 가공 납기 -->
                <when test="ORDER_SEARCH_CONDITION == 'ROM004'">
                    AND DATE_FORMAT(B.INNER_DUE_DT, '%Y/%m/%d') BETWEEN #{ORDER_MANAGE_START_DATE} AND #{ORDER_MANAGE_END_DATE}
                </when>
            </choose>
            <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
                AND B.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
            </if>
            <if test="REGIST_NUM != null and REGIST_NUM != ''">
                AND A.REGIST_NUM LIKE CONCAT('%', #{REGIST_NUM}, '%')
            </if>
            <if test="HIDDEN_ORDER_COMP_CD != null and HIDDEN_ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD IN (${HIDDEN_ORDER_COMP_CD})
            </if>
            <if test="ORDER_NUM != null and ORDER_NUM != ''">
                AND A.ORDER_NUM LIKE CONCAT('%', #{ORDER_NUM}, '%')
            </if>
            <if test="HIDDEN_ORDER_STATUS != null and HIDDEN_ORDER_STATUS != ''">
                AND IFNULL(A.ORDER_STATUS, 'REGTEMP') IN (${HIDDEN_ORDER_STATUS})
            </if>
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND UPPER(A.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="ITEM_NM != null and ITEM_NM != ''">
                AND UPPER(A.ITEM_NM) LIKE CONCAT('%', UPPER(#{ITEM_NM}), '%')
            </if>
        ORDER BY A.REGIST_NUM, A.ORDER_NUM, A.ORDER_SEQ
    </select>


    <insert id="createOrder" parameterType="java.util.HashMap" >
        <selectKey keyProperty="ORDER_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_CONTROL_PART_ORDER) FROM DUAL
        </selectKey>
        INSERT INTO TBL_ORDER (
            ORDER_SEQ,
            REGIST_NUM,
            ORDER_NUM,
            PRICE_CONFIRM,
            COMP_CD,
            ORDER_COMP_CD,
            NOTE,
            DRAWING_NUM,
            ORDER_QTY,
            SAME_SIDE_YN,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            ORDER_DUE_DT,
            WORK_TYPE,
            MATERIAL_SUPPLY_YN,
            MAIN_INSPECTION,
            SIZE_TYPE,
            SIZE_TXT,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            MATERIAL_TYPE,
            SIZE_W,
            SIZE_H,
            SIZE_T,
            SIZE_D,
            SIZE_L,
            SURFACE_TREAT,
            MATERIAL_FINISH_GRIND_YN,
            MATERIAL_FINISH_HEAT_YN,
            DELIVERY_DT,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            PREV_DRAWING_NUM,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            ITEM_NM,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            INSERT_ID,
            ORDER_BARCODE_NUM
        ) VALUES
        (
            #{ORDER_SEQ},
            UPPER(TRIM(#{REGIST_NUM})),
            #{ORDER_NUM},
            #{PRICE_CONFIRM},
            #{COMP_CD},
            #{ORDER_COMP_CD},
            #{NOTE},
            #{DRAWING_NUM},
            #{ORDER_QTY},
            IFNULL(#{SAME_SIDE_YN}, 'N'),
            #{ORIGINAL_SIDE_QTY},
            #{OTHER_SIDE_QTY},
            DATE_FORMAT(#{ORDER_DUE_DT}, '%Y%m%d'),
            #{WORK_TYPE},
            IFNULL(#{MATERIAL_SUPPLY_YN}, 'N'),
            #{MAIN_INSPECTION},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            #{SIZE_TXT},
            #{MATERIAL_DETAIL},
            #{MATERIAL_KIND},
            SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}),
            SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            #{SURFACE_TREAT},
             <choose>
                 <when test="SPECIAL_TREATMENT == 'MATERIAL_FINISH_GRIND_YN'">
                     'Y',
                     NULL,
                 </when>
                 <when test="SPECIAL_TREATMENT == 'MATERIAL_FINISH_HEAT_YN'">
                    NULL,
                    'Y',
                 </when>
                <otherwise>
                    NULL,
                    NULL,
                </otherwise>
             </choose>
            DATE_FORMAT(#{DELIVERY_DT}, '%Y%m%d'),
            CAST(REPLACE(#{UNIT_FINAL_EST_AMT}, ',' ,SPACE(0)) AS INTEGER),
            CAST(REPLACE(#{UNIT_FINAL_AMT}, ',' ,SPACE(0)) AS INTEGER),
            #{PREV_DRAWING_NUM},
            #{PROJECT_NM},
            #{MODULE_NM},
            #{DELIVERY_COMP_NM},
            #{LABEL_NOTE},
            #{ITEM_NM},
            #{ORDER_STAFF_SEQ},
            #{DESIGNER_NM},
            #{LOGIN_USER_ID},
            CONCAT('O',LPAD(NEXTVAL(SEQ_ORDER_BARCODE),9,'0'))
        )
    </insert>
    <update id="updateOrderAutomaticQuote" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            UNIT_MATERIAL_AUTO_AMT = SF_GET_CALC_MATERIAL_AMT('ORDER', #{ORDER_SEQ}, NULL ),
            UNIT_SURFACE_AUTO_AMT = SF_GET_CALC_SURFACE_AMT('ORDER', #{ORDER_SEQ}, NULL )
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <insert id="insertOutBarcode" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUT_BARCODE (
            BARCODE_NUM
            , ORDER_SEQ
            , PACKING_NUM
            , INSERT_ID
        )
        VALUES (
            CONCAT('L', LPAD(NEXTVAL(SEQ_BARCODE), 9, '0'))
            , #{ORDER_SEQ}
            , 1
            , #{LOGIN_USER_ID}
        )
    </insert>

    <select id="selectBeforeInsertDuplicationRegistList_NEW" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.REGIST_NUM
        FROM TBL_ORDER X
        WHERE X.REGIST_NUM IN
        <foreach collection="list" item="item"  index="index"  open="(" close=")" separator=",">
            #{item.REGIST_NUM}
        </foreach>
        GROUP BY X.REGIST_NUM
    </select>

    <update id="updateOrderFromOrderManage" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            <if test="PRICE_CONFIRM != null and PRICE_CONFIRM != ''">
                PRICE_CONFIRM = #{PRICE_CONFIRM},
            </if>
            <if test="COMP_CD != null and COMP_CD != ''">
                COMP_CD = #{COMP_CD},
            </if>
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                ORDER_COMP_CD = #{ORDER_COMP_CD},
            </if>
            <if test="UNIT_FINAL_EST_AMT != null">
                NOTE = #{NOTE},
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (REGIST_NUM != null and REGIST_NUM != '')">
                REGIST_NUM = UPPER(#{REGIST_NUM}),
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (DRAWING_NUM != null and DRAWING_NUM != '')">
                DRAWING_NUM = #{DRAWING_NUM},
            </if>
            <if test="ORDER_NUM != null and ORDER_NUM != ''">
                ORDER_NUM = #{ORDER_NUM},
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (ORDER_QTY != null and ORDER_QTY != '')">
                ORDER_QTY = #{ORDER_QTY},
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (ORIGINAL_SIDE_QTY != '')">
                ORIGINAL_SIDE_QTY = REPLACE(#{ORIGINAL_SIDE_QTY}, ',', SPACE(0)),
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (OTHER_SIDE_QTY != '')">
                OTHER_SIDE_QTY = REPLACE(#{OTHER_SIDE_QTY}, ',', SPACE(0)),
            </if>
            <if test="ORDER_DUE_DT != null and ORDER_DUE_DT != ''">
                ORDER_DUE_DT = DATE_FORMAT(#{ORDER_DUE_DT}, '%Y%m%d'),
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (WORK_TYPE != null and WORK_TYPE != '')">
                WORK_TYPE = #{WORK_TYPE},
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (MATERIAL_SUPPLY_YN != null and MATERIAL_SUPPLY_YN != '')">
                MATERIAL_SUPPLY_YN = #{MATERIAL_SUPPLY_YN},
            </if>
            <if test="MAIN_INSPECTION != null and MAIN_INSPECTION != ''">
                MAIN_INSPECTION = #{MAIN_INSPECTION},
            </if>
            <if test="(ORDER_STATUS == null or ORDER_STATUS == 'REG002') and (SAME_SIDE_YN != null and SAME_SIDE_YN != '')">
                SAME_SIDE_YN = #{SAME_SIDE_YN},
            </if>
            <if test="SIZE_TXT != null and SIZE_TXT != ''">
                SIZE_TXT = #{SIZE_TXT},
                SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
                SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
                SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
                SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
                SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
                SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            </if>
            <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
                MATERIAL_DETAIL = #{MATERIAL_DETAIL},
                MATERIAL_TYPE = SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL}),
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                MATERIAL_KIND = #{MATERIAL_KIND},
            </if>
            <if test="SURFACE_TREAT != null">
                SURFACE_TREAT = IFNULL(#{SURFACE_TREAT},'SAL000'),
            </if>
            <if test="DELIVERY_DT != null and DELIVERY_DT != ''">
                DELIVERY_DT = DATE_FORMAT(#{DELIVERY_DT}, '%Y%m%d'),
            </if>
            <if test="UNIT_FINAL_EST_AMT != null">
                UNIT_FINAL_EST_AMT = REPLACE(#{UNIT_FINAL_EST_AMT}, ',', SPACE(0)),
            </if>
            <if test="UNIT_FINAL_AMT != null">
                UNIT_FINAL_AMT = REPLACE(#{UNIT_FINAL_AMT}, ',', SPACE(0)),
            </if>
            <if test="PREV_DRAWING_NUM != null">
                PREV_DRAWING_NUM = #{PREV_DRAWING_NUM},
            </if>
            <if test="PROJECT_NM != null">
                PROJECT_NM = #{PROJECT_NM},
            </if>
            <if test="MODULE_NM != null">
                MODULE_NM = #{MODULE_NM},
            </if>
            <if test="DELIVERY_COMP_NM != null">
                DELIVERY_COMP_NM = #{DELIVERY_COMP_NM},
            </if>
            <if test="LABEL_NOTE != null">
                LABEL_NOTE = #{LABEL_NOTE},
            </if>
            <if test="ITEM_NM != null">
                ITEM_NM = #{ITEM_NM},
            </if>
            <if test="ORDER_STAFF_SEQ != null">
                ORDER_STAFF_SEQ = #{ORDER_STAFF_SEQ},
            </if>
            <if test="DESIGNER_NM != null">
                DESIGNER_NM = #{DESIGNER_NM},
            </if>
            <if test="SPECIAL_TREATMENT != null">
                <choose>
                    <when test="SPECIAL_TREATMENT == 'MATERIAL_FINISH_GRIND_YN'">
                        MATERIAL_FINISH_GRIND_YN = 'Y',
                        MATERIAL_FINISH_HEAT_YN = NULL,
                    </when>
                    <when test="SPECIAL_TREATMENT == 'MATERIAL_FINISH_HEAT_YN'">
                        MATERIAL_FINISH_GRIND_YN = NULL,
                        MATERIAL_FINISH_HEAT_YN = 'Y',
                    </when>
                    <otherwise>
                        MATERIAL_FINISH_GRIND_YN = NULL,
                        MATERIAL_FINISH_HEAT_YN = NULL,
                    </otherwise>
                </choose>
            </if>
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <select id="selectCheckRegistNumDuplicateOrder" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT EXISTS (	SELECT *
                           FROM TBL_ORDER A
                           WHERE A.REGIST_NUM = #{REGIST_NUM}
                            AND A.DEL_YN = 'N'
                   )
    </select>

    <select id="selectBeforeRemoveOrder1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ORDER_SEQ
        FROM TBL_ORDER A
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
            AND A.ORDER_STATUS IN ('REG001','REG003')
    </select>
    <select id="selectBeforeRemoveOrder2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ORDER_SEQ
        FROM TBL_ORDER A
                 INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
                 INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </select>
    <update id="removeOrder" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <update id="updateOrderStatus" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER
        SET
            ORDER_STATUS = #{ORDER_STATUS},
            ORDER_STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <select id="selectRevisionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ORDER_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            IFNULL(A.DRAWING_VER,0) AS DRAWING_VER, SF_GET_CONTROL_PART_INFO(A.CONTROL_SEQ,A.CONTROL_DETAIL_SEQ) AS CONTROL_NUM,
            A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ, A.IMG_GFILE_SEQ,
            GROUP_CONCAT(C.ORGINAL_FILE_NM SEPARATOR <![CDATA[ '<br>' ]]>) AS FILE_NM
        FROM TBL_DRAWING_UPLOAD_HIST A
             INNER JOIN TBL_FILE_GROUP B ON (A.PDF_GFILE_SEQ = B.GFILE_SEQ OR A.DXF_GFILE_SEQ = B.GFILE_SEQ)
             INNER JOIN TBL_FILE C ON B.GFILE_SEQ = C.GFILE_SEQ
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        GROUP BY A.DRAWING_VER
        UNION ALL
        SELECT #{ORDER_SEQ}, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            IFNULL(A.DRAWING_VER,0) AS DRAWING_VER, SF_GET_CONTROL_PART_INFO(A.CONTROL_SEQ,A.CONTROL_DETAIL_SEQ) AS CONTROL_NUM,
            A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ, A.IMG_GFILE_SEQ,
            GROUP_CONCAT(C.ORGINAL_FILE_NM SEPARATOR <![CDATA[ '<br>' ]]>) AS FILE_NM
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_FILE_GROUP B ON (A.PDF_GFILE_SEQ = B.GFILE_SEQ OR A.DXF_GFILE_SEQ = B.GFILE_SEQ)
            INNER JOIN TBL_FILE C ON B.GFILE_SEQ = C.GFILE_SEQ
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectRevisionInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.DRAWING_NUM, A.REGIST_NUM, SF_GET_CONTROL_PART_INFO(#{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}) AS CONTROL_NUM
        FROM TBL_ORDER A
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </select>

    <select id="selectEstimateCadInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.REGIST_NUM
             , A.SIZE_TXT
             , A.MATERIAL_DETAIL
             , A.WORK_TYPE
             , SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
             , SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
             , FORMAT(A.UNIT_MATERIAL_AUTO_AMT, 0) AS UNIT_MATERIAL_AUTO_AMT
             , FORMAT(A.UNIT_SURFACE_AUTO_AMT, 0) AS UNIT_SURFACE_AUTO_AMT
             , B.SIZE_LEVEL
             , FORMAT(B.UNIT_BASIC_AMT, 0) AS UNIT_BASIC_AMT
             , (SELECT M.FILE_PATH FROM TBL_FILE M WHERE M.GFILE_SEQ = A.IMG_GFILE_SEQ) AS IMAGE_PATH
             , C.*
        FROM TBL_ORDER A
                 LEFT OUTER JOIN TBL_CALC_PROCESS B ON B.CALC_SEQ = SF_GET_CALC_PROCESS_SEQ('ORDER', #{ORDER_SEQ}, '')
                 LEFT OUTER JOIN (
            SELECT
                MAX(CASE WHEN T.FACTOR_CD = 'CST010' THEN T.PROCESS_CNT END) AS DATA_VALUE_1 -- 가공면수(밀링)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST010' THEN T.UNIT_AMT END) AS DATA_AMT_1
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST020' THEN T.PROCESS_CNT END) AS DATA_VALUE_2 -- 가공면수(TAP)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST020' THEN T.UNIT_AMT END) AS DATA_AMT_2
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST030' THEN T.PROCESS_CNT END) AS DATA_VALUE_3 -- 치수공차(일반)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST030' THEN T.UNIT_AMT END) AS DATA_AMT_3
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST040' THEN T.PROCESS_CNT END) AS DATA_VALUE_4 -- 치수공차(정밀)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST040' THEN T.UNIT_AMT END) AS DATA_AMT_4
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST050' THEN T.PROCESS_CNT END) AS DATA_VALUE_5 -- 외곽가공(15T이하)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST050' THEN T.UNIT_AMT END) AS DATA_AMT_5
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST060' THEN T.PROCESS_CNT END) AS DATA_VALUE_6 -- 외곽가공(15T초과)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST060' THEN T.UNIT_AMT END) AS DATA_AMT_6
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST070' THEN T.PROCESS_CNT END) AS DATA_VALUE_7 -- 일반포켓(15T이하)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST070' THEN T.UNIT_AMT END) AS DATA_AMT_7
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST080' THEN T.PROCESS_CNT END) AS DATA_VALUE_8 -- 일반포켓(15T초과)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST080' THEN T.UNIT_AMT END) AS DATA_AMT_8
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST090' THEN T.PROCESS_CNT END) AS DATA_VALUE_9 -- 관통포켓(15T이하)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST090' THEN T.UNIT_AMT END) AS DATA_AMT_9
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST100' THEN T.PROCESS_CNT END) AS DATA_VALUE_10 -- 관통포켓(15T초과)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST100' THEN T.UNIT_AMT END) AS DATA_AMT_10
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST110' THEN T.PROCESS_CNT END) AS DATA_VALUE_11 -- 드릴가공(일반 Hole)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST110' THEN T.UNIT_AMT END) AS DATA_AMT_11
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST120' THEN T.PROCESS_CNT END) AS DATA_VALUE_12 -- 드릴가공(TAP)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST120' THEN T.UNIT_AMT END) AS DATA_AMT_12
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST130' THEN T.PROCESS_CNT END) AS DATA_VALUE_13 -- 드릴가공(공차 Hole)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST130' THEN T.UNIT_AMT END) AS DATA_AMT_13
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST140' THEN T.PROCESS_CNT END) AS DATA_VALUE_14 -- 드릴가공(특수 Hole)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST140' THEN T.UNIT_AMT END) AS DATA_AMT_14
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST150' THEN T.PROCESS_CNT END) AS DATA_VALUE_15 -- 드릴가공(C/B)
                 , MAX(CASE WHEN T.FACTOR_CD = 'CST150' THEN T.UNIT_AMT END) AS DATA_AMT_15
                 , FORMAT(SUM(T.TOTAL), 0) AS PROCESS_TOTAL
                 , T.ORDER_SEQ
            FROM (
                     SELECT
                         ROW_NUMBER () OVER(ORDER BY X.FACTOR_CD) AS RNUM
	        	          , Z.SIZE_LEVEL
                          , Y.CALC_SEQ
                          , X.GROUP_CD
                          , X.FACTOR_CD
                          , X.LEVEL_1
                          , X.LEVEL_2
                          , FORMAT(Y.UNIT_AMT, 0) AS UNIT_AMT
                          , SUM(Q.PROCESS_CNT) AS PROCESS_CNT
                          , SUM(Y.UNIT_AMT * Q.PROCESS_CNT) AS TOTAL
                          , Q.ORDER_SEQ
                     FROM TBL_PROCESS_FACTOR X
                              INNER JOIN TBL_CALC_PROCESS_FACTOR Y ON Y.FACTOR_CD = X.FACTOR_CD
                              INNER JOIN TBL_CALC_PROCESS Z ON Z.CALC_SEQ = Y.CALC_SEQ
                         AND Z.CALC_SEQ = SF_GET_CALC_PROCESS_SEQ('ORDER', #{ORDER_SEQ}, '')
                              INNER JOIN TBL_ORDER_PROCESS Q ON Q.FACTOR_CD = X.FACTOR_CD
                         AND Q.ORDER_SEQ = #{ORDER_SEQ}
                     GROUP BY X.FACTOR_CD
                 ) T
        ) C ON C.ORDER_SEQ = A.ORDER_SEQ
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </select>

    <select id="selectCreateControlList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER(ORDER BY A.REGIST_NUM) AS ROW_NUM, A.ORDER_SEQ,
            A.ORDER_STATUS AS ORDER_STATUS,
            IFNULL(SF_GET_CODE_NM('1091', A.ORDER_STATUS, #{LOGIN_LOCALE}), SPACE(0)) AS ORDER_STATUS_NM,
            IFNULL(SF_GET_DATE_F(A.ORDER_STATUS_DT, '', 'M'),SPACE(0)) AS ORDER_STATUS_DT,
            A.ORDER_COMP_CD, A.NOTE,
            IFNULL(SF_GET_COMP_NM(A.ORDER_COMP_CD), SPACE(0)) AS ORDER_COMP_NM, <!-- 발주업체 -->
            A.REGIST_NUM, A.DRAWING_NUM,
            A.IMG_GFILE_SEQ, A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ,
            A.ORDER_NUM, A.ORDER_QTY,
            A.ORIGINAL_SIDE_QTY, A.OTHER_SIDE_QTY,
            SF_GET_DATE_F(A.ORDER_DUE_DT,'','') AS ORDER_DUE_DT, A.WORK_TYPE,
            IFNULL(SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS WORK_TYPE_NM,
            A.MATERIAL_SUPPLY_YN, A.MAIN_INSPECTION,
            IFNULL(SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}), SPACE(0)) AS MAIN_INSPECTION_NM,
            A.SAME_SIDE_YN, A.SIZE_TXT,
            A.MATERIAL_DETAIL, A.MATERIAL_KIND,
            A.SURFACE_TREAT, A.MATERIAL_FINISH_GRIND_YN,
            A.MATERIAL_FINISH_HEAT_YN, A.DELIVERY_DT,
            CASE WHEN A.MATERIAL_FINISH_GRIND_YN = 'Y' THEN 'MATERIAL_FINISH_GRIND_YN'
            WHEN A.MATERIAL_FINISH_HEAT_YN = 'Y' THEN 'MATERIAL_FINISH_HEAT_YN'
            END AS SPECIAL_TREATMENT,
            B.ORDER_SEQ, B.CONTROL_NUM,
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ,
            B.PART_STATUS,
            SF_GET_DATE_F(A.INSERT_DT , '', 'M') AS ORDER_INSERT_DT,
            SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY','') AS INNER_DUE_DT,
            B.ORDER_QTY AS CONTROL_ORDER_QTY,
            B.OTHER_SIDE_QTY AS CONTROL_OTHER_SIDE_QTY,
            B.ORIGINAL_SIDE_QTY AS CONTROL_ORIGINAL_SIDE_QTY,
            CASE WHEN B.PART_NUM > 0 THEN CAST(B.PART_NUM AS INTEGER)
                 ELSE SPACE(0)
            END AS PART_NUM
        FROM TBL_ORDER A
            LEFT OUTER JOIN (
                    SELECT
                        X.ORDER_SEQ, Y.CONTROL_NUM, Y.OUT_FINISH_DT, Q.INVOICE_NUM, X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ,
                        CASE WHEN (Z.PART_STATUS = 'PRO003') THEN SPACE(0)
                             WHEN Z.PART_STATUS IS NULL THEN SPACE(0)
                             ELSE '확정'
                        END AS PART_STATUS,
                        Z.INNER_DUE_DT,
                        X.OTHER_SIDE_QTY,
                        X.ORIGINAL_SIDE_QTY,
                        X.ORDER_QTY,
                        (SELECT COUNT(M.CONTROL_DETAIL_SEQ) FROM TBL_CONTROL_PART M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.WORK_TYPE = 'WTP050') AS PART_NUM
                    FROM TBL_CONTROL_PART_ORDER X
                        INNER JOIN TBL_CONTROL Y ON X.CONTROL_SEQ = Y.CONTROL_SEQ AND Y.DEL_YN = 'N'
                        INNER JOIN TBL_CONTROL_PART Z ON Y.CONTROL_SEQ = Z.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
                        LEFT OUTER JOIN TBL_INVOICE_DETAIL Q ON Q.ORDER_SEQ = X.ORDER_SEQ
            ) B ON A.ORDER_SEQ = B.ORDER_SEQ
        WHERE A.DEL_YN = 'N'
          AND IFNULL(A.ORDER_STATUS, 'REG002') = 'REG001'
        <if test="HIDE_CONTROL_NUM != null and HIDE_CONTROL_NUM != ''">
            AND NOT EXISTS (
                SELECT 1
                FROM TBL_CONTROL_PART_ORDER M
                    INNER JOIN TBL_CONTROL N ON M.CONTROL_SEQ = N.CONTROL_SEQ AND N.DEL_YN = 'N'
                WHERE M.ORDER_SEQ = A.ORDER_SEQ
            )
        </if>
        <if test="HIDDEN_WORK_TYPE != null and HIDDEN_WORK_TYPE != ''">
            AND A.WORK_TYPE IN (${HIDDEN_WORK_TYPE})
        </if>
        <choose>
            <!-- 생성 일시 -->
            <when test="CREATE_CONTROL_SEARCH_CONDITION == 'ROM001'">
                AND DATE_FORMAT(A.INSERT_DT, '%Y/%m/%d') BETWEEN #{CREATE_CONTROL_START_DATE} AND #{CREATE_CONTROL_END_DATE}
            </when>
            <!-- 주문확정 일자 -->
            <when test="CREATE_CONTROL_SEARCH_CONDITION == 'ROM002'">
                AND DATE_FORMAT(A.ORDER_STATUS_DT, '%Y/%m/%d') BETWEEN #{CREATE_CONTROL_START_DATE} AND #{CREATE_CONTROL_END_DATE}
            </when>
            <!-- 발주 납기 -->
            <when test="CREATE_CONTROL_SEARCH_CONDITION == 'ROM003'">
                AND DATE_FORMAT(A.ORDER_DUE_DT, '%Y/%m/%d') BETWEEN #{CREATE_CONTROL_START_DATE} AND #{CREATE_CONTROL_END_DATE}
            </when>
            <!-- 가공 납기 -->
            <when test="CREATE_CONTROL_SEARCH_CONDITION == 'ROM004'">
                AND DATE_FORMAT(B.INNER_DUE_DT, '%Y/%m/%d') BETWEEN #{CREATE_CONTROL_START_DATE} AND #{CREATE_CONTROL_END_DATE}
            </when>
        </choose>
        <if test="REGIST_NUM != null and REGIST_NUM != ''">
            AND A.REGIST_NUM LIKE CONCAT('%', #{REGIST_NUM}, '%')
        </if>
        <if test="HIDDEN_ORDER_COMP_CD != null and HIDDEN_ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD IN (${HIDDEN_ORDER_COMP_CD})
        </if>
        <if test="ORDER_NUM != null and ORDER_NUM != ''">
            AND A.ORDER_NUM LIKE CONCAT('%', #{ORDER_NUM}, '%')
        </if>
        <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
            AND A.MATERIAL_TYPE = #{MATERIAL_TYPE}
        </if>
        ORDER BY A.ORDER_SEQ, A.REGIST_NUM, B.CONTROL_NUM
    </select>

    <select id="selectControlNumExists" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_SEQ, A.CONTROL_NUM, A.CONTROL_STATUS, A.OUT_FINISH_DT, A.OUT_FINISH_STATUS
        FROM TBL_CONTROL A
        WHERE A.DEL_YN = 'N'
          AND A.CONTROL_NUM = #{CONTROL_NUM}
    </select>

    <insert id="createControlExcel" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_EXCEL (
            JOB_SEQ,
            JOB_SEQ_KEY,
            PRICE_CONFIRM,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            NOTE,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            MAIN_INSPECTION,
            CONTROL_NUM,
            PART_NUM,
            DRAWING_NUM,
            ITEM_NM,
            WORK_TYPE,
            MATERIAL_SUPPLY_YN,
            INNER_DUE_DT,
            SIZE_TXT,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            SURFACE_TREAT,
            SAME_SIDE_YN,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            REGIST_NUM,
            ORDER_NUM,
            ORDER_QTY,
            ORDER_DUE_DT,
            DELIVERY_DT,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            PREV_DRAWING_NUM,
            INSERT_ID,
            ORDER_SEQ,
            DWG_GFILE_SEQ,
            DXF_GFILE_SEQ,
            PDF_GFILE_SEQ,
            IMG_GFILE_SEQ,
            VIEW_GFILE_SEQ,
            MATERIAL_FINISH_GRIND_YN,
            MATERIAL_FINISH_HEAT_YN,
            ORDER_BARCODE_NUM
        )
        SELECT
            NEXTVAL(SEQ_DUMMY),
            #{IN_UID},
            A.PRICE_CONFIRM,
            A.COMP_CD,
            A.ORDER_COMP_CD,
            A.ORDER_STAFF_SEQ,
            A.DESIGNER_NM,
            A.NOTE,
            A.PROJECT_NM,
            A.MODULE_NM,
            A.DELIVERY_COMP_NM,
            A.LABEL_NOTE,
            A.MAIN_INSPECTION,
            #{CONTROL_NUM},
            #{PART_NUM},
            A.DRAWING_NUM,
            A.ITEM_NM,
            A.WORK_TYPE,
            A.MATERIAL_SUPPLY_YN,
            DATE_FORMAT(REPLACE(#{INNER_DUE_DT},'/',SPACE(0)), '%Y%m%d'),
            A.SIZE_TXT,
            A.MATERIAL_DETAIL,
            A.MATERIAL_KIND,
            A.SURFACE_TREAT,
            A.SAME_SIDE_YN,
            #{CONTROL_ORIGINAL_SIDE_QTY},
            #{CONTROL_OTHER_SIDE_QTY},
            A.REGIST_NUM,
            A.ORDER_NUM,
            #{CONTROL_ORDER_QTY},
            A.ORDER_DUE_DT,
            A.DELIVERY_DT,
            A.UNIT_FINAL_EST_AMT,
            A.UNIT_FINAL_AMT,
            A.PREV_DRAWING_NUM,
            #{LOGIN_USER_ID},
            A.ORDER_SEQ,
            A.DWG_GFILE_SEQ,
            A.DXF_GFILE_SEQ,
            A.PDF_GFILE_SEQ,
            A.IMG_GFILE_SEQ,
            A.VIEW_GFILE_SEQ,
            A.MATERIAL_FINISH_GRIND_YN,
            A.MATERIAL_FINISH_HEAT_YN,
            A.ORDER_BARCODE_NUM
        FROM TBL_ORDER A
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </insert>
</mapper>
