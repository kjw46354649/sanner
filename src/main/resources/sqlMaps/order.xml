<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="orderMapper">

    <sql id="controlManage">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ, <!-- 관리번호 -->
            A.CONTROL_STATUS, <!-- 주문관리상태 -->
            B.CONTROL_DETAIL_SEQ, <!-- 주문관리상세일련번호 -->
            C.ORDER_SEQ, <!-- 발주번호일련번호 -->
            A.CONTROL_STATUS AS CONTROL_STATUS_ORIGINAL, <!-- 주문관리상태 -->
            SF_GET_CODE_NM(1038, A.CONTROL_STATUS, 'KR') AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
            SF_GET_DATE_F(A.STATUS_DT,'YY','M') AS CONTROL_STATUS_DT, <!-- 상태확정일 -->
            A.PRICE_CONFIRM, <!-- 단가확인 -->
            A.COMP_CD, <!-- 사업자구분 -->
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM, <!-- 사업자구분 이름 -->
            A.ORDER_COMP_CD, <!-- 발주업체 -->
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM, <!-- 발주업체 이름 -->
            A.ORDER_STAFF_SEQ, <!-- 구매담당 -->
            SF_GET_STAFF_NM(A.ORDER_STAFF_SEQ) AS ORDER_STAFF_NM, <!-- 구매담당자 이름 -->
            A.DESIGNER_NM, <!-- 설계자 -->
            A.NOTE, <!-- 비고 -->
            F.INVOICE_NUM, <!-- 거래명세서 no -->
            A.PROJECT_NM, <!-- 프로젝트 -->
            A.MODULE_NM, <!-- 모듈명 -->
            A.DELIVERY_COMP_NM, <!-- 납품처명 -->
            A.LABEL_NOTE, <!-- 비고(라벨) -->
            A.MAIN_INSPECTION, <!-- 주요 검사품 -->
            IFNULL(SF_GET_CODE_NM(1042, A.MAIN_INSPECTION, 'EN'), SPACE(0)) AS MAIN_INSPECTION_NM, <!-- 주요 검사품 -->
            A.EMERGENCY_YN, <!-- 긴급 -->
            SF_GET_CODE_NM(1042, A.EMERGENCY_YN, 'EN') AS EMERGENCY_YN_NM, <!-- 긴급 -->
            IF(A.EMERGENCY_YN IS NULL, SPACE(0), '긴급') AS EMERGENCY_BARCODE_NM, <!-- 바코드 긴급 -->
            A.CONTROL_VER, <!-- 관리번호버전 -->
            A.CONTROL_NUM, <!-- 관리번호 -->
            IFNULL(B.PART_NUM, SPACE(0)) AS PART_NUM, <!-- Part -->
            B.DRAWING_VER, <!-- 도면번호버전 -->
            B.DRAWING_NUM, <!-- 도면번호 -->
            B.ITEM_NM, <!-- 품명 -->
            B.WORK_TYPE, <!-- 작업형태 -->
            IFNULL(SF_GET_CODE_NM(1033, B.WORK_TYPE, 'KR'), SPACE(0)) AS WORK_TYPE_NM, <!-- 작업형태 이름 -->
            B.OUTSIDE_YN, <!-- 외주 -->
            B.WORK_FACTORY, <!-- 수행공장 -->
            SF_GET_CODE_NM(1014, B.WORK_FACTORY, 'KR') AS WORK_FACTORY_NM, <!-- 수행공장 -->
            B.MATERIAL_SUPPLY_YN, <!-- 소재사급 -->
            IFNULL(SF_GET_DATE_F(B.INNER_DUE_DT, 'YY', ''), SPACE(0)) AS INNER_DUE_DT, <!-- 납기(가공납기) -->
            IFNULL(B.SIZE_TXT, SPACE(0)) AS SIZE_TXT, <!-- 규격 -->
            B.MATERIAL_DETAIL, <!-- 소재 종류 -->
            IFNULL(SF_GET_CODE_NM(1027, B.MATERIAL_DETAIL, 'KR'), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            B.MATERIAL_TYPE, <!-- 재질 -->
            IFNULL(SF_GET_CODE_NM(1002, B.MATERIAL_TYPE, 'KR'), SPACE(0)) AS MATERIAL_TYPE_NM, <!-- 재질 -->
            B.MATERIAL_KIND, <!-- 소재 형태 -->
            IFNULL(SF_GET_CODE_NM(1029, B.MATERIAL_KIND, 'KR'), SPACE(0)) AS MATERIAL_KIND_NM, <!-- 소재 형태 -->
            B.SURFACE_TREAT, <!-- 표면처리 -->
            IFNULL(B.MATERIAL_FINISH_HEAT, SPACE(0)) AS MATERIAL_FINISH_HEAT, <!-- 열처리 -->
            B.MATERIAL_NOTE, <!-- 소재비고 -->
            B.PART_UNIT_QTY, <!-- Part단위수량 -->
            (IFNULL(B.PART_UNIT_QTY, 1) * IFNULL(C.ORDER_QTY, (SELECT MAX(ORDER_QTY)
                                                               FROM TBL_CONTROL_PART_ORDER AA
                                                               INNER JOIN TBL_CONTROL_PART BB ON AA.CONTROL_SEQ = BB.CONTROL_SEQ AND AA.CONTROL_DETAIL_SEQ = BB.CONTROL_DETAIL_SEQ
                                                               WHERE
                                                                   AA.CONTROL_SEQ = B.CONTROL_SEQ))) AS ORDER_QTY_TOTAL, <!-- 주문 수량 -->
            C.ORDER_NUM, <!-- 발주번호 -->
            IFNULL(C.ORDER_QTY, SPACE(0)) AS ORDER_QTY, <!-- 발주정보_수량 -->
            IFNULL(B.ORIGINAL_SIDE_QTY, SPACE(0)) AS ORIGINAL_SIDE_QTY, <!-- 대칭_원칭 -->
            IFNULL(B.OTHER_SIDE_QTY, SPACE(0)) AS OTHER_SIDE_QTY, <!-- 대칭_대칭 -->
            SF_GET_DATE_F(C.ORDER_DUE_DT, 'YY', '') AS ORDER_DUE_DT, <!-- 발주정보_납기 -->
            SF_GET_DATE_F(C.DELIVERY_DT, 'YY', '') AS DELIVERY_DT, <!-- 발주정보_납품확인 -->
            B.DETAIL_LATHE, <!-- 상세가공요건_선반 -->
            B.DETAIL_SURFACE, <!-- 상세가공요건_가공면 -->
            B.DETAIL_CLAMPING, <!-- 상세가공요건_클램핑 -->
            B.DETAIL_POCKET, <!-- 상세가공요건_포켓 -->
            B.DETAIL_DRILL, <!-- 상세가공요건_드릴 -->
            B.DETAIL_DIFFICULTY, <!-- 상세가공요건_난도 -->
            B.MATERIAL_FINISH_TM, <!-- 소재마감_TM각비 -->
            B.MATERIAL_FINISH_GRIND, <!-- 소재마감_연마 -->
            B.MATERIAL_FINISH_HEAT, <!-- 소재마감_열처리 -->
            B.SIZE_W_M, <!-- 예상규격_가로 -->
            B.SIZE_H_M, <!-- 예상규격_세로 -->
            B.SIZE_T_M, <!-- 예상규격_두께 -->
            B.SIZE_D_M, <!-- 예상규격_지름 -->
            B.SIZE_L_M, <!-- 예상규격_길이 -->
            B.UNIT_MATERIAL_AMT, <!-- 항목별단가_소재비 -->
            B.UNIT_TM_AMT, <!-- 항목별단가_TM각비 -->
            B.UNIT_GRIND_AMT, <!-- 항목별단가_연마비 -->
            B.UNIT_HEAT_AMT, <!-- 항목별단가_열처리 -->
            B.UNIT_SURFACE_AMT, <!-- 항목별단가_표면처리 -->
            B.UNIT_PROCESS_AMT, <!-- 항목별단가_가공비 -->
            B.UNIT_ETC_AMT, <!-- 항목별단가_기타추가 -->
            B.UNIT_AMT_NOTE, <!-- 항목별단가_견적비고 -->
            B.UNIT_FINAL_EST_AMT, <!-- 최종견적단가 -->
            B.UNIT_FINAL_AMT, <!-- 최종공급단가 -->
            B.UNIT_FINAL_AMT AS UNIT_FINAL_AMT_ORIGINAL, <!-- 최종공급단가 -->
            B.PREV_DRAWING_NUM, <!-- 변경전도면번호 -->
            SF_GET_DATE_F(D.CLOSE_MONTH, 'YY', '') AS CLOSE_MONTH, <!-- 마감 월 -->
            CONCAT(D.CLOSE_VER, '건') AS CLOSE_VER, <!-- 차수 -->
            '', <!-- 작성자 -->
            SF_GET_DATE_F(E.CLOSE_DT,'YY','M') AS CLOSE_DT, <!-- 마감일시 -->
            B.DXF_GFILE_SEQ, <!-- DXF -->
            B.IMG_GFILE_SEQ, <!-- IMG(PNG) -->
            B.OUTSIDE_COMP_CD, <!-- 외주업체 -->
            SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM, <!-- 외주업체 -->
            B.OUTSIDE_MATERIAL_SUPPLY_YN, <!-- 외주 자재사급 -->
            B.OUTSIDE_UNIT_AMT, <!-- 외주단가 -->
            (B.OUTSIDE_UNIT_AMT * B.OUTSIDE_ORDER_NUM) AS OUTSIDE_FINAL_AMT, <!-- 외주합계금액 -->
            SF_GET_DATE_F(B.OUTSIDE_HOPE_DUE_DT, 'YY', '') AS OUTSIDE_HOPE_DUE_DT, <!-- 외주현황_요망납기 -->
            '', <!-- 외주입고날짜 -->
            B.OUTSIDE_NOTE, <!-- 외주비고 -->
            '', <!-- 외주 불량 CODE -->
            '', <!-- 외주 조치방안 -->
            SF_GET_DATE_F(A.STATUS_DT,'YY','M') AS STATUS_DT, <!-- 등록/업데이트 일시 -->
            A.DEL_YN
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                                        AND A.COMP_CD = D.COMP_CD
                                                        AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
            LEFT OUTER JOIN TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD
                                                 AND D.CLOSE_MONTH = E.CLOSE_MONTH
                                                 AND D.ORDER_COMP_CD = E.ORDER_COMP_CD
                                                 AND D.CLOSE_VER = E.CLOSE_VER
            LEFT OUTER JOIN TBL_INVOICE_DETAIL F ON B.CONTROL_SEQ = F.CONTROL_SEQ
                                                    AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
    </sql>

    <select id="selectControlManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage" />
        WHERE
            A.DEL_YN = 'N'
            AND (A.CONTROL_STATUS IS NULL OR A.CONTROL_STATUS IN ('ORD001', 'ORD002'))
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
             AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
             AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
             AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
             AND B.DRAWING_NUM = #{DRAWING_NUM}
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
             AND B.ITEM_NM = #{ITEM_NM}
        </if>
        <if test="WORK_TYPE != null and WORK_TYPE != ''">
             AND B.WORK_TYPE = #{WORK_TYPE}
        </if>
        <if test="ORDER_NUM != null and ORDER_NUM != ''">
             AND C.ORDER_NUM = #{ORDER_NUM}
        </if>
        <if test="ORDER_STATUS != null and ORDER_STATUS != ''">
             AND A.ORDER_STATUS = #{ORDER_STATUS}
        </if>
        <if test="OUTSIDE_YN != null and OUTSIDE_YN != ''">
            AND B.OUTSIDE_YN NOT IN ('Y')
        </if>
        ORDER BY
            A.CONTROL_SEQ,
            B.PART_NUM
    </select>

    <select id="selectControlCloseVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT MAX(CLOSE_VER) AS MAX_CLOSE_VER
        FROM TBL_MONTH_CLOSE
        WHERE
            ORDER_COMP_CD IN (${ORDER_COMP_CD})
            AND CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
    </select>

    <select id="selectControlCloseLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.ORDER_COMP_CD,
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            D.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN,
            CONCAT(D.CLOSE_VER, '차') AS CLOSE_VER,
            CONCAT(CAST(SUM(C.ORDER_QTY) AS CHAR), '건') AS ORDER_QTY,
            SUM(B.UNIT_FINAL_AMT) AS TOTAL_AMT,
            SUM(E.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
        FROM
            TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                                   AND A.COMP_CD = D.COMP_CD
                                                   AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                                                   AND D.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
            INNER JOIN TBL_MONTH_CLOSE E ON D.CLOSE_MONTH = E.CLOSE_MONTH
                                            AND D.CLOSE_VER = E.CLOSE_VER
                                            AND D.COMP_CD = E.COMP_CD
                                            AND D.ORDER_COMP_CD = E.ORDER_COMP_CD
        WHERE A.ORDER_COMP_CD IN (${ORDER_COMP_CD})
        GROUP BY
            A.ORDER_COMP_CD,
            D.CLOSE_VER
    </select>

    <select id="selectControlCloseRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ORDER_COMP_CD,
            ORDER_COMP_NM,
            CLOSE_MONTH,
            CLOSE_MONTH_TRAN,
            CONCAT(CLOSE_VER, '차') AS CLOSE_VER,
            CONCAT(CAST(SUM(ORDER_QTY) AS CHAR),'건') AS ORDER_QTY,
            SUM(UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
            CONCAT(CAST(SUM(ADD_QTY) AS CHAR), '건') AS ADD_QTY,
            SUM(ADD_UNIT_FINAL_AMT) AS ADD_UNIT_FINAL_AMT
        FROM (
            SELECT
                A.ORDER_COMP_CD,
                SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                D.CLOSE_MONTH,
                DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
                D.CLOSE_VER,
                SUM(C.ORDER_QTY) AS ORDER_QTY,
                SUM(B.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
                0 AS ADD_QTY,
                0 AS ADD_UNIT_FINAL_AMT
            FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                                   AND A.COMP_CD = D.COMP_CD
                                                   AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                                                   AND D.CLOSE_MONTH = CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH})
            INNER JOIN TBL_MONTH_CLOSE E ON D.CLOSE_MONTH = E.CLOSE_MONTH
                                            AND D.CLOSE_VER = E.CLOSE_VER
                                            AND D.COMP_CD = E.COMP_CD
                                            AND D.ORDER_COMP_CD = E.ORDER_COMP_CD
                WHERE
                    A.ORDER_COMP_CD IN (${ORDER_COMP_CD})
                    AND D.CLOSE_VER = #{CLOSE_VER}
                GROUP BY A.ORDER_COMP_CD
            UNION ALL
            SELECT
                A.ORDER_COMP_CD,
                SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH}) AS CLOSE_MONTH, <!-- 마감월 -->
                DATE_FORMAT(STR_TO_DATE(CONCAT(#{CONTROL_CLOSE_YEAR}, #{CONTROL_CLOSE_MONTH}), '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN, <!-- 마감월 -->
                #{CLOSE_VER},
                SUM(C.ORDER_QTY) AS ORDER_QTY,
                SUM(B.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
                SUM(C.ORDER_QTY) AS ADD_QTY,
                SUM(B.UNIT_FINAL_AMT) AS ADD_UNIT_FINAL_AMT
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = B.CONTROL_SEQ
                                                       AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            WHERE A.CONTROL_SEQ IN (${CONTROL_SEQ})
            GROUP BY A.ORDER_COMP_CD) X
        GROUP BY
            ORDER_COMP_CD
    </select>

    <insert id="createMonthFinishClose" parameterType="java.util.HashMap" >
        INSERT INTO TBL_MONTH_CLOSE (
            COMP_CD,
            CLOSE_MONTH,
            ORDER_COMP_CD,
            CLOSE_VER,
            CLOSE_NOTE
        ) VALUES (
            #{COMP_CD},
            #{CLOSE_MONTH},
            #{ORDER_COMP_CD},
            #{CLOSE_VER},
            #{CLOSE_NOTE}
        ) ON DUPLICATE KEY
	        UPDATE
	            CLOSE_NOTE = #{CLOSE_NOTE},
	            CLOSE_DT = NOW(),
		        UPDATE_DT = NOW()
    </insert>

    <insert id="createMonthFinishCloseHistory" parameterType="java.util.HashMap" >
        INSERT INTO TBL_MONTH_CLOSE_DETAIL (
            COMP_CD,
            CLOSE_MONTH,
            ORDER_COMP_CD,
            CLOSE_VER,
            CONTROL_SEQ,
            CLOSE_DETAIL_NOTE
        )
        SELECT
            #{COMP_CD},
            #{CLOSE_MONTH},
            #{ORDER_COMP_CD},
            #{CLOSE_VER},
            #{CONTROL_SEQ},
            #{CLOSE_DETAIL_NOTE}
        FROM DUAL
        WHERE #{WORK_TYPE} <![CDATA[ <> ]]> 'WTP050'
    </insert>

    <insert id="createControlMaster" parameterType="java.util.HashMap" >
        INSERT IGNORE INTO TBL_CONTROL (
            CONTROL_SEQ,
            CONTROL_NUM,
            CONTROL_VER,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            NOTE,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            MAIN_INSPECTION,
            EMERGENCY_YN,
            CONTROL_STATUS,
            STATUS_DT
            <!-- ,INSERT_ID -->
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            (SELECT IFNULL(MAX(A.CONTROL_SEQ), NEXTVAL(SEQ_CONTROL))
            FROM TBL_CONTROL A
            WHERE A.CONTROL_NUM = #{item.CONTROL_NUM}),
            #{item.CONTROL_NUM},
            0,
            #{item.COMP_CD},
            #{item.ORDER_COMP_CD},
            SF_GET_STAFF_SEQ(#{item.ORDER_COMP_CD}, #{item.ORDER_STAFF_NM}),
            #{item.DESIGNER_NM},
            #{item.NOTE},
            #{item.PROJECT_NM},
            #{item.MODULE_NM},
            #{item.DELIVERY_COMP_NM},
            #{item.LABEL_NOTE},
            #{item.MAIN_INSPECTION},
            IFNULL(#{item.EMERGENCY_YN}, 'N'),
            #{item.CONTROL_STATUS},
            NOW()
            <!-- ,INSERT_ID -->
        )
        </foreach>
    </insert>

    <insert id="createControlPart" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            PART_NUM,
            DRAWING_NUM,
            DRAWING_VER,
            PREV_DRAWING_NUM,
            ITEM_NM,
            WORK_TYPE,
            OUTSIDE_YN,
            WORK_FACTORY,
            MATERIAL_SUPPLY_YN,
            INNER_DUE_DT,
            SIZE_TXT,
            SIZE_TYPE,
            SIZE_W,
            SIZE_H,
            SIZE_T,
            SIZE_D,
            SIZE_L,
            MATERIAL_TYPE,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            SURFACE_TREAT,
            MATERIAL_NOTE,
            PART_UNIT_QTY,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            STATUS_DT
        ) VALUES (
            (SELECT CONTROL_SEQ
            FROM TBL_CONTROL
            WHERE CONTROL_NUM = #{CONTROL_NUM}),
            NEXTVAL(SEQ_CONTROL_PART),
            #{PART_NUM},
            #{DRAWING_NUM},
            0,
            #{PREV_DRAWING_NUM},
            #{ITEM_NM},
            #{WORK_TYPE},
            IFNULL(#{OUTSIDE_YN}, 'N'),
            #{WORK_FACTORY},
            IFNULL(#{MATERIAL_SUPPLY_YN}, 'N'),
            REPLACE(#{INNER_DUE_DT}, '-', SPACE(0)),
            #{SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            SF_GET_ETC_CD(1027, #{MATERIAL_DETAIL}),
            #{MATERIAL_DETAIL},
            #{MATERIAL_KIND},
            #{SURFACE_TREAT},
            #{MATERIAL_NOTE},
            #{PART_UNIT_QTY},
            #{ORIGINAL_SIDE_QTY},
            #{OTHER_SIDE_QTY},
            REPLACE(#{UNIT_FINAL_EST_AMT}, ',', SPACE(0)),
            REPLACE(#{UNIT_FINAL_AMT}, ',', SPACE(0)),
            NOW()
        )
    </insert>

    <insert id="createControlPartOrder" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_ORDER (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            ORDER_SEQ,
            ORDER_NUM,
            ORDER_QTY,
            ORDER_DUE_DT,
            DELIVERY_DT
            <!-- ,INSERT_ID -->
        )
        SELECT
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_ORDER),
            #{ORDER_NUM},
            #{ORDER_QTY},
            REPLACE(#{ORDER_DUE_DT}, '-', SPACE(0)),
            REPLACE(#{DELIVERY_DT}, '-', SPACE(0))
            <!-- ,NULL -->
        FROM DUAL
        WHERE
            #{ORDER_QTY} IS NOT NULL
            AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART_ORDER WHERE ORDER_NUM = #{ORDER_NUM})
    </insert>

    <insert id="createControlProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PROGRESS (
            CONTROL_SEQ,
            SEQ,
            ORDER_STATUS,
            STATUS_DT
        ) VALUES (
            #{CONTROL_SEQ},
            NEXTVAL(SEQ_CONTROL_PROGRESS),
            #{CONTROL_STATUS},
            NOW()
        )
    </insert>

    <insert id="createControlProgressList" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PROGRESS (
            CONTROL_SEQ,
            SEQ,
            ORDER_STATUS,
            STATUS_DT
            <!-- ,INSERT_ID -->
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            (SELECT A.CONTROL_SEQ
             FROM TBL_CONTROL A
             WHERE A.CONTROL_NUM = #{item.CONTROL_NUM}),
            NEXTVAL(SEQ_CONTROL_PROGRESS),
            #{item.STATUS},
            NOW()
            <!-- ,NULL -->
        )
        </foreach>
    </insert>

    <insert id="createControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT
        <!-- ,INSERT_ID, -->
        ) VALUES (
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            #{PART_STATUS},
            NOW()
        )
    </insert>

    <insert id="createControlPartProgressAll" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT
            <!-- ,INSERT_ID, -->
        )
        SELECT
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            #{PART_STATUS},
            NOW()
        FROM TBL_CONTROL_PART
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </insert>

    <insert id="createControlPartProgressList" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT
        <!-- ,INSERT_ID, -->
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            (SELECT A.CONTROL_SEQ
            FROM TBL_CONTROL A
            WHERE A.CONTROL_NUM = #{item.CONTROL_NUM}),
            (SELECT B.CONTROL_DETAIL_SEQ
            FROM TBL_CONTROL_PART B
                INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
            WHERE C.CONTROL_NUM = #{item.CONTROL_NUM}
                  AND B.CONTROL_DETAIL_SEQ NOT IN (SELECT D.CONTROL_DETAIL_SEQ
                                                   FROM TBL_CONTROL_PART_PROGRESS D
                                                   WHERE D.CONTROL_SEQ = B.CONTROL_SEQ)
            ORDER BY B.CONTROL_DETAIL_SEQ
            LIMIT 1),
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            #{item.STATUS},
            NOW()
        )
        </foreach>
    </insert>

    <update id="DeleteControl" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            DEL_YN = #{DEL_YN},
            UPDATE_DT = NOW()
        <!-- ,UPDATE_ID = NULL -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlMaster" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            CONTROL_NUM = #{CONTROL_NUM},
        </if>
        <if test="CONTROL_VER != null and CONTROL_VER != ''">
            CONTROL_VER = #{CONTROL_VER},
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            COMP_CD = #{COMP_CD},
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            ORDER_COMP_CD = #{ORDER_COMP_CD},
        </if>
        <if test="ORDER_STAFF_SEQ != null and ORDER_STAFF_SEQ != ''">
            ORDER_STAFF_SEQ = #{ORDER_STAFF_SEQ},
        </if>
        <if test="DESIGNER_NM != null and DESIGNER_NM != ''">
            DESIGNER_NM = #{DESIGNER_NM},
        </if>
        <if test="NOTE != null and NOTE != ''">
            NOTE = #{NOTE},
        </if>
        <if test="PROJECT_NM != null and PROJECT_NM != ''">
            PROJECT_NM = #{PROJECT_NM},
        </if>
        <if test="MODULE_NM != null and MODULE_NM != ''">
            MODULE_NM = #{MODULE_NM},
        </if>
        <if test="DELIVERY_COMP_NM != null and DELIVERY_COMP_NM != ''">
            DELIVERY_COMP_NM = #{DELIVERY_COMP_NM},
        </if>
        <if test="LABEL_NOTE != null and DELIVERY_COMP_NM != ''">
            LABEL_NOTE = #{LABEL_NOTE},
        </if>
        <if test="MAIN_INSPECTION != null and MAIN_INSPECTION != ''">
            MAIN_INSPECTION = #{MAIN_INSPECTION},
        </if>
        <if test="MAIN_INSPECTION != null and MAIN_INSPECTION != ''">
            EMERGENCY_YN = IFNULL(#{EMERGENCY_YN}, 'N'),
        </if>
        <if test="CONTROL_STATUS != null and CONTROL_STATUS != ''">
            CONTROL_STATUS = #{CONTROL_STATUS},
        </if>
        <if test="EST_SEQ != null and EST_SEQ != ''">
            EST_SEQ = #{EST_SEQ},
        </if>
        <if test="PRICE_CONFIRM != null and PRICE_CONFIRM != ''">
            PRICE_CONFIRM = #{PRICE_CONFIRM},
        </if>
            STATUS_DT = NOW(),
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPart" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
        <if test="PART_NUM != null and PART_NUM != ''">
            PART_NUM = #{PART_NUM},
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
            DRAWING_NUM = #{DRAWING_NUM},
        </if>
        <if test="DRAWING_VER != null and DRAWING_VER != ''">
            DRAWING_VER = #{DRAWING_VER},
        </if>
        <if test="PREV_DRAWING_NUM != null and PREV_DRAWING_NUM != ''">
            PREV_DRAWING_NUM = #{PREV_DRAWING_NUM},
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
            ITEM_NM = #{ITEM_NM},
        </if>
        <if test="WORK_TYPE != null and WORK_TYPE != ''">
            WORK_TYPE = #{WORK_TYPE},
        </if>
        <if test="OUTSIDE_YN != null and OUTSIDE_YN != ''">
            OUTSIDE_YN = IFNULL(#{OUTSIDE_YN}, 'N'),
        </if>
        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
            WORK_FACTORY = #{WORK_FACTORY},
        </if>
        <if test="MATERIAL_SUPPLY_YN != null and MATERIAL_SUPPLY_YN != ''">
            MATERIAL_SUPPLY_YN = IFNULL(#{MATERIAL_SUPPLY_YN}, 'N'),
        </if>
        <if test="INNER_DUE_DT != null and INNER_DUE_DT != ''">
            INNER_DUE_DT = DATE_FORMAT(REPLACE(#{INNER_DUE_DT}, '-', SPACE(0)), '%Y%m%d'),
        </if>
        <if test="SIZE_TXT != null and SIZE_TXT != ''">
            SIZE_TXT = #{SIZE_TXT},
            SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
        </if>
        <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
            MATERIAL_KIND = #{MATERIAL_KIND},
        </if>
        <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
            MATERIAL_TYPE = #{MATERIAL_TYPE},
        </if>
        <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
            MATERIAL_DETAIL = #{MATERIAL_DETAIL},
        </if>
        <if test="SURFACE_TREAT != null and SURFACE_TREAT != ''">
            SURFACE_TREAT = #{SURFACE_TREAT},
        </if>
        <if test="MATERIAL_FINISH_HEAT != null and MATERIAL_FINISH_HEAT != ''">
            MATERIAL_FINISH_HEAT = #{MATERIAL_FINISH_HEAT},
        </if>
        <if test="PART_UNIT_QTY != null and PART_UNIT_QTY != ''">
            PART_UNIT_QTY = #{PART_UNIT_QTY},
        </if>
        <if test="ORIGINAL_SIDE_QTY != null and ORIGINAL_SIDE_QTY != ''">
            ORIGINAL_SIDE_QTY = #{ORIGINAL_SIDE_QTY},
        </if>
        <if test="OTHER_SIDE_QTY != null and OTHER_SIDE_QTY != ''">
            OTHER_SIDE_QTY = #{OTHER_SIDE_QTY},
        </if>
        <if test="UNIT_MATERIAL_AMT != null and UNIT_MATERIAL_AMT != ''">
            UNIT_MATERIAL_AMT = #{UNIT_MATERIAL_AMT},
        </if>
        <if test="UNIT_TM_AMT != null and UNIT_TM_AMT != ''">
            UNIT_TM_AMT = #{UNIT_TM_AMT},
        </if>
        <if test="UNIT_GRIND_AMT != null and UNIT_GRIND_AMT != ''">
            UNIT_GRIND_AMT = #{UNIT_GRIND_AMT},
        </if>
        <if test="UNIT_HEAT_AMT != null and UNIT_HEAT_AMT != ''">
            UNIT_HEAT_AMT = #{UNIT_HEAT_AMT},
        </if>
        <if test="UNIT_SURFACE_AMT != null and UNIT_SURFACE_AMT != ''">
            UNIT_SURFACE_AMT = #{UNIT_SURFACE_AMT},
        </if>
        <if test="UNIT_PROCESS_AMT != null and UNIT_PROCESS_AMT != ''">
            UNIT_PROCESS_AMT = #{UNIT_PROCESS_AMT},
        </if>
        <if test="UNIT_ETC_AMT != null and UNIT_ETC_AMT != ''">
            UNIT_ETC_AMT = #{UNIT_ETC_AMT},
        </if>
        <if test="UNIT_MATERIAL_AUTO_YN != null and UNIT_MATERIAL_AUTO_YN != ''">
            UNIT_MATERIAL_AUTO_YN = IFNULL(#{UNIT_MATERIAL_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_TM_AUTO_YN != null and UNIT_TM_AUTO_YN != ''">
            UNIT_TM_AUTO_YN = IFNULL(#{UNIT_TM_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_GRIND_AUTO_YN != null and UNIT_GRIND_AUTO_YN != ''">
            UNIT_GRIND_AUTO_YN = IFNULL(#{UNIT_GRIND_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_HEAT_AUTO_YN != null and UNIT_HEAT_AUTO_YN != ''">
            UNIT_HEAT_AUTO_YN = IFNULL(#{UNIT_HEAT_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_SURFACE_AUTO_YN != null and UNIT_SURFACE_AUTO_YN != ''">
            UNIT_SURFACE_AUTO_YN = IFNULL(#{UNIT_SURFACE_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_PROCESS_AUTO_YN != null and UNIT_PROCESS_AUTO_YN != ''">
            UNIT_PROCESS_AUTO_YN = IFNULL(#{UNIT_PROCESS_AUTO_YN}, 'N'),
        </if>
        <if test="UNIT_AMT_NOTE != null and UNIT_AMT_NOTE != ''">
            UNIT_AMT_NOTE = #{UNIT_AMT_NOTE},
        </if>
        <if test="UNIT_FINAL_EST_AMT != null and UNIT_FINAL_EST_AMT != ''">
            UNIT_FINAL_EST_AMT = #{UNIT_FINAL_EST_AMT},
        </if>
        <if test="UNIT_FINAL_AMT != null and UNIT_FINAL_AMT != ''">
            UNIT_FINAL_AMT = #{UNIT_FINAL_AMT},
        </if>
        <if test="PART_STATUS != null and PART_STATUS != ''">
            PART_STATUS = #{PART_STATUS},
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD},
        </if>
        <if test="OUTSIDE_ORDER_NUM != null and OUTSIDE_ORDER_NUM != ''">
            OUTSIDE_ORDER_NUM = #{OUTSIDE_ORDER_NUM},
        </if>
        <if test="OUTSIDE_NOTE != null and OUTSIDE_NOTE != ''">
            OUTSIDE_NOTE = #{OUTSIDE_NOTE},
        </if>
        <if test="OUTSIDE_MATERIAL_SUPPLY_YN != null and OUTSIDE_MATERIAL_SUPPLY_YN != ''">
            OUTSIDE_MATERIAL_SUPPLY_YN = IFNULL(#{OUTSIDE_MATERIAL_SUPPLY_YN}, 'N'),
        </if>
        <if test="OUTSIDE_REQUEST_FINISH_YN != null and OUTSIDE_REQUEST_FINISH_YN != ''">
            OUTSIDE_REQUEST_FINISH_YN = IFNULL(#{OUTSIDE_REQUEST_FINISH_YN}, 'N'),
        </if>
        <if test="OUTSIDE_REQUEST_PROCESS_YN != null and OUTSIDE_REQUEST_PROCESS_YN != ''">
            OUTSIDE_REQUEST_PROCESS_YN = IFNULL(#{OUTSIDE_REQUEST_PROCESS_YN}, 'N'),
        </if>
        <if test="OUTSIDE_REQUEST_GRIND_YN != null and OUTSIDE_REQUEST_GRIND_YN != ''">
            OUTSIDE_REQUEST_GRIND_YN = IFNULL(#{OUTSIDE_REQUEST_GRIND_YN}, 'N'),
        </if>
        <if test="OUTSIDE_REQUEST_SURFACE_YN != null and OUTSIDE_REQUEST_SURFACE_YN != ''">
            OUTSIDE_REQUEST_SURFACE_YN = IFNULL(#{OUTSIDE_REQUEST_SURFACE_YN}, 'N'),
        </if>
        <if test="OUTSIDE_REQUEST_ETC != null and OUTSIDE_REQUEST_ETC != ''">
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC},
        </if>
        <if test="OUTSIDE_HOPE_DUE_DT != null and OUTSIDE_HOPE_DUE_DT != ''">
            OUTSIDE_HOPE_DUE_DT = DATE_FORMAT(REPLACE(#{OUTSIDE_HOPE_DUE_DT}, '-', SPACE(0)), '%Y%m%d'),
        </if>
        <if test="OUTSIDE_UNIT_AMT != null and OUTSIDE_UNIT_AMT != ''">
            OUTSIDE_UNIT_AMT = #{OUTSIDE_UNIT_AMT},
        </if>
            STATUS_DT = NOW(),
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID #{UPDATE_ID} -->
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateControlPartOrder" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET
            ORDER_NUM = #{ORDER_NUM},
            ORDER_QTY = #{ORDER_QTY},
            ORDER_DUE_DT = DATE_FORMAT(REPLACE(#{ORDER_DUE_DT}, '-', SPACE(0)), '%Y%m%d'),
            DELIVERY_DT = DATE_FORMAT(REPLACE(#{DELIVERY_DT}, '-', SPACE(0)), '%Y%m%d'),
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
              AND ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <select id="selectConfirmOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage" />
        WHERE 1 = 1
            AND A.CONTROL_STATUS = 'ORD001'
            AND B.OUTSIDE_YN = 'N'
            AND B.PART_STATUS IS NULL
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
        	AND B.MATERIAL_TYPE = #{MATERIAL_TYPE}
        </if>
        ORDER BY
        <if test="EMERGENCY_YN != null and EMERGENCY_YN != ''">
            A.EMERGENCY_YN DESC,
        </if>
            A.CONTROL_SEQ,
            B.PART_NUM
        <choose>
            <when test="SORT_BY == 'OCM00'">
                ,C.ORDER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
            <when test="SORT_BY == 'OCM01'">
                ,B.INNER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
        </choose>
    </select>

    <select id="selectIsProcessAssembly" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT EXISTS (SELECT *
               FROM TBL_CONTROL_PART
               WHERE 1 = 1
                   AND CONTROL_SEQ = #{CONTROL_SEQ}
                   AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                   AND WORK_TYPE = 'WTP050') AS FLAG
    </select>

    <update id="updateControlStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            CONTROL_STATUS = #{CONTROL_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW()
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = #{PART_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW()
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateControlPartStatusALL" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = #{PART_STATUS},
            STATUS_DT = NOW(),
            UPDATE_DT = NOW()
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <select id="selectProcessConfirmList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage"/>
        WHERE 1 = 1
            AND A.CONTROL_STATUS = 'ORD001'
            AND B.PART_STATUS = 'PRO002'
            AND B.WORK_TYPE NOT IN ('WTP050')
            AND B.OUTSIDE_YN = 'N'
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
            AND B.MATERIAL_KIND = #{MATERIAL_KIND}
        </if>
        ORDER BY
        <if test="EMERGENCY_YN != null and EMERGENCY_YN != ''">
            A.EMERGENCY_YN DESC,
        </if>
            A.CONTROL_SEQ,
            B.PART_NUM
        <choose>
            <when test="SORT_BY == 'OCM00'">
                ,C.ORDER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
            <when test="SORT_BY == 'OCM01'">
                ,B.INNER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
        </choose>
    </select>

    <select id="selectOutsideProcessingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage"/>
        WHERE 1 = 1
            AND A.CONTROL_STATUS = 'ORD001'
            <!-- AND B.PART_STATUS = 'PRO001' -->
            AND B.WORK_TYPE NOT IN ('WTP050')
            AND B.OUTSIDE_YN = 'Y'
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND C.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        ORDER BY
            C.CONTROL_SEQ,
            B.PART_NUM
        <choose>
            <when test="SORT_BY == 'OCM00'">
                ,C.ORDER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
            <when test="SORT_BY == 'OCM01'">
                ,B.INNER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
        </choose>
    </select>

    <select id="selectProcessCompleteList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage"/>
        WHERE 1 = 1
            AND A.CONTROL_STATUS = 'ORD001'
            AND B.PART_STATUS = 'PRO009'
            AND B.WORK_TYPE NOT IN ('WTP050')
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND C.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="MATERIAL_TYPE != null and MATERIAL_KIND != ''">
            AND B.MATERIAL_TYPE = #{MATERIAL_TYPE}
        </if>
        ORDER BY
            C.CONTROL_SEQ,
            B.PART_NUM
        <choose>
            <when test="SORT_BY == 'OCM00'">
                ,C.ORDER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
            <when test="SORT_BY == 'OCM01'">
                ,B.INNER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
        </choose>
    </select>

    <select id="manageControlCadFiles_select" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            UUID() AS ROWNUM,
            C.CONTROL_SEQ,
            C.CONTROL_STATUS,
            B.CONTROL_DETAIL_SEQ,
            C.CONTROL_NUM, <!-- 관리번호 -->
            B.ITEM_NM, <!-- 품명 -->
            B.PART_NUM, <!-- Part -->
            B.DRAWING_NUM,
            B.DRAWING_VER,
            #{NEW_DRAWING_NUM} AS NEW_DRAWING_NUM,
            #{FILE_NM} AS FILE_NM,
            #{DXF_GFILE_SEQ} AS DXF_GFILE_SEQ,
            #{TIME_PATH} AS TIME_PATH,
            #{FILE_PATH} AS FILE_PATH,
            CASE WHEN IMG_GFILE_SEQ IS NOT NULL THEN '이미 등록됨, Save 후 교체됨'  <!-- 이미 등록된 Save시 교체 진행  메시지 처리 -->
                 WHEN IFNULL(#{DXF_GFILE_SEQ}, 0) <![CDATA[ <= ]]> 0 THEN  '파일 업로드 오류' <!-- 파일 업로드 오류 및 CONVERT 사이즈 오류 -->
                 ELSE ''
            END AS UPLOAD_MESSAGE
        FROM TBL_CONTROL C
            INNER JOIN TBL_CONTROL_PART B ON C.CONTROL_SEQ = B.CONTROL_SEQ
        WHERE 1 = 1
            AND IFNULL(C.CONTROL_STATUS, 'ORD002') IN ('ORD002')
            AND #{ORGINAL_FILE_NM} LIKE CONCAT(B.DRAWING_NUM, '%')
    </select>

    <update id="manageControlCadFiles" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            DRAWING_NUM = #{NEW_DRAWING_NUM},
            DRAWING_UP_DT = NOW(),
            PREV_DRAWING_NUM = DRAWING_NUM,
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = NULL,
            IMG_GFILE_SEQ = NULL,
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE
        CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="manageControlCadFiles_mapping" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ}
    </update>

    <!-- 캐드 도면 교체 -->
    <select id="manageControlCadRevFiles_select" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            UUID() AS ROWNUM,
            C.CONTROL_SEQ,
            C.CONTROL_STATUS,
            B.CONTROL_DETAIL_SEQ,
            C.CONTROL_NUM, <!-- 관리번호 -->
            B.ITEM_NM, <!-- 품명 -->
            B.PART_NUM, <!-- Part -->
            B.DRAWING_NUM,
            B.DRAWING_VER,
            B.SIZE_TXT, <!-- 규격 -->
            SF_GET_DATE_F(B.DRAWING_UP_DT,'YY','M') AS DRAWING_UP_DT,
            #{NEW_DRAWING_NUM} AS NEW_DRAWING_NUM,
            #{FILE_NM} AS FILE_NM,
            #{DXF_GFILE_SEQ} AS DXF_GFILE_SEQ,
            #{TIME_PATH} AS TIME_PATH,
            #{FILE_PATH} AS FILE_PATH,
            CASE WHEN IFNULL(#{DXF_GFILE_SEQ}, 0) <![CDATA[ <= ]]> 0 THEN  '파일 업로드 오류' <!-- 파일 업로드 오류 및 CONVERT 사이즈 오류 -->
                 ELSE ''
            END AS UPLOAD_MESSAGE
        FROM TBL_CONTROL C
            INNER JOIN TBL_CONTROL_PART B ON C.CONTROL_SEQ = B.CONTROL_SEQ
        WHERE 1 = 1
            AND C.DEL_YN = 'N'
            AND IFNULL(C.CONTROL_STATUS, 'ORD002') = 'ORD001'
            AND #{ORGINAL_FILE_NM} LIKE CONCAT(B.DRAWING_NUM, '%')
    </select>

    <update id="manageControlCadRevFiles" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            DRAWING_NUM = #{NEW_DRAWING_NUM},
            DRAWING_VER = IFNULL(DRAWING_VER, 0) + 1,
            DRAWING_UP_DT = NOW(),
            PREV_DRAWING_NUM = DRAWING_NUM,
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = NULL,
            IMG_GFILE_SEQ = NULL,
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="manageControlCadRevFiles_mapping" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = NULL -->
        WHERE
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ}
    </update>

    <select id="selectCloseHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="controlManage"/>
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD003', 'ORD004')
            <!-- AND DATE_FORMAT(A.STATUS_DT, '%Y%m') = CONCAT(#{CLOSE_YEAR}, #{CLOSE_MONTH}) -->
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
            AND B.DRAWING_NUM = #{DRAWING_NUM}
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
            AND B.ITEM_NM = #{ITEM_NM}
        </if>
        <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
            AND B.MATERIAL_KIND = #{MATERIAL_KIND}
        </if>
        <if test="CONTROL_SEQ != null and CONTROL_SEQ != ''">
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
        </if>
        <if test="MODULE_NM != null and MODULE_NM != ''">
            AND A.MODULE_NM = #{MODULE_NM}
        </if>
        ORDER BY
        <if test="EMERGENCY_YN != null and EMERGENCY_YN != ''">
            A.EMERGENCY_YN DESC,
        </if>
        A.CONTROL_SEQ,
        B.PART_NUM
        <choose>
            <when test="SORT_BY == 'OCM00'">
                ,C.ORDER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
            <when test="SORT_BY == 'OCM01'">
                ,B.INNER_DUE_DT <if test="DESCENDING != null and DESCENDING != ''">DESC</if>
            </when>
        </choose>
    </select>

    <select id="selectSalesClosingHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.COMP_CD,
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
            SUBSTR(D.CLOSE_MONTH, 1, 4) AS YEAR,
            CONCAT(QUARTER(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m')), '분기') AS QUARTER,
            CONCAT(SUBSTR(D.CLOSE_MONTH, 5), '월') AS FINISH_MONTH,
            CONCAT(D.CLOSE_VER, '차') AS CLOSE_VER, <!-- 차수 -->
            A.ORDER_COMP_CD,
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            SUM(C.ORDER_QTY) AS ITEM_NUMBER,
            SUM(B.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
            SUM(B.UNIT_FINAL_AMT) * 0.1 AS VAT_AMOUNT,
            SUM(B.UNIT_FINAL_AMT) + SUM(B.UNIT_FINAL_AMT) * 0.1 AS TOTAL_AMOUNT,
            E.CLOSE_NOTE
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                                   AND A.COMP_CD = D.COMP_CD
                                                   AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
            INNER JOIN TBL_MONTH_CLOSE E ON D.CLOSE_MONTH = E.CLOSE_MONTH
                                            AND D.CLOSE_VER = E.CLOSE_VER
                                            AND D.COMP_CD = E.COMP_CD
                                            AND D.ORDER_COMP_CD = E.ORDER_COMP_CD
            WHERE 1 = 1
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="NOTE != null and NOTE != ''">
            AND A.NOTE LIKE CONCAT('%', #{ORDER_COMP_CD}, '%')
        </if>
        <choose>
            <when test="RANGE_SEARCH != null and RANGE_SEARCH != ''">
                AND (D.CLOSE_MONTH BETWEEN  DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_RIGHT}, #{CLOSE_MONTH_RIGHT}), '%Y%m'), '%Y%m'))
            </when>
            <otherwise>
                AND D.CLOSE_MONTH <![CDATA[ >= ]]> DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m')
            </otherwise>
        </choose>
        GROUP BY
            A.COMP_CD,
            A.ORDER_COMP_CD,
            D.CLOSE_MONTH,
            D.CLOSE_VER
        ORDER BY
            A.COMP_CD,
            D.CLOSE_MONTH,
            D.CLOSE_VER,
            A.ORDER_COMP_CD
    </select>

    <select id="selectMonthSaleStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
           ROW_NUMBER () OVER () AS ROWNUM, Z.YYYY, Z.COMP_CD, SF_GET_COMP_NM(Z.COMP_CD) AS COMP_NM, Z.ORDER_COMP_CD, SF_GET_COMP_NM(Z.ORDER_COMP_CD) AS ORDER_COMP_NM,
           CASE
               WHEN STATUS_TYPE = '1' THEN '입금'
               ELSE '매출'
           END STATUS_TYPE,
           SUM(CASE WHEN Z.MM = '01' THEN Z.AMT ELSE 0 END) 01_AMT,
           SUM(CASE WHEN Z.MM = '02' THEN Z.AMT ELSE 0 END) 02_AMT,
           SUM(CASE WHEN Z.MM = '03' THEN Z.AMT ELSE 0 END) 03_AMT,
           SUM(CASE WHEN Z.MM IN ('01', '02', '03') THEN Z.AMT ELSE 0 END) 03_SUM_AMT,
           SUM(CASE WHEN Z.MM = '04' THEN Z.AMT ELSE 0 END) 04_AMT,
           SUM(CASE WHEN Z.MM = '05' THEN Z.AMT ELSE 0 END) 05_AMT,
           SUM(CASE WHEN Z.MM = '06' THEN Z.AMT ELSE 0 END) 06_AMT,
           SUM(CASE WHEN Z.MM IN ('04', '05', '06') THEN Z.AMT ELSE 0 END) 06_SUM_AMT,
           SUM(CASE WHEN Z.MM = '07' THEN Z.AMT ELSE 0 END) 07_AMT,
           SUM(CASE WHEN Z.MM = '08' THEN Z.AMT ELSE 0 END) 08_AMT,
           SUM(CASE WHEN Z.MM = '09' THEN Z.AMT ELSE 0 END) 09_AMT,
           SUM(CASE WHEN Z.MM IN ('07', '08', '09') THEN Z.AMT ELSE 0 END) 09_SUM_AMT,
           SUM(CASE WHEN Z.MM = '10' THEN Z.AMT ELSE 0 END) 10_AMT,
           SUM(CASE WHEN Z.MM = '11' THEN Z.AMT ELSE 0 END) 11_AMT,
           SUM(CASE WHEN Z.MM = '12' THEN Z.AMT ELSE 0 END) 12_AMT,
           SUM(CASE WHEN Z.MM IN ('10', '11', '12') THEN Z.AMT ELSE 0 END) 12_SUM_AMT,
           SUM(Z.AMT) AS TOTAL_AMT
        FROM (
           SELECT
              F.YYYY, F.MM, G.STATUS_TYPE, G.COMP_CD, G.ORDER_COMP_CD, G.CLOSE_MONTH, G.AMT
           FROM TBL_YYYYMMDD F
              INNER JOIN (
                <!-- 입금 -->
                SELECT
                    '1' AS STATUS_TYPE, COMP_CD, ORDER_COMP_CD, DATE_FORMAT(DEPOSIT_DT, '%Y%m') AS CLOSE_MONTH, DEPOSIT_AMT AS AMT
                FROM TBL_MONEY_DEPOSIT
                WHERE SUBSTR(DEPOSIT_DT, 1, 4) = #{MONTH_SALE_YEAR}
                GROUP BY COMP_CD, ORDER_COMP_CD, DATE_FORMAT(DEPOSIT_DT, '%Y%m')
                UNION ALL
                <!-- 매출 -->
                 SELECT
                    '2' AS STATUS_TYPE, A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH, SUM(B.UNIT_FINAL_AMT * C.ORDER_QTY) AS AMT
                 FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.COMP_CD = D.COMP_CD
                        AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                    INNER JOIN TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD AND D.ORDER_COMP_CD = E.ORDER_COMP_CD
                        AND D.CLOSE_VER = E.CLOSE_VER AND D.CLOSE_MONTH = E.CLOSE_MONTH
                 WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.DEL_YN = 'N' AND IFNULL(B.PART_NUM, '0') = '0'
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.COMP_CD = D.COMP_CD AND A.ORDER_COMP_CD = D.ORDER_COMP_CD AND D.CLOSE_MONTH = E.CLOSE_MONTH AND D.CLOSE_VER = E.CLOSE_VER
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND SUBSTR(D.CLOSE_MONTH, 1, 4) = '2020'
                 GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
              ) G ON CONCAT(F.YYYY, F.MM) = G.CLOSE_MONTH
           WHERE F.YYYY = #{MONTH_SALE_YEAR}
        ) Z
        GROUP BY Z.YYYY, Z.COMP_CD, Z.ORDER_COMP_CD, Z.STATUS_TYPE
    </select>

    <insert id="insertControlBarcode" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_BARCODE (
            BARCODE_NUM,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            CONTROL_VER,
            DRAWING_VER
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            (SELECT CONCAT('C', DATE_FORMAT(CURDATE(), '%y%m'), LPAD(SUBSTR(MAX(A.BARCODE_NUM), 6) + 1, 5, '0'))
            FROM TBL_CONTROL_BARCODE A
            WHERE A.BARCODE_NUM LIKE CONCAT('C', DATE_FORMAT(CURDATE(), '%y%m'), '%')),
            (SELECT B.CONTROL_SEQ
            FROM TBL_CONTROL B
            WHERE B.CONTROL_NUM = #{item.CONTROL_NUM}),
            (SELECT C.CONTROL_DETAIL_SEQ
            FROM TBL_CONTROL_PART C
                INNER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ
            WHERE
                D.CONTROL_NUM = #{item.CONTROL_NUM}
                AND C.CONTROL_DETAIL_SEQ NOT IN (SELECT E.CONTROL_DETAIL_SEQ
                                                FROM TBL_CONTROL_BARCODE E
                                                WHERE E.CONTROL_SEQ = C.CONTROL_SEQ)
                                                ORDER BY C.CONTROL_DETAIL_SEQ
                                                LIMIT 1),
            IFNULL (#{CONTROL_VER}, 0),
            IFNULL (#{DRAWING_VER}, 0)
        )
        </foreach>
    </insert>

    <select id="selectControlTransactionStatementInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.ORDER_COMP_CD, <!-- 발주사 -->
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM , <!-- 발주사 -->
            A.COMP_CD, <!-- 공급사 -->
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM, <!-- 공급사 -->
            IFNULL((SELECT MAX(INVOICE_NUM)
                    FROM TBL_INVOICE_DETAIL
                    WHERE CONTROL_SEQ IN (${CONTROL_SEQ_STR})), CONCAT('IV-', (SELECT LPAD(SUBSTR(MAX(A.INVOICE_NUM), 4) + 1, 6, 0) AS INV_SEQ FROM TBL_INVOICE A))) AS INVOICE_NUM, <!-- 인보이스 넘버 -->
            (SELECT FORMAT(SUM(B.UNIT_FINAL_AMT * C.ORDER_QTY), 0)
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                       AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            WHERE 1 = 1
                AND A.CONTROL_SEQ IN (${CONTROL_SEQ_STR})
                AND A.COMP_CD = #{COMP_CD}
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                AND B.WORK_TYPE NOT IN ('WTP050')) AS TOTAL_AMT <!-- 금액 합계 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT JOIN TBL_INVOICE_DETAIL D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                               AND B.CONTROL_DETAIL_SEQ  = D.CONTROL_DETAIL_SEQ
            LEFT JOIN TBL_INVOICE E ON D.INVOICE_NUM = E.INVOICE_NUM
        WHERE 1 = 1
            AND A.CONTROL_SEQ IN (${CONTROL_SEQ_STR})
            AND A.COMP_CD = #{COMP_CD}
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND B.WORK_TYPE NOT IN ('WTP050') <!-- Part 부속은 제외(작업형태 파트가공) -->
        GROUP BY
            A.COMP_CD,
            A.ORDER_COMP_CD
    </select>

    <select id="selectControlTransactionStatementList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ,
            B.CONTROL_DETAIL_SEQ,
            SF_GET_CODE_NM(1038, A.CONTROL_STATUS, 'KR') AS CONTROL_STATUS_NM, <!-- 주문관리상태 -->
            C.ORDER_NUM, <!-- 발주번호 -->
            B.DRAWING_NUM, <!-- 도면번호 -->
            B.SIZE_TXT, <!-- 규격 -->
            '', <!-- 단위 -->
            B.UNIT_FINAL_AMT, <!-- 최종공급단가 -->
            C.ORDER_QTY, <!-- 발주정보_수량 -->
            B.UNIT_FINAL_AMT * C.ORDER_QTY AS TOTAL_AMT, <!-- 금액 계 -->
            C.PACKING_CNT <!-- 포장수량 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND A.CONTROL_SEQ IN (${CONTROL_SEQ_STR})
            AND A.COMP_CD = #{COMP_CD}
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND B.WORK_TYPE NOT IN ('WTP050') <!-- Part 부속은 제외(작업형태 파트가공) -->
    </select>

    <select id="selectTransactionStatementOrderStaff" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.ORDER_STAFF_SEQ,
            SF_GET_STAFF_NM(A.ORDER_STAFF_SEQ) AS ORDER_STAFF_NM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND A.CONTROL_SEQ IN (${CONTROL_SEQ_STR})
            AND A.COMP_CD = #{COMP_CD}
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            AND B.WORK_TYPE NOT IN ('WTP050') <!-- Part 부속은 제외(작업형태 파트가공) -->
        GROUP BY
        A.ORDER_STAFF_SEQ
    </select>

    <insert id="createInvoice" parameterType="java.util.HashMap" >
        INSERT INTO TBL_INVOICE (
            INVOICE_NUM,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            INVOICE_TITLE,
            INVOICE_DT
        ) VALUES (
            #{INVOICE_NUM},
            #{COMP_CD},
            #{ORDER_COMP_CD},
            #{ORDER_STAFF_SEQ},
            #{INVOICE_TITLE},
            NOW()
        ) ON DUPLICATE KEY
            UPDATE
                INVOICE_TITLE = #{INVOICE_TITLE},
                UPDATE_DT = NOW()
    </insert>

    <insert id="createInvoiceDetail" parameterType="java.util.HashMap" >
        INSERT INTO TBL_INVOICE_DETAIL (
            INVOICE_NUM,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            PACKING_CNT,
            NOTE
        ) VALUES (
            #{INVOICE_NUM},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            #{PACKING_CNT},
            #{NOTE}
        ) ON DUPLICATE KEY
            UPDATE
                PACKING_CNT = #{PACKING_CNT},
                NOTE = #{NOTE},
                UPDATE_DT = NOW()
    </insert>

    <select id="moneyReceiveStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER(ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD) AS ROW_NUM, Z.COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.COMP_CD) AS COMP_CD_NM,
            Z.ORDER_COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.ORDER_COMP_CD) AS ORDER_COMP_NM,
            Z.CLOSE_YEAR, SUM(Z.SALE_AMT) AS SALE_AMT, SUM(Z.CASH_AMT) AS CASH_AMT, SUM(Z.PAPER_AMT) AS PAPER_AMT,
            SUM(Z.DEPOSIT_TOTAL_AMT) AS DEPOSIT_TOTAL_AMT, SUM(Z.NOT_DEPOSIT_AMT) AS NOT_DEPOSIT_AMT,
            (SUM(Z.SALE_AMT) + SUM(Z.NOT_DEPOSIT_AMT)) - SUM(Z.DEPOSIT_TOTAL_AMT) AS NOT_DEPOSIT_TOTAL_AMT,
            Y.NOTE
        FROM (
            SELECT
                A.COMP_CD,
                A.ORDER_COMP_CD,
                DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y') as CLOSE_YEAR,
                SUM(E.FINAL_NEGO_AMT) AS SALE_AMT, 0 AS CASH_AMT, 0 AS PAPER_AMT, 0 AS DEPOSIT_TOTAL_AMT, 0 AS NOT_DEPOSIT_AMT
            FROM jmes.TBL_CONTROL A
                INNER JOIN jmes.TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND IFNULL(B.PART_NUM, '0') = '0'
                INNER JOIN jmes.TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                INNER JOIN jmes.TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.COMP_CD = D.COMP_CD AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                INNER JOIN jmes.TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD AND D.CLOSE_MONTH = E.CLOSE_MONTH AND D.ORDER_COMP_CD = E.ORDER_COMP_CD AND D.CLOSE_VER = E.CLOSE_VER
                    AND DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y') = #{MONEY_MANAGE_STATUS_YEAR}
            WHERE A.DEL_YN = 'N'
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y')
            UNION ALL
            -- 선택 년도 금액
            SELECT
                A.COMP_CD, A.ORDER_COMP_CD,
                DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') as CLOSE_YEAR,
                0 as SALE_AMT,
                SUM(CASE WHEN A.DEPOSIT_TYPE IN ('1') THEN A.DEPOSIT_AMT ELSE 0 END) AS CASH_AMT,
                SUM(CASE WHEN A.DEPOSIT_TYPE IN ('2', '3') THEN A.DEPOSIT_AMT ELSE 0 END) AS PAPER_AMT,
                SUM(A.DEPOSIT_AMT) AS DEPOSIT_TOTAL_AMT, 0 AS NOT_DEPOSIT_AMT
            FROM jmes.TBL_MONEY_DEPOSIT A
            WHERE DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') = #{MONEY_MANAGE_STATUS_YEAR}
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y')
            UNION ALL
            -- 전년동 미수 금액
            SELECT
                A.COMP_CD, A.ORDER_COMP_CD,
                #{MONEY_MANAGE_STATUS_YEAR} as CLOSE_YEAR,
                0 as SALE_AMT, 0 AS CASH_AMT, 0 AS PAPER_AMT, 0 AS DEPOSIT_TOTAL_AMT, SUM(A.DEPOSIT_AMT) AS NOT_DEPOSIT_AMT
            FROM jmes.TBL_MONEY_DEPOSIT A
            WHERE DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y') <![CDATA[ < ]]> #{MONEY_MANAGE_STATUS_YEAR}
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
                AND A.DEPOSIT_TYPE IN ('2', '3') AND A.DUE_PAY_YN = 'N'
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD
        ) Z
            LEFT OUTER JOIN jmes.TBL_MONEY_YEAR_NOTE Y ON Z.COMP_CD = Y.COMP_CD AND Z.ORDER_COMP_CD = Y.ORDER_COMP_CD AND Z.CLOSE_YEAR = Y.YYYY
        WHERE 1 = 1
        GROUP BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_YEAR
        ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD
    </select>

    <select id="moneyManageSalesList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER () AS ROW_NUM,
            Z.COMP_CD, Z.COMP_NM, Z.ORDER_COMP_CD, Z.ORDER_COMP_NM, Z.CLOSE_MONTH, Z.ORDER_AMT, Z.CLOSE_MONTH_NM, E.NOTE
        FROM (
            SELECT
                A.COMP_CD,
                (SELECT Z.COMP_NM FORM FROM jmes.TBL_COMPANY Z WHERE Z.COMP_CD = A.COMP_CD) AS COMP_NM,
                A.ORDER_COMP_CD,
                (SELECT Z.COMP_NM FORM FROM jmes.TBL_COMPANY Z WHERE Z.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                D.CLOSE_MONTH, DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y-%m') as CLOSE_MONTH_NM,
                SUM(E.FINAL_NEGO_AMT) AS ORDER_AMT
            FROM jmes.TBL_CONTROL A
                INNER JOIN jmes.TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND IFNULL(B.PART_NUM, '0') = '0'
                INNER JOIN jmes.TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                INNER JOIN jmes.TBL_MONTH_CLOSE_DETAIL D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.COMP_CD = D.COMP_CD AND A.ORDER_COMP_CD = D.ORDER_COMP_CD
                INNER JOIN jmes.TBL_MONTH_CLOSE E ON D.COMP_CD = E.COMP_CD AND D.CLOSE_MONTH = E.CLOSE_MONTH AND D.ORDER_COMP_CD = E.ORDER_COMP_CD AND D.CLOSE_VER = E.CLOSE_VER
                    <if test="MONEY_MANAGE_STATUS_YEAR != null and MONEY_MANAGE_STATUS_YEAR != ''">
                        AND E.CLOSE_MONTH LIKE CONCAT(#{MONEY_MANAGE_STATUS_YEAR}, '%')
                    </if>
            WHERE A.DEL_YN = 'N'
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                </if>
            GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
        ) Z
            LEFT OUTER JOIN jmes.TBL_MONEY_MONTH_NOTE E ON Z.CLOSE_MONTH = E.YYYYMM AND E.COMP_CD = Z.COMP_CD AND E.ORDER_COMP_CD = Z.ORDER_COMP_CD
        ORDER BY Z.COMP_CD, Z.ORDER_COMP_CD, Z.CLOSE_MONTH
    </select>

    <select id="moneyManageReceiveList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.DEPOSIT_SEQ,
            A.COMP_CD,
            (SELECT Z.COMP_NM FORM FROM jmes.TBL_COMPANY Z WHERE Z.COMP_CD = A.COMP_CD) AS COMP_CD_NM,
            A.ORDER_COMP_CD,
            (SELECT Z.COMP_NM FORM FROM jmes.TBL_COMPANY Z WHERE Z.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            A.DEPOSIT_DT, DATE_FORMAT(STR_TO_DATE(A.DEPOSIT_DT, '%Y%m%d'), '%Y-%m-%d') AS DEPOSIT_DATE, A.DEPOSIT_AMT,
            A.DEPOSIT_TYPE, jmes.SF_GET_CODE_NM('1074', A.DEPOSIT_TYPE, 'KR') AS DEPOSIT_TYPE_NM,
            A.DUE_DT, DATE_FORMAT(STR_TO_DATE(A.DUE_DT, '%Y%m%d'), '%Y-%m-%d') AS DUE_DATE,
            CASE WHEN IFNULL(A.DUE_DT, '99991231') <![CDATA[ <= ]]> DATE_FORMAT(NOW(), '%Y%m%d') AND DEPOSIT_TYPE IN ('2', '3') THEN 'Y' ELSE 'N' END OVER_DATE_YN,
            A.DUE_PAY_YN, A.DUE_PAY_AMT, A.NOTE
        FROM jmes.TBL_MONEY_DEPOSIT A
        WHERE 1 = 1
            <if test="COMP_CD != null and COMP_CD != ''">
                AND A.COMP_CD = #{COMP_CD}
            </if>
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="MONEY_RECEIVE_CLOSE_YEAR_ST != null and MONEY_RECEIVE_CLOSE_YEAR_ST != ''">
                AND A.DEPOSIT_DT BETWEEN CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ST}, #{MONEY_RECEIVE_CLOSE_MONTH_ST}, '01') AND CONCAT(#{MONEY_RECEIVE_CLOSE_YEAR_ED}, #{MONEY_RECEIVE_CLOSE_MONTH_ED}, '31')
            </if>
        ORDER BY A.COMP_CD, A.ORDER_COMP_CD, A.DEPOSIT_DT
    </select>

    <delete id="deleteMoneyManageReceive" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_MONEY_DEPOSIT
        WHERE DEPOSIT_SEQ = ${DEPOSIT_SEQ}
    </delete>

    <insert id="insertMoneyManageReceive" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_MONEY_DEPOSIT
            (DEPOSIT_SEQ, COMP_CD, ORDER_COMP_CD, DEPOSIT_DT,
             DEPOSIT_AMT, DEPOSIT_TYPE, DUE_DT, DUE_PAY_YN, DUE_PAY_AMT, NOTE, INSERT_ID)
        VALUES
            (NEXTVAL(SEQ_MONEY_DEPOSIT), #{COMP_CD}, #{ORDER_COMP_CD}, REPLACE(#{DEPOSIT_DATE}, '-', SPACE(0)),
             #{DEPOSIT_AMT}, #{DEPOSIT_TYPE}, REPLACE(#{DUE_DATE}, '-', SPACE(0)), IFNULL(#{DUE_PAY_YN}, 'N'), #{DUE_PAY_AMT}, #{NOTE}, 'system');
    </insert>

    <update id="updateMoneyManageReceive" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_MONEY_DEPOSIT
            SET
                COMP_CD = #{COMP_CD},
                ORDER_COMP_CD = #{ORDER_COMP_CD},
                DEPOSIT_DT = REPLACE(#{DEPOSIT_DATE}, '-', SPACE(0)),
                DEPOSIT_AMT = #{DEPOSIT_AMT},
                DEPOSIT_TYPE = #{DEPOSIT_TYPE},
                DUE_DT = REPLACE(#{DUE_DATE}, '-', SPACE(0)),
                DUE_PAY_YN = IFNULL(#{DUE_PAY_YN}, 'N'),
                DUE_PAY_AMT = #{DUE_PAY_AMT},
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = 'test'
        WHERE DEPOSIT_SEQ = ${DEPOSIT_SEQ}
    </update>

    <select id="selectTransactionStatementList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.ORDER_COMP_CD,
            X.ORDER_COMP_NM,
            X.INVOICE_NUM,
            X.ORDER_STAFF_SEQ,
            X.ORDER_STAFF_NM,
            X.COMP_CD,
            X.COMP_NM,
            X.PACKING_CNT,
            SUM(X.ORDER_QTY) AS ORDER_QTY,
            SUM(X.TOTAL_AMT) AS TOTAL_AMT,
            X.INVOICE_TITLE,
            SF_GET_DATE_F(X.INVOICE_DT,'YYYY','M') AS INVOICE_DT,
            ''
        FROM (SELECT
                  A.ORDER_COMP_CD,
                  SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                  A.INVOICE_NUM,
                  A.ORDER_STAFF_SEQ,
                  SF_GET_STAFF_NM(A.ORDER_STAFF_SEQ) AS ORDER_STAFF_NM,
                  A.COMP_CD, -- 공급사
                  SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
                  B.PACKING_CNT,  -- 품수
                  C.UNIT_FINAL_AMT,
                  D.ORDER_QTY,
                  C.UNIT_FINAL_AMT * D.ORDER_QTY AS TOTAL_AMT,
                  A.INVOICE_TITLE,
                  A.INVOICE_DT, -- UPDATED DT
                  '' -- 출력일시
              FROM TBL_INVOICE A
                  INNER JOIN TBL_INVOICE_DETAIL B ON A.INVOICE_NUM = B.INVOICE_NUM
                  INNER JOIN TBL_CONTROL_PART C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                  INNER JOIN TBL_CONTROL_PART_ORDER D ON C.CONTROL_SEQ = D.CONTROL_SEQ
                                                         AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
              WHERE B.CONTROL_SEQ IN (#{CONTROL_SEQ})) X
        GROUP BY X.INVOICE_NUM
    </select>

    <delete id="removeInvoice" parameterType="java.util.HashMap">
        DELETE FROM TBL_INVOICE
        WHERE INVOICE_NUM = #{INVOICE_NUM};
    </delete>

    <delete id="removeInvoiceDetail" parameterType="java.util.HashMap">
        DELETE FROM TBL_INVOICE_DETAIL
        WHERE INVOICE_NUM = #{INVOICE_NUM};
    </delete>

    <insert id="createControlExcel" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_EXCEL (
            JOB_SEQ,
            JOB_SEQ_KEY,
            PRICE_CONFIRM,
            COMP_CD,
            ORDER_COMP_CD,
            ORDER_STAFF_SEQ,
            DESIGNER_NM,
            NOTE,
            PROJECT_NM,
            MODULE_NM,
            DELIVERY_COMP_NM,
            LABEL_NOTE,
            MAIN_INSPECTION,
            EMERGENCY_YN,
            CONTROL_NUM,
            PART_NUM,
            DRAWING_NUM,
            ITEM_NM,
            WORK_TYPE,
            OUTSIDE_YN,
            WORK_FACTORY,
            MATERIAL_SUPPLY_YN,
            INNER_DUE_DT,
            SIZE_TXT,
            MATERIAL_DETAIL,
            MATERIAL_KIND,
            SURFACE_TREAT,
            MATERIAL_NOTE,
            PART_UNIT_QTY,
            ORIGINAL_SIDE_QTY,
            OTHER_SIDE_QTY,
            ORDER_NUM,
            ORDER_QTY,
            ORDER_DUE_DT,
            DELIVERY_DT,
            UNIT_FINAL_EST_AMT,
            UNIT_FINAL_AMT,
            PREV_DRAWING_NUM,
            CONTROL_STATUS
        ) VALUES
        <foreach collection="list" item="item" separator=",">
        (
            NEXTVAL(SEQ_DUMMY),
            #{IN_UID},
            #{item.PRICE_CONFIRM},
            #{item.COMP_CD},
            #{item.ORDER_COMP_CD},
            #{item.ORDER_STAFF_SEQ},
            #{item.DESIGNER_NM},
            #{item.NOTE},
            #{item.PROJECT_NM},
            #{item.MODULE_NM},
            #{item.DELIVERY_COMP_NM},
            #{item.LABEL_NOTE},
            #{item.MAIN_INSPECTION},
            IFNULL(#{item.EMERGENCY_YN}, 'N'),
            #{item.CONTROL_NUM},
            #{item.PART_NUM},
            #{item.DRAWING_NUM},
            #{item.ITEM_NM},
            #{item.WORK_TYPE},
            IFNULL(#{item.OUTSIDE_YN}, 'N'),
            #{item.WORK_FACTORY},
            IFNULL(#{item.MATERIAL_SUPPLY_YN}, 'N'),
            #{item.INNER_DUE_DT},
            #{item.SIZE_TXT},
            #{item.MATERIAL_DETAIL},
            #{item.MATERIAL_KIND},
            #{item.SURFACE_TREAT},
            #{item.MATERIAL_NOTE},
            #{item.PART_UNIT_QTY},
            #{item.ORIGINAL_SIDE_QTY},
            #{item.OTHER_SIDE_QTY},
            #{item.ORDER_NUM},
            #{item.ORDER_QTY},
            #{item.ORDER_DUE_DT},
            #{item.DELIVERY_DT},
            CAST(REPLACE(#{item.UNIT_FINAL_EST_AMT}, ',' ,SPACE(0)) AS INTEGER),
            CAST(REPLACE(#{item.UNIT_FINAL_AMT}, ',' ,SPACE(0)) AS INTEGER),
            #{item.PREV_DRAWING_NUM},
            #{item.CONTROL_STATUS}
        )
        </foreach>
    </insert>

    <select id="businessOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ,
            CASE WHEN A.EMERGENCY_YN = 'Y' THEN '긴급' ELSE '' END EMERGENCY_YN_NM,
            A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(C.DELIVERY_DT, '%Y%m%d'), '%m-%d') as DELIVERY_DT,
            A.CONTROL_NUM, C.ORDER_QTY, C.ORDER_NUM,
            SF_GET_CODE_NM('1013', B.PART_STATUS, 'EN') AS PART_STATUS,
            SF_GET_CODE_NM('1009', D.POP_POSITION, 'EN') AS LAST_POP_POSITION,
            G.INSPECT_GRADE, F.USER_NM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                <if test="INNER_DUE_DT != null and INNER_DUE_DT != ''">
                    AND C.ORDER_DUE_DT = REPLACE(#{INNER_DUE_DT}, '-', SPACE(0))
                </if>
            LEFT OUTER JOIN TBL_POP D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
               AND D.POP_SEQ = (SELECT MAX(X.POP_SEQ) FROM TBL_POP X WHERE D.POP_SEQ = X.POP_SEQ)
            LEFT OUTER JOIN TBL_COMPANY E ON A.ORDER_COMP_CD = E.COMP_CD AND E.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_USER F ON E.CHARGE_USER_ID = F.USER_ID AND F.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_INSPECT G ON C.CONTROL_SEQ = G.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ  AND G.INSPECT_TYPE =  '1'
               AND G.INSPECT_SEQ = (SELECT MAX(X.INSPECT_SEQ) FROM TBL_INSPECT X WHERE G.CONTROL_SEQ = X.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ  AND G.INSPECT_TYPE =  '1')
        WHERE 1 = 1
        ORDER BY C.ORDER_DUE_DT, A.ORDER_COMP_CD
    </select>

    <select id="businessMonthOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%Y-%m-%d') as `start`,
            CONCAT(F.COMP_NM, ' (', SUM(IFNULL(D.FINISH_QTY, 0)), '/',
                IFNULL(CASE WHEN MAX(E.PACKING_NUM) IS NULL THEN SUM(E.OUT_QTY)
                           WHEN MAX(E.PACKING_NUM) IS NOT NULL AND C.OUT_FINISH_DT IS NOT NULL THEN C.ORDER_QTY
                           ELSE 0
                          END, 0), '/',
               IFNULL(C.ORDER_QTY, 0), ')'
            ) AS `title`
        FROM TBL_CONTROL A
            INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.ORDER_DUE_DT BETWEEN #{SEL_START_DATE} AND #{SEL_END_DATE}
            LEFT OUTER JOIN TBL_MCT_WORK D ON B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_OUT E ON C.CONTROL_SEQ = E.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = E.ORDER_SEQ
        WHERE 1 = 1
        GROUP BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
    </select>

    <select id="businessEmergencyList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_CODE_NM('1013', B.PART_STATUS, 'EN') AS PART_STATUS
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND IFNULL(A.EMERGENCY_YN, 'N') = 'Y'
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

    <select id="businessOverOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_CODE_NM('1013', B.PART_STATUS, 'EN') AS PART_STATUS, G.USER_NM
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 INNER JOIN TBL_USER G ON F.CHARGE_USER_ID = G.USER_ID
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND A.OUT_FINISH_DT IS NULL
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

    <select id="businessOverDangerList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(C.ORDER_DUE_DT, '%Y%m%d'), '%m-%d') as ORDER_DUE_DT,
            DATE_FORMAT(STR_TO_DATE(A.OUT_FINISH_DT, '%Y%m%d'), '%m-%d') as OUT_FINISH_DT,
            F.COMP_NM, A.CONTROL_NUM, SUM(C.ORDER_QTY) AS ORDER_QTY,
            SF_GET_CODE_NM('1013', B.PART_STATUS, 'EN') AS PART_STATUS, G.USER_NM
        FROM TBL_CONTROL A
                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.PART_NUM IS NULL
                 INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.ORDER_DUE_DT BETWEEN DATE_FORMAT(DATE_ADD(NOW(), INTERVAL -3 DAY), '%Y%m%d') AND DATE_FORMAT(NOW(), '%Y%m%d')
                 INNER JOIN TBL_COMPANY F ON A.ORDER_COMP_CD = F.COMP_CD
                 INNER JOIN TBL_USER G ON F.CHARGE_USER_ID = G.USER_ID
                 LEFT OUTER JOIN TBL_OUT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND C.ORDER_SEQ = D.ORDER_SEQ
        WHERE 1 = 1
          AND A.OUT_FINISH_DT IS NULL
        GROUP BY A.CONTROL_SEQ
        ORDER BY C.ORDER_DUE_DT
    </select>

</mapper>