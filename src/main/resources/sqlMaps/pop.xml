<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="popMapper">

    <select id="selectPopList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY C.POP_DT) AS ROWNUM,
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            CASE WHEN B.EMERGENCY_YN = 'Y' THEN '긴' ELSE SPACE(0) END AS EMERGENCY_YN, <!-- 긴급 -->
            SF_GET_DATE_F(A.INNER_DUE_DT, '', '') AS INNER_DUE_DT, <!-- 내부가공납기 -->
            CASE WHEN A.PART_NUM IS NULL THEN B.CONTROL_NUM ELSE CONCAT(B.CONTROL_NUM, ' #', A.PART_NUM) END AS CONTROL_NUM, <!-- 작업지시번호 -->
            SF_GET_COMP_NM(B.ORDER_COMP_CD) AS ORDER_COMP_NM, <!-- 발주업체 이름 -->
            A.DRAWING_NUM, <!-- 도면 -->
            A.IMG_GFILE_SEQ,
            IFNULL(A.SIZE_TXT, SPACE(0)) AS SIZE_TXT, <!-- 규격 -->
            SF_GET_CODE_NM(1030, A.SURFACE_TREAT, 'KR') AS SURFACE_TREAT, <!-- 표면 처리 -->
            SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!-- 수량 -->
            SF_GET_CODE_NM(1009, D.POP_POSITION, 'KR') AS POP_PREV_POSITION, <!-- 이전 POP SEQ -->
            SF_GET_CODE_NM(1009, C.POP_POSITION, 'KR') AS POP_POSITION, <!-- 현재 등록된 위치 -->
            SF_GET_DATE_F(C.POP_DT, '', 'M') AS POP_DT, <!-- 위치 일시 -->
            CASE WHEN C.POP_DT <![CDATA[ < ]]> CURDATE() THEN 'N'
                 ELSE 'Y'
            END AS IS_TODAY,
            SF_GET_CODE_NM('1035',A.MATERIAL_TYPE ,'KO') AS MATERIAL_TYPE_NM,
            (SELECT X.PHOTO_GFILE_SEQ FROM TBL_USER X WHERE X.USER_ID = E.WORK_USER_ID) AS USER_IMG_SEQ,
            SF_GET_EQUIP_NM(E.EQUIP_SEQ) AS EQUIP_NM
        FROM TBL_CONTROL_PART A
             INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                <!-- AND B.CONTROL_STATUS = 'ORD001' --> <!-- 주문확정 -->
                AND B.OUT_FINISH_DT IS NULL AND B.DEL_YN = 'N' AND B.CONTROL_STATUS NOT IN ('ORD004')
             INNER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.POP_POSITION = #{popLocation}
                AND C.POP_SEQ = (SELECT MAX(K.POP_SEQ) FROM TBL_POP K WHERE K.CONTROL_SEQ = C.CONTROL_SEQ
                        AND K.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ
                )
             LEFT OUTER JOIN TBL_POP D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                AND D.POP_SEQ = (SELECT LAG(K.POP_SEQ, 1) OVER(PARTITION BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ ORDER BY K.POP_SEQ) AS POP_SEQ
                				FROM TBL_POP K WHERE K.CONTROL_SEQ = D.CONTROL_SEQ
                        AND K.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ ORDER BY K.POP_SEQ DESC LIMIT 1
                )
            LEFT OUTER JOIN TBL_MCT_WORK E ON E.CONTROL_SEQ = A.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND E.DEL_YN = 'N'
                AND E.MCT_WORK_SEQ = (
                    SELECT MAX(X.MCT_WORK_SEQ)
                    FROM jmes.TBL_MCT_WORK X
                    WHERE  X.DEL_YN = 'N'
                        AND X.CONTROL_SEQ = E.CONTROL_SEQ
                        AND X.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
                        AND X.WORK_FINISH_DT IS NULL
                    GROUP BY X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
                )
                AND E.WORK_FINISH_DT IS NULL
                AND E.WORK_STATUS IN ('DBS010', 'DBS020')
        WHERE 1 = 1
            AND NOT EXISTS (SELECT 1 FROM TBL_CONTROL_PART E
                            WHERE A.CONTROL_SEQ = E.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
                                AND E.PART_STATUS = 'PRO018' AND E.WORK_TYPE = 'WTP050'
            )
        ORDER BY C.POP_DT DESC
    </select>

    <select id="selectPopPartStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT
		       A.PART_STATUS, CASE WHEN C.POP_SEQ IS NULL THEN 'N' ELSE 'Y' END RECEIVE_YN
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
				AND B.BARCODE_NUM = #{popBarcode}
			LEFT OUTER JOIN TBL_POP C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
		WHERE 1=1
    </select>

    <select id="selectInsertPopPartStatus_Backup" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        	Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.POP_CUR_POSITION, Z.POP_PREV_POSITION, Z.CONTROL_STATUS, Z.OUTSIDE_YN, Z.PART_STATUS,
        	CASE WHEN Z.OUTSIDE_YN = 'Y' AND Z.PRO001 IS NOT NULL AND Z.PRO019 IS NULL THEN 'PRO019' ELSE '' END PRO019,  <!-- 외주 가공 입고 상태 처리 -->
        	CASE WHEN Z.PRO004 IS NOT NULL AND ORDER_COUNT > 0 AND Z.PRO005 IS NULL THEN 'PRO005' ELSE '' END PRO005, <!-- 소재 입고 상태 처리 -->
        	CASE WHEN Z.POP_PREV_POSITION = 'POP150' AND Z.POP_CUR_POSITION NOT IN ('POP150') THEN 'PRO013' ELSE '' END PRO013, <!-- 후가공 완료 상태 처리 -->
        	CASE WHEN Z.POP_PREV_POSITION = 'POP160' AND Z.POP_CUR_POSITION NOT IN ('POP160') THEN 'PRO015' ELSE '' END PRO015, <!-- 표면처리 완료 상태 처리 -->
        	CASE WHEN Z.WORK_COUNT > 0 AND Z.INNER_WORK_FINISH_DT IS NULL AND Z.POP_CUR_POSITION = 'POP100' THEN 'PRO009' ELSE '' END PRO009, <!-- 가공완료 상태 처리 -->
        	CASE WHEN Z.PRO018 IS NULL AND Z.WORK_TYPE = 'WTP020' THEN 'PRO018' ELSE '' END PRO018, <!-- 모도면 상태 처리 -->
        	CASE WHEN Z.INNER_WORK_FINISH_DT IS NULL AND Z.WORK_COUNT > 0 AND Z.POP_CUR_POSITION IN ('POP100', 'POP150', 'POP160') THEN 'Y' ELSE '' END INNER_WORK_FINISH_DT,
            CASE WHEN Z.OUTSIDE_YN = 'Y' AND Z.CONTROL_STATUS NOT IN ('ORD001') THEN 'X' ELSE '' END AS CHE_OUT001, <!-- 외주 가공의 경우 주문 확정 이후에 POP 스캔 가능  -->
            CASE WHEN Z.OUTSIDE_YN = 'N' AND Z.PRO002 IS NULL THEN 'X' ELSE '' END AS CHE_PRO002 <!-- 일반의 경우 가공 확정 이후 POP 스캔 가능 -->
        FROM (
        	SELECT
        	    A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
                IFNULL(H.CONTROL_STATUS, SPACE(0)) AS CONTROL_STATUS, <!-- CONTROL 상태 -->
        	    A.WORK_TYPE, <!-- 작업구분  -->
        	    #{popLocation} AS POP_CUR_POSITION, <!-- 현재 POP 스캔 코드 처리 대상 POP100 : 검사실, POP150: 후가공, POP160: 표면처리 -->
                IFNULL(A.PART_STATUS, SPACE(0)) AS PART_STATUS, <!-- CONTROL PART 현재 상태  -->
        	    A.INNER_WORK_FINISH_DT, <!-- 가공 완료 일시  -->
                C.POP_POSITION AS POP_PREV_POSITION, <!-- 이전 POP SEQ -->
                IFNULL(A.OUTSIDE_YN, 'N') AS OUTSIDE_YN, <!-- 외주 가공 여부  -->
        	    (SELECT COUNT(*) FROM TBL_MCT_WORK T
        	        WHERE A.CONTROL_SEQ = T.CONTROL_SEQ
        	     	    AND A.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND T.DEL_YN = 'N'
        	    ) AS WORK_COUNT,
                CASE WHEN D.PART_STATUS = 'PRO004' THEN 'PRO004' ELSE NULL END AS PRO004, <!-- 소재 주문 -->
                CASE WHEN D.PART_STATUS = 'PRO005' THEN 'PRO005' ELSE NULL END AS PRO005, <!-- 소재 입고 -->
                CASE WHEN D.PART_STATUS = 'PRO001' THEN 'PRO001' ELSE NULL END AS PRO001, <!-- 외주 가공 요청 -->
                CASE WHEN D.PART_STATUS = 'PRO019' THEN 'PRO019' ELSE NULL END AS PRO019, <!-- 외주 가공 입고 처리 -->
                CASE WHEN D.PART_STATUS = 'PRO009' THEN 'PRO009' ELSE NULL END AS PRO009, <!-- 가공완료  -->
                CASE WHEN D.PART_STATUS = 'PRO012' THEN 'PRO012' ELSE NULL END AS PRO012, <!-- 후 가공입고  -->
                CASE WHEN D.PART_STATUS = 'PRO013' THEN 'PRO013' ELSE NULL END AS PRO013, <!-- 후 가공 완료   -->
                CASE WHEN D.PART_STATUS = 'PRO014' THEN 'PRO014' ELSE NULL END AS PRO014, <!-- 표면 처리 입고   -->
                CASE WHEN D.PART_STATUS = 'PRO015' THEN 'PRO015' ELSE NULL END AS PRO015, <!-- 표면 처리 완료   -->
                CASE WHEN D.PART_STATUS = 'PRO018' THEN 'PRO018' ELSE NULL END AS PRO018, <!-- 조립전환   -->
                CASE WHEN D.PART_STATUS = 'PRO002' THEN 'PRO002' ELSE NULL END AS PRO002, <!-- 가공 확정 존재 유무 주문 -->
        	    (SELECT COUNT(*) FROM TBL_MATERIAL_ORDER T
        	        WHERE A.CONTROL_SEQ = T.CONTROL_SEQ
        	                AND A.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND T.ORDER_STATUS = 'MST002'
        	    ) AS ORDER_COUNT  <!-- 자재 주문 완료 건수 -->
        	FROM TBL_CONTROL_PART A
        	    INNER JOIN TBL_CONTROL H ON A.CONTROL_SEQ = H.CONTROL_SEQ  <!-- 확정 상태 -->
        	    INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
        	        AND B.BARCODE_NUM = #{popBarcode}
                LEFT OUTER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND C.POP_SEQ = (SELECT MAX(E.POP_SEQ) FROM TBL_POP E WHERE C.CONTROL_SEQ = E.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ) <!-- 현재 POP -->
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            	    AND D.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE D.CONTROL_SEQ = E.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
        	WHERE 1=1
            GROUP BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
        ) Z
    </select>

    <select id="selectInsertPopPartStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            CONCAT('[', DATE_FORMAT(NOW(), '%m/%d %H:%i:%s'), '] ') AS CONTEXT01,
            CONCAT(Z.CONTROL_NUM, CASE WHEN Z.PART_NUM IS NOT NULL THEN CONCAT(' #', Z.PART_NUM) ELSE SPACE(0) END) AS CONTEXT02,
            SF_GET_CODE_NM(1009, Z.POP_CUR_POSITION, 'KR') AS CONTEXT03,
            Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.POP_CUR_POSITION, Z.POP_PREV_POSITION, Z.CONTROL_STATUS, Z.OUTSIDE_YN, Z.PART_STATUS,
            Z.WORK_TYPE, <!-- 작업 구분 WTP010:단품 , WTP020:조립 , WTP030:수정 , WTP040:재고 , WTP050:파트 , WTP060:용접  -->
            CASE WHEN Z.PART_STATUS = 'PRO002' AND IFNULL(Z.MATERIAL_SUPPLY_YN, 'N') = 'N' THEN 'PRO021'
                 WHEN Z.PART_STATUS = 'PRO002' AND IFNULL(Z.MATERIAL_SUPPLY_YN, 'N') = 'Y' THEN 'PRO022'
                    ELSE ''
            END PRO021, <!-- 소재입고(보), 소재입고(사) 처리 -->
            CASE WHEN Z.OUTSIDE_YN = 'Y' AND Z.PRO001 IS NOT NULL AND Z.PRO019 IS NULL AND Z.OUTSIDE_STATUS != 'OST002' THEN 'PRO019' ELSE '' END PRO019,  <!-- 외주 가공 입고 상태 처리 -->
            CASE WHEN Z.PRO004 IS NOT NULL AND ORDER_COUNT > 0 AND Z.PRO005 IS NULL THEN 'PRO005' ELSE '' END PRO005, <!-- 소재 입고 상태 처리 -->
            CASE WHEN Z.POP_PREV_POSITION = 'POP150' AND Z.POP_CUR_POSITION NOT IN ('POP150') THEN 'PRO013' ELSE '' END PRO013, <!-- 후가공 완료 상태 처리 -->
            CASE WHEN Z.POP_PREV_POSITION = 'POP160' AND Z.POP_CUR_POSITION NOT IN ('POP160') THEN 'PRO015' ELSE '' END PRO015, <!-- 표면처리 완료 상태 처리 -->
            CASE WHEN Z.WORK_COUNT > 0 AND Z.INNER_WORK_FINISH_DT IS NULL AND Z.POP_CUR_POSITION = 'POP100' THEN 'PRO009' ELSE '' END PRO009, <!-- 가공완료 상태 처리 -->
            CASE WHEN Z.PRO018 IS NULL AND Z.WORK_TYPE = 'WTP020' THEN 'PRO018' ELSE '' END PRO018, <!-- 모도면 상태 처리 -->
            CASE WHEN Z.INNER_WORK_FINISH_DT IS NULL AND Z.WORK_COUNT > 0 AND Z.POP_CUR_POSITION IN ('POP100', 'POP150', 'POP160') THEN 'Y' ELSE '' END INNER_WORK_FINISH_DT,
            CASE WHEN Z.OUTSIDE_YN = 'Y' AND CONTROL_STATUS NOT IN ('ORD001') THEN 'X' ELSE '' END AS CHE_OUT001, <!-- 외주 가공의 경우 주문 확정 이후에 POP 스캔 가능  -->
            CASE WHEN Z.OUTSIDE_YN = 'N' AND Z.PART_STATUS IS NOT NULL AND PRO002 IS NULL THEN 'X' ELSE '' END AS CHE_PRO002, <!-- NULL 이 아닌경우 가공 확정 이후 POP 스캔 가능 -->
            CASE WHEN Z.SCAN_DRAWING_VER != Z.CURR_DRAWING_VER THEN 'X' ELSE '' END AS CHE_VER, <!-- 최선 바코드 정보와 스캔 바코드의 DRAWING_NUM 가 다른경우 -->
            CASE WHEN Z.DEL_YN = 'Y' THEN 'X' ELSE '' END AS CHE_DEL_YN, <!-- 주문 정보가 삭제된 경우  -->
            CASE WHEN Z.CONTROL_STATUS = 'ORD002' THEN 'X' ELSE '' END AS CHE_CANCEL_YN, <!-- 주문 정보가 취소 된 경우  -->
            CASE WHEN Z.OUTSIDE_YN = 'Y' AND Z.OUTSIDE_STATUS = 'OST002' THEN 'X' ELSE '' END AS CHE_OST002
        FROM (
            SELECT
                A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, H.CONTROL_NUM, A.PART_NUM,
                IFNULL(H.CONTROL_STATUS, SPACE(0)) AS CONTROL_STATUS, <!-- CONTROL 상태 -->
                A.WORK_TYPE, <!-- 작업구분  -->
                IFNULL(A.MATERIAL_SUPPLY_YN, SPACE(0)) AS MATERIAL_SUPPLY_YN, <!-- 소재 사급여부 -->
                #{popLocation} AS POP_CUR_POSITION, <!-- 현재 POP 스캔 코드 처리 대상 POP100 : 검사실, POP150: 후가공, POP160: 표면처리 -->
                IFNULL(A.PART_STATUS, SPACE(0)) AS PART_STATUS, <!-- CONTROL PART 현재 상태  -->
                A.INNER_WORK_FINISH_DT, <!-- 가공 완료 일시  -->
                <!-- IFNULL(SF_GET_POP_PREV_POSITION(1, 'SEQ', A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), SPACE(0)) AS POP_PREV_POSITION,  이전 POP SEQ -->
                C.POP_POSITION AS POP_PREV_POSITION, <!-- 이전 POP SEQ -->
                IFNULL(A.OUTSIDE_YN, 'N') AS OUTSIDE_YN, <!-- 외주 가공 여부  -->
                (SELECT COUNT(*) FROM TBL_MCT_WORK T
                    WHERE A.CONTROL_SEQ = T.CONTROL_SEQ
                        AND A.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND T.DEL_YN = 'N'
                ) AS WORK_COUNT,
                MAX(D.PART_STATUS) AS PRO004, MAX(G.PART_STATUS) AS PRO005, MAX(F.PART_STATUS) AS PRO001, MAX(I.PART_STATUS) AS PRO019,
                MAX(J.PART_STATUS) AS PRO009, MAX(K.PART_STATUS) AS PRO012, MAX(L.PART_STATUS) AS PRO013, MAX(M.PART_STATUS) AS PRO014,
                MAX(N.PART_STATUS) AS PRO015, MAX(O.PART_STATUS) AS PRO018, MAX(P.PART_STATUS) AS PRO002,
                (SELECT COUNT(*) FROM TBL_MATERIAL_ORDER T
                    WHERE A.CONTROL_SEQ = T.CONTROL_SEQ
                            AND A.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND T.ORDER_STATUS = 'MST002'
                ) AS ORDER_COUNT,  <!-- 자재 주문 완료 건수 -->
                B.BARCODE_NUM AS SCAN_BARCODE_NUM, B.CONTROL_VER AS SCAN_CONTROL_VER,  B.DRAWING_VER AS SCAN_DRAWING_VER, <!-- 바코드 스캔 정보 -->
                Q.BARCODE_NUM AS CURR_BARCODE_NUM, Q.CONTROL_VER AS CURR_CONTROL_VER,  Q.DRAWING_VER AS CURR_DRAWING_VER, <!-- 바코드 최선 정보 -->
                H.DEL_YN, <!-- 주문정보 삭제 유무 -->
                A.OUTSIDE_STATUS
            FROM TBL_CONTROL_PART A
                INNER JOIN TBL_CONTROL H ON A.CONTROL_SEQ = H.CONTROL_SEQ  <!-- 확정 상태 -->
                INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                        AND B.BARCODE_NUM = #{popBarcode}
                LEFT OUTER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                        AND C.POP_SEQ = (SELECT MAX(E.POP_SEQ) FROM TBL_POP E WHERE C.CONTROL_SEQ = E.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ) <!-- 현재 POP -->
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.PART_STATUS = 'PRO004' <!-- 소재 주문 -->
                    AND D.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE D.CONTROL_SEQ = E.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS G ON A.CONTROL_SEQ = G.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ AND G.PART_STATUS = 'PRO005' <!-- 소재 입고 -->
                    AND G.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE G.CONTROL_SEQ = E.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS F ON A.CONTROL_SEQ = F.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ AND F.PART_STATUS = 'PRO001' <!-- 외주 가공 요청 -->
                    AND F.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE F.CONTROL_SEQ = E.CONTROL_SEQ AND F.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS I ON A.CONTROL_SEQ = I.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = I.CONTROL_DETAIL_SEQ AND I.PART_STATUS = 'PRO019' <!-- 외주 가공 입고 처리 -->
                    AND I.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE I.CONTROL_SEQ = E.CONTROL_SEQ AND I.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS J ON A.CONTROL_SEQ = J.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ AND J.PART_STATUS = 'PRO009' <!-- 가공완료  -->
                    AND J.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE J.CONTROL_SEQ = E.CONTROL_SEQ AND J.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS K ON A.CONTROL_SEQ = K.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = K.CONTROL_DETAIL_SEQ AND K.PART_STATUS = 'PRO012' <!-- 후 가공입고  -->
                    AND K.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE K.CONTROL_SEQ = E.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS L ON A.CONTROL_SEQ = L.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = L.CONTROL_DETAIL_SEQ AND L.PART_STATUS = 'PRO013' <!-- 후 가공 완료   -->
                    AND L.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE L.CONTROL_SEQ = E.CONTROL_SEQ AND L.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS M ON A.CONTROL_SEQ = M.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO014' <!-- 표면 처리 입고   -->
                    AND M.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE M.CONTROL_SEQ = E.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS N ON A.CONTROL_SEQ = N.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ AND N.PART_STATUS = 'PRO015' <!-- 표면 처리 완료   -->
                    AND N.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE N.CONTROL_SEQ = E.CONTROL_SEQ AND N.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS O ON A.CONTROL_SEQ = O.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = O.CONTROL_DETAIL_SEQ AND O.PART_STATUS = 'PRO018' <!-- 조립전환   -->
                    AND O.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE O.CONTROL_SEQ = E.CONTROL_SEQ AND O.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_PART_PROGRESS P ON A.CONTROL_SEQ = P.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ AND P.PART_STATUS = 'PRO002' <!-- 가공 확정 존재 유무 주문 -->
                    AND P.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE P.CONTROL_SEQ = E.CONTROL_SEQ AND P.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0)
                LEFT OUTER JOIN TBL_CONTROL_BARCODE Q ON A.CONTROL_SEQ = Q.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = Q.CONTROL_DETAIL_SEQ AND Q.DEL_YN = 'N'
            WHERE 1=1
        ) Z
    </select>

    <insert id="insertProcessingStockIn" parameterType="java.util.HashMap">
        <selectKey keyProperty="INSIDE_IN_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_INSIDE_IN) FROM DUAL
        </selectKey>
        INSERT INTO TBL_INSIDE_IN (
            INSIDE_IN_SEQ, INSIDE_STOCK_NUM, INSIDE_STOCK_SEQ,
            IN_QTY, CONTROL_SEQ, CONTROL_DETAIL_SEQ, INSERT_ID, INFO_TYPE
        )
        SELECT #{INSIDE_IN_SEQ}
             , SF_GET_INSIDE_STOCK_NM(A.INSIDE_STOCK_SEQ)
             , A.INSIDE_STOCK_SEQ
             , A.REQUEST_QTY
             , A.TARGET_CONTROL_SEQ
             , A.TARGET_CONTROL_DETAIL_SEQ
             , #{LOGIN_USER_ID}
             , 'STO001'
        FROM TBL_INSIDE_OUT_REQUEST A
            INNER JOIN TBL_CONTROL_BARCODE B ON A.REQUEST_CONTROL_SEQ = B.CONTROL_SEQ AND A.REQUEST_CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
                        AND B.BARCODE_NUM = #{popBarcode}
            INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
          AND A.REQUEST_TYPE = 2
          AND A.OUT_DT IS NULL
    </insert>

    <insert id="insertProcessingStockOut" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSIDE_OUT (
            INSIDE_OUT_SEQ, INSIDE_STOCK_SEQ, INSIDE_STOCK_NUM,
            OUT_REQUEST_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ,
            OUT_QTY, OUT_DT, INSERT_ID, INFO_TYPE,
            INSIDE_IN_SEQ
        )
        SELECT NEXTVAL(SEQ_INSIDE_OUT), A.INSIDE_STOCK_SEQ, SF_GET_INSIDE_STOCK_NM(A.INSIDE_STOCK_SEQ),
            A.OUT_REQUEST_SEQ, A.REQUEST_CONTROL_SEQ, A.REQUEST_CONTROL_DETAIL_SEQ,
            A.REQUEST_QTY, NOW(), #{LOGIN_USER_ID}, 'STO002',
            #{INSIDE_IN_SEQ}
        FROM TBL_INSIDE_OUT_REQUEST A
            INNER JOIN TBL_CONTROL_BARCODE B ON A.REQUEST_CONTROL_SEQ = B.CONTROL_SEQ AND A.REQUEST_CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
                        AND B.BARCODE_NUM = #{popBarcode}
            INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
          AND A.REQUEST_TYPE = 2
          AND A.OUT_DT IS NULL
    </insert>

    <update id="updateProcessingStock" parameterType="java.util.HashMap">
        UPDATE TBL_INSIDE_OUT_REQUEST A
            INNER JOIN TBL_CONTROL_BARCODE B ON A.REQUEST_CONTROL_SEQ = B.CONTROL_SEQ AND A.REQUEST_CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
                        AND B.BARCODE_NUM = #{popBarcode}
            INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
        SET A.OUT_DT = NOW(),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.DEL_YN = 'N'
          AND A.REQUEST_TYPE = 2
          AND A.OUT_DT IS NULL
    </update>

    <update id="updateProcessingStockQty" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_INSIDE_IN B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.DEL_YN = 'N' AND B.INSIDE_IN_SEQ = #{INSIDE_IN_SEQ}
        SET
            A.ADDITIONAL_QTY = (B.IN_QTY * -1),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.WORK_TYPE = 'WTP040'
            AND A.INSIDE_STOCK_SEQ IS NOT NULL
    </update>

    <select id="selectScanBarcodeInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            CONCAT(H.CONTROL_NUM, CASE WHEN A.PART_NUM IS NOT NULL THEN CONCAT(' #', A.PART_NUM) ELSE SPACE(0) END) AS CONTROL_NUM_NM,
            IFNULL(SF_GET_CODE_NM(1009, D.POP_POSITION, 'KR'), SPACE(0)) AS POP_PREV_POSITION, <!-- 이전 POP SEQ -->
            IFNULL(SF_GET_CODE_NM(1009, C.POP_POSITION, 'KR'), SPACE(0)) AS POP_POSITION_NM, <!-- 현재 등록된 위치 -->
            CONCAT(SF_GET_CODE_NM(1009, #{popLocation}, 'KR'), ' (', SF_GET_DATE_F(NOW(), '', 'M'), ')') AS CHECK_POSITION_NM <!-- BARCODE 스캔 등록된 위치 -->
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL H ON A.CONTROL_SEQ = H.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.DEL_YN = 'N'
                    AND B.BARCODE_NUM = #{popBarcode}
            LEFT OUTER JOIN TBL_POP C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.POP_SEQ = (SELECT MAX(E.POP_SEQ) FROM TBL_POP E WHERE C.CONTROL_SEQ = E.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ) <!-- 현재 POP -->
            LEFT OUTER JOIN TBL_POP D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                        AND D.POP_SEQ = (SELECT LAG(K.POP_SEQ, 1) OVER(PARTITION BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ ORDER BY K.POP_SEQ) AS POP_SEQ
                                        FROM TBL_POP K WHERE K.CONTROL_SEQ = D.CONTROL_SEQ
                                AND K.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ ORDER BY K.POP_SEQ DESC LIMIT 1
                        )
        WHERE 1=1
    </select>

    <update id="insertControlPartProgressStatus" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PART_PROGRESS
            (CONTROL_SEQ, CONTROL_DETAIL_SEQ, SEQ, PART_STATUS, STATUS_DT, INSERT_ID)
        SELECT
            CONTROL_SEQ, CONTROL_DETAIL_SEQ, NEXTVAL(SEQ_CONTROL_PART_PROGRESS), #{PART_STATUS}, NOW(), #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="insertControlPartChildProgressStatus" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PART_PROGRESS
            (CONTROL_SEQ, CONTROL_DETAIL_SEQ, SEQ, PART_STATUS, STATUS_DT, INSERT_ID)
        SELECT
            CONTROL_SEQ, CONTROL_DETAIL_SEQ, NEXTVAL(SEQ_CONTROL_PART_PROGRESS), #{PART_STATUS}, NOW(), #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND WORK_TYPE = 'WTP050'  <!-- 모도면 part 상태를 업데이트 한다. -->
            AND PART_STATUS <![CDATA[ <> ]]> #{PART_STATUS}
    </update>

    <update id="updateControlPartChildProgressMappingStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_PART_PROGRESS B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.SEQ = (SELECT MAX(SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE A.CONTROL_SEQ = E.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ)
        SET A.PART_STATUS = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN B.PART_STATUS ELSE A.PART_STATUS END),
            A.STATUS_DT = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN NOW() ELSE A.STATUS_DT END),
            A.INNER_WORK_FINISH_DT = (CASE WHEN A.INNER_WORK_FINISH_DT IS NULL AND (SELECT COUNT(*) FROM TBL_MCT_WORK T
                            WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND T.DEL_YN = 'N'
                        ) > 0 THEN NOW() ELSE A.INNER_WORK_FINISH_DT END),
            A.UPDATE_DT = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN NOW() ELSE A.UPDATE_DT END),
            A.UPDATE_ID = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN #{LOGIN_USER_ID} ELSE A.UPDATE_ID END)
        WHERE 1=1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.WORK_TYPE = 'WTP050' <!-- 모도면 part 상태를 업데이트 한다. -->
    </update>

    <update id="updateControlPartInnerWorkFinishDtStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            INNER_WORK_FINISH_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1=1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateControlPartProgressMappingStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_PART_PROGRESS B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.SEQ = (SELECT MAX(SEQ) FROM TBL_CONTROL_PART_PROGRESS E WHERE A.CONTROL_SEQ = E.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ)
        SET A.PART_STATUS = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN B.PART_STATUS ELSE A.PART_STATUS END),
            A.STATUS_DT = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN NOW() ELSE A.STATUS_DT END),
            A.UPDATE_DT = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN NOW() ELSE A.UPDATE_DT END),
            A.UPDATE_ID = (CASE WHEN IFNULL(A.PART_STATUS, 'X') != IFNULL(B.PART_STATUS, 'X') THEN #{LOGIN_USER_ID} ELSE A.UPDATE_ID END)
        WHERE 1=1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateControlPartOutsideInDate" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
        SET
            A.OUTSIDE_STATUS = 'OST003',
            A.OUTSIDE_STATUS_DT = NOW(),
            A.OUTSIDE_IN_DT = NOW(),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1=1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updatePopControlPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_BARCODE B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.BARCODE_NUM = #{popBarcode}
        SET A.PART_STATUS = #{PART_STATUS},
            A.STATUS_DT = NOW(),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1=1
    </update>

    <update id="updatePopMaterialOrderStatus" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER A
        SET A.ORDER_STATUS = 'MST004',
            A.INSPECT_MATERIAL_YN = 'Y',
            A.INSPECT_SURFACE_YN = 'Y',
            A.INSPECT_SIZE_YN = 'Y',
            A.IN_DT = NOW(),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1=1
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <insert id="insertPopBarcode" parameterType="java.util.HashMap">
        INSERT INTO TBL_POP
            (POP_SEQ, POP_POSITION, POP_PREV_POSITION, POP_DT, CONTROL_SEQ, CONTROL_DETAIL_SEQ, INSERT_ID)
        SELECT
            NEXTVAL(SEQ_POP), #{POP_POSITION}, #{POP_PREV_POSITION}, NOW(), A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART A
        WHERE 1=1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </insert>

    <select id="selectBarcodeInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            CONTROL_VER
        FROM TBL_CONTROL_BARCODE
        WHERE 1 = 1
            AND BARCODE_NUM = #{popBarcode}
            AND DEL_YN = 'N'
    </select>

</mapper>