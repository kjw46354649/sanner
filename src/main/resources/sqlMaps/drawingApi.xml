<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="drawingAPI">

    <insert id="insertNcIfWorkData" parameterType="java.util.HashMap">
        <selectKey keyProperty="EQUIP_SEQ" resultType="string" order="BEFORE">
            SELECT SF_GET_EQUIP_SEQ(#{equip_name}) AS EQUIP_SEQ FROM DUAL
        </selectKey>
        INSERT INTO jmes.TBL_MCT_WORKING_LOG
        (
            MCT_LOG_SEQ,
            IF_SEQ, EQUIP_SEQ, MCT_WORK_SEQ,
            TOOL_ID, EVENT_TIME,
            EXECUTION, ACTIVE_TYPE,
            PART_CNT, CYCLE_FINISH_YN,
            MESSAGE, PROGRAM
        )
        SELECT NEXTVAL(jmes.SEQ_MCT_LOG) AS MCT_LOG_SEQ,
            #{seq} AS IF_SEQ,
            X.EQUIP_SEQ,
            (SELECT CASE WHEN #{active_type} = 'PGM_STOP' AND A.IF_WORK_START_DT IS NULL THEN NULL
                         ELSE MAX(A.MCT_WORK_SEQ)
                    END AS MCT_WORK_SEQ
            FROM TBL_MCT_WORK A
            WHERE A.DEL_YN = 'N'
                AND A.EQUIP_SEQ = #{EQUIP_SEQ}
                AND A.WORK_STATUS IN ('DBS010', 'DBS020')
                AND A.WORK_START_DT IS NOT NULL
            ) AS MCT_WORK_SEQ,
            #{tool_id} AS TOOL_ID, #{event_time} AS EVENT_TIME,
            #{execution} AS EXECUTION,
            CASE WHEN #{active_type} = 'EQUIP_OFF' THEN 'PGM_STOP' ELSE #{active_type} END AS ACTIVE_TYPE,
            #{part_cnt} AS PART_CNT, IFNULL(#{cycleCheck}, 'N') AS CYCLE_FINISH_YN,
            #{message}, #{program}
        FROM TBL_EQUIP X
        WHERE X.EQUIP_SEQ = #{EQUIP_SEQ}
            AND IFNULL(X.IF_USE_YN,'N') = 'Y'
    </insert>

    <update id="updateIfWorkingTime" parameterType="java.util.HashMap" >
        UPDATE TBL_MCT_WORK A
            INNER JOIN (
                SELECT SUM(CASE WHEN X.BEFORE_TYPE = 'PGM_ACTIVE' THEN TIMESTAMPDIFF(SECOND,X.BEFORE_TIME,X.EVENT_TIME) ELSE 0 END) AS ACTIVE_TOTAL
                    , SUM(CASE WHEN X.BEFORE_TYPE = 'PGM_STOP' THEN TIMESTAMPDIFF(SECOND,X.BEFORE_TIME,X.EVENT_TIME) ELSE 0 END) AS STOP_TOTAL
                    , CASE WHEN IFNULL(Y.CYCLE_FINISH_YN,'N') = 'Y' AND Y.ACTIVE_TYPE = 'PGM_STOP' THEN TIMESTAMPDIFF(SECOND, MAX(X.CYCLE_BEFORE_TIME), Y.EVENT_TIME)
                           ELSE 0
                      END AS CYCLE_TOTAL
                    , X.MCT_WORK_SEQ
                    , Y.ACTIVE_TYPE
                    , Y.EVENT_TIME
                    , Y.CYCLE_FINISH_YN
                FROM (
                    SELECT M.MCT_LOG_SEQ, M.EVENT_TIME, M.ACTIVE_TYPE, M.PART_CNT, M.CYCLE_FINISH_YN,
                        LAG(M.EVENT_TIME) OVER (ORDER BY M.EVENT_TIME) AS BEFORE_TIME,
                        LAG(M.ACTIVE_TYPE) OVER (ORDER BY M.EVENT_TIME) AS BEFORE_TYPE,
                        N.MCT_WORK_SEQ,
                        (SELECT MAX(T.MCT_LOG_SEQ) FROM TBL_MCT_WORKING_LOG T WHERE T.MCT_WORK_SEQ = M.MCT_WORK_SEQ AND T.EQUIP_SEQ = M.EQUIP_SEQ) AS MAX_SEQ,
                        CASE WHEN M.MCT_LOG_SEQ = (SELECT MAX(T.MCT_LOG_SEQ) FROM TBL_MCT_WORKING_LOG T WHERE T.MCT_WORK_SEQ = M.MCT_WORK_SEQ AND T.EQUIP_SEQ = M.EQUIP_SEQ) THEN LAG(M.EVENT_TIME) OVER (ORDER BY M.EVENT_TIME)
                        END AS CYCLE_BEFORE_TIME
                    FROM TBL_MCT_WORKING_LOG M
                        INNER JOIN TBL_MCT_WORK N ON M.MCT_WORK_SEQ = N.MCT_WORK_SEQ AND M.EQUIP_SEQ = N.EQUIP_SEQ
                            AND N.MCT_WORK_SEQ = (
                                SELECT MAX(Q.MCT_WORK_SEQ)
                                FROM TBL_MCT_WORK Q
                                WHERE Q.DEL_YN = 'N'
                                    AND Q.EQUIP_SEQ = N.EQUIP_SEQ
                                    AND Q.WORK_STATUS IN ('DBS010', 'DBS020')
                                    AND Q.WORK_START_DT IS NOT NULL
                                    AND Q.WORK_FINISH_DT IS NULL
                            )
                    WHERE 1=1
                        AND M.ACTIVE_TYPE != 'DISCONNECT'
                        AND M.EQUIP_SEQ IN
                        <foreach collection="dataList" item="item"  index="index"  open="(" close=")" separator=",">
                            #{item.EQUIP_SEQ}
                        </foreach>
                    ORDER BY M.EVENT_TIME
                ) X
                INNER JOIN TBL_MCT_WORKING_LOG Y ON Y.MCT_LOG_SEQ = X.MAX_SEQ
                GROUP BY X.MCT_WORK_SEQ
            ) B ON B.MCT_WORK_SEQ = A.MCT_WORK_SEQ
        SET
            A.IF_WORK_START_DT = CASE WHEN IF_WORK_START_DT IS NULL AND B.ACTIVE_TYPE = 'PGM_ACTIVE' THEN B.EVENT_TIME ELSE A.IF_WORK_START_DT END,
            A.WORK_ACTIVE_TIME = B.ACTIVE_TOTAL,
            A.WORK_STOP_TIME = B.STOP_TOTAL,
            A.WORK_STATUS = CASE WHEN B.ACTIVE_TYPE = 'PGM_ACTIVE' THEN 'DBS020'
                                 WHEN B.ACTIVE_TYPE = 'PGM_STOP' THEN 'DBS010'
                                 WHEN B.ACTIVE_TYPE = 'EQUIP_OFF' THEN 'DBS010'
                                 ELSE A.WORK_STATUS
                            END,
            A.COMPLETE_CYCLE_COUNT = CASE WHEN B.CYCLE_FINISH_YN = 'Y' AND B.ACTIVE_TYPE = 'PGM_STOP' THEN (IFNULL(A.COMPLETE_CYCLE_COUNT,0) + 1) ELSE A.COMPLETE_CYCLE_COUNT END,
            A.LATEST_CYCLE_TIME = CASE WHEN B.CYCLE_FINISH_YN = 'Y' AND B.ACTIVE_TYPE = 'PGM_STOP' THEN B.CYCLE_TOTAL ELSE A.LATEST_CYCLE_TIME END,
            A.UPDATE_DT = NOW()
        WHERE A.MCT_WORK_SEQ = B.MCT_WORK_SEQ
            AND A.DEL_YN = 'N'
            AND EXISTS (
                SELECT Q.EQUIP_SEQ
                FROM TBL_EQUIP Q
                WHERE Q.EQUIP_SEQ = A.EQUIP_SEQ
                    AND Q.DEL_YN = 'N'
                    AND IFNULL(Q.IF_USE_YN,'N') = 'Y'
            )
            AND B.ACTIVE_TYPE != 'DISCONNECT'
    </update>

    <select id="selectCurrentMctInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.MCT_WORK_SEQ, Z.EQUIP_SEQ, Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ,
            Z.IF_WORK_START_DT, Z.IF_WORK_FINISH_DT,
            Z.WORK_STATUS, Z.WORK_START_DT, Z.WORK_FINISH_DT, Z.UNIT_QTY, Z.GOAL_QTY,
            Z.COMPLETE_QTY, Z.COMPLETE_CYCLE_COUNT, Z.WORK_ACTIVE_TIME, Z.WORK_STOP_TIME,
            IFNULL(CASE WHEN Z.ACTIVE_TYPE = 'PGM_STOP' THEN CASE WHEN Z.LEFT_TIME <![CDATA[ < ]]> 0 THEN 0 ELSE Z.LEFT_TIME END
                        WHEN Z.ACTIVE_TYPE = 'PGM_ACTIVE' THEN CASE WHEN (Z.LEFT_TIME - Z.CURRENT_STATUS_TIME) <![CDATA[ < ]]> 0 THEN 0 ELSE (Z.LEFT_TIME - Z.CURRENT_STATUS_TIME) END
            END,0) AS LEFT_TIME,
            CASE WHEN Z.LATEST_CYCLE_TIME IS NOT NULL AND Z.LATEST_CYCLE_TIME > 0
                    THEN CONCAT(
                        TRUNCATE(IFNULL(Z.LATEST_CYCLE_TIME,0)/3600,0) , 'h ',
                        TRUNCATE((IFNULL(Z.LATEST_CYCLE_TIME,0)%3600)/60,0), 'm ',
                        TRUNCATE(((IFNULL(Z.LATEST_CYCLE_TIME,0)%3600) % 60),0), 's'
                    )
                 ELSE '-'
            END AS LATEST_CYCLE_TIME,
            IFNULL(Z.CURRENT_STATUS_TIME,0) AS CURRENT_STATUS_TIME,
            Z.DISCONNECT_YN, Z.EQUIP_OFF_YN, Z.EQUIP_OFF_DT,
            CONCAT('[', DATE_FORMAT(NOW(), '%m/%d %H:%i:%s'), '] ') AS CONTEXT01,
            SF_GET_CONTROL_PART_INFO(Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ) AS CONTEXT02,
            CASE WHEN Z.ACTIVE_TYPE = 'PGM_STOP' THEN '일시정지'
                 WHEN Z.ACTIVE_TYPE = 'PGM_ACTIVE' THEN '작업재개'
            END AS CONTEXT03
        FROM (
            SELECT B.MCT_WORK_SEQ, A.EQUIP_SEQ, B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ,
                B.IF_WORK_START_DT, B.IF_WORK_FINISH_DT,
                B.WORK_STATUS, B.WORK_START_DT, B.WORK_FINISH_DT, B.UNIT_QTY, B.GOAL_QTY,
                (IFNULL(B.UNIT_QTY,1) * IFNULL(B.COMPLETE_CYCLE_COUNT,0) + IFNULL(B.ADJUST_QTY,0)) AS COMPLETE_QTY,
                B.COMPLETE_CYCLE_COUNT,
                B.WORK_ACTIVE_TIME, B.WORK_STOP_TIME,
                ((B.LATEST_CYCLE_TIME * CEIL(B.GOAL_QTY / B.UNIT_QTY)) - B.WORK_ACTIVE_TIME) AS LEFT_TIME,
                B.LATEST_CYCLE_TIME,
                C.ACTIVE_TYPE,
                CASE WHEN C.EVENT_TIME IS NULL THEN B.WORK_START_DT
                     ELSE C.EVENT_TIME
                END AS EVENT_TIME,
                CASE WHEN C.EVENT_TIME IS NULL THEN TIMESTAMPDIFF(SECOND, B.WORK_START_DT, NOW())
                     ELSE TIMESTAMPDIFF(SECOND, C.EVENT_TIME, NOW())
                END AS CURRENT_STATUS_TIME,
                A.DISCONNECT_YN, A.EQUIP_OFF_YN, A.EQUIP_OFF_DT
            FROM TBL_EQUIP A
                LEFT OUTER JOIN TBL_MCT_WORK B ON A.EQUIP_SEQ = B.EQUIP_SEQ AND B.DEL_YN = 'N'
                    AND B.WORK_STATUS IN ('DBS010', 'DBS020') AND B.WORK_START_DT IS NOT NULL AND B.WORK_FINISH_DT IS NULL
                LEFT OUTER JOIN TBL_MCT_WORKING_LOG C ON C.MCT_WORK_SEQ = B.MCT_WORK_SEQ
                    AND C.MCT_LOG_SEQ = (
                        SELECT MAX(Q.MCT_LOG_SEQ)
                        FROM TBL_MCT_WORKING_LOG Q
                        WHERE Q.MCT_WORK_SEQ = C.MCT_WORK_SEQ
                            AND Q.ACTIVE_TYPE != 'DISCONNECT'
                    )
            WHERE A.DEL_YN = 'N'
                AND IFNULL(A.IF_USE_YN, 'N') = 'Y'
                AND A.EQUIP_SEQ IN
                <foreach collection="dataList" item="item"  index="index"  open="(" close=")" separator=",">
                    #{item.EQUIP_SEQ}
                </foreach>
        ) Z
    </select>

    <update id="updateEquipStatus" parameterType="java.util.HashMap" >
        UPDATE TBL_EQUIP
        SET DISCONNECT_YN = CASE WHEN UPPER(#{active_type}) = 'DISCONNECT' THEN 'Y' ELSE 'N' END,
            EQUIP_OFF_YN = CASE WHEN UPPER(#{active_type}) = 'EQUIP_OFF' THEN 'Y' ELSE 'N' END,
            EQUIP_OFF_DT = CASE WHEN UPPER(#{active_type}) = 'EQUIP_OFF' THEN #{event_time} ELSE NULL END
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
            AND DEL_YN = 'N'
    </update>
</mapper>