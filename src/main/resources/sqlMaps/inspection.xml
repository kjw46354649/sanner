<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="inspection">

    <select id="selectInspectionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT T.*
        FROM (
            SELECT
                  X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_COMP_CD, SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                , CASE WHEN IFNULL(X.EMERGENCY_YN, 'N') = 'Y' THEN '긴' ELSE SPACE(0) END AS EMERGENCY_YN_NM
                , CASE Z.INSPECT_GRADE WHEN 'GRD040' THEN '불' WHEN 'GRD050' THEN '반' WHEN 'GRD060' THEN '반' ELSE SPACE(0) END AS INSPECT_GRADE_SHORT_NM
                , X.EMERGENCY_YN, X.MAIN_INSPECTION, SF_GET_CODE_NM('1059', X.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
                , X.MCT_WORK_SEQ, X.INSPECT_SEQ, Z.INSPECT_TYPE, Z.INSPECT_GRADE
                , jmes.SF_GET_DATE_F(X.INNER_DUE_DT,'YY','') AS INNER_DUE_DT
                , P.POP_POSITION
                , SF_GET_CODE_NM('1009', P.POP_POSITION, #{LOGIN_LOCALE}) AS POP_NM <!-- 현재 등록된 위치 -->
                , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , jmes.SF_GET_CODE_NM('1013', X.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , X.IMG_GFILE_SEQ
                , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , jmes.SF_GET_CODE_NM('1033', X.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                , jmes.SF_GET_CODE_NM('1035', X.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                , jmes.SF_GET_CONTROL_PART_QTY(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ) AS ORDER_QTY
                , X.SAME_SIDE_YN
                , X.SIZE_TXT
                , jmes.SF_GET_DATE_F(Y.WORK_START_DT,'YY','M') AS MCT_WORK_DT        <!-- 변경 확인필요 -->
                , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Y.WORK_USER_ID) AS WORK_USER_NM
                , (SELECT M.EQUIP_NM FROM jmes.TBL_EQUIP M WHERE M.EQUIP_SEQ = Y.EQUIP_SEQ) AS EQUIP_NM
                , (SELECT NOTE FROM jmes.TBL_CAM M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS CAM_NOTE
                , X.NOTE
                , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Z.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
                , jmes.SF_GET_CODE_NM('1060', Z.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NMS
                , jmes.SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
                , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = Z.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(Z.INSERT_DT,'YY','') END AS Q_RETURN_DT
                , CASE WHEN Z.INSPECT_TYPE = '1' THEN CASE WHEN Z.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                  WHEN Z.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , jmes.SF_GET_CODE_NM('1010', Z.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
                , jmes.SF_GET_CODE_NM('1032', Z.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
                , jmes.SF_GET_CODE_NM('1025', Z.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , jmes.SF_GET_DATE_F(Z.INSERT_DT, '', 'M') AS Q_DT
                , X.OUT_FINISH_DT
                , X.NOT_RETURN_SETTLEMENT_CNT
                , X.WORK_FINISH_DT
            FROM (
                    SELECT
                          B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.ORDER_COMP_CD
                        , A.EMERGENCY_YN, A.MAIN_INSPECTION
                        , B.INNER_DUE_DT, B.OUTSIDE_COMP_CD, B.PART_STATUS
                        , A.CONTROL_NUM, B.PART_NUM, B.DRAWING_NUM
                        , B.MATERIAL_DETAIL, B.WORK_TYPE, B.MATERIAL_TYPE
                        , A.SAME_SIDE_YN
                        , B.PART_UNIT_QTY, B.SIZE_TXT, A.NOTE
                        , B.IMG_GFILE_SEQ
                        , SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', '') AS WORK_FINISH_DT
                        , (SELECT MAX(M.MCT_WORK_SEQ) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS MCT_WORK_SEQ
                        , (SELECT MAX(M.INSPECT_SEQ) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS INSPECT_SEQ
                        , A.OUT_FINISH_DT
                        , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.INSPECT_TYPE = '2' AND M.RETURN_SETTLEMENT_DT IS NULL) AS NOT_RETURN_SETTLEMENT_CNT
                    FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER_MAIN C
                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                        AND A.CONTROL_SEQ = C.CONTROL_SEQ
                        AND A.DEL_YN = 'N'
                        AND A.CONTROL_STATUS IN ('ORD001', 'ORD003') <!-- TODO: 컬럼 -->
                        AND (EXISTS (SELECT *
                                    FROM TBL_CONTROL_PART_PROGRESS
                                    WHERE 1 = 1
                                        AND CONTROL_SEQ = B.CONTROL_SEQ
                                        AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                                        AND PART_STATUS = 'PRO002') OR B.OUTSIDE_CONFIRM_DT IS NOT NULL)
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_OUTSIDE_COMP_CD !='' and SEL_OUTSIDE_COMP_CD != null">
                        AND B.OUTSIDE_COMP_CD = #{SEL_OUTSIDE_COMP_CD}
                    </if>
                    <if test="SEL_OUTSIDE_YN or SEL_OUTSIDE_YN == true">
                        AND IFNULL(B.OUTSIDE_YN,0) = 'N'  <!-- 외주대상 제외 체크하면 -->
                    </if>
                    <if test="SEL_INNER_WORK_FINISH_YN == 'true'">
                        AND B.INNER_WORK_FINISH_DT IS NOT NULL
                    </if>
                    ) X LEFT OUTER JOIN jmes.TBL_MCT_WORK Y ON Y.MCT_WORK_SEQ = X.MCT_WORK_SEQ
                        LEFT OUTER JOIN jmes.TBL_INSPECT Z ON Z.INSPECT_SEQ = X.INSPECT_SEQ
                        LEFT OUTER JOIN jmes.TBL_POP P ON X.CONTROL_SEQ = P.CONTROL_SEQ
                                                                AND X.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                                                                AND P.POP_SEQ = (SELECT MAX(POP_SEQ)
                                                                                FROM TBL_POP G
                                                                                WHERE 1 = 1
                                                                                    AND P.CONTROL_SEQ = G.CONTROL_SEQ
                                                                                    AND P.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ)
                                                            <!-- <if test="SEL_POP_POSITION !='' and SEL_POP_POSITION != null"> -->
<!--                                                                AND P.POP_POSITION = #{SEL_POP_POSITION}-->
                                                            <!-- </if> -->
                    WHERE (X.OUT_FINISH_DT IS NULL OR X.NOT_RETURN_SETTLEMENT_CNT > 0)
            ) T
            WHERE 1=1
            <if test="SEL_INSPECT_GRADE or SEL_INSPECT_GRADE == true">
                AND (T.INSPECT_GRADE IS NULL OR T.INSPECT_GRADE NOT IN ('GRD010','GRD020','GRD030'))  <!-- 검사완료품 제외를 체크하면 -->
            </if>
            <if test="SEL_POP_POSITION !='' and SEL_POP_POSITION != null">
                AND T.POP_POSITION = #{SEL_POP_POSITION}
            </if>
        ORDER BY T.INNER_DUE_DT, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ
    </select>

    <select id="selectInspectionPopInfoBasic" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', B.PART_NUM) END AS CONTROL_NUM
          , CASE WHEN B.DRAWING_VER IS NULL THEN B.DRAWING_NUM ELSE CONCAT(B.DRAWING_NUM, ' (', B.DRAWING_VER, ')') END AS DRAWING_NUM
          , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
          , jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'','') AS INNER_DUE_DT
          , A.EMERGENCY_YN
          , C.ITEM_NM
          , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
          , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
          , CASE
                WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                ELSE jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
            END ORDER_QTY_INFO
          , B.SIZE_TXT
          , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
          , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
          , CONCAT(B.SIZE_TXT, ' / ', jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM
          , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
          , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
          , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
          , (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
          , B.IMG_GFILE_SEQ
        FROM jmes.TBL_CONTROL A
          , jmes.TBL_CONTROL_PART B
          , jmes.TBL_CONTROL_PART_ORDER_MAIN C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectInspectionPopInfoList1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT jmes.SF_GET_CODE_NM('1078', X.NOTE_TYPE, #{LOGIN_LOCALE}) AS NOTE_TYPE_NM
          , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM jmes.TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM jmes.TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectInspectionPopInfoList2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , jmes.SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
          , jmes.SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                         WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
                    END AS Q_INSPECT_RESULT_NM <!-- 검사 코드 -->
          , CASE WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , A.ERROR_QTY AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                 WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS Q_INSPECT_RESULT_NM
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , jmes.SF_GET_CODE_NM('1010', A.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
          , jmes.SF_GET_CODE_NM('1032', A.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
          , jmes.SF_GET_CODE_NM('1025', A.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , jmes.SF_GET_DATE_F(A.INSERT_DT,'','M') AS Q_DT
        FROM jmes.TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <insert id="insertInspectionMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSPECT (INSPECT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                      , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
                                      , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
                                      , INSERT_ID, INSPECT_TYPE, INSPECT_NUM )
        VALUES (    NEXTVAL(SEQ_INSPECT)
                  , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
                  , #{INSPECT_METHOD}, #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
                  , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
                  , #{LOGIN_USER_ID}, '1', (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = #{CONTROL_SEQ} AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
                )
    </insert>
    <delete id="deleteInspectionMaster" parameterType="java.util.HashMap">
       DELETE FROM jmes.TBL_INSPECT WHERE INSPECT_SEQ = #{INSPECT_SEQ} AND INSPECT_TYPE = '1'
    </delete>
    <select id="selectInspectionPopInfoGrid01" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>
    <select id="selectInspectionPopInfoGrid02" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>


    <select id="selectCommItemDetailInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', IFNULL(B.PART_NUM, SPACE(0))) END AS CONTROL_NUM
          , CASE WHEN B.DRAWING_VER IS NULL THEN B.DRAWING_NUM ELSE CONCAT(B.DRAWING_NUM, ' (', B.DRAWING_VER, ')') END AS DRAWING_NUM
          , jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY','') AS INNER_DUE_DT
          , IFNULL(A.EMERGENCY_YN, 'N') AS EMERGENCY_YN
          , C.ITEM_NM
          , C.PROJECT_NM  <!-- 프로젝트 -->
          , C.MODULE_NM
          , jmes.SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM <!-- 주요검사품 -->
          , CASE WHEN jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0 THEN (CASE WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), ' / ', IFNULL(jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), 0),' (',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                                                                                                       ELSE CONCAT(jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}), ' / ', jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ))
                                                                                                  END)
                 ELSE jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE})
            END AS WORK_TYPE_NM_ORDER_QTY_INFO
          , B.SIZE_TXT
<!--          , jmes.SF_GET_MATERIAL_SIZE_TXT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS MATERIAL_SIZE_TXT -->
<!--          , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM -->
          , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
          , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
<!--          , CASE WHEN B.MATERIAL_SUPPLY_YN = 'Y' THEN '사급' -->
<!--                 ELSE (SELECT jmes.SF_GET_CODE_NM('1033', M.ORDER_STATUS, #{LOGIN_LOCALE}) FROM jmes.TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) -->
<!--            END AS MATERIAL_ORDER_STATUS_NM -->
          , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
<!--          , B.DRAWING_VER -->
          , B.DXF_GFILE_SEQ, B.PDF_GFILE_SEQ, B.IMG_GFILE_SEQ       <!-- 확인필요 -->
<!--          , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM -->
<!--          , C.DESIGNER_NM -->
          , CASE WHEN C.DESIGNER_NM IS NULL THEN SF_GET_COMP_NM(A.ORDER_COMP_CD)
                 ELSE CONCAT(SF_GET_COMP_NM(A.ORDER_COMP_CD), ' / ', C.DESIGNER_NM)
            END AS ORDER_COMP_NM_DESIGNER_NM
          , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN (SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT),'YYYY','M') FROM jmes.TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001') END AS CONTROL_CONFIRM_DT
          , jmes.SF_GET_DATE_F(A.OUT_FINISH_DT,'','M') AS OUT_FINISH_DT
          , ( SELECT CONCAT(jmes.SF_GET_DATE_F(Q.INSERT_DT,'YYYY',''),' / ',(SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Q.WORK_USER_ID))
              FROM jmes.TBL_CAM P, jmes.TBL_CAM_DETAIL Q, jmes.TBL_CONTROL_PART R
              WHERE P.CAM_SEQ = Q.CAM_SEQ
                AND P.CONTROL_SEQ = R.CONTROL_SEQ
                AND P.CONTROL_DETAIL_SEQ = R.CONTROL_DETAIL_SEQ
                AND R.DRAWING_NUM = B.DRAWING_NUM
              ORDER BY Q.SEQ DESC
              LIMIT 1
            ) AS WORK_HISTORY_INFO <!-- 과거 경험 -->
            , (SELECT
                    CASE
                        WHEN M.START_DT IS NOT NULL AND M.FINISH_DT IS NOT NULL THEN 'CWS030'  -- 완료 상태 -->
                        WHEN M.START_DT IS NOT NULL AND M.FINISH_DT IS NULL THEN 'CWS020'   -- 진행중 상태 -->
                        ELSE 'CWS010'
                    END
               FROM TBL_CAM M
               WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_SEQ) AS CAM_STATUS <!-- CAM 작업 상태 -->
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN ( SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT), '', 'M')
                                                                              FROM jmes.TBL_CONTROL_PART_PROGRESS M
                                                                              WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO002')
            END AS PROCESS_CONFIRM_DT <!-- 가공확정 일시 -->
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN ( SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT), '', 'M')
                                                                              FROM jmes.TBL_CONTROL_PART_PROGRESS M
                                                                              WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO009')
            END AS PROCESS_FINISH_DT <!-- 가공완료 일시 -->
          , CASE WHEN B.OUTSIDE_STATUS IN ('OST001', 'OST003', 'OST004') THEN ( SELECT jmes.SF_GET_DATE_F(MAX(M.INSERT_DT), '', 'M')
                                                                                FROM jmes.TBL_OUTSIDE_REQUEST_DETAIL M
                                                                                WHERE DEL_YN = 'N' AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ)
            END AS OUTSIDE_PROCESS_CONFIRM_DT <!-- 외주요청 일시 -->
          , jmes.SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT <!-- 외주입고 일시 -->
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN (SELECT jmes.SF_GET_DATE_F(MAX(M.ORDER_DT), '', 'M')
                                                                             FROM jmes.TBL_MATERIAL_ORDER M
                                                                             WHERE B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ) END AS MATERIAL_ORDER_DT <!-- 소재주문 일시 -->
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN (SELECT jmes.SF_GET_DATE_F(MAX(M.IN_DT), '', 'M')
                                                                             FROM jmes.TBL_MATERIAL_ORDER M
                                                                             WHERE B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ) END AS MATERIAL_IN_DT  <!-- 소재입고 일시 -->
          , ( SELECT SF_GET_CODE_NM('1009', POP_POSITION, #{LOGIN_LOCALE})
              FROM jmes.TBL_POP M
              WHERE  B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ
                  AND M.POP_SEQ = (SELECT MAX(K.POP_SEQ) FROM jmes.TBL_POP K WHERE K.CONTROL_SEQ = M.CONTROL_SEQ
                                      AND K.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ)) AS POP_POSITION_NM
          , jmes.SF_GET_DATE_F(OUTSIDE_CONFIRM_DT, '', 'M') AS OUTSIDE_CONFIRM_DT <!-- 외주확정 일시 -->
          , CASE WHEN B.MATERIAL_FINISH_HEAT = 'FNL030' THEN '열처리' ELSE SPACE(0) END AS MATERIAL_FINISH_HEAT
        FROM jmes.TBL_CONTROL A , jmes.TBL_CONTROL_PART B , jmes.TBL_CONTROL_PART_ORDER_MAIN C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.CONTROL_SEQ = C.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectCommItemDetailInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        -- MPR040(선반), MPR010(NC), MPR020(밀링), MPR030(연마)
        SELECT IFNULL(SUM(X.WORK_TIME),0) AS WORK_TIME_TOTAL
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR040' THEN WORK_TIME END),0) AS WORK_TIME_MPR040
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR010' THEN WORK_TIME END),0) AS WORK_TIME_MPR010
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR020' THEN WORK_TIME END),0) AS WORK_TIME_MPR020
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR030' THEN WORK_TIME END),0) AS WORK_TIME_MPR030
        FROM (  SELECT C.PROCESS_TYPE, SUM(TIMESTAMPDIFF(MINUTE, B.WORK_START_DT, B.WORK_STOP_DT)) AS WORK_TIME
                FROM jmes.TBL_MCT_WORK A, jmes.TBL_MCT_WORK_TIME B, jmes.TBL_EQUIP C
                WHERE A.MCT_WORK_SEQ = B.MCT_WORK_SEQ
                  AND A.EQUIP_SEQ = C.EQUIP_SEQ
                  AND A.DEL_YN = 'N'
                  AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                  AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  AND C.PROCESS_TYPE IN ('MPR010','MPR020','MPR030','MPR040')
                GROUP BY C.PROCESS_TYPE
              ) X
    </select>
    <select id="selectCommItemDetailInfoGrid1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.MCT_WORK_SEQ) AS RNUM
          , B.PROCESS_TYPE, jmes.SF_GET_CODE_NM('1010', B.PROCESS_TYPE, #{LOGIN_LOCALE}) AS PROCESS_TYPE_NM
          , B.EQUIP_NM
          , jmes.SF_GET_CODE_NM('1079', A.WORK_STATUS, #{LOGIN_LOCALE}) AS WORK_STATUS
          , jmes.SF_GET_DATE_F(A.WORK_START_DT,'','M') AS WORK_START_DT
          , jmes.SF_GET_DATE_F(A.WORK_FINISH_DT,'','M') AS WORK_FINISH_DT
          , (SELECT SUM(TIMESTAMPDIFF(MINUTE, M.WORK_START_DT, M.WORK_STOP_DT)) FROM jmes.TBL_MCT_WORK_TIME M WHERE M.MCT_WORK_SEQ = A.MCT_WORK_SEQ) AS WORKING_TIME     -- 확인
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.WORK_USER_ID) AS WORK_USER
          , A.FINISH_QTY
          , A.ERROR_QTY
        FROM jmes.TBL_MCT_WORK A, jmes.TBL_EQUIP B
        WHERE A.EQUIP_SEQ = B.EQUIP_SEQ
          AND A.DEL_YN = 'N'
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>

    <select id="selectCommItemDetailInfoGrid2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.POP_SEQ
            , SF_GET_CODE_NM(1009, A.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION_NM <!-- 현재 등록된 위치 -->
            , jmes.SF_GET_DATE_F(A.POP_DT,'','M') AS POP_DT
        FROM jmes.TBL_POP A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY A.POP_SEQ DESC
    </select>

    <select id="selectCommItemDetailInfoGrid3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
       SELECT jmes.SF_GET_CODE_NM('1078', X.NOTE_TYPE, #{LOGIN_LOCALE}) AS NOTE_TYPE_NM
          , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM jmes.TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM jmes.TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectCommItemDetailInfoGrid4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY B.CAM_SEQ) AS RNUM
          , B.SEQ AS CAM_SEQ
          , SF_GET_CODE_NM(1080, B.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION <!-- CAM 가공위치 -->
          , B.WORK_DESC
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = B.WORK_USER_ID) AS WORK_USER_NM
          , B.CAM_GFILE_SEQ    -- 확인
          , CASE WHEN B.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE B.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXC') ELSE SPACE(0) END CAM_FILE_SEQ <!-- CAM FILE -->
          , CASE WHEN B.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE B.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXN') ELSE SPACE(0) END NC_FILE_SEQ <!-- NC FILE -->
          , CASE WHEN A.START_DT IS NOT NULL AND A.FINISH_DT IS NULL THEN '(진행중)' ELSE SPACE(0) END AS STATUS_INFO
          , CASE WHEN A.FINISH_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(A.FINISH_DT,'YYYY','M')
                 WHEN A.START_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(A.START_DT,'YYYY','M')
            END UPDATE_TIME_INFO
        FROM jmes.TBL_CAM A, jmes.TBL_CAM_DETAIL B
        WHERE A.CAM_SEQ = B.CAM_SEQ
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <select id="selectCommItemDetailInfoGrid5" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , jmes.SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , CONCAT( CASE
                        WHEN A.INSPECT_GRADE IN ('GRD010', 'GRD020', 'GRD0320') THEN '적합'
                        WHEN A.INSPECT_GRADE = 'GRD040' THEN '부적합'
                        WHEN A.INSPECT_GRADE IN ('GRD050', 'GRD060') THEN '반품'
                    END, '(', jmes.SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}), ')') AS Q_INSPECT_GRADE_NOTE
<!--           , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE -->
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN A.ERROR_QTY END AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                 WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS Q_INSPECT_RESULT_NM
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , jmes.SF_GET_CODE_NM('1032', A.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
          , jmes.SF_GET_CODE_NM('1025', A.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
        FROM jmes.TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>

    <select id="selectOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ, T.INSPECT_SEQ
            , T.ORDER_COMP_NM
            , T.ORDER_NUM
            , jmes.SF_GET_DATE_F(T.ORDER_DUE_DT,'YY','') AS ORDER_DUE_DT
            , jmes.SF_GET_DATE_F(T.INNER_DUE_DT,'YY','') AS INNER_DUE_DT
            , T.OUTSIDE_COMP_NM
            , T.CONTROL_NUM
            , T.PART_NUM
            , T.DRAWING_NUM
            , T.WORK_TYPE_NM
            , T.MATERIAL_DETAIL_NM
            , T.SURFACE_TREAT_NM
            , T.SIZE_TXT
            , T.ORDER_QTY
            , T.OUT_QTY
            , jmes.SF_GET_DATE_F(T.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.RETURN_QTY
            , jmes.SF_GET_DATE_F(T.RETURN_LAST_DT,'YY','') AS RETURN_LAST_DT
            , CASE WHEN T.RETURN_ING_CNT = 0 THEN jmes.SF_GET_DATE_F(T.RETURN_FINISH_DT,'YY','') END AS RETURN_FINISH_DT
            , T.ORDER_PACKING_NUM_CNT
            , T.PACKING_CNT
            , T.Q_SEQ
            , T.Q_INSPECT_GRADE_NOTE
            , T.Q_ERROR_QTY
            , T.Q_INSPECT_RESULT_NM
            , T.Q_INSPECT_DESC
            , T.Q_ERROR_ACTION_NM
            , T.Q_ERROR_NOTE
            , T.PART_STATUS_NM
            , T.POP_NM
            , T.IMG_GFILE_SEQ
            , T.WORK_FINISH_DT
            , T.ORIGINAL_SIDE_QTY
            , T.OTHER_SIDE_QTY
            , T.WORK_FACTORY_NM
            , T.MATERIAL_RECEIPT_DT
            , T.OUTSIDE_IN_DT
            , T.Q_INSPECT_GRADE_NM
            , T.Q_DT
            , T.CONTROL_CONFIRM_DT
            , T.CONTROL_CLOSE_DT
        FROM (
            SELECT
                  X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ, X.INSPECT_SEQ
                , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                , X.ORDER_NUM
                , X.ORDER_DUE_DT
                , X.INNER_DUE_DT
                , jmes.SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , jmes.SF_GET_CODE_NM('1033', X.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , jmes.SF_GET_CODE_NM('1039', X.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
                , X.SIZE_TXT
                , X.ORDER_QTY
                , CASE
                    WHEN X.ORDER_PACKING_NUM_CNT > 0 AND X.ORDER_PACKING_NUM_CNT <![CDATA[ < ]]> X.PACKING_CNT AND X.OUT_FINISH_DT IS NULL THEN CONCAT('(',cast(X.ORDER_PACKING_NUM_CNT as char(1)),'/',X.PACKING_CNT,')')
                    WHEN X.ORDER_PACKING_NUM_CNT > 0 AND X.OUT_FINISH_DT IS NOT NULL THEN X.ORDER_QTY
                    ELSE X.ORDER_OUT_QTY
                END AS OUT_QTY
                , X.ORDER_PACKING_NUM_CNT
                , X.PACKING_CNT
                , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , ( SELECT
                        CASE WHEN M.CODE_CD IN ('GRD010','GRD020','GRD030') THEN CONCAT(M.NOTE,'(',jmes.SF_GET_CODE_NM('1040', M.CODE_CD, #{LOGIN_LOCALE}),')') ELSE M.NOTE END
                    FROM jmes.TBL_CODE M WHERE M.HIGH_CD = '1040' AND M.CODE_CD = Z.INSPECT_GRADE
                   ) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '1'
                        THEN CASE WHEN Z.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                       WHEN Z.INSPECT_TYPE = '2'
                        THEN jmes.SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                  END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , jmes.SF_GET_CODE_NM('1025', Z.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , jmes.SF_GET_CODE_NM('1013', X.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                , (SELECT SF_GET_CODE_NM('1009', M.POP_POSITION, #{LOGIN_LOCALE}) FROM jmes.TBL_POP M WHERE M.POP_SEQ = X.POP_SEQ) AS POP_NM
                , X.OUT_FINISH_DT
                , (SELECT SUM(M.ERROR_QTY) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = X.ORDER_SEQ AND M.INSPECT_TYPE = '2') AS RETURN_QTY
                , (SELECT MAX(M.INSERT_DT) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = X.ORDER_SEQ AND M.INSPECT_TYPE = '2') AS  RETURN_LAST_DT
                , ( SELECT MAX(M.RETURN_SETTLEMENT_DT)
                    FROM jmes.TBL_INSPECT M
                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                    AND M.ORDER_SEQ = X.ORDER_SEQ
                    AND M.INSPECT_TYPE = '2'
                    ) AS  RETURN_FINISH_DT
                , ( SELECT COUNT(*)
                    FROM jmes.TBL_INSPECT M
                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                    AND M.ORDER_SEQ = X.ORDER_SEQ
                    AND M.INSPECT_TYPE = '2'
                    AND M.RETURN_SETTLEMENT_DT IS NULL
                    ) AS  RETURN_ING_CNT
                , X.IMG_GFILE_SEQ
                <!-- , (SELECT jmes.SF_GET_DATE_F(M.POP_DT,'YY','M') FROM jmes.TBL_POP M WHERE M.POP_POSITION = 'POP100' AND M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ ORDER BY M.POP_SEQ LIMIT 1) AS WORK_FINISH_DT -->
                , SF_GET_DATE_F(X.INNER_WORK_FINISH_DT, '', '') AS WORK_FINISH_DT
                , X.ORIGINAL_SIDE_QTY
                , X.OTHER_SIDE_QTY
                , X.WORK_FACTORY_NM
                , X.MATERIAL_RECEIPT_DT
                , X.OUTSIDE_IN_DT
                , jmes.SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
                , jmes.SF_GET_DATE_F(Z.INSERT_DT,'','M') AS Q_DT
                , X.CONTROL_CONFIRM_DT
                , X.CONTROL_CLOSE_DT
            FROM (
                SELECT
                    C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
                    , (SELECT MAX(M.MCT_WORK_SEQ) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS MCT_WORK_SEQ
                    , (SELECT MAX(M.INSPECT_SEQ) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ) AS INSPECT_SEQ
                    , ( SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ) AS POP_SEQ
                    , A.ORDER_COMP_CD
                    , C.ORDER_NUM
                    , C.ORDER_DUE_DT
                    , B.INNER_DUE_DT
                    , B.OUTSIDE_COMP_CD
                    , A.CONTROL_NUM
                    , B.PART_NUM
                    , CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS DRAWING_NUM
                    , B.WORK_TYPE
                    , B.MATERIAL_DETAIL
                    , B.SURFACE_TREAT
                    , B.SIZE_TXT
                    , C.ORDER_QTY
                    , C.PACKING_CNT
                    , B.PART_STATUS
                    , C.OUT_FINISH_DT
                    , B.IMG_GFILE_SEQ
                    , (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_PACKING_NUM_CNT
                    , (SELECT SUM(M.OUT_QTY) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_OUT_QTY
                    , (SELECT MAX(M.OUT_DT) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_OUT_DT
                    , jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1) AS ORIGINAL_SIDE_QTY <!-- 대칭_원칭 -->
                    , jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1) AS OTHER_SIDE_QTY <!-- 대칭_대칭 -->
                    , B.INNER_WORK_FINISH_DT
                    , jmes.SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
                    , jmes.SF_GET_MATERIAL_RECEIPT_DT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT
                    , jmes.SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT
                    , (SELECT jmes.SF_GET_DATE_F(AA.STATUS_DT, 'YYYY', '')
                        FROM TBL_CONTROL_PROGRESS AA
                        WHERE 1 = 1
                            AND A.CONTROL_SEQ = AA.CONTROL_SEQ
                            AND AA.SEQ = (
                                            SELECT MAX(SEQ)
                                            FROM TBL_CONTROL_PROGRESS BB
                                            WHERE 1 = 1
                                                AND AA.CONTROL_SEQ = BB.CONTROL_SEQ
                                                AND BB.ORDER_STATUS = 'ORD001')) AS CONTROL_CONFIRM_DT <!-- 확정 일자 -->
                    , (SELECT jmes.SF_GET_DATE_F(AA.STATUS_DT, 'YYYY', '')
                        FROM TBL_CONTROL_PROGRESS AA
                        WHERE 1 = 1
                            AND A.CONTROL_SEQ = AA.CONTROL_SEQ
                            AND AA.SEQ = (
                                            SELECT MAX(SEQ)
                                            FROM TBL_CONTROL_PROGRESS BB
                                            WHERE 1 = 1
                                                AND AA.CONTROL_SEQ = BB.CONTROL_SEQ
                                                AND BB.ORDER_STATUS = 'ORD003')) AS CONTROL_CLOSE_DT <!-- 확정 일자 -->
                FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.DEL_YN = 'N'
                    AND A.CONTROL_STATUS IN ('ORD001', 'ORD003')
                    <!-- AND B.PART_STATUS IN ('PRO009','PRO010','PRO011') 상태확인 필요 -->
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_OUTSIDE_COMP_CD !='' and SEL_OUTSIDE_COMP_CD != null">
                        AND B.OUTSIDE_COMP_CD = #{SEL_OUTSIDE_COMP_CD}
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(C.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
                    <if test="SEL_OUT_FINISH_YN !='' and SEL_OUT_FINISH_YN != null">
                        AND C.OUT_FINISH_DT IS NULL
                    </if>
            ) X LEFT OUTER JOIN jmes.TBL_INSPECT Z ON ( Z.INSPECT_SEQ = X.INSPECT_SEQ AND Z.INSPECT_TYPE = '1' OR Z.INSPECT_SEQ = X.INSPECT_SEQ AND Z.INSPECT_TYPE = '2' AND Z.ORDER_SEQ = X.ORDER_SEQ)
        ) T
        WHERE 1=1
        <if test="SEL_ST_DT !='' and SEL_ST_DT != null">
            <if test="SEL_END_DT !='' and SEL_END_DT != null">
                <if test='SEL_OUTGOING_DATE_TYPE == "1"'>
                    AND DATE_FORMAT(T.ORDER_DUE_DT, '%Y%m%d') BETWEEN REPLACE(#{SEL_ST_DT}, '/', SPACE(0)) AND REPLACE(#{SEL_END_DT}, '/', SPACE(0))    <!-- 요망납기 -->
                </if>
                <if test='SEL_OUTGOING_DATE_TYPE == "2"'>
                    AND DATE_FORMAT(T.INNER_DUE_DT, '%Y%m%d') BETWEEN REPLACE(#{SEL_ST_DT}, '/', SPACE(0)) AND REPLACE(#{SEL_END_DT}, '/', SPACE(0))    <!-- 가공납기 -->
                </if>
                <if test='SEL_OUTGOING_DATE_TYPE == "3"'>
                    AND DATE_FORMAT(T.OUT_FINISH_DT, '%Y%m%d') BETWEEN REPLACE(#{SEL_ST_DT}, '/', SPACE(0)) AND REPLACE(#{SEL_END_DT}, '/', SPACE(0))          <!-- 출고일시 -->
                </if>
                <if test='SEL_OUTGOING_DATE_TYPE == "4"'>
                    AND DATE_FORMAT(T.CONTROL_CONFIRM_DT, '%Y%m%d') BETWEEN REPLACE(#{SEL_ST_DT}, '/', SPACE(0)) AND REPLACE(#{SEL_END_DT}, '/', SPACE(0))          <!-- 확정일시 -->
                </if>
            </if>
        </if>
        <if test="SEL_PART_NUM_VIEW_YN == null">
            AND T.PART_NUM IS NULL    <!-- Part 단위표시가 체크가 안되어 있는 경우 -->
        </if>
        ORDER BY T.ORDER_NUM
    </select>

    <select id="selectOutgoingOutType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        SELECT
              X.*
              ,X.ORDER_QTY - X.OUT_QTY AS NEW_OUT_QTY
        FROM(
            SELECT C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
                , A.CONTROL_NUM
                , C.DRAWING_NUM
                , C.IMG_GFILE_SEQ
                , C.ORDER_NUM
                , IFNULL(C.ORDER_QTY,0) AS ORDER_QTY
                , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS OUT_QTY
            FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER_MAIN C
            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                AND A.DEL_YN = 'N'
                AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                AND C.ORDER_SEQ = #{ORDER_SEQ}
        )X
    </select>

    <insert id="insertOutgoingOutType1" parameterType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , A.ORDER_SEQ
            , #{NEW_OUT_QTY} AS NEW_OUT_QTY
            , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
    </insert>
    <update id="updateOutgoingOutType1After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A SET
                                              A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType1After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <update id="updateOutgoingOutType1After3" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART A
        SET
            A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND EXISTS (SELECT 1 FROM TBL_MCT_WORK T
                    	     WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
                    	    )
            AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <insert id="insertOutgoingOutType2" parameterType="java.util.HashMap">
    /* 그리드 여러개 출고버튼시 */
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        /*WHERE (A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ) IN (${DYNAMIC_PARAM})*/
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
    </insert>
    <update id="updateControlPartOrderPackingCnt1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER SET PACKING_CNT = #{PACKING_CNT}
        , UPDATE_DT = NOW()
        , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateControlPartOrderPackingCnt2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_OUT_BARCODE
        SET DEL_YN = 'Y'
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <insert id="insertControlPartOrderPackingCnt3" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT_BARCODE (BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM)
        SELECT CONCAT('L',LPAD(NEXTVAL(SEQ_BARCODE),9,'0')) AS BARCODE_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, B.SEQ AS PACKING_NUM
        FROM jmes.TBL_CONTROL_PART_ORDER A, jmes.TBL_YYYYMMDD B
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
        AND B.SEQ <![CDATA[ <= ]]> A.PACKING_CNT
    </insert>

    <select id="selectOutgoingOutType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 도면 바코드 입력시 정보  */
        SELECT
              X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , X.IMG_GFILE_SEQ
            , CONCAT(X.ORDER_QTY - X.OUT_QTY, '/', X.ORDER_QTY) AS QTY_INFO
            , X.ORDER_QTY - X.OUT_QTY AS PLAN_QTY
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , A.CONTROL_NUM
                    , C.DRAWING_NUM
                    , C.IMG_GFILE_SEQ
                    , jmes.SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, 0) AS ORDER_QTY
                    , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS OUT_QTY
                FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER_MAIN C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.CONTROL_SEQ = #{CONTROL_SEQ}
                    AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ) X
    </select>

    <insert id="insertOutgoingOutType3" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </insert>
    <update id="updateOutgoingOutType3After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType3After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A
            SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>

    <update id="updateOutgoingOutType3After3" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART A
            SET A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND EXISTS( SELECT 1 FROM TBL_MCT_WORK T
                  	     WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
                  	    )
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
        AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>

    <select id="selectOutgoingOutType4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
          , X.CONTROL_NUM
          , X.DRAWING_NUM
          , X.IMG_GFILE_SEQ
          , X.ORDER_NUM
          , CONCAT(X.ORDER_QTY,'(',X.PACKING_CNT,')') AS QTY_INFO
          , X.PACKING_CNT - X.OUT_PACKING_CNT - 1 AS REMAIN_PACKING_CNT
          , CONCAT(X.PACKING_NUM,'/',X.PACKING_CNT) AS MY_PACKING_NUM
          , X.OUT_CNT
        FROM (  SELECT T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ
                  , A.CONTROL_NUM
                  , C.DRAWING_NUM
                  , C.IMG_GFILE_SEQ
                  , C.ORDER_NUM
                  , jmes.SF_GET_CONTROL_ORDER_QTY(T.CONTROL_SEQ, T.ORDER_SEQ) AS ORDER_QTY
                  , C.PACKING_CNT
                  , T.PACKING_NUM
                  , (SELECT IFNULL(COUNT(PACKING_NUM),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = T.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = T.ORDER_SEQ) AS OUT_PACKING_CNT
                  , (SELECT COUNT(*) FROM TBL_OUT O WHERE O.CONTROL_SEQ = T.CONTROL_SEQ AND O.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND O.ORDER_SEQ = T.ORDER_SEQ AND O.PACKING_NUM = T.PACKING_NUM) AS OUT_CNT
                FROM jmes.TBL_OUT_BARCODE T
                  , jmes.TBL_CONTROL A
                  , jmes.TBL_CONTROL_PART B
                  , jmes.TBL_CONTROL_PART_ORDER C
                WHERE T.CONTROL_SEQ = A.CONTROL_SEQ
                  AND T.CONTROL_SEQ = B.CONTROL_SEQ
                  AND T.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                  AND T.CONTROL_SEQ = C.CONTROL_SEQ
                  AND T.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                  AND T.ORDER_SEQ = C.ORDER_SEQ
                  AND T.BARCODE_NUM = #{BARCODE_NUM}
                  AND T.DEL_YN = 'N'
                  AND A.DEL_YN = 'N'
                  AND NOT EXISTS (SELECT * FROM TBL_OUT O WHERE O.CONTROL_SEQ = T.CONTROL_SEQ AND O.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND O.ORDER_SEQ = T.ORDER_SEQ AND O.PACKING_NUM = T.PACKING_NUM)
            ) X
    </select>
    <insert id="insertOutgoingOutType4" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.PACKING_NUM
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_OUT_BARCODE A
        WHERE A.BARCODE_NUM = #{BARCODE_NUM}
          AND IFNULL(DEL_YN,'N') = 'N'
          AND NOT EXISTS (SELECT 1 FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ AND (M.PACKING_NUM IS NULL OR M.PACKING_NUM = A.PACKING_NUM))
    </insert>
    <update id="updateOutgoingOutType4After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = NOW()
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.PACKING_CNT = (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType4After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
          AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <update id="updateOutgoingOutType4After3" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART A
        SET
            A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND EXISTS( SELECT 1 FROM TBL_MCT_WORK T
                               	     WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
                               	    )
            AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>


    <select id="selectOutgoingReturnInfo1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
          , X.ORDER_QTY
          , X.OUT_QTY - X.RETURN_QTY AS REAL_OUT_QTY
          , jmes.SF_GET_DATE_F(X.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                  , A.ORDER_QTY
                        , A.OUT_FINISH_DT
                  , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ ) AS OUT_QTY
                  , (SELECT IFNULL(SUM(M.ERROR_QTY),0) FROM jmes.TBL_INSPECT M WHERE M.INSPECT_TYPE = '2' AND M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.RETURN_SETTLEMENT_DT IS NULL) AS RETURN_QTY
                FROM jmes.TBL_CONTROL_PART_ORDER A
                WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                  AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  AND A.ORDER_SEQ = #{ORDER_SEQ}
              ) X

    </select>
    <select id="selectOutgoingReturnInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
            , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', B.PART_NUM) END AS CONTROL_NUM
            , CASE WHEN B.DRAWING_VER IS NULL THEN B.DRAWING_NUM ELSE CONCAT(B.DRAWING_NUM, ' (', B.DRAWING_VER, ')') END AS DRAWING_NUM
            , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
            , CONCAT(jmes.SF_GET_DATE_F(C.ORDER_DUE_DT,'YYYY',''), CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴급' ELSE SPACE(0) END) AS INNER_DUE_DT
            , A.EMERGENCY_YN
            , C.ITEM_NM
            , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
            , CASE
                  WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(jmes.SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                  ELSE jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
              END ORDER_QTY_INFO
            , B.SIZE_TXT
            , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
            , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , CONCAT(B.SIZE_TXT, ' / ', jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM
            , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
            , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
            , B.IMG_GFILE_SEQ
        FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
            LEFT OUTER JOIN jmes.TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    <if test="ORDER_SEQ != null and ORDER_SEQ != ''">
                        AND C.ORDER_SEQ = #{ORDER_SEQ}
                    </if>
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <insert id="insertOutgoingReturn" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSPECT (
            INSPECT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ
            , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
            , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
            , INSERT_ID, INSPECT_TYPE, ORDER_SEQ
        )VALUES (
               NEXTVAL(SEQ_INSPECT)
            , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
            , '3', #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
            , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
            , #{LOGIN_USER_ID}, '2',#{ORDER_SEQ}
        )
    </insert>


    <select id="selectOutgoingReturnCompleteList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
               T.INSPECT_SEQ, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , Z.ORDER_NUM
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Y.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.CONTROL_NUM
            , Y.DRAWING_NUM
            , Y.IMG_GFILE_SEQ
            , jmes.SF_GET_CODE_NM('1033', Y.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , jmes.SF_GET_CODE_NM('1027', Y.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , jmes.SF_GET_CODE_NM('1039', Y.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
            , Y.SIZE_TXT
            , Z.ORDER_QTY
            , CASE WHEN T.ORDER_PACKING_NUM_CNT > 0 AND T.ORDER_PACKING_NUM_CNT <![CDATA[ < ]]> Z.PACKING_CNT
                   THEN CONCAT('(',cast(T.ORDER_PACKING_NUM_CNT as char(1)),'/',Z.PACKING_CNT,')')
              ELSE T.ORDER_OUT_QTY
              END AS OUT_QTY
            , jmes.SF_GET_DATE_F(Z.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.ERROR_QTY
            , jmes.SF_GET_DATE_F(T.RETURN_DT,'YY','') AS RETURN_DT
            , jmes.SF_GET_CODE_NM('1040', T.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM
            , jmes.SF_GET_CODE_NM('1021', T.INSPECT_RESULT, #{LOGIN_LOCALE}) AS INSPECT_RESULT_NM
            , T.ERROR_NOTE
            , (SELECT SF_GET_CODE_NM('1009', M.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION_NM FROM jmes.TBL_POP M WHERE M.POP_SEQ = T.POP_SEQ) AS POP_NM
            FROM (  SELECT A.INSPECT_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                    , A.ERROR_QTY
                    , A.INSERT_DT AS RETURN_DT
                    , A.INSPECT_GRADE
                    , A.INSPECT_RESULT
                    , A.ERROR_NOTE
                    , (SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ) AS POP_SEQ
                    , (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_PACKING_NUM_CNT
                    , (SELECT SUM(M.OUT_QTY) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_OUT_QTY
                    FROM jmes.TBL_INSPECT A
                    WHERE A.INSPECT_TYPE = '2'
                    AND A.RETURN_SETTLEMENT_DT IS NULL
                ) T, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y, jmes.TBL_CONTROL_PART_ORDER Z
        WHERE T.CONTROL_SEQ = X.CONTROL_SEQ
        AND T.CONTROL_SEQ = Y.CONTROL_SEQ
        AND T.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
        AND T.CONTROL_SEQ = Z.CONTROL_SEQ
        AND T.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
        AND T.ORDER_SEQ = Z.ORDER_SEQ
        ORDER BY 1,2
    </select>

    <update id="updateOutgoingReturnComplete" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_INSPECT SET RETURN_SETTLEMENT_DT = NOW() WHERE INSPECT_SEQ = #{INSPECT_SEQ}
    </update>

    <select id="selectOutgoingLabelType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_NUM
            , C.DRAWING_NUM
            , C.IMG_GFILE_SEQ
            , C.ORDER_NUM
            , C.ORDER_QTY
            , C.PACKING_CNT
            , C.CONTROL_SEQ
            , C.CONTROL_DETAIL_SEQ
            , C.ORDER_SEQ
        FROM jmes.TBL_CONTROL A
            , jmes.TBL_CONTROL_PART B
            , jmes.TBL_CONTROL_PART_ORDER_MAIN C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.CONTROL_SEQ = C.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND C.CONTROL_SEQ = #{CONTROL_SEQ}
            AND C.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND C.ORDER_SEQ = #{ORDER_SEQ}
     </select>
    <select id="selectOutgoingLabelType1Combo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            BARCODE_NUM AS CODE_CD, PACKING_NUM AS CODE_NM
        FROM jmes.TBL_OUT_BARCODE
        WHERE 1=1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
        AND DEL_YN = 'N'
        ORDER BY PACKING_NUM
    </select>
    <select id="selectOutgoingLabelType2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT BARCODE_NUM FROM jmes.TBL_OUT_BARCODE
        WHERE 1=1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
        AND DEL_YN = 'N'
    </select>
    <select id="selectOutgoingLabelType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.BARCODE_NUM
        FROM jmes.TBL_OUT_BARCODE A
        WHERE A.CONTROL_SEQ = (SELECT M.CONTROL_SEQ FROM jmes.TBL_CONTROL_BARCODE M WHERE M.BARCODE_NUM = #{BARCODE_NUM} AND M.DEL_YN = 'N')
            AND A.DEL_YN = 'N'
        ORDER BY A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, A.PACKING_NUM
    </select>
    <select id="selectCommItemDetailGridCamPopBefore" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ
            , B.CONTROL_DETAIL_SEQ
            , A.ORDER_COMP_CD
            , B.SIZE_TXT
            , B.DRAWING_NUM
            , B.MATERIAL_TYPE
            , (SELECT M.FILE_SIZE FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = B.DXF_GFILE_SEQ) AS CAD_FILE_SIZE
        FROM jmes.TBL_CONTROL A
            , jmes.TBL_CONTROL_PART B
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectCommItemDetailGridCamPop" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
            , X.CONTROL_NUM, X.PART_NUM, X.ORDER_COMP_NM, X.SIZE_TXT, X.DRAWING_NUM, X.MATERIAL_TYPE_NM, X.CAD_FILE_SIZE
            , X.CAM_SEQ, X.HISTORY_NOTE
            , Q.SEQ
            , jmes.SF_GET_CODE_NM('1080', Q.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION_NM
            , Q.WORK_DESC
            , Q.DESIGN_QTY
            , Q.WORK_TIME
            , (SELECT M.FILE_SEQ FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = Q.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXC' LIMIT 1) AS CAM_FILE_SEQ
            , (SELECT M.FILE_SEQ FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = Q.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXN' LIMIT 1) AS NC_FILE_SEQ
            , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Q.WORK_USER_ID) AS WORK_USER_NM
            , jmes.SF_GET_DATE_F(Q.INSERT_DT,'YY','M') AS CAM_WORK_DT
            , (X.POINT_1 + X.POINT_2 + X.POINT_3 + X.POINT_4 + X.POINT_5) AS POINT_SUM
        FROM (  SELECT T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ
                    , T.CONTROL_NUM, T.PART_NUM, T.ORDER_COMP_NM, T.SIZE_TXT, T.DRAWING_NUM, T.MATERIAL_TYPE_NM, T.CAD_FILE_SIZE
                    , P.CAM_SEQ, P.HISTORY_NOTE
                    , CASE WHEN T.ORDER_COMP_CD = #{ORDER_COMP_CD} THEN 1 ELSE 0 END AS POINT_1
                    , CASE WHEN T.SIZE_TXT = #{SIZE_TXT} THEN 1 ELSE 0 END AS POINT_2
                    , CASE WHEN T.DRAWING_NUM = #{DRAWING_NUM} THEN 1 ELSE 0 END AS POINT_3
                    , CASE WHEN T.MATERIAL_TYPE = #{MATERIAL_TYPE} THEN 1 ELSE 0 END AS POINT_4
                    , CASE WHEN T.CAD_FILE_SIZE = #{CAD_FILE_SIZE} THEN 1 ELSE 0 END AS POINT_5
                FROM (  SELECT B.CONTROL_SEQ
                            , B.CONTROL_DETAIL_SEQ
                            , A.CONTROL_NUM
                            , B.PART_NUM
                            , A.ORDER_COMP_CD
                            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM
                            , B.SIZE_TXT
                            , B.DRAWING_NUM
                            , B.MATERIAL_TYPE
                            , jmes.SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                            , (SELECT M.FILE_SIZE FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = B.DXF_GFILE_SEQ) AS CAD_FILE_SIZE
                        FROM jmes.TBL_CONTROL A
                            , jmes.TBL_CONTROL_PART B
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND (B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) NOT IN (SELECT #{CONTROL_SEQ},#{CONTROL_DETAIL_SEQ} FROM DUAL)
                            AND (B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN (
                                                                            SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                                            FROM jmes.TBL_CONTROL A
                                                                                , jmes.TBL_CONTROL_PART B
                                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                                AND A.DEL_YN = 'N'
                                                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                                                                AND B.SIZE_TXT = #{SIZE_TXT}
                                                                            UNION
                                                                            SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                                            FROM jmes.TBL_CONTROL A
                                                                                , jmes.TBL_CONTROL_PART B
                                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                                AND A.DEL_YN = 'N'
                                                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                                                                AND B.DRAWING_NUM = #{DRAWING_NUM}
                                                                            UNION
                                                                            SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                                            FROM jmes.TBL_CONTROL A
                                                                                , jmes.TBL_CONTROL_PART B
                                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                                AND A.DEL_YN = 'N'
                                                                                AND B.SIZE_TXT = #{SIZE_TXT}
                                                                                AND B.DRAWING_NUM = #{DRAWING_NUM}
                                                                         )
                    ) T LEFT OUTER JOIN jmes.TBL_CAM P ON T.CONTROL_SEQ = P.CONTROL_SEQ AND T.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
            ) X LEFT OUTER JOIN jmes.TBL_CAM_DETAIL Q ON X.CAM_SEQ = Q.CAM_SEQ
            ORDER BY (X.POINT_1 + X.POINT_2 + X.POINT_3 + X.POINT_4 + X.POINT_5) DESC
    </select>
    <select id="selectOutgoingHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 3. 출하 이력관리 쿼리 -->
        <!-- 기능설계서에서 누적칼럼 없애고 반품조치일 추가 -->
        SELECT X.KEY_SEQ
            , X.CONTROL_SEQ
            , X.CONTROL_DETAIL_SEQ
            , X.ORDER_SEQ
            , X.OUT_RETURN_TYPE
            , CASE WHEN X.OUT_RETURN_TYPE = '1' THEN '출고' ELSE '반품' END AS OUT_RETURN_TYPE_NM
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.ORDER_NUM
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , X.SIZE_TXT
            , X.ORDER_QTY
            , X.OUT_QTY
            , CASE WHEN X.OUT_RETURN_TYPE = '2' OR IFNULL(X.OUT_QTY,0) > 0 THEN NULL ELSE X.PACKING_CNT END AS PACKING_CNT
            , CASE WHEN X.OUT_RETURN_TYPE = '1' AND IFNULL(X.OUT_QTY,0) = 0 THEN CONCAT(X.PACKING_CNT,'-',X.PACKING_NUM) END AS OUT_PACKING_INFO
            , X.RETURN_QTY
            , jmes.SF_GET_DATE_F(X.INSERT_DT,'YY','M') AS INSERT_DT
            , jmes.SF_GET_DATE_F(X.RETURN_SETTLEMENT_DT,'YY','M') AS RETURN_SETTLEMENT_DT
            , jmes.SF_GET_OUT_RETURN_LAST_YN(X.OUT_RETURN_TYPE, X.KEY_SEQ) AS LAST_YN
        FROM (  SELECT A.OUT_SEQ AS KEY_SEQ
                    , '1' AS OUT_RETURN_TYPE
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.ORDER_SEQ
                    , C.OUTSIDE_COMP_CD
                    , D.ORDER_NUM
                    , B.CONTROL_NUM
                    , B.ORDER_COMP_CD
                    , CASE WHEN C.PART_NUM IS NULL THEN D.DRAWING_NUM ELSE C.DRAWING_NUM END AS DRAWING_NUM
                    , C.MATERIAL_DETAIL
                    , C.SIZE_TXT
                    , D.ORDER_QTY
                    , A.OUT_QTY
                    , D.PACKING_CNT
                    , A.PACKING_NUM
                    , NULL AS RETURN_QTY
                    , A.INSERT_DT
                    , '' AS RETURN_SETTLEMENT_DT
                FROM jmes.TBL_OUT A
                    , jmes.TBL_CONTROL B
                    , jmes.TBL_CONTROL_PART C
                    , jmes.TBL_CONTROL_PART_ORDER D
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND A.ORDER_SEQ = D.ORDER_SEQ
                    AND A.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_ST_DT},'/',space(0)),'%Y%m%d') AND DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY)
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND B.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(C.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(D.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
                UNION ALL
                SELECT A.INSPECT_SEQ AS KEY_SEQ
                    , '2' AS OUT_RETURN_TYPE
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.ORDER_SEQ
                    , C.OUTSIDE_COMP_CD
                    , D.ORDER_NUM
                    , B.CONTROL_NUM
                    , B.ORDER_COMP_CD
                    , CASE WHEN C.PART_NUM IS NULL THEN D.DRAWING_NUM ELSE C.DRAWING_NUM END AS DRAWING_NUM
                    , C.MATERIAL_DETAIL
                    , C.SIZE_TXT
                    , D.ORDER_QTY
                    , NULL AS OUT_QTY
                    , D.PACKING_CNT
                    , NULL AS PACKING_NUM
                    , A.ERROR_QTY AS RETURN_QTY
                    , A.INSERT_DT
                    , A.RETURN_SETTLEMENT_DT
                FROM jmes.TBL_INSPECT A
                    , jmes.TBL_CONTROL B
                    , jmes.TBL_CONTROL_PART C
                    , jmes.TBL_CONTROL_PART_ORDER D
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND A.ORDER_SEQ = D.ORDER_SEQ
                    AND A.INSPECT_TYPE = '2'
                    AND A.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_ST_DT},'/',space(0)),'%Y%m%d') AND DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY) <!-- 인덱스 고려 -->
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND B.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(C.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(D.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
            ) X
        WHERE 1 = 1
        <choose>
            <when  test="SEL_OUTGOING_DATE_TYPE == 1">
                AND DATE_FORMAT(X.INSERT_DT, '%Y/%m/%d') BETWEEN #{SEL_ST_DT} AND #{SEL_END_DT}
            </when>
        </choose>
        ORDER BY X.INSERT_DT DESC, X.CONTROL_NUM
    </select>
    <select id="selectInspectionHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 2. 검사 이력관리 쿼리 -->
        <!-- 항목은 검사리스트와 동일하게 하고 MCT 실적은 제거 -->
        <!-- 검색조건 확인필요 (불량코드콤보는 note값으로 처리, Show All seq 삭제) -->

        SELECT V.CONTROL_SEQ, V.CONTROL_DETAIL_SEQ
            , V.WORK_FINISH_DT, V.ORDER_COMP_NM, V.INNER_DUE_DT, V.EMERGENCY_YN, V.MAIN_INSPECTION_NM
            , V.CONTROL_NUM, V.PART_NUM, V.DRAWING_NUM, V.WORK_TYPE_NM, V.WORK_FACTORY_NM, V.OUTSIDE_COMP_NM
            , V.MATERIAL_DETAIL_NM, V.ORDER_QTY, V.SIZE_TXT, V.NOTE, V.POP_NM, V.PART_STATUS_NM
            <!-- , V.MATERIAL_TYPE_NM -->
            , W.INSPECT_SEQ
            , W.INSPECT_NUM AS Q_SEQ
            , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = W.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
            , jmes.SF_GET_CODE_NM('1060', W.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
            , jmes.SF_GET_CODE_NM('1040', W.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
            , (SELECT M.NOTE FROM jmes.TBL_CODE M WHERE M.HIGH_CD = '1040' AND M.CODE_CD = W.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
            , W.ERROR_QTY AS Q_ERROR_QTY
            , CASE WHEN W.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(W.INSERT_DT,'YY','') END AS Q_RETURN_DT
            , CASE WHEN W.INSPECT_TYPE = '1' THEN CASE WHEN W.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', W.INSPECT_RESULT, #{LOGIN_LOCALE}) ELSE jmes.SF_GET_CODE_NM('1019', W.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                   WHEN W.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', W.INSPECT_RESULT, #{LOGIN_LOCALE})
              END AS Q_INSPECT_RESULT_NM
            , W.INSPECT_DESC AS Q_INSPECT_DESC
            , jmes.SF_GET_CODE_NM('1010', W.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
            , jmes.SF_GET_CODE_NM('1032', W.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
            , jmes.SF_GET_CODE_NM('1025', W.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
            , W.ERROR_NOTE AS Q_ERROR_NOTE
            , jmes.SF_GET_DATE_F(W.INSERT_DT,'YY','M') AS Q_DT
            , V.IMG_GFILE_SEQ
        FROM (  SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
                    , CASE WHEN IFNULL(X.EMERGENCY_YN, 'N') = 'Y' THEN '긴' ELSE SPACE(0) END AS EMERGENCY_YN
                    , jmes.SF_GET_CODE_NM('1059', X.MAIN_INSPECTION, #{LOGIN_LOCALE}) MAIN_INSPECTION_NM
                    , jmes.SF_GET_CODE_NM('1014', X.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
                    , SF_GET_DATE_F(X.INNER_WORK_FINISH_DT, '', '') AS WORK_FINISH_DT
                    <!-- , (SELECT jmes.SF_GET_DATE_F(M.POP_DT,'YY','M') FROM jmes.TBL_POP M WHERE M.POP_POSITION = 'POP100' AND M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ ORDER BY M.POP_SEQ LIMIT 1) AS WORK_FINISH_DT -->
                    , jmes.SF_GET_DATE_F(X.INNER_DUE_DT,'','') AS INNER_DUE_DT
                    <!-- , P.POP_POSITION_NM AS POP_NM  -->
                    , SF_GET_CODE_NM('1009', P.POP_POSITION, #{LOGIN_LOCALE}) AS POP_NM <!-- 현재 등록된 위치 -->
                    , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                    , jmes.SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                    , jmes.SF_GET_CODE_NM('1013', X.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                    , X.CONTROL_NUM
                    , X.PART_NUM
                    , X.DRAWING_NUM
                    , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                    , jmes.SF_GET_CODE_NM('1033', X.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                    , jmes.SF_GET_CODE_NM('1035', X.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                    , jmes.SF_GET_CONTROL_PART_QTY(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ) AS ORDER_QTY
                    , X.SIZE_TXT
                    , X.NOTE
                    , X.IMG_GFILE_SEQ
                FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                            , A.ORDER_COMP_CD , A.EMERGENCY_YN , A.MAIN_INSPECTION
                            , B.WORK_FACTORY
                            , B.INNER_DUE_DT, B.OUTSIDE_COMP_CD, B.PART_STATUS
                            , A.CONTROL_NUM, B.PART_NUM, B.DRAWING_NUM
                            , B.MATERIAL_DETAIL, B.WORK_TYPE, B.MATERIAL_TYPE
                            , B.PART_UNIT_QTY, B.SIZE_TXT, A.NOTE, B.INNER_WORK_FINISH_DT
                            , (SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS POP_SEQ
                            , B.IMG_GFILE_SEQ
                        FROM jmes.TBL_CONTROL A
                            , jmes.TBL_CONTROL_PART B
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND A.DEL_YN = 'N'
                            AND A.CONTROL_STATUS IN ('ORD001', 'ORD003') <!-- TODO: 컬럼 -->
                            <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                                AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                            </if>
                            <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                                AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                            </if>
                            <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                                AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                            </if>
                            <if test="SEL_MATERIAL_DETAIL !='' and SEL_MATERIAL_DETAIL != null">
                                AND B.MATERIAL_DETAIL = #{SEL_MATERIAL_DETAIL}
                            </if>
                    ) X LEFT OUTER JOIN jmes.TBL_POP P ON P.POP_SEQ = X.POP_SEQ
              ) V, jmes.TBL_INSPECT W
        WHERE W.CONTROL_SEQ = V.CONTROL_SEQ
            AND W.CONTROL_DETAIL_SEQ = V.CONTROL_DETAIL_SEQ
            <if test="SEL_INSPECT_METHOD !='' and SEL_INSPECT_METHOD != null">
                AND W.INSPECT_METHOD = #{SEL_INSPECT_METHOD}   <!-- 측정방식('1060') -->
            </if>
            <if test="SEL_INSPECT_GRADE !='' and SEL_INSPECT_GRADE != null">
                AND W.INSPECT_GRADE IN (${SEL_INSPECT_GRADE})    <!-- 검사결과등급(복수) -->
            </if>
            <if test="SEL_INSPECT_RESULT !='' and SEL_INSPECT_RESULT != null">
                AND W.INSPECT_RESULT = #{SEL_INSPECT_RESULT}            <!-- 불량코드 ('1020','1021') -->
            </if>
            <if test="SEL_ERROR_ACTION !='' and SEL_ERROR_ACTION != null">
                AND W.ERROR_ACTION = #{SEL_ERROR_ACTION}   <!-- 조치('1025') -->
            </if>
            <if test="SEL_INSPECT_USER_ID !='' and SEL_INSPECT_USER_ID != null">
                AND W.INSPECT_USER_ID = #{SEL_INSPECT_USER_ID}   <!-- 검사자 -->
            </if>
        ORDER BY V.CONTROL_SEQ, V.CONTROL_DETAIL_SEQ, W.INSPECT_SEQ DESC    <!-- 정렬도 확인필요 -->
    </select>
    <delete id="deleteOutgoingHistoryInspectionCancelStep1" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_OUT WHERE OUT_SEQ = #{OUT_SEQ}
    </delete>
    <update id="updateOutgoingHistoryInspectionCancelStep2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER SET OUT_FINISH_DT = NULL
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateOutgoingHistoryInspectionCancelStep3" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL SET OUT_FINISH_DT = NULL
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>
    <delete id="deleteOutgoingHistoryReturnCancelStep1" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_INSPECT WHERE INSPECT_SEQ = #{INSPECT_SEQ}
    </delete>


<!--    <update id="updateOutgoingReturnAfter1" parameterType="java.util.HashMap">-->
<!--        UPDATE jmes.TBL_CONTROL_PART_ORDER-->
<!--        SET OUT_FINISH_DT = ''-->
<!--          , RETURN_DT = NOW()-->
<!--        WHERE CONTROL_SEQ = #{CONTROL_SEQ}-->
<!--        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}-->
<!--        AND ORDER_SEQ = #{ORDER_SEQ}-->
<!--    </update>-->
<!--    <update id="updateOutgoingReturnAfter2" parameterType="java.util.HashMap">-->
<!--        UPDATE jmes.TBL_CONTROL-->
<!--        SET OUT_FINISH_DT = ''-->
<!--          , RETURN_DT = NOW()-->
<!--        WHERE CONTROL_SEQ = #{CONTROL_SEQ}-->
<!--    </update>-->

</mapper>