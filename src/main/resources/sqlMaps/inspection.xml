<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="inspection">

    <select id="selectInspectionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT T.*
        FROM (
            SELECT
                  X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.MCT_WORK_SEQ, X.INSPECT_SEQ, Z.INSPECT_TYPE, Z.INSPECT_GRADE
                , jmes.SF_GET_DATE_F(X.INNER_DUE_DT,'YY','') AS INNER_DUE_DT
                , jmes.SF_GET_CODE_NM('1009', P.POP_POSITION, 'KR') AS POP_NM
                , ( SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , jmes.SF_GET_CODE_NM('1013', X.PART_STATUS, 'KR') AS PART_STATUS_NM
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
                , jmes.SF_GET_CODE_NM('1033', X.WORK_TYPE, 'KR') AS WORK_TYPE_NM
                , jmes.SF_GET_CODE_NM('1035', X.MATERIAL_TYPE, 'KR') AS MATERIAL_TYPE_NM
                , jmes.SF_GET_CONTROL_PART_QTY(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ) AS ORDER_QTY
                , X.SIZE_TXT
                , jmes.SF_GET_DATE_F(Y.WORK_START_DT,'YY','M') AS MCT_WORK_DT        -- 변경 확인필요
                , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Y.WORK_USER_ID) AS WORK_USER_NM
                , (SELECT M.EQUIP_NM FROM jmes.TBL_EQUIP M WHERE M.EQUIP_SEQ = Y.EQUIP_SEQ) AS EQUIP_NM
                , (SELECT NOTE FROM jmes.TBL_CAM M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS CAM_NOTE
                , X.NOTE
                , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Z.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
                , jmes.SF_GET_CODE_NM('1060', Z.INSPECT_METHOD, 'KR') AS Q_INSPECT_METHOD_NM
                , jmes.SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, 'KR') AS Q_INSPECT_GRADE_NM
                , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = Z.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(Z.INSERT_DT,'YY','') END AS Q_RETURN_DT
                , CASE WHEN Z.INSPECT_TYPE = '1' THEN CASE WHEN Z.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, 'KR') ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, 'KR') END
                  WHEN Z.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, 'KR') END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , jmes.SF_GET_CODE_NM('1010', Z.ERROR_PROCESS, 'KR') AS Q_ERROR_PROCESS_NM
                , jmes.SF_GET_CODE_NM('1032', Z.ERROR_REASON, 'KR') AS Q_ERROR_REASON_NM
                , jmes.SF_GET_CODE_NM('1025', Z.ERROR_ACTION, 'KR') AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , jmes.SF_GET_DATE_F(Z.INSERT_DT,'YY','M') AS Q_DT
                , X.OUT_FINISH_DT
                , X.NOT_RETURN_SETTLEMENT_CNT
            FROM (
                    SELECT
                          B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                        , B.INNER_DUE_DT, B.OUTSIDE_COMP_CD, B.PART_STATUS
                        , A.CONTROL_NUM, B.PART_NUM, B.DRAWING_NUM
                        , B.MATERIAL_DETAIL, B.WORK_TYPE, B.MATERIAL_TYPE
                        , B.PART_UNIT_QTY, B.SIZE_TXT, A.NOTE
                        , (SELECT MAX(M.MCT_WORK_SEQ) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS MCT_WORK_SEQ
                        , (SELECT MAX(M.INSPECT_SEQ) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS INSPECT_SEQ
                        , (SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS POP_SEQ
                        , A.OUT_FINISH_DT
                        , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.INSPECT_TYPE = '2' AND M.RETURN_SETTLEMENT_DT IS NULL) AS NOT_RETURN_SETTLEMENT_CNT
                    FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.DEL_YN = 'N'
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND A.CONTROL_NUM LIKE CONCAT('%', #{SEL_CONTROL_NUM}, '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND B.DRAWING_NUM = #{SEL_DRAWING_NUM}
                    </if>
                    <if test="SEL_OUTSIDE_COMP_CD !='' and SEL_OUTSIDE_COMP_CD != null">
                        AND B.OUTSIDE_COMP_CD = #{SEL_OUTSIDE_COMP_CD}
                    </if>
                    <if test="SEL_OUTSIDE_YN or SEL_OUTSIDE_YN == true">
                        AND IFNULL(B.OUTSIDE_YN,0) = 'N'  -- 외주대상 제외 체크하면
                    </if>
                    ) X LEFT OUTER JOIN jmes.TBL_MCT_WORK Y ON Y.MCT_WORK_SEQ = X.MCT_WORK_SEQ
                        LEFT OUTER JOIN jmes.TBL_INSPECT Z ON Z.INSPECT_SEQ = X.INSPECT_SEQ
                        LEFT OUTER JOIN jmes.TBL_POP P ON P.POP_SEQ = X.POP_SEQ
                        <if test="SEL_POP_POSITION !='' and SEL_POP_POSITION != null">
                            AND P.POP_POSITION = #{SEL_POP_POSITION}
                        </if>
                    WHERE (X.OUT_FINISH_DT IS NULL OR X.NOT_RETURN_SETTLEMENT_CNT > 0)
            ) T
            WHERE 1=1
            <if test="SEL_INSPECT_GRADE or SEL_INSPECT_GRADE == true">
                AND (T.INSPECT_GRADE IS NULL OR T.INSPECT_GRADE NOT IN ('GRD010','GRD020','GRD030'))  -- 검사완료품 제외를 체크하면
            </if>
        ORDER BY T.INNER_DUE_DT, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ
    </select>
    <select id="selectInspectionPopInfoBasic" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , A.CONTROL_NUM
          , B.DRAWING_NUM
          , CONCAT(jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY',''), CASE WHEN A.EMERGENCY_YN = 'Y' THEN ' (긴급)' ELSE ' ' END) AS INNER_DUE_DT
          , B.ITEM_NM
          , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
          , jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0) AS ORDER_QTY
          , CASE WHEN IFNULL(B.ORIGINAL_SIDE_QTY,0) + IFNULL(B.OTHER_SIDE_QTY,0) > 0 THEN CONCAT(jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(B.ORIGINAL_SIDE_QTY,0),',',IFNULL(B.OTHER_SIDE_QTY,0),')')
                 ELSE jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
            END ORDER_QTY_INFO
          , B.SIZE_TXT
          , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, 'KR') AS SURFACE_TREAT_NM
          , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, 'KR') AS WORK_TYPE_NM
          , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, 'KR') AS PART_STATUS_NM
          , ( SELECT M.COMP_NM
              FROM jmes.TBL_COMPANY MPOP_SEQ

              WHERE M.COMP_CD = A.ORDER_COMP_CD
            ) AS ORDER_COMP_NM
          , ( SELECT M.COMP_NM
              FROM jmes.TBL_COMPANY M
              WHERE M.COMP_CD = B.OUTSIDE_COMP_CD
            ) AS OUTSIDE_COMP_NM
          , (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
        FROM jmes.TBL_CONTROL A
          , jmes.TBL_CONTROL_PART B
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
          AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectInspectionPopInfoList1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT jmes.SF_GET_CODE_NM('1078', X.NOTE_TYPE, 'KR') AS NOTE_TYPE_NM
          , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM jmes.TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM jmes.TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectInspectionPopInfoList2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , jmes.SF_GET_CODE_NM('1060', A.INSPECT_METHOD, 'KR') AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , A.ERROR_QTY AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, 'KR') END
                 WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', A.INSPECT_RESULT, 'KR')
            END AS Q_INSPECT_RESULT_NM
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , jmes.SF_GET_CODE_NM('1032', A.ERROR_REASON, 'KR') AS Q_ERROR_REASON_NM
          , jmes.SF_GET_CODE_NM('1025', A.ERROR_ACTION, 'KR') AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
        FROM jmes.TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <insert id="insertInspectionMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSPECT (INSPECT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                      , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
                                      , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
                                      , INSERT_ID, INSPECT_TYPE, INSPECT_NUM )
        VALUES (    NEXTVAL(SEQ_INSPECT)
                  , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
                  , #{INSPECT_METHOD}, #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
                  , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
                  , #{LOGIN_USER_ID}, '1', (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = #{CONTROL_SEQ} AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
                )
    </insert>
    <delete id="deleteInspectionMaster" parameterType="java.util.HashMap">
       DELETE FROM jmes.TBL_INSPECT WHERE INSPECT_SEQ = #{INSPECT_SEQ} AND INSPECT_TYPE = '1'
    </delete>
    <select id="selectInspectionPopInfoGrid01" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>
    <select id="selectInspectionPopInfoGrid02" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>


    <select id="selectCommItemDetailInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , A.CONTROL_NUM
          , B.DRAWING_NUM
          , CONCAT(jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY',''), CASE WHEN A.EMERGENCY_YN = 'Y' THEN ' (긴급)' ELSE ' ' END) AS INNER_DUE_DT
          , B.ITEM_NM
          , A.MODULE_NM
          , CASE WHEN IFNULL(B.ORIGINAL_SIDE_QTY,0) + IFNULL(B.OTHER_SIDE_QTY,0) > 0 THEN CONCAT(jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(B.ORIGINAL_SIDE_QTY,0),',',IFNULL(B.OTHER_SIDE_QTY,0),')')
                 ELSE jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
            END ORDER_QTY_INFO
          , B.SIZE_TXT
          , jmes.SF_GET_MATERIAL_SIZE_TXT(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS MATERIAL_SIZE_TXT
          , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, 'KR') AS WORK_TYPE_NM
          , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
          , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, 'KR') AS SURFACE_TREAT_NM
          , CASE WHEN B.MATERIAL_SUPPLY_YN = 'Y' THEN '사급'
                 ELSE (SELECT jmes.SF_GET_CODE_NM('1033', M.ORDER_STATUS, 'KR') FROM jmes.TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
            END AS MATERIAL_ORDER_STATUS_NM
          , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, 'KR') AS PART_STATUS_NM
          , B.DRAWING_VER
          , B.DXF_GFILE_SEQ       -- 확인필요
          , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM
          , A.DESIGNER_NM
          , CASE WHEN B.OUTSIDE_YN = 'Y' THEN (SELECT CONCAT('Y / ', IFNULL(MAX(M.COMP_NM),SPACE(0))) FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = B.OUTSIDE_COMP_CD)
                 WHEN IFNULL(B.OUTSIDE_YN,'N') = 'N' THEN 'N'
            END AS OUTSIDE_INFO
          , ( SELECT M.COMP_NM
              FROM jmes.TBL_COMPANY M
              WHERE M.COMP_CD = B.OUTSIDE_COMP_CD
            ) AS OUTSIDE_COMP_NM
          , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN (SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT),'YYYY','') FROM jmes.TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001') END AS CONTROL_CONFIRM_DT
          , jmes.SF_GET_DATE_F(A.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
          , ( SELECT CONCAT(jmes.SF_GET_DATE_F(Q.INSERT_DT,'YYYY',''),' / ',(SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Q.WORK_USER_ID))
              FROM jmes.TBL_CAM P, jmes.TBL_CAM_DETAIL Q, jmes.TBL_CONTROL_PART R
              WHERE P.CAM_SEQ = Q.CAM_SEQ
                AND P.CONTROL_SEQ = R.CONTROL_SEQ
                AND P.CONTROL_DETAIL_SEQ = R.CONTROL_DETAIL_SEQ
                AND R.DRAWING_NUM = B.DRAWING_NUM
              ORDER BY Q.SEQ DESC
              LIMIT 1
            ) AS WORK_HISTORY_INFO,
            CASE WHEN C.START_DT IS NOT NULL AND C.FINISH_DT IS NOT NULL THEN 'CWS030'  <!-- 완료 상태 -->
                WHEN C.START_DT IS NOT NULL AND C.FINISH_DT IS NULL THEN 'CWS020'   <!-- 진행중 상태 -->
                ELSE 'CWS010'   <!-- 대기 상태 -->
            END CAM_STATUS <!-- CAM 작업 상태 -->
        FROM jmes.TBL_CONTROL A , jmes.TBL_CONTROL_PART B
            LEFT OUTER JOIN jmes.TBL_CAM C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
          AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectCommItemDetailInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        -- MPR040(선반), MPR010(NC), MPR020(밀링), MPR030(연마)
        SELECT IFNULL(SUM(X.WORK_TIME),0) AS WORK_TIME_TOTAL
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR040' THEN WORK_TIME END),0) AS WORK_TIME_MPR040
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR010' THEN WORK_TIME END),0) AS WORK_TIME_MPR010
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR020' THEN WORK_TIME END),0) AS WORK_TIME_MPR020
          , IFNULL(SUM(CASE WHEN X.PROCESS_TYPE = 'MPR030' THEN WORK_TIME END),0) AS WORK_TIME_MPR030
        FROM (  SELECT C.PROCESS_TYPE, SUM(TIMESTAMPDIFF(MINUTE, B.WORK_START_DT, B.WORK_STOP_DT)) AS WORK_TIME
                FROM jmes.TBL_MCT_WORK A, jmes.TBL_MCT_WORK_TIME B, jmes.TBL_EQUIP C
                WHERE A.MCT_WORK_SEQ = B.MCT_WORK_SEQ
                  AND A.EQUIP_SEQ = C.EQUIP_SEQ
                  AND A.DEL_YN = 'N'
                  AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                  AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  AND C.PROCESS_TYPE IN ('MPR010','MPR020','MPR030','MPR040')
                GROUP BY C.PROCESS_TYPE
              ) X
    </select>
    <select id="selectCommItemDetailInfoGrid1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.MCT_WORK_SEQ) AS RNUM
          , B.PROCESS_TYPE, jmes.SF_GET_CODE_NM('1010', B.PROCESS_TYPE, 'KR') AS PROCESS_TYPE_NM
          , B.EQUIP_NM
          , A.WORK_STATUS
          , jmes.SF_GET_DATE_F(A.WORK_START_DT,'YY','M') AS WORK_START_DT
          , jmes.SF_GET_DATE_F(A.WORK_FINISH_DT,'YY','M') AS WORK_FINISH_DT
          , (SELECT SUM(TIMESTAMPDIFF(MINUTE, M.WORK_START_DT, M.WORK_STOP_DT)) FROM jmes.TBL_MCT_WORK_TIME M WHERE M.MCT_WORK_SEQ = A.MCT_WORK_SEQ) AS WORKING_TIME     -- 확인
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.WORK_USER_ID) AS WORK_USER
          , A.FINISH_QTY
          , A.ERROR_QTY
        FROM jmes.TBL_MCT_WORK A, jmes.TBL_EQUIP B
        WHERE A.EQUIP_SEQ = B.EQUIP_SEQ
          AND A.DEL_YN = 'N'
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <select id="selectCommItemDetailInfoGrid2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.POP_SEQ
          , jmes.SF_GET_CODE_NM('1009', A.POP_POSITION, 'KR') AS POP_POSITION_NM
          , jmes.SF_GET_DATE_F(A.POP_DT,'YY','') AS POP_DT
        FROM jmes.TBL_POP A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY A.POP_SEQ DESC
    </select>
    <select id="selectCommItemDetailInfoGrid3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
       SELECT jmes.SF_GET_CODE_NM('1078', X.NOTE_TYPE, 'KR') AS NOTE_TYPE_NM
          , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM jmes.TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM jmes.TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectCommItemDetailInfoGrid4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY B.CAM_SEQ) AS RNUM
          , B.CAM_SEQ
          , B.WORK_DIRECTION    -- 코드명 확인
          , B.WORK_DESC
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = B.WORK_USER_ID) AS WORK_USER_NM
          , B.CAM_GFILE_SEQ    -- 확인
          , CASE WHEN A.START_DT IS NOT NULL AND A.FINISH_DT IS NULL THEN '(진행중)' END AS STATUS_INFO
          , CASE WHEN A.FINISH_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(A.FINISH_DT,'YYYY','M')
                 WHEN A.START_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(A.START_DT,'YYYY','M')
            END UPDATE_TIME_INFO
        FROM jmes.TBL_CAM A, jmes.TBL_CAM_DETAIL B
        WHERE A.CAM_SEQ = B.CAM_SEQ
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <select id="selectCommItemDetailInfoGrid5" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , jmes.SF_GET_CODE_NM('1060', A.INSPECT_METHOD, 'KR') AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , (SELECT NOTE FROM jmes.TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , A.ERROR_QTY AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, 'KR') END
                 WHEN A.INSPECT_TYPE = '2' THEN jmes.SF_GET_CODE_NM('1021', A.INSPECT_RESULT, 'KR')
            END AS Q_INSPECT_RESULT_NM
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , jmes.SF_GET_CODE_NM('1032', A.ERROR_REASON, 'KR') AS Q_ERROR_REASON_NM
          , jmes.SF_GET_CODE_NM('1025', A.ERROR_ACTION, 'KR') AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , jmes.SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
        FROM jmes.TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>

    <select id="selectOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ, T.INSPECT_SEQ
            , T.ORDER_COMP_NM
            , T.ORDER_NUM
            , jmes.SF_GET_DATE_F(T.ORDER_DUE_DT,'YY','') AS ORDER_DUE_DT
            , jmes.SF_GET_DATE_F(T.INNER_DUE_DT,'YY','') AS INNER_DUE_DT
            , T.OUTSIDE_COMP_NM
            , T.CONTROL_NUM
            , T.PART_NUM
            , T.DRAWING_NUM
            , T.WORK_TYPE_NM
            , T.MATERIAL_DETAIL_NM
            , T.SURFACE_TREAT_NM
            , T.SIZE_TXT
            , T.ORDER_QTY
            , T.OUT_QTY
            , jmes.SF_GET_DATE_F(T.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.RETURN_QTY
            , jmes.SF_GET_DATE_F(T.RETURN_LAST_DT,'YY','') AS RETURN_LAST_DT
            , CASE WHEN T.RETURN_ING_CNT = 0 THEN jmes.SF_GET_DATE_F(T.RETURN_FINISH_DT,'YY','') END AS RETURN_FINISH_DT
            , T.PACKING_CNT
            , T.Q_SEQ
            , T.Q_INSPECT_GRADE_NOTE
            , T.Q_ERROR_QTY
            , T.Q_INSPECT_RESULT_NM
            , T.Q_INSPECT_DESC
            , T.Q_ERROR_ACTION_NM
            , T.Q_ERROR_NOTE
            , T.PART_STATUS_NM
            , T.POP_NM
        FROM (
            SELECT
                  X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ, X.INSPECT_SEQ
                , ( SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
                , X.ORDER_NUM
                , X.ORDER_DUE_DT
                , X.INNER_DUE_DT
                , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , jmes.SF_GET_CODE_NM('1033', X.WORK_TYPE, 'KR') AS WORK_TYPE_NM
                , jmes.SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
                , jmes.SF_GET_CODE_NM('1039', X.SURFACE_TREAT, 'KR') AS SURFACE_TREAT_NM
                , X.SIZE_TXT
                , X.ORDER_QTY
                , CASE WHEN X.ORDER_PACKING_NUM_CNT > 0 AND X.ORDER_PACKING_NUM_CNT <![CDATA[ < ]]> X.PACKING_CNT
                  THEN CONCAT('(',cast(X.ORDER_PACKING_NUM_CNT as char(1)),'/',X.PACKING_CNT,')') ELSE X.ORDER_OUT_QTY END AS OUT_QTY
                , X.PACKING_CNT
                , (SELECT COUNT(*) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , ( SELECT
                        CASE WHEN M.CODE_CD IN ('GRD010','GRD020','GRD030') THEN CONCAT(M.NOTE,'(',jmes.SF_GET_CODE_NM('1040', M.CODE_CD, 'KR'),')') ELSE M.NOTE END
                    FROM jmes.TBL_CODE M WHERE M.HIGH_CD = '1040' AND M.CODE_CD = Z.INSPECT_GRADE
                   ) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '1'
                        THEN CASE WHEN Z.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, 'KR') ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, 'KR') END
                       WHEN Z.INSPECT_TYPE = '2'
                        THEN jmes.SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, 'KR')
                  END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , jmes.SF_GET_CODE_NM('1025', Z.ERROR_ACTION, 'KR') AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , jmes.SF_GET_CODE_NM('1013', X.PART_STATUS, 'KR') AS PART_STATUS_NM
                , (SELECT jmes.SF_GET_CODE_NM('1009', M.POP_POSITION, 'KR') FROM jmes.TBL_POP M WHERE M.POP_SEQ = X.POP_SEQ) AS POP_NM
                , X.OUT_FINISH_DT
                , (SELECT SUM(M.ERROR_QTY) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = X.ORDER_SEQ AND M.INSPECT_TYPE = '2') AS RETURN_QTY
                , (SELECT MAX(M.INSERT_DT) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = X.ORDER_SEQ AND M.INSPECT_TYPE = '2') AS  RETURN_LAST_DT
                , ( SELECT MAX(M.RETURN_SETTLEMENT_DT)
                    FROM jmes.TBL_INSPECT M
                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                    AND M.ORDER_SEQ = X.ORDER_SEQ
                    AND M.INSPECT_TYPE = '2'
                    ) AS  RETURN_FINISH_DT
                , ( SELECT COUNT(*)
                    FROM jmes.TBL_INSPECT M
                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                    AND M.ORDER_SEQ = X.ORDER_SEQ
                    AND M.INSPECT_TYPE = '2'
                    AND M.RETURN_SETTLEMENT_DT IS NULL
                    ) AS  RETURN_ING_CNT
            FROM (
                SELECT
                    C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
                    , (SELECT MAX(M.MCT_WORK_SEQ) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS MCT_WORK_SEQ
                    , (SELECT MAX(M.INSPECT_SEQ) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ) AS INSPECT_SEQ
                    , ( SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ) AS POP_SEQ
                    , A.ORDER_COMP_CD
                    , C.ORDER_NUM
                    , C.ORDER_DUE_DT
                    , B.INNER_DUE_DT
                    , B.OUTSIDE_COMP_CD
                    , A.CONTROL_NUM
                    , B.PART_NUM
                    , B.DRAWING_NUM
                    , B.WORK_TYPE
                    , B.MATERIAL_DETAIL
                    , B.SURFACE_TREAT
                    , B.SIZE_TXT
                    , C.ORDER_QTY
                    , C.PACKING_CNT
                    , B.PART_STATUS
                    , C.OUT_FINISH_DT
                    , (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_PACKING_NUM_CNT
                    , (SELECT SUM(M.OUT_QTY) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_OUT_QTY
                    , (SELECT MAX(M.OUT_DT) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS ORDER_OUT_DT
                FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                AND B.CONTROL_SEQ = C.CONTROL_SEQ
                AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND A.DEL_YN = 'N'
                -- AND B.PART_STATUS IN ('PRO009','PRO010','PRO011')  -- 상태확인 필요
                <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                    AND A.ORDER_COMP_CD = #{SEL_END_DT}
                </if>
                <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                    AND A.CONTROL_NUM LIKE CONCAT('%', #{SEL_CONTROL_NUM}, '%')
                </if>
                <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                    AND B.DRAWING_NUM LIKE CONCAT('%', #{SEL_DRAWING_NUM}, '%')
                </if>
                <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                    AND C.ORDER_NUM LIKE CONCAT('%', #{SEL_ORDER_NUM}, '%')
                </if>
            ) X LEFT OUTER JOIN jmes.TBL_INSPECT Z ON Z.INSPECT_SEQ = X.INSPECT_SEQ
        ) T
        WHERE 1=1
        <if test="SEL_ST_DT !='' and SEL_ST_DT != null">
            <if test="SEL_END_DT !='' and SEL_END_DT != null">
                <if test='SEL_OUTGOING_DATE_TYPE == "1"'>
                    AND T.ORDER_DUE_DT BETWEEN #{SEL_ST_DT} AND #{SEL_END_DT}    -- 요망납기
                </if>
                <if test='SEL_OUTGOING_DATE_TYPE == "2"'>
                    AND T.INNER_DUE_DT BETWEEN #{SEL_ST_DT} AND #{SEL_END_DT}    -- 가공납기
                </if>
                <if test='SEL_OUTGOING_DATE_TYPE == "3"'>
                    AND T.OUT_DT BETWEEN #{SEL_ST_DT} AND #{SEL_END_DT}          -- 출고일시
                </if>
            </if>
        </if>
        <if test="SEL_PART_NUM_VIEW_YN == false">
            AND PART_NUM IS NULL                            -- Part 단위표시가 체크가 안되어 있는 경우
        </if>

    </select>


    <select id="selectOutgoingOutType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        SELECT
              X.*
              ,X.ORDER_QTY - X.OUT_QTY AS NEW_OUT_QTY
        FROM(
            SELECT C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
            , A.CONTROL_NUM
            , B.DRAWING_NUM
            , C.ORDER_NUM
            , C.ORDER_QTY
            , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS OUT_QTY
            FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_CONTROL_PART_ORDER C
            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND C.ORDER_SEQ = #{ORDER_SEQ}
        )X
    </select>

    <insert id="insertOutgoingOutType1" parameterType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
        , A.CONTROL_SEQ
        , A.CONTROL_DETAIL_SEQ
        , A.ORDER_SEQ
        , #{NEW_OUT_QTY} AS NEW_OUT_QTY
        , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
    </insert>
    <update id="updateOutgoingOutType1After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A SET
                                              A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType1After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A SET
                                  A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <insert id="insertOutgoingOutType2" parameterType="java.util.HashMap">
    /* 그리드 여러개 출고버튼시 */
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        /*WHERE (A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ) IN (${DYNAMIC_PARAM})*/
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
    </insert>
    <update id="updateControlPartOrderPackingCnt1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER SET PACKING_CNT = #{PACKING_CNT}
        , UPDATE_DT = NOW()
        , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateControlPartOrderPackingCnt2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_OUT_BARCODE
        SET DEL_YN = 'Y'
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <insert id="insertControlPartOrderPackingCnt3" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT_BARCODE (BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM)
        SELECT CONCAT('L',LPAD(NEXTVAL(SEQ_BARCODE),9,'0')) AS BARCODE_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, B.SEQ AS PACKING_NUM
        FROM jmes.TBL_CONTROL_PART_ORDER A, jmes.TBL_YYYYMMDD B
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND A.ORDER_SEQ = #{ORDER_SEQ}
        AND B.SEQ <![CDATA[ <= ]]> A.PACKING_CNT
    </insert>

    <select id="selectOutgoingOutType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 도면 바코드 입력시 정보  */
        SELECT
              X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , CONCAT(X.ORDER_QTY - X.OUT_QTY, '/', X.ORDER_QTY) AS QTY_INFO
            , X.ORDER_QTY - X.OUT_QTY AS PLAN_QTY
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , A.CONTROL_NUM
                    , B.DRAWING_NUM
                    , jmes.SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, 0) AS ORDER_QTY
                    , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS OUT_QTY
                FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                AND B.CONTROL_SEQ = #{CONTROL_SEQ}
                AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ) X
    </select>
    <insert id="insertOutgoingOutType3" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </insert>
    <update id="updateOutgoingOutType3After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType3After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>

    <select id="selectOutgoingOutType4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
          , X.CONTROL_NUM
          , X.DRAWING_NUM
          , X.ORDER_NUM
          , CONCAT(X.ORDER_QTY,'(',X.PACKING_CNT,')') AS QTY_INFO
          , X.PACKING_CNT - X.OUT_PACKING_CNT - 1 AS REMAIN_PACKING_CNT
          , CONCAT(X.PACKING_CNT,'-',X.PACKING_NUM) AS MY_PACKING_NUM
        FROM (  SELECT T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ
                  , A.CONTROL_NUM
                  , B.DRAWING_NUM
                  , C.ORDER_NUM
                  , jmes.SF_GET_CONTROL_ORDER_QTY(T.CONTROL_SEQ, T.ORDER_SEQ) AS ORDER_QTY
                  , C.PACKING_CNT
                  , T.PACKING_NUM
                  , (SELECT IFNULL(COUNT(PACKING_NUM),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = T.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = T.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = T.ORDER_SEQ) AS OUT_PACKING_CNT
                FROM jmes.TBL_OUT_BARCODE T
                  , jmes.TBL_CONTROL A
                  , jmes.TBL_CONTROL_PART B
                  , jmes.TBL_CONTROL_PART_ORDER C
                WHERE T.CONTROL_SEQ = A.CONTROL_SEQ
                  AND T.CONTROL_SEQ = B.CONTROL_SEQ
                  AND T.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                  AND T.CONTROL_SEQ = C.CONTROL_SEQ
                  AND T.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                  AND T.ORDER_SEQ = C.ORDER_SEQ
                  AND T.BARCODE_NUM = #{BARCODE_NUM}
                  AND T.DEL_YN = 'N'
            ) X
    </select>
    <insert id="insertOutgoingOutType4" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM, INSERT_ID)
        SELECT NEXTVAL(jmes.OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.PACKING_NUM
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM jmes.TBL_OUT_BARCODEL A
        WHERE A.BARCODE_NUM = #{BARCODE_NUM}
          AND IFNULL(DEL_YN,'N') = 'N'
          AND NOT EXISTS (SELECT 1 FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ AND M.PACKING_NUM IS NULL)

    </insert>
    <update id="updateOutgoingOutType4After1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = NOW()
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.PACKING_CNT = (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType4After2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONTROL A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
        AND EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
          AND NOT EXISTS( SELECT 1 FROM jmes.TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>

    <select id="selectOutgoingReturnInfo1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
          , X.ORDER_QTY
          , X.OUT_QTY - X.RETURN_QTY AS REAL_OUT_QTY
          , jmes.SF_GET_DATE_F(X.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                  , A.ORDER_QTY
                        , A.OUT_FINISH_DT
                  , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ ) AS OUT_QTY
                  , (SELECT IFNULL(SUM(M.ERROR_QTY),0) FROM jmes.TBL_INSPECT M WHERE M.INSPECT_TYPE = '2' AND M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.RETURN_SETTLEMENT_DT IS NULL) AS RETURN_QTY
                FROM jmes.TBL_CONTROL_PART_ORDER A
                WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                  AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  AND A.ORDER_SEQ = #{ORDER_SEQ}
              ) X
              
    </select>
    <select id="selectOutgoingReturnInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , A.CONTROL_NUM
          , B.DRAWING_NUM
          , CONCAT(jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY',''), CASE WHEN A.EMERGENCY_YN = 'Y' THEN ' (긴급)' ELSE ' ' END) AS INNER_DUE_DT
          , B.ITEM_NM
          , jmes.SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
          , jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0) AS ORDER_QTY
          , CASE WHEN IFNULL(B.ORIGINAL_SIDE_QTY,0) + IFNULL(B.OTHER_SIDE_QTY,0) > 0 THEN CONCAT(jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(B.ORIGINAL_SIDE_QTY,0),',',IFNULL(B.OTHER_SIDE_QTY,0),')')
                 ELSE jmes.SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
            END ORDER_QTY_INFO
          , B.SIZE_TXT
          , jmes.SF_GET_CODE_NM('1039', B.SURFACE_TREAT, 'KR') AS SURFACE_TREAT_NM
          , jmes.SF_GET_CODE_NM('1033', B.WORK_TYPE, 'KR') AS WORK_TYPE_NM
          , jmes.SF_GET_CODE_NM('1013', B.PART_STATUS, 'KR') AS PART_STATUS_NM
          , ( SELECT M.COMP_NM
              FROM jmes.TBL_COMPANY M
              WHERE M.COMP_CD = A.ORDER_COMP_CD
            ) AS ORDER_COMP_NM
          , ( SELECT M.COMP_NM
              FROM jmes.TBL_COMPANY M
              WHERE M.COMP_CD = B.OUTSIDE_COMP_CD
            ) AS OUTSIDE_COMP_NM
          , (SELECT COUNT(*) + 1 FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
        FROM jmes.TBL_CONTROL A
          , jmes.TBL_CONTROL_PART B
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
          AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <insert id="insertOutgoingReturn" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSPECT (
            INSPECT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ
            , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
            , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
            , INSERT_ID, INSPECT_TYPE, ORDER_SEQ
        )VALUES (
               NEXTVAL(SEQ_INSPECT)
            , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
            , '3', #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
            , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
            , #{LOGIN_USER_ID}, '2',#{ORDER_SEQ}
        )
    </insert>


    <select id="selectOutgoingReturnCompleteList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
               T.INSPECT_SEQ, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , Z.ORDER_NUM
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Y.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.CONTROL_NUM
            , Y.DRAWING_NUM
            , jmes.SF_GET_CODE_NM('1033', Y.WORK_TYPE, 'KR') AS WORK_TYPE_NM
            , jmes.SF_GET_CODE_NM('1027', Y.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL_NM
            , jmes.SF_GET_CODE_NM('1039', Y.SURFACE_TREAT, 'KR') AS SURFACE_TREAT_NM
            , Y.SIZE_TXT
            , Z.ORDER_QTY
            , CASE WHEN T.ORDER_PACKING_NUM_CNT > 0 AND T.ORDER_PACKING_NUM_CNT <![CDATA[ < ]]> Z.PACKING_CNT
                   THEN CONCAT('(',cast(T.ORDER_PACKING_NUM_CNT as char(1)),'/',Z.PACKING_CNT,')')
              ELSE T.ORDER_OUT_QTY
              END AS OUT_QTY
            , jmes.SF_GET_DATE_F(Z.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.ERROR_QTY
            , jmes.SF_GET_DATE_F(T.RETURN_DT,'YY','') AS RETURN_DT
            , jmes.SF_GET_CODE_NM('1040', T.INSPECT_GRADE, 'KR') AS INSPECT_GRADE_NM
            , jmes.SF_GET_CODE_NM('1021', T.INSPECT_RESULT, 'KR') AS INSPECT_RESULT_NM
            , T.ERROR_NOTE
            , (SELECT jmes.SF_GET_CODE_NM('1009', M.POP_POSITION, 'KR') FROM jmes.TBL_POP M WHERE M.POP_SEQ = T.POP_SEQ) AS POP_NM
            FROM (  SELECT A.INSPECT_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                    , A.ERROR_QTY
                    , A.INSERT_DT AS RETURN_DT
                    , A.INSPECT_GRADE
                    , A.INSPECT_RESULT
                    , A.ERROR_NOTE
                    , (SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ) AS POP_SEQ
                    , (SELECT COUNT(M.PACKING_NUM) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_PACKING_NUM_CNT
                    , (SELECT SUM(M.OUT_QTY) FROM jmes.TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_OUT_QTY
                    FROM jmes.TBL_INSPECT A
                    WHERE A.INSPECT_TYPE = '2'
                    AND A.RETURN_SETTLEMENT_DT IS NULL
                ) T, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y, jmes.TBL_CONTROL_PART_ORDER Z
        WHERE T.CONTROL_SEQ = X.CONTROL_SEQ
        AND T.CONTROL_SEQ = Y.CONTROL_SEQ
        AND T.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
        AND T.CONTROL_SEQ = Z.CONTROL_SEQ
        AND T.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
        AND T.ORDER_SEQ = Z.ORDER_SEQ
        ORDER BY 1,2
    </select>

    <update id="updateOutgoingReturnComplete" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_INSPECT SET RETURN_SETTLEMENT_DT = NOW() WHERE INSPECT_SEQ = #{INSPECT_SEQ}
    </update>

    <select id="selectOutgoingLabelType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_NUM
        , B.DRAWING_NUM
        , C.ORDER_NUM
        , C.ORDER_QTY
        , C.PACKING_CNT
        ,C.CONTROL_SEQ,C.CONTROL_DETAIL_SEQ,C.ORDER_SEQ
        FROM jmes.TBL_CONTROL A
        , jmes.TBL_CONTROL_PART B
        , jmes.TBL_CONTROL_PART_ORDER C
        WHERE A.CONTROL_SEQ = C.CONTROL_SEQ
        AND B.CONTROL_SEQ = C.CONTROL_SEQ
        AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        AND C.CONTROL_SEQ = #{CONTROL_SEQ}
        AND C.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND C.ORDER_SEQ = #{ORDER_SEQ}
     </select>
    <select id="selectOutgoingLabelType1Combo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            BARCODE_NUM AS CODE_CD, PACKING_NUM AS CODE_NM
        FROM jmes.TBL_OUT_BARCODE
        WHERE 1=1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
        AND DEL_YN = 'N'
        ORDER BY PACKING_NUM
    </select>
    <select id="selectOutgoingLabelType2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT BARCODE_NUM FROM jmes.TBL_OUT_BARCODE
        WHERE 1=1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
        AND DEL_YN = 'N'
    </select>
    <select id="selectOutgoingLabelType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.BARCODE_NUM
        FROM jmes.TBL_OUT_BARCODE A
        WHERE A.CONTROL_SEQ = (SELECT M.CONTROL_SEQ FROM jmes.TBL_CONTROL_BARCODE M WHERE M.BARCODE_NUM = #{BARCODE_NUM} AND M.DEL_YN = 'N')
            AND A.DEL_YN = 'N'
        ORDER BY A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, A.PACKING_NUM
    </select>

<!--    <update id="updateOutgoingReturnAfter1" parameterType="java.util.HashMap">-->
<!--        UPDATE jmes.TBL_CONTROL_PART_ORDER-->
<!--        SET OUT_FINISH_DT = ''-->
<!--          , RETURN_DT = NOW()-->
<!--        WHERE CONTROL_SEQ = #{CONTROL_SEQ}-->
<!--        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}-->
<!--        AND ORDER_SEQ = #{ORDER_SEQ}-->
<!--    </update>-->
<!--    <update id="updateOutgoingReturnAfter2" parameterType="java.util.HashMap">-->
<!--        UPDATE jmes.TBL_CONTROL-->
<!--        SET OUT_FINISH_DT = ''-->
<!--          , RETURN_DT = NOW()-->
<!--        WHERE CONTROL_SEQ = #{CONTROL_SEQ}-->
<!--    </update>-->

</mapper>