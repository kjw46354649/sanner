<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="inspection">

    <select id="selectInspectionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT T.*
        FROM (
            SELECT
                  X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_COMP_CD, SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                , CASE WHEN IFNULL(X.EMERGENCY_YN, 'N') = 'Y' THEN 'Y' ELSE SPACE(0) END AS EMERGENCY_YN_NM
                , CASE Z.INSPECT_GRADE WHEN 'GRD040' THEN '불량' WHEN 'GRD050' THEN '반품' WHEN 'GRD060' THEN '반품' ELSE SPACE(0) END AS INSPECT_GRADE_SHORT_NM
                , X.EMERGENCY_YN, X.MAIN_INSPECTION, SF_GET_CODE_NM('1059', X.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
                , X.MCT_WORK_SEQ, X.INSPECT_SEQ, Z.INSPECT_TYPE, Z.INSPECT_GRADE
                , SF_GET_DATE_F(X.INNER_DUE_DT,'','') AS INNER_DUE_DT
                , P.POP_POSITION
                , SF_GET_CODE_NM('1009', P.POP_POSITION, #{LOGIN_LOCALE}) AS POP_NM -- 현재 등록된 위치 -->
                , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , SF_GET_DATE_F(X.OUTSIDE_IN_DT,'','M') AS OUTSIDE_IN_DT
                , SF_GET_PART_STATUS_NM(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                , SF_GET_CONTROL_PART_INFO(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , X.IMG_GFILE_SEQ
                , SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , SF_GET_CODE_NM('1033', X.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                , SF_GET_CODE_NM('1035', X.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                , SF_GET_CONTROL_PART_QTY(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ) AS ORDER_QTY
                , X.SAME_SIDE_YN
                , X.SIZE_TXT
                , SF_GET_DATE_F(Y.WORK_START_DT,'YY','M') AS MCT_WORK_DT        -- 변경 확인필요 -->
                , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = Y.WORK_USER_ID) AS WORK_USER_NM
                , (SELECT M.EQUIP_NM FROM TBL_EQUIP M WHERE M.EQUIP_SEQ = Y.EQUIP_SEQ) AS EQUIP_NM
                , (SELECT NOTE FROM TBL_CAM M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS CAM_NOTE
                , X.NOTE, X.MATERIAL_NOTE
                , (SELECT COUNT(*) FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = Z.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
                , SF_GET_CODE_NM('1060', Z.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
                , SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
                , (SELECT NOTE FROM TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = Z.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(Z.INSERT_DT,'YY','') END AS Q_RETURN_DT
                , CASE WHEN Z.INSPECT_TYPE = '1' THEN
                    CASE WHEN jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) IS NULL THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                         ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                  WHEN Z.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , SF_GET_CODE_NM('1010', Z.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
                , SF_GET_CODE_NM('1032', Z.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
                , SF_GET_CODE_NM('1025', Z.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , SF_GET_DATE_F(Z.INSERT_DT, '', 'M') AS Q_DT
                , SF_GET_DATE_F(X.OUT_FINISH_DT, '', '') AS OUT_FINISH_DT
                , X.NOT_RETURN_SETTLEMENT_CNT
                , X.WORK_FINISH_DT
                , X.REGIST_NUM
                , X.CONTROL_VER
                , X.DRAWING_VER
                , (SELECT COUNT(DISTINCT Y.PRODUCT_NUM)
                    FROM TBL_INSPECT_RESULT Q
                        INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON Q.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
                    WHERE Q.CONTROL_SEQ = X.CONTROL_SEQ
                    AND Q.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                ) AS INSPECT_RESULT_QTY
                , ( SELECT
                        CASE WHEN MAX(Y.UPDATE_DT) > MAX(Y.INSERT_DT) THEN SF_GET_DATE_F(MAX(Y.UPDATE_DT), '', 'M')
                             ELSE SF_GET_DATE_F(MAX(Y.INSERT_DT), '', 'M')
                        END
                    FROM TBL_INSPECT_RESULT Q
                        INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON Q.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
                    WHERE Q.CONTROL_SEQ = X.CONTROL_SEQ AND Q.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                 ) AS INSPECT_RESULT_LATEST_DT
            FROM (
                    SELECT
                          B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.ORDER_COMP_CD
                        , A.EMERGENCY_YN, A.MAIN_INSPECTION
                        , B.INNER_DUE_DT, B.OUTSIDE_COMP_CD, B.PART_STATUS
                        , A.CONTROL_NUM, B.PART_NUM, B.DRAWING_NUM
                        , B.MATERIAL_DETAIL, B.WORK_TYPE, B.MATERIAL_TYPE
                        , A.SAME_SIDE_YN
                        , B.PART_UNIT_QTY, B.SIZE_TXT, A.NOTE
                        , B.IMG_GFILE_SEQ, B.MATERIAL_NOTE
                        , SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', 'M') AS WORK_FINISH_DT
                        , (SELECT MAX(M.MCT_WORK_SEQ) FROM TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N') AS MCT_WORK_SEQ
                        , (SELECT MAX(M.INSPECT_SEQ) FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS INSPECT_SEQ
                        , A.OUT_FINISH_DT
                        , (SELECT COUNT(*) FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.INSPECT_TYPE = '2' AND M.RETURN_SETTLEMENT_DT IS NULL) AS NOT_RETURN_SETTLEMENT_CNT
                        , C.REGIST_NUM
                        , A.CONTROL_VER
                        , B.DRAWING_VER
                        , B.OUTSIDE_IN_DT
                    FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER_MAIN C
                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                        AND A.CONTROL_SEQ = C.CONTROL_SEQ
                        AND A.DEL_YN = 'N'
                        AND A.CONTROL_STATUS IN ('ORD001', 'ORD003')
--                         AND B.PART_STATUS NOT IN ('PRO001','PRO002','PRO003','PRO004','PRO005','PRO006','PRO007','PRO008','PRO021','PRO022')
                        AND (EXISTS (SELECT *
                                    FROM TBL_CONTROL_PART_PROGRESS
                                    WHERE 1 = 1
                                        AND CONTROL_SEQ = B.CONTROL_SEQ
                                        AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                                        AND PART_STATUS = 'PRO002') OR B.OUTSIDE_CONFIRM_DT IS NOT NULL)
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_OUTSIDE_COMP_CD !='' and SEL_OUTSIDE_COMP_CD != null">
                        AND B.OUTSIDE_COMP_CD = #{SEL_OUTSIDE_COMP_CD}
                    </if>
                    <if test="SEL_OUTSIDE_YN or SEL_OUTSIDE_YN == true">
                        AND IFNULL(B.OUTSIDE_YN,0) = 'N'  -- 외주대상 제외 체크하면 -->
                    </if>
                    <if test="SEL_INNER_WORK_FINISH_YN == 'true'">
                        AND B.INNER_WORK_FINISH_DT IS NOT NULL
                    </if>
                    <if test="SEL_MATERIAL_DETAIL !='' and SEL_MATERIAL_DETAIL != null">
                        AND B.MATERIAL_DETAIL = #{SEL_MATERIAL_DETAIL}
                    </if>
                    <if test="SEL_WORK_TYPE !='' and SEL_WORK_TYPE != null">
                        AND B.WORK_TYPE = #{SEL_WORK_TYPE}
                    </if>
            ) X LEFT OUTER JOIN TBL_MCT_WORK Y ON Y.MCT_WORK_SEQ = X.MCT_WORK_SEQ
                LEFT OUTER JOIN TBL_INSPECT Z ON Z.INSPECT_SEQ = X.INSPECT_SEQ
                LEFT OUTER JOIN TBL_POP P ON X.CONTROL_SEQ = P.CONTROL_SEQ
                                                        AND X.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                                                        AND P.POP_SEQ = (SELECT MAX(POP_SEQ)
                                                                        FROM TBL_POP G
                                                                        WHERE 1 = 1
                                                                            AND P.CONTROL_SEQ = G.CONTROL_SEQ
                                                                            AND P.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ)
            WHERE (X.OUT_FINISH_DT IS NULL OR X.NOT_RETURN_SETTLEMENT_CNT > 0)
        ) T
        WHERE 1=1
        <if test="SEL_INSPECT_PASS or SEL_INSPECT_PASS == true">
            AND IFNULL(T.INSPECT_GRADE, SPACE(0)) NOT IN ('GRD010','GRD020','GRD030')
        </if>
<!--        <if test="SEL_INSPECT_GRADE or SEL_INSPECT_GRADE == true">-->
<!--            AND (T.INSPECT_GRADE IS NULL OR T.INSPECT_GRADE NOT IN ('GRD010','GRD020','GRD030'))  &lt;!&ndash; 검사완료품 제외를 체크하면 &ndash;&gt;-->
<!--        </if>-->
<!--        <if test="SEL_POP_POSITION !='' and SEL_POP_POSITION != null">-->
<!--            AND T.POP_POSITION = #{SEL_POP_POSITION}-->
<!--        </if>-->
        ORDER BY T.INNER_DUE_DT, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ
    </select>

    <select id="selectInspectionPopInfoBasic" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
          , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', B.PART_NUM) END AS CONTROL_NUM
          , CASE WHEN B.DRAWING_VER IS NULL THEN B.DRAWING_NUM ELSE CONCAT(B.DRAWING_NUM, ' (', B.DRAWING_VER, ')') END AS DRAWING_NUM
          , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
          , SF_GET_DATE_F(B.INNER_DUE_DT,'','') AS INNER_DUE_DT
          , A.EMERGENCY_YN
          , C.ITEM_NM
          , SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
          , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
          , CASE
                WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                ELSE SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
            END ORDER_QTY_INFO
          , B.SIZE_TXT
          , SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
          , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
          , CONCAT(B.SIZE_TXT, ' / ', SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM
          , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
          , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
          , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
          , (SELECT COUNT(*) + 1 FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
          , B.IMG_GFILE_SEQ
        FROM TBL_CONTROL A
          , TBL_CONTROL_PART B
          , TBL_CONTROL_PART_ORDER_MAIN C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <select id="selectInspectionPopInfoList1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT SF_GET_CODE_NM('1078', X.NOTE_TYPE, #{LOGIN_LOCALE}) AS NOTE_TYPE_NM
          , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectInspectionPopInfoList2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
          , SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , (SELECT NOTE FROM TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM TBL_CONTROL_PART M, TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , A.ERROR_QTY AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE IN ('GRD030', 'GRD040') THEN SF_GET_CODE_NM('1019', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                 WHEN A.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS Q_INSPECT_RESULT_NM <!-- 검사 코드 -->
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , SF_GET_CODE_NM('1010', A.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
          , SF_GET_CODE_NM('1032', A.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
          , SF_GET_CODE_NM('1025', A.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , SF_GET_DATE_F(A.INSERT_DT,'','M') AS Q_DT
        FROM TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <insert id="insertInspectionMaster" parameterType="java.util.HashMap">
        INSERT INTO TBL_INSPECT (INSPECT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                      , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
                                      , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
                                      , INSERT_ID, INSPECT_TYPE, INSPECT_NUM )
        VALUES (    NEXTVAL(SEQ_INSPECT)
                  , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
                  , #{INSPECT_METHOD}, #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
                  , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
                  , #{LOGIN_USER_ID}, '1', (SELECT COUNT(*) + 1 FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = #{CONTROL_SEQ} AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
                )
    </insert>
    <delete id="deleteInspectionMaster" parameterType="java.util.HashMap">
       DELETE FROM TBL_INSPECT WHERE INSPECT_SEQ = #{INSPECT_SEQ} AND INSPECT_TYPE = '1'
    </delete>
    <select id="selectInspectionPopInfoGrid01" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>
    <select id="selectInspectionPopInfoGrid02" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select 1 from dual
    </select>


    <select id="selectCommItemDetailInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_STATUS
            , B.CONTROL_SEQ
            , B.CONTROL_DETAIL_SEQ
            , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', IFNULL(B.PART_NUM, SPACE(0))) END AS CONTROL_NUM
            , SF_GET_DRAWING_NUMBERS(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, 'Y') AS DRAWING_NUM
            , (SELECT COUNT(REGIST_NUM) FROM TBL_CONTROL_PART_ORDER X WHERE X.CONTROL_SEQ = B.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS REGIST_CNT
            , SF_GET_DATE_F(B.INNER_DUE_DT,'YYYY','') AS INNER_DUE_DT
            , IFNULL(A.EMERGENCY_YN, 'N') AS EMERGENCY_YN
            , C.ITEM_NM
            , C.PROJECT_NM  <!-- 프로젝트 -->
            , C.MODULE_NM
            , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM <!-- 주요검사품 -->
            , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , CASE WHEN SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0 AND IFNULL(B.ADDITIONAL_QTY,0) > 0 AND A.SAME_SIDE_YN = 'Y' THEN (
                    CONCAT(IFNULL(SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), 0),' (',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),') + ', B.ADDITIONAL_QTY)
                )
                WHEN SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0 AND IFNULL(B.ADDITIONAL_QTY,0) > 0 THEN (
                    CONCAT(SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ),' + ', B.ADDITIONAL_QTY)
                )
                WHEN SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0 AND A.SAME_SIDE_YN = 'Y' THEN (
                    CONCAT(IFNULL(SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ), 0),' (',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                )
                WHEN SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0 THEN CONCAT(SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ))
                ELSE SPACE(0)
            END AS ORDER_QTY_INFO
            , B.SIZE_TXT
            , SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
            , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
            , B.DXF_GFILE_SEQ
            , B.PDF_GFILE_SEQ
            , B.IMG_GFILE_SEQ
            , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , ( SELECT
                    CASE WHEN X.DESIGNER_NM IS NOT NULL AND X.ORDER_STAFF_SEQ IS NOT NULL THEN CONCAT(X.DESIGNER_NM, ' / ', SF_GET_STAFF_NM(X.ORDER_STAFF_SEQ))
                         WHEN X.DESIGNER_NM IS NOT NULL THEN X.DESIGNER_NM
                         WHEN X.ORDER_STAFF_SEQ IS NOT NULL THEN SF_GET_STAFF_NM(X.ORDER_STAFF_SEQ)
                         ELSE SPACE(0)
                    END
                FROM TBL_ORDER X
                WHERE X.ORDER_SEQ = C.ORDER_SEQ
                    AND X.DEL_YN = 'N'
            ) AS ORDER_STAFF_NM_DESIGNER_NM
            , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , CASE WHEN A.CONTROL_STATUS IN ('ORD001','ORD003','ORD004', 'ORD005') THEN (SELECT SF_GET_DATE_F(MAX(M.STATUS_DT),'YYYY','M') FROM TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001') END AS CONTROL_CONFIRM_DT
            , SF_GET_DATE_F(A.OUT_FINISH_DT,'','M') AS OUT_FINISH_DT
            , ( SELECT TRUE
                FROM TBL_CONTROL_PART N, TBL_CONTROL O
                WHERE O.CONTROL_SEQ = N.CONTROL_SEQ
                    AND O.DEL_YN = 'N'
                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                    AND N.CONTROL_DETAIL_SEQ != B.CONTROL_DETAIL_SEQ
                    AND N.SIZE_TXT = B.SIZE_TXT
                    AND N.MATERIAL_TYPE = B.MATERIAL_TYPE
                    AND O.ORDER_COMP_CD = A.ORDER_COMP_CD
                LIMIT 1
            ) AS WORK_HISTORY_INFO <!-- 과거 경험 -->
            , (SELECT
                    CASE
                        WHEN M.START_DT IS NOT NULL AND M.FINISH_DT IS NOT NULL THEN 'CWS030'  <!-- 완료 상태 -->
                        WHEN M.START_DT IS NOT NULL AND M.FINISH_DT IS NULL THEN 'CWS020'   <!-- 진행중 상태 -->
                        ELSE 'CWS010'
                    END
               FROM TBL_CAM M
               WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_SEQ
            ) AS CAM_STATUS <!-- CAM 작업 상태 -->
            , CASE WHEN A.CONTROL_STATUS IN ('ORD001', 'ORD003', 'ORD004') THEN ( SELECT SF_GET_DATE_F(MAX(M.STATUS_DT), '', 'M') FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO002') END AS PROCESS_CONFIRM_DT <!-- 가공확정 일시 -->
            , SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', 'M') AS PROCESS_FINISH_DT <!-- 가공완료 일시 -->
            , CASE WHEN B.OUTSIDE_STATUS IN ('OST001', 'OST003', 'OST004') THEN ( SELECT SF_GET_DATE_F(MAX(M.INSERT_DT), '', 'M') FROM TBL_OUTSIDE_REQUEST_DETAIL M WHERE DEL_YN = 'N' AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ) END AS OUTSIDE_PROCESS_CONFIRM_DT <!-- 외주요청 일시 -->
            , SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT <!-- 외주입고 일시 -->
            , CASE WHEN A.CONTROL_STATUS IN ('ORD001', 'ORD003', 'ORD004') THEN (SELECT SF_GET_DATE_F(MAX(M.ORDER_DT), '', 'M') FROM TBL_MATERIAL_ORDER M WHERE B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ) END AS MATERIAL_ORDER_DT <!-- 소재주문 일시 -->
            , CASE WHEN A.CONTROL_STATUS IN ('ORD001', 'ORD003', 'ORD004') THEN (SELECT SF_GET_DATE_F(MAX(M.IN_DT), '', 'M') FROM TBL_MATERIAL_ORDER M WHERE B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ) END AS MATERIAL_IN_DT <!-- 소재입고 일시 -->
            , ( SELECT SF_GET_CODE_NM('1009', POP_POSITION, #{LOGIN_LOCALE})
                FROM TBL_POP M
                WHERE  B.CONTROL_SEQ = M.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ
                    AND M.POP_SEQ = (SELECT MAX(K.POP_SEQ) FROM TBL_POP K WHERE K.CONTROL_SEQ = M.CONTROL_SEQ
                                        AND K.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ)) AS POP_POSITION_NM
            , SF_GET_DATE_F(OUTSIDE_CONFIRM_DT, '', 'M') AS OUTSIDE_CONFIRM_DT <!-- 외주확정 일시 -->
            , CASE WHEN B.MATERIAL_FINISH_HEAT = 'FNL030' THEN '열처리' ELSE SPACE(0) END AS MATERIAL_FINISH_HEAT
            , CASE WHEN B.WORK_TYPE IN ('WTP020', 'WTP050') THEN 'Y'
            	   ELSE 'N'
            END AS ASSEMBLY_YN
            , B.WORK_TYPE
            , B.PART_NUM
            , ASSEMBLY_CONTROL_DETAIL_SEQ
            , FIRST_PART_CONTROL_DETAIL_SEQ
	        , D.PREV_PART_CONTROL_DETAIL_SEQ
	        , D.NEXT_PART_CONTROL_DETAIL_SEQ
            , SF_GET_INSIDE_STOCK_NM(Z.INSIDE_STOCK_SEQ) AS INSIDE_STOCK_NUM
            , IFNULL(CAST(SUM(Z.REQUEST_QTY) AS INT),SPACE(0)) AS REQUEST_QTY
            , IFNULL(CAST(SUM(X.OUT_QTY) AS INT),SPACE(0))AS OUT_QTY
            , Z.OUT_REQUEST_SEQ
            , CASE WHEN Z.OUT_REQUEST_SEQ IS NOT NULL THEN CONCAT(SF_GET_INSIDE_STOCK_NM(Z.INSIDE_STOCK_SEQ),' (요:', SUM(Z.REQUEST_QTY),', 충:', IFNULL(SUM(X.OUT_QTY),SPACE(0)),')')
                   ELSE SPACE(0)
              END STOCK_TXT
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN (
                SELECT
                    M.CONTROL_SEQ
                    , M.CONTROL_DETAIL_SEQ
                    , ( SELECT MAX(CONTROL_DETAIL_SEQ)
                        FROM TBL_CONTROL_PART
                        WHERE CONTROL_SEQ = M.CONTROL_SEQ
                            AND WORK_TYPE = 'WTP020' ) AS ASSEMBLY_CONTROL_DETAIL_SEQ
                    , ( SELECT CONTROL_DETAIL_SEQ
                        FROM TBL_CONTROL_PART
                        WHERE CONTROL_SEQ = M.CONTROL_SEQ
                            AND WORK_TYPE = 'WTP050'
                        ORDER BY PART_NUM
                        LIMIT 1 ) AS FIRST_PART_CONTROL_DETAIL_SEQ
                    , CASE WHEN WORK_TYPE = 'WTP050' THEN LAG(M.CONTROL_DETAIL_SEQ) OVER(PARTITION BY M.WORK_TYPE ORDER BY M.PART_NUM) END AS PREV_PART_CONTROL_DETAIL_SEQ
                    , CASE WHEN WORK_TYPE = 'WTP050' THEN LEAD(M.CONTROL_DETAIL_SEQ) OVER(PARTITION BY M.WORK_TYPE ORDER BY M.PART_NUM) END AS NEXT_PART_CONTROL_DETAIL_SEQ
                FROM TBL_CONTROL_PART M
                WHERE M.CONTROL_SEQ = #{CONTROL_SEQ}
            ) D ON D.CONTROL_SEQ = B.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_INSIDE_OUT_REQUEST Z ON Z.REQUEST_CONTROL_SEQ = B.CONTROL_SEQ AND Z.REQUEST_CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND Z.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_INSIDE_OUT X ON X.OUT_REQUEST_SEQ = Z.OUT_REQUEST_SEQ AND X.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
        <choose>
            <when test="CONTROL_NUM != null and CONTROL_NUM !=''">
                AND A.CONTROL_NUM = #{CONTROL_NUM}
                AND B.WORK_TYPE != 'WTP050'
            </when>
            <otherwise>
                AND B.CONTROL_SEQ = #{CONTROL_SEQ}
                AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </otherwise>
        </choose>
    </select>
    <select id="selectCommItemDetailInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        -- MPR040(선반), MPR010(NC), MPR020(밀링), MPR030(연마)
        SELECT CONCAT(TRUNCATE(X.WORK_TIME_TOTAL / 3600, 0), 'h ', TRUNCATE((X.WORK_TIME_TOTAL % 3600) / 60, 0), 'm') AS WORK_TIME_TOTAL
            , CONCAT(TRUNCATE(X.WORK_TIME_MPR040 / 3600, 0), 'h ', TRUNCATE((X.WORK_TIME_MPR040 % 3600) / 60, 0), 'm') AS WORK_TIME_MPR040
            , CONCAT(TRUNCATE(X.WORK_TIME_MPR010 / 3600, 0), 'h ', TRUNCATE((X.WORK_TIME_MPR010 % 3600) / 60, 0), 'm') AS WORK_TIME_MPR010
            , CONCAT(TRUNCATE(X.WORK_TIME_MPR020 / 3600, 0), 'h ', TRUNCATE((X.WORK_TIME_MPR020 % 3600) / 60, 0), 'm') AS WORK_TIME_MPR020
            , CONCAT(TRUNCATE(X.WORK_TIME_MPR030 / 3600, 0), 'h ', TRUNCATE((X.WORK_TIME_MPR030 % 3600) / 60, 0), 'm')  AS WORK_TIME_MPR030
        FROM (
            SELECT IFNULL(SUM(Q.WORK_TIME),0) AS WORK_TIME_TOTAL
                , IFNULL(SUM(CASE WHEN Q.PROCESS_TYPE = 'MPR040' THEN WORK_TIME END),0) AS WORK_TIME_MPR040
                , IFNULL(SUM(CASE WHEN Q.PROCESS_TYPE = 'MPR010' THEN WORK_TIME END),0) AS WORK_TIME_MPR010
                , IFNULL(SUM(CASE WHEN Q.PROCESS_TYPE = 'MPR020' THEN WORK_TIME END),0) AS WORK_TIME_MPR020
                , IFNULL(SUM(CASE WHEN Q.PROCESS_TYPE = 'MPR030' THEN WORK_TIME END),0) AS WORK_TIME_MPR030
            FROM (  SELECT C.PROCESS_TYPE
                        , SUM(TIMESTAMPDIFF(SECOND, B.WORK_START_DT, B.WORK_STOP_DT)) AS WORK_TIME
                    FROM TBL_MCT_WORK A, TBL_MCT_WORK_TIME B, TBL_EQUIP C
                    WHERE A.MCT_WORK_SEQ = B.MCT_WORK_SEQ
                        AND A.EQUIP_SEQ = C.EQUIP_SEQ
                        AND A.DEL_YN = 'N'
                        AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                        AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                        AND C.PROCESS_TYPE IN ('MPR010','MPR020','MPR030','MPR040')
                    GROUP BY C.PROCESS_TYPE
            ) Q
        ) X
    </select>
    <select id="selectCommItemDetailInfoGrid1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.RNUM
            , X.PROCESS_TYPE
            , X.PROCESS_TYPE_NM
            , X.EQUIP_NM
            , X.WORK_STATUS
            , X.WORK_START_DT
            , X.WORK_FINISH_DT
            , CONCAT(TRUNCATE(X.WORKING_TIME / 3600, 0), 'h ', TRUNCATE((X.WORKING_TIME % 3600) / 60, 0), 'm')  AS WORKING_TIME
            , X.WORK_USER
            , X.FINISH_QTY
            , X.ERROR_QTY
        FROM (
            SELECT ROW_NUMBER() OVER(ORDER BY A.MCT_WORK_SEQ) AS RNUM
                , B.PROCESS_TYPE, SF_GET_CODE_NM('1010', B.PROCESS_TYPE, #{LOGIN_LOCALE}) AS PROCESS_TYPE_NM
                , B.EQUIP_NM
                , SF_GET_CODE_NM('1079', A.WORK_STATUS, #{LOGIN_LOCALE}) AS WORK_STATUS
                , SF_GET_DATE_F(A.WORK_START_DT,'','M') AS WORK_START_DT
                , SF_GET_DATE_F(A.WORK_FINISH_DT,'','M') AS WORK_FINISH_DT
                , (SELECT SUM(TIMESTAMPDIFF(SECOND, M.WORK_START_DT, M.WORK_STOP_DT)) FROM TBL_MCT_WORK_TIME M WHERE M.MCT_WORK_SEQ = A.MCT_WORK_SEQ) AS WORKING_TIME
                , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = A.WORK_USER_ID) AS WORK_USER
                , A.FINISH_QTY
                , A.ERROR_QTY
            FROM TBL_MCT_WORK A, TBL_EQUIP B
            WHERE A.EQUIP_SEQ = B.EQUIP_SEQ
              AND A.DEL_YN = 'N'
              AND A.CONTROL_SEQ = #{CONTROL_SEQ}
              AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            ORDER BY 1 DESC
        ) X
    </select>

    <select id="selectCommItemDetailInfoGrid2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.POP_SEQ
            , SF_GET_CODE_NM(1009, A.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION_NM <!-- 현재 등록된 위치 -->
            , SF_GET_DATE_F(A.POP_DT,'','M') AS POP_DT
        FROM TBL_POP A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY A.POP_SEQ DESC
    </select>

    <select id="selectCommItemDetailInfoGrid3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
       SELECT ROW_NUMBER() OVER(ORDER BY X.NOTE_TYPE) AS RNUM,
            SF_GET_CODE_NM('1078', X.NOTE_TYPE, #{LOGIN_LOCALE}) AS NOTE_TYPE_NM
            , X.NOTE
        FROM (  SELECT '1' AS NOTE_TYPE, A.NOTE FROM TBL_CONTROL A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.NOTE IS NOT NULL
                UNION ALL
                SELECT '2' AS NOTE_TYPE, A.MCT_NOTE AS NOTE FROM TBL_CONTROL_PART A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.MCT_NOTE IS NOT NULL
                UNION ALL
                SELECT '3' AS NOTE_TYPE, A.NOTE FROM TBL_CAM A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ} AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.NOTE IS NOT NULL
              ) X
    </select>
    <select id="selectCommItemDetailInfoGrid4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY B.SEQ) AS RNUM
          , B.SEQ AS CAM_SEQ
          , SF_GET_CODE_NM('1080', B.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION <!-- CAM 가공위치 -->
          , B.WORK_DESC
          , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = B.WORK_USER_ID) AS WORK_USER_NM
          , B.CAM_GFILE_SEQ    <!-- 확인 -->
          , CASE WHEN B.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE B.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXC') ELSE SPACE(0) END CAM_FILE_SEQ <!-- CAM FILE -->
          , CASE WHEN B.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE B.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXN') ELSE SPACE(0) END NC_FILE_SEQ <!-- NC FILE -->
          , CASE WHEN A.START_DT IS NOT NULL AND A.FINISH_DT IS NULL THEN '(진행중)' ELSE SPACE(0) END AS STATUS_INFO
          , CASE WHEN A.FINISH_DT IS NOT NULL THEN SF_GET_DATE_F(A.FINISH_DT,'YYYY','M')
                 WHEN A.START_DT IS NOT NULL THEN SF_GET_DATE_F(A.START_DT,'YYYY','M')
            END UPDATE_TIME_INFO
        FROM TBL_CAM A, TBL_CAM_DETAIL B
        WHERE A.CAM_SEQ = B.CAM_SEQ
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1
    </select>
    <select id="selectCommItemDetailInfoGrid5" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
          , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
          , SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
          , CASE WHEN A.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
          , CONCAT( CASE
                        WHEN A.INSPECT_GRADE IN ('GRD010', 'GRD020', 'GRD030') THEN '적합'
                        WHEN A.INSPECT_GRADE = 'GRD040' THEN '부적합'
                        WHEN A.INSPECT_GRADE IN ('GRD050', 'GRD060') THEN '반품'
                    END, '(', SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}), ')') AS Q_INSPECT_GRADE_NOTE
<!--           , (SELECT NOTE FROM TBL_CODE WHERE HIGH_CD = '1040' AND CODE_CD = A.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE -->
          , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                  FROM TBL_CONTROL_PART M, TBL_CONTROL_PART_ORDER N
                                                  WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                    AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                    AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                    AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                ) - IFNULL(A.ERROR_QTY,0)
            END AS Q_OK_QTY
          , CASE WHEN A.INSPECT_GRADE IN ('GRD040', 'GRD050', 'GRD060') THEN A.ERROR_QTY END AS Q_ERROR_QTY
          , CASE WHEN A.INSPECT_TYPE = '1' THEN
                    CASE WHEN jmes.SF_GET_CODE_NM('1019', A.INSPECT_RESULT, #{LOGIN_LOCALE}) IS NULL THEN jmes.SF_GET_CODE_NM('1020', A.INSPECT_RESULT, #{LOGIN_LOCALE})
                         ELSE jmes.SF_GET_CODE_NM('1019', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                 WHEN A.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS Q_INSPECT_RESULT_NM
          , A.INSPECT_DESC AS Q_INSPECT_DESC
          , SF_GET_CODE_NM('1032', A.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
          , SF_GET_CODE_NM('1025', A.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
          , A.ERROR_NOTE AS Q_ERROR_NOTE
          , SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
        FROM TBL_INSPECT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY 1 DESC
    </select>
    <select id="selectCommItemDetailInfoGrid6" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.REGIST_NUM,
               A.ORDER_QTY,
               SF_GET_DATE_F(A.ORDER_DUE_DT,'','') AS ORDER_DUE_DT,
               A.ORDER_SEQ
        FROM TBL_ORDER A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
            INNER JOIN TBL_CONTROL C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
        ORDER BY A.ORDER_SEQ
    </select>
    <select id="selectCommItemDetailInspectionList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.*
        FROM (
                 SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
                , A.INSPECT_NUM AS Q_INSPECT_NUM
                , 1 AS TYPE
                , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
                      , SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
                      , CASE WHEN A.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
                      , SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE
                      , CASE
                            WHEN A.INSPECT_GRADE IN ('GRD010', 'GRD020', 'GRD030') THEN '적합'
                            WHEN A.INSPECT_GRADE = 'GRD040' THEN '부적합'
                            WHEN A.INSPECT_GRADE IN ('GRD050', 'GRD060') THEN '반품'
                     END AS Q_INSPECT_GRADE_NOTE
                      , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                              FROM TBL_CONTROL_PART M, TBL_CONTROL_PART_ORDER N
                                                              WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                                AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                                AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                            ) - IFNULL(A.ERROR_QTY,0)
                     END AS Q_OK_QTY
                      , CASE WHEN A.INSPECT_GRADE IN ('GRD040', 'GRD050', 'GRD060') THEN A.ERROR_QTY END AS Q_ERROR_QTY
                      , CASE WHEN A.INSPECT_TYPE = '1' THEN CASE WHEN A.INSPECT_GRADE IN ('GRD030', 'GRD040') THEN SF_GET_CODE_NM('1019', A.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                             WHEN A.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', A.INSPECT_RESULT, #{LOGIN_LOCALE})
                     END AS Q_INSPECT_RESULT_NM
                      , '' AS Q_INSPECT_DESC
                      , SF_GET_CODE_NM('1010', A.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
                      , SF_GET_CODE_NM('1032', A.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
                      , SF_GET_CODE_NM('1025', A.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
                      , '' AS Q_ERROR_NOTE
                      , SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
                 FROM TBL_INSPECT A
                 WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                   AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                 UNION ALL
                 SELECT ROW_NUMBER() OVER(ORDER BY A.INSPECT_SEQ) AS Q_SEQ
                    , A.INSPECT_NUM AS Q_INSPECT_NUM
                    , 2 AS TYPE
                    , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = A.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
                    , SF_GET_CODE_NM('1060', A.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
                    , CASE WHEN A.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(A.INSERT_DT,'YY','M') END AS Q_RETURN_DT
                    , SF_GET_CODE_NM('1040', A.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE
                    , CASE
                            WHEN A.INSPECT_GRADE IN ('GRD010', 'GRD020', 'GRD030') THEN '적합'
                            WHEN A.INSPECT_GRADE = 'GRD040' THEN '부적합'
                            WHEN A.INSPECT_GRADE IN ('GRD050', 'GRD060') THEN '반품'
                     END AS Q_INSPECT_GRADE_NOTE
                    , CASE WHEN A.INSPECT_TYPE = '1' THEN ( SELECT IFNULL(SUM(N.ORDER_QTY) * M.PART_UNIT_QTY,0)
                                                              FROM TBL_CONTROL_PART M, TBL_CONTROL_PART_ORDER N
                                                              WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                                AND M.CONTROL_SEQ = #{CONTROL_SEQ}
                                                                AND M.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                                            ) - IFNULL(A.ERROR_QTY,0)
                     END AS Q_OK_QTY
                    , CASE WHEN A.INSPECT_GRADE IN ('GRD040', 'GRD050', 'GRD060') THEN A.ERROR_QTY END AS Q_ERROR_QTY
                    , '' AS Q_INSPECT_RESULT_NM
                    , A.INSPECT_DESC AS Q_INSPECT_DESC
                    , '' AS Q_ERROR_PROCESS_NM
                    , '' AS Q_ERROR_REASON_NM
                    , '' AS Q_ERROR_ACTION_NM
                    , A.ERROR_NOTE AS Q_ERROR_NOTE
                    , SF_GET_DATE_F(A.INSERT_DT,'YY','M') AS Q_DT
                 FROM TBL_INSPECT A
                 WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                   AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
             ) X
        ORDER BY X.Q_SEQ, X.Q_INSPECT_NUM, X.TYPE
    </select>
    <select id="selectControlCnt" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_SEQ
        FROM TBL_CONTROL_PART_ORDER A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.DEL_YN = 'N'
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
    </select>
    <select id="selectOutgoingList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ, T.INSPECT_SEQ, T.DRAWING_VER
            , T.CONTROL_STATUS_NM
            , T.ORDER_COMP_NM
            , T.REGIST_NUM
            , T.ORDER_NUM
            , SF_GET_DATE_F(T.ORDER_DUE_DT,'YY','') AS ORDER_DUE_DT
            , SF_GET_DATE_F(T.INNER_DUE_DT,'YY','') AS INNER_DUE_DT
            , T.OUTSIDE_COMP_NM
            , T.CONTROL_NUM
            , T.PART_NUM
            , T.DRAWING_NUM
            , T.WORK_TYPE_NM
            , T.MATERIAL_DETAIL_NM
            , T.SURFACE_TREAT_NM
            , T.SIZE_TXT
            , T.ORDER_QTY
            , T.OUT_QTY
            , SF_GET_DATE_F(T.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.RETURN_QTY
            , SF_GET_DATE_F(T.RETURN_LAST_DT,'YY','') AS RETURN_LAST_DT
            , CASE WHEN T.RETURN_ING_CNT = 0 THEN SF_GET_DATE_F(T.RETURN_FINISH_DT,'YY','') END AS RETURN_FINISH_DT
            , T.ORDER_PACKING_NUM_CNT
            , T.PACKING_CNT
            , CAST(CASE WHEN T.Q_SEQ = 0 THEN SPACE(0) ELSE T.Q_SEQ END AS CHAR) AS Q_SEQ
            , T.Q_INSPECT_GRADE_NOTE
            , T.Q_ERROR_QTY
            , T.Q_INSPECT_RESULT_NM
            , T.Q_INSPECT_DESC
            , T.Q_ERROR_ACTION_NM
            , T.Q_ERROR_NOTE
            , T.PART_STATUS_NM
            , CASE WHEN T.SCRAP_YN = 'Y' THEN NULL ELSE T.POP_NM END AS POP_NM
            , T.IMG_GFILE_SEQ
            , T.WORK_FINISH_DT
            , T.ORIGINAL_SIDE_QTY
            , T.OTHER_SIDE_QTY
            , T.WORK_FACTORY_NM
            , T.MATERIAL_RECEIPT_DT
            , T.OUTSIDE_IN_DT
            , T.Q_INSPECT_GRADE_NM
            , T.Q_DT
            , SF_GET_DATE_F(T.CONTROL_CONFIRM_DT,'YYYY','') AS CONTROL_CONFIRM_DT
            , T.CONTROL_CLOSE_DT
            , T.SCRAP_YN
        FROM (
            SELECT
                X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ, X.INSPECT_SEQ, X.DRAWING_VER
                , SF_GET_CODE_NM('1038', X.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM
                , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                , X.REGIST_NUM
                , X.ORDER_NUM
                , X.ORDER_DUE_DT
                , X.INNER_DUE_DT
                , SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , SF_GET_CODE_NM('1033', X.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                , SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , SF_GET_CODE_NM('1039', X.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
                , X.SIZE_TXT
                , X.ORDER_QTY
                , CASE
                    WHEN X.WORK_TYPE = 'WTP050' THEN SPACE(0)
                    WHEN X.ORDER_PACKING_NUM_CNT > 0 AND X.OUT_FINISH_DT IS NULL
                    THEN CONCAT('(',cast(X.ORDER_PACKING_NUM_CNT as char(1)),'/',X.PACKING_CNT,')')
                    ELSE X.OUT_QTY
                  END AS OUT_QTY
                , X.ORDER_PACKING_NUM_CNT
                , X.PACKING_CNT
                , (SELECT COUNT(*) FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ) AS Q_SEQ
                , ( SELECT
                        CASE WHEN M.CODE_CD IN ('GRD010','GRD020','GRD030') THEN CONCAT(M.NOTE,'(',SF_GET_CODE_NM('1040', M.CODE_CD, #{LOGIN_LOCALE}),')') ELSE M.NOTE END
                    FROM TBL_CODE M
                    WHERE M.HIGH_CD = '1040' AND M.CODE_CD = Z.INSPECT_GRADE
                ) AS Q_INSPECT_GRADE_NOTE
                , Z.ERROR_QTY AS Q_ERROR_QTY
                , CASE WHEN Z.INSPECT_TYPE = '1' THEN
                        CASE WHEN jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) IS NULL THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                             ELSE jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                       WHEN Z.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                 END AS Q_INSPECT_RESULT_NM
                , Z.INSPECT_DESC AS Q_INSPECT_DESC
                , SF_GET_CODE_NM('1025', Z.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
                , Z.ERROR_NOTE AS Q_ERROR_NOTE
                , SF_GET_PART_STATUS_NM(X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
                , (SELECT SF_GET_CODE_NM('1009', M.POP_POSITION, #{LOGIN_LOCALE}) FROM TBL_POP M WHERE M.POP_SEQ = X.POP_SEQ) AS POP_NM
                , X.OUT_FINISH_DT
                , (SELECT SUM(M.ERROR_QTY) FROM TBL_INSPECT M WHERE M.ORDER_SEQ = X.ORDER_SEQ AND M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.INSPECT_TYPE = '2') AS RETURN_QTY
                , (SELECT MAX(M.INSERT_DT) FROM TBL_INSPECT M WHERE M.ORDER_SEQ = X.ORDER_SEQ AND M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ AND M.INSPECT_TYPE = '2') AS  RETURN_LAST_DT
                , ( SELECT MAX(M.RETURN_SETTLEMENT_DT)
                    FROM TBL_INSPECT M
                    WHERE M.ORDER_SEQ = X.ORDER_SEQ
                        AND M.CONTROL_SEQ = X.CONTROL_SEQ
                        AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                        AND M.INSPECT_TYPE = '2'
                ) AS  RETURN_FINISH_DT
                , ( SELECT COUNT(*)
                    FROM TBL_INSPECT M
                    WHERE M.ORDER_SEQ = X.ORDER_SEQ
                        AND M.CONTROL_SEQ = X.CONTROL_SEQ
                        AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                        AND M.INSPECT_TYPE = '2'
                        AND M.RETURN_SETTLEMENT_DT IS NULL
                ) AS  RETURN_ING_CNT
                , X.IMG_GFILE_SEQ
                <!-- , (SELECT SF_GET_DATE_F(M.POP_DT,'YY','M') FROM TBL_POP M WHERE M.POP_POSITION = 'POP100' AND M.CONTROL_SEQ = X.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ ORDER BY M.POP_SEQ LIMIT 1) AS WORK_FINISH_DT -->
                , SF_GET_DATE_F(X.INNER_WORK_FINISH_DT, '', '') AS WORK_FINISH_DT
                , X.ORIGINAL_SIDE_QTY
                , X.OTHER_SIDE_QTY
                , X.WORK_FACTORY_NM
                , X.MATERIAL_RECEIPT_DT
                , X.OUTSIDE_IN_DT
                , SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
                , SF_GET_DATE_F(Z.INSERT_DT,'','M') AS Q_DT
                , X.CONTROL_CONFIRM_DT
                , X.CONTROL_CLOSE_DT
                , X.SCRAP_YN
            FROM (
                SELECT
                    A.ORDER_SEQ,
                    B.CONTROL_SEQ,
                    B.CONTROL_DETAIL_SEQ,
                    D.DRAWING_VER,
                    C.CONTROL_STATUS ,
                    (
                        SELECT MAX(M.MCT_WORK_SEQ)
                        FROM TBL_MCT_WORK M
                        WHERE M.CONTROL_SEQ = B.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                            AND M.DEL_YN = 'N'
                    ) AS MCT_WORK_SEQ ,
                    (
                        SELECT
                        MAX(M.INSPECT_SEQ)
                        FROM TBL_INSPECT M
                        WHERE M.CONTROL_SEQ = B.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    ) AS INSPECT_SEQ ,
                    (
                        SELECT
                        MAX(M.POP_SEQ)
                        FROM TBL_POP M
                        WHERE M.CONTROL_SEQ = B.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    ) AS POP_SEQ,
                    A.ORDER_COMP_CD,
                    A.REGIST_NUM,
                    A.ORDER_NUM,
                    A.ORDER_DUE_DT,
                    D.INNER_DUE_DT,
                    D.OUTSIDE_COMP_CD,
                    C.CONTROL_NUM,
                    D.PART_NUM,
                    CASE WHEN D.PART_NUM IS NULL THEN A.DRAWING_NUM
                         ELSE D.DRAWING_NUM
                    END AS DRAWING_NUM,
                    A.WORK_TYPE,
                    A.MATERIAL_DETAIL,
                    A.SURFACE_TREAT,
                    A.SIZE_TXT,
                    A.ORDER_QTY,
                    A.PACKING_CNT,
                    D.PART_STATUS,
                    A.OUT_FINISH_DT,
                    A.IMG_GFILE_SEQ,
                    (
                        SELECT COUNT(M.PACKING_NUM)
                        FROM TBL_OUT M
                        WHERE M.CONTROL_SEQ = B.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                            AND M.ORDER_SEQ = B.ORDER_SEQ
                    ) AS ORDER_PACKING_NUM_CNT,
                    (
                        SELECT SUM(M.OUT_QTY)
                        FROM TBL_OUT M
                        WHERE M.ORDER_SEQ = B.ORDER_SEQ
                    ) AS OUT_QTY,
                    /*(
                        SELECT MAX(M.OUT_DT)
                        FROM TBL_OUT M, TBL_CONTROL_PART N
                        WHERE M.ORDER_SEQ = A.ORDER_SEQ
                            AND N.CONTROL_SEQ = B.CONTROL_SEQ
                            AND N.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                        GROUP BY N.CONTROL_SEQ, N.CONTROL_DETAIL_SEQ, M.ORDER_SEQ
                    ) AS ORDER_OUT_DT,*/
                    A.ORIGINAL_SIDE_QTY,
                    A.OTHER_SIDE_QTY,
                    D.INNER_WORK_FINISH_DT,
                    SF_GET_CODE_NM('1014',D.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM ,
                    SF_GET_MATERIAL_RECEIPT_DT(B.CONTROL_SEQ,B.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT ,
                    SF_GET_DATE_F(D.OUTSIDE_IN_DT,'','M') AS OUTSIDE_IN_DT ,
                    (
                        SELECT AA.STATUS_DT
                        FROM TBL_CONTROL_PROGRESS AA
                        WHERE 1 = 1
                            AND B.CONTROL_SEQ = AA.CONTROL_SEQ
                            AND AA.SEQ = (
                                SELECT MAX(SEQ)
                                FROM TBL_CONTROL_PROGRESS BB
                                WHERE 1 = 1
                                    AND AA.CONTROL_SEQ = BB.CONTROL_SEQ
                                    AND BB.ORDER_STATUS = 'ORD001'
                            )
                    ) AS CONTROL_CONFIRM_DT ,
                    (
                        CASE WHEN A.ORDER_STATUS = 'REG003' THEN SF_GET_DATE_F(A.ORDER_STATUS_DT,'YYYY','')
                             ELSE SPACE(0)
                        END
                    ) AS CONTROL_CLOSE_DT, <!-- 21.10.25 주문 마감일자로 의미 변경 -->
                    A.SCRAP_YN
                FROM TBL_ORDER A
                    INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
                    INNER JOIN TBL_CONTROL C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.DEL_YN = 'N' AND C.CONTROL_STATUS IN ('ORD001', 'ORD003', 'ORD005') <!-- 22.02.10 출고는 확정,마감만 가능 / 보류는 폐기만 가능 -->
                    INNER JOIN TBL_CONTROL_PART D ON D.CONTROL_SEQ = C.CONTROL_SEQ
                        <if test="SEL_OUTSIDE_COMP_CD !='' and SEL_OUTSIDE_COMP_CD != null">
                            AND D.OUTSIDE_COMP_CD = #{SEL_OUTSIDE_COMP_CD}
                        </if>
                WHERE A.DEL_YN = 'N'
                    AND IFNULL(A.SCRAP_YN, 'N') = 'N'
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND (UPPER(C.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%') OR UPPER(A.REGIST_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%'))
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(A.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(A.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
                    <if test="SEL_OUT_FINISH_YN !='' and SEL_OUT_FINISH_YN != null">
                        AND A.OUT_FINISH_DT IS NULL
                    </if>
            ) X LEFT OUTER JOIN TBL_INSPECT Z ON ( Z.INSPECT_SEQ = X.INSPECT_SEQ AND Z.INSPECT_TYPE = '1' OR Z.INSPECT_SEQ = X.INSPECT_SEQ AND Z.INSPECT_TYPE = '2' AND Z.ORDER_SEQ = X.ORDER_SEQ)
            WHERE 1=1
            <if test="SEL_PART_NUM_VIEW_YN == null">
                AND X.PART_NUM IS NULL    <!-- Part 단위표시가 체크가 안되어 있는 경우 -->
            </if>
            <if test="SEL_ST_DT !='' and SEL_ST_DT != null">
                <if test="SEL_END_DT !='' and SEL_END_DT != null">
                    <if test='SEL_OUTGOING_DATE_TYPE == "1"'>
                        AND X.ORDER_DUE_DT >= REPLACE(#{SEL_ST_DT},'/',SPACE(0))
                        AND X.ORDER_DUE_DT <![CDATA[ <= ]]> REPLACE(#{SEL_END_DT},'/',SPACE(0))  <!-- 요망납기 -->
                    </if>
                    <if test='SEL_OUTGOING_DATE_TYPE == "2"'>
                        AND X.INNER_DUE_DT >= REPLACE(#{SEL_ST_DT},'/',SPACE(0))
                        AND X.INNER_DUE_DT <![CDATA[ <= ]]> REPLACE(#{SEL_END_DT},'/',SPACE(0))   <!-- 가공납기 -->
                    </if>
                    <if test='SEL_OUTGOING_DATE_TYPE == "3"'>
                        AND X.OUT_FINISH_DT >= #{SEL_ST_DT}
                        AND X.OUT_FINISH_DT <![CDATA[ <= ]]> DATE_ADD(#{SEL_END_DT}, INTERVAL 1 DAY)  <!-- 출고일시 -->
                    </if>
                    <if test='SEL_OUTGOING_DATE_TYPE == "4"'>
                        AND X.CONTROL_CONFIRM_DT >= #{SEL_ST_DT}
                        AND X.CONTROL_CONFIRM_DT <![CDATA[ <= ]]> DATE_ADD(#{SEL_END_DT}, INTERVAL 1 DAY) <!-- 확정일시 -->
                    </if>
                </if>
            </if>
        ) T
        GROUP BY T.REGIST_NUM, T.CONTROL_NUM
        ORDER BY T.CONTROL_NUM, T.ORDER_NUM, T.DRAWING_NUM
    </select>

    <select id="selectOutgoingOutType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        SELECT X.ORDER_SEQ,
            X.REGIST_NUM,
            X.ORDER_NUM,
            X.DRAWING_NUM,
            X.IMG_GFILE_SEQ,
            IFNULL(X.ORDER_QTY,0) AS ORDER_QTY,
            (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.ORDER_SEQ = X.ORDER_SEQ) AS OUT_QTY,
            (IFNULL(X.ORDER_QTY,0) - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.ORDER_SEQ = X.ORDER_SEQ)) AS NEW_OUT_QTY
        FROM TBL_ORDER X
        WHERE X.ORDER_SEQ = #{ORDER_SEQ}
            AND X.DEL_YN = 'N'
    </select>

    <insert id="insertOutgoingOutType1" parameterType="java.util.HashMap">
        /* 그리드 출고버튼시 */
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , A.ORDER_SEQ
            , #{NEW_OUT_QTY} AS NEW_OUT_QTY
            , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.ORDER_SEQ = #{ORDER_SEQ}
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </insert>
    <insert id="insertOutgoingOutType1UseOrderSeq" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
             , A.CONTROL_SEQ
             , A.CONTROL_DETAIL_SEQ
             , A.ORDER_SEQ
             , A.ORDER_QTY
             , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL_PART_ORDER A
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
            <if test="CONTROL_SEQ !='' and CONTROL_SEQ != null">
                AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            </if>
            <if test="CONTROL_DETAIL_SEQ !='' and CONTROL_DETAIL_SEQ != null">
                AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </if>
    </insert>
    <update id="updateOutgoingOutType1After1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <update id="updateOutgoingOutType1After1UseOrderSeq" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.DEL_YN = 'N' AND B.CONTROL_STATUS IN ('ORD001','ORD003')
            INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END,
            B.OUT_FINISH_DT = CASE WHEN B.OUT_FINISH_DT IS NULL THEN NOW() ELSE B.OUT_FINISH_DT END,
            C.INNER_WORK_FINISH_DT = CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE C.INNER_WORK_FINISH_DT END
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateOutgoingOutSelectGridType1After1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <update id="updateOutgoingOutType1After2" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001','ORD003')
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <update id="updateOutgoingOutSelectGridType1After2" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.ORDER_SEQ = #{ORDER_SEQ}
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001','ORD003')
    </update>
    <update id="updateOutgoingOutType1After3" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
        SET
            A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND EXISTS (SELECT 1 FROM TBL_MCT_WORK T WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N')
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <update id="updateOutFinishDtForBarcode" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.CONTROL_SEQ = #{CONTROL_SEQ}
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE NOT EXISTS(
                SELECT 1
                FROM TBL_CONTROL_PART_ORDER N
                     INNER JOIN TBL_CONTROL M ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.DEL_YN = 'N'
                WHERE N.ORDER_SEQ = A.ORDER_SEQ
                  AND M.OUT_FINISH_DT IS NULL
            )
    </update>
    <update id="updateOutFinishDtForGrid" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND EXISTS ( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.ORDER_SEQ = A.ORDER_SEQ)
          AND NOT EXISTS(
                SELECT 1
                FROM TBL_CONTROL_PART_ORDER N
                    INNER JOIN TBL_CONTROL X ON N.CONTROL_SEQ = X.CONTROL_SEQ AND X.DEL_YN = 'N'
                WHERE N.ORDER_SEQ = A.ORDER_SEQ
                  AND N.OUT_FINISH_DT IS NULL
            )
    </update>
    <update id="updateOutFinishDt" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
        SET
            A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND EXISTS ( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.ORDER_SEQ = A.ORDER_SEQ)
          AND NOT EXISTS(
                SELECT 1
                FROM TBL_CONTROL_PART_ORDER N
                     INNER JOIN TBL_CONTROL M ON M.CONTROL_SEQ = N.CONTROL_SEQ AND M.DEL_YN = 'N'
                WHERE N.ORDER_SEQ = A.ORDER_SEQ
                  AND M.OUT_FINISH_DT IS NULL
            )
    </update>
    <update id="updateOutgoingOutSelectGridType1After3" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.ORDER_SEQ = #{ORDER_SEQ}
        SET
            A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE EXISTS (SELECT 1 FROM TBL_MCT_WORK T
                  WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
        )
        AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
        AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
        AND EXISTS( SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>

    <insert id="insertOutgoingOutType2" parameterType="java.util.HashMap">
    /* 그리드 여러개 출고버튼시 */
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , (A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ))
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL_PART_ORDER A
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </insert>
    <update id="updateControlPartOrderPackingCnt1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET PACKING_CNT = #{PACKING_CNT}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateControlPartOrderPackingCnt2" parameterType="java.util.HashMap">
        UPDATE TBL_OUT_BARCODE
        SET
            DEL_YN = 'Y'
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <insert id="insertControlPartOrderPackingCnt3" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT_BARCODE (BARCODE_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM)
        SELECT CONCAT('L',LPAD(NEXTVAL(SEQ_BARCODE),9,'0')) AS BARCODE_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, B.SEQ AS PACKING_NUM
        FROM TBL_CONTROL_PART_ORDER A, TBL_YYYYMMDD B
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.ORDER_SEQ = #{ORDER_SEQ}
            AND B.SEQ <![CDATA[ <= ]]> A.PACKING_CNT
    </insert>

    <select id="selectOutgoingOutType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        /* 도면 바코드 입력시 정보  */
        SELECT X.CONTROL_SEQ
            , X.CONTROL_DETAIL_SEQ
            , X.ORDER_SEQ
            , X.CONTROL_STATUS
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , X.ORDER_NUM
            , X.IMG_GFILE_SEQ
            , CONCAT(X.ORDER_QTY - X.OUT_QTY, '/', X.ORDER_QTY) AS QTY_INFO
            , X.ORDER_QTY - X.OUT_QTY AS PLAN_QTY
            , X.OUT_QTY
            , X.MY_OUT_PACKING_CNT
            , X.WORK_TYPE
        FROM (  SELECT B.CONTROL_SEQ
                    , B.CONTROL_DETAIL_SEQ
                    , C.ORDER_SEQ
                    , A.CONTROL_STATUS
                    , A.CONTROL_NUM
                    , C.DRAWING_NUM
                    , C.ORDER_NUM
                    , B.WORK_TYPE
                    , C.IMG_GFILE_SEQ
                    , SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, 0) AS ORDER_QTY
                    , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS OUT_QTY
                    , (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS MY_OUT_PACKING_CNT
                FROM TBL_CONTROL A
                    , TBL_CONTROL_PART B
                    , TBL_CONTROL_PART_ORDER_MAIN C
                    , TBL_CONTROL_BARCODE D
                WHERE B.CONTROL_SEQ = A.CONTROL_SEQ
                    AND C.CONTROL_SEQ = A.CONTROL_SEQ
                    AND D.CONTROL_SEQ = B.CONTROL_SEQ
                    AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND D.DEL_YN = 'N'
                    AND D.BARCODE_NUM = #{BARCODE_NUM}
        ) X
    </select>

    <insert id="insertOutgoingOutType3" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.ORDER_QTY - (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </insert>
    <update id="updateOutgoingOutType3After1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.ORDER_QTY = (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <update id="updateOutgoingOutType3After2" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
            SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001','ORD003')
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>

    <update id="updateOutgoingOutType3After3" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
            SET A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND EXISTS( SELECT 1 FROM TBL_MCT_WORK T
                WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
            )
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <select id="selectOutgoingOutType4OrderVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ORDER_SEQ,
               IFNULL(B.ORDER_STATUS, 'TEMP') AS ORDER_STATUS,
               B.DRAWING_NUM,
               B.IMG_GFILE_SEQ,
               B.ORDER_NUM,
               B.REGIST_NUM,
               A.PACKING_NUM,
               D.CONTROL_NUM,
               D.CONTROL_STATUS,
               CONCAT(B.ORDER_QTY,'(',B.PACKING_CNT ,')') AS QTY_INFO,
               (B.PACKING_CNT - (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.ORDER_SEQ = A.ORDER_SEQ) - 1) AS REMAIN_PACKING_CNT,
               CONCAT(A.PACKING_NUM,'/',B.PACKING_CNT) AS MY_PACKING_NUM,
               (SELECT IFNULL(SUM(M.OUT_QTY), 0) FROM TBL_OUT M WHERE M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY,
               (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.ORDER_SEQ = A.ORDER_SEQ AND M.PACKING_NUM = A.PACKING_NUM) AS MY_OUT_PACKING_CNT
        FROM TBL_OUT_BARCODE A
            INNER JOIN TBL_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.DEL_YN = 'N'
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.ORDER_SEQ = C.ORDER_SEQ
            INNER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND D.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
          AND A.BARCODE_NUM = #{BARCODE_NUM}
        GROUP BY B.REGIST_NUM
    </select>

    <select id="selectOutgoingOutType4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ
            , X.CONTROL_DETAIL_SEQ
            , X.ORDER_SEQ
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , X.IMG_GFILE_SEQ
            , X.ORDER_NUM
            , CONCAT(X.ORDER_QTY,'(',X.PACKING_CNT,')') AS QTY_INFO
            , X.PACKING_CNT - X.OUT_PACKING_CNT - 1 AS REMAIN_PACKING_CNT
            , CONCAT(X.PACKING_NUM,'/',X.PACKING_CNT) AS MY_PACKING_NUM
            , X.OUT_QTY
            , X.MY_OUT_PACKING_CNT
        FROM (  SELECT A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.ORDER_SEQ
                    , D.CONTROL_NUM
                    , B.DRAWING_NUM
                    , B.IMG_GFILE_SEQ
                    , B.ORDER_NUM
                    , SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, A.ORDER_SEQ) AS ORDER_QTY
                    , B.PACKING_CNT
                    , A.PACKING_NUM
                    , (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_PACKING_CNT
                    , (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ AND M.PACKING_NUM = A.PACKING_NUM) AS MY_OUT_PACKING_CNT
                    , (SELECT IFNULL(SUM(M.OUT_QTY), 0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
                FROM TBL_OUT_BARCODE A
                    , TBL_CONTROL_PART_ORDER B
                    , TBL_CONTROL_PART C
                    , TBL_CONTROL D
                WHERE B.CONTROL_SEQ = A.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                    AND B.ORDER_SEQ = A.ORDER_SEQ
                    AND C.CONTROL_SEQ = B.CONTROL_SEQ
                    AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND D.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.DEL_YN = 'N'
                    AND D.DEL_YN = 'N'
                    AND A.BARCODE_NUM = #{BARCODE_NUM}
             ) X
    </select>
    <insert id="insertOutgoingOutType4OrderVer" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ,
           B.CONTROL_SEQ,
           B.CONTROL_DETAIL_SEQ,
           B.ORDER_SEQ,
           #{PACKING_NUM},
           #{LOGIN_USER_ID}
        FROM TBL_ORDER A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.ORDER_SEQ = #{ORDER_SEQ}
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = B.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </insert>
    <insert id="insertOutgoingOutType4" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, PACKING_NUM, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
          , A.CONTROL_SEQ
          , A.CONTROL_DETAIL_SEQ
          , A.ORDER_SEQ
          , A.PACKING_NUM
          , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_OUT_BARCODE A
        WHERE A.BARCODE_NUM = #{BARCODE_NUM}
          AND IFNULL(DEL_YN,'N') = 'N'
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
          AND NOT EXISTS (SELECT 1 FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ AND (M.PACKING_NUM IS NULL OR M.PACKING_NUM = A.PACKING_NUM))
    </insert>
    <update id="updateOutgoingOutType4After1OrderVer" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = NOW()
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <update id="updateOutgoingOutType4After1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = NOW()
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
          AND A.ORDER_SEQ = #{ORDER_SEQ}
          AND A.PACKING_CNT = (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
          AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <update id="updateOutgoingOutType4After2" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001','ORD003')
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
    </update>
    <update id="updateOutgoingOutType4After3" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
        SET
            A.INNER_WORK_FINISH_DT = CASE WHEN A.INNER_WORK_FINISH_DT IS NULL THEN NOW() ELSE A.INNER_WORK_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND EXISTS( SELECT 1 FROM TBL_MCT_WORK T
                               	     WHERE A.CONTROL_SEQ = T.CONTROL_SEQ AND T.DEL_YN = 'N'
                               	    )
            AND EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ)
            AND NOT EXISTS( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.OUT_FINISH_DT IS NULL)
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </update>
    <select id="selectOutgoingOutType5OrderVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT D.CONTROL_NUM
            , D.CONTROL_STATUS
            , D.DRAWING_NUM
            , D.ORDER_STATUS
            , D.ORDER_NUM
            , D.REGIST_NUM
            , D.CONTROL_SEQ
            , D.CONTROL_DETAIL_SEQ
            , D.ORDER_SEQ
            , D.ORDER_QTY
            , D.PACKING_CNT
            , D.OUT_QTY
            , D.ORDER_BARCODE_NUM
            , CONCAT(D.ORDER_QTY - D.OUT_QTY, '/', D.ORDER_QTY) AS QTY_INFO
            , SUM(D.CONTROL_QTY) - D.OUT_QTY AS PLAN_QTY
            , D.MY_OUT_PACKING_CNT
        FROM (
            SELECT
                C.CONTROL_NUM
                , C.CONTROL_STATUS
                , B.DRAWING_NUM
                , IFNULL(B.ORDER_STATUS, 'TEMP') AS ORDER_STATUS
                , B.ORDER_NUM
                , B.REGIST_NUM
                , '' AS CONTROL_SEQ
                , '' AS CONTROL_DETAIL_SEQ
                , A.ORDER_SEQ
                , B.ORDER_QTY
                , CASE WHEN C.CONTROL_STATUS IN ('ORD001', 'ORD003') THEN A.ORDER_QTY
                       ELSE 0
                  END AS CONTROL_QTY
                , B.PACKING_CNT
                , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.ORDER_SEQ = A.ORDER_SEQ) AS OUT_QTY
                , (SELECT COUNT(PACKING_NUM) FROM TBL_OUT M WHERE M.ORDER_SEQ = A.ORDER_SEQ) AS MY_OUT_PACKING_CNT
                , A.ORDER_BARCODE_NUM
            FROM TBL_CONTROL_PART_ORDER A
                INNER JOIN TBL_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.DEL_YN = 'N'
                INNER JOIN TBL_CONTROL C ON C.CONTROL_SEQ = A.CONTROL_SEQ AND C.DEL_YN = 'N'
            WHERE 1=1
            <choose>
                <when test="BARCODE_NUM != null and BARCODE_NUM != ''">
                    AND A.ORDER_BARCODE_NUM = #{BARCODE_NUM}
                </when>
                <when test="ORDER_SEQ != null and ORDER_SEQ != ''">
                    AND A.ORDER_SEQ = #{ORDER_SEQ}
                </when>
            </choose>
        ) D
        GROUP BY D.REGIST_NUM
    </select>
    <select id="selectOutgoingOutType5" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        	D.CONTROL_NUM
        	, D.DRAWING_NUM
        	, D.ORDER_NUM
            , D.CONTROL_SEQ
            , D.CONTROL_DETAIL_SEQ
            , D.ORDER_SEQ
            , D.ORDER_QTY
            , D.PACKING_CNT
            , D.OUT_QTY
            , D.ORDER_BARCODE_NUM
            , CONCAT(D.ORDER_QTY - D.OUT_QTY, '/', D.ORDER_QTY) AS QTY_INFO
            , D.ORDER_QTY - D.OUT_QTY AS PLAN_QTY
            , D.MY_OUT_PACKING_CNT
        FROM (
            SELECT
            	A.CONTROL_NUM
            	, C.DRAWING_NUM
            	, C.ORDER_NUM
				, C.CONTROL_SEQ
                , C.CONTROL_DETAIL_SEQ
                , C.ORDER_SEQ
                , IFNULL(C.ORDER_QTY, 0) AS ORDER_QTY
                , C.PACKING_CNT
                , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS OUT_QTY
                , (SELECT COUNT(PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = C.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = C.ORDER_SEQ) AS MY_OUT_PACKING_CNT
                , C.ORDER_BARCODE_NUM
            FROM TBL_CONTROL A
                , TBL_CONTROL_PART B
                , TBL_CONTROL_PART_ORDER C
            WHERE B.CONTROL_SEQ = A.CONTROL_SEQ
            	AND C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            	AND A.DEL_YN = 'N'
                <choose>
                    <when test="BARCODE_NUM != null and BARCODE_NUM != ''">
                        AND C.ORDER_BARCODE_NUM = #{BARCODE_NUM}
                    </when>
                    <when test="ORDER_SEQ != null and ORDER_SEQ != ''">
                        AND C.ORDER_SEQ = #{ORDER_SEQ}
                    </when>
                </choose>
        ) D
    </select>

    <insert id="insertOutgoingOutType5" parameterType="java.util.HashMap">
        INSERT INTO TBL_OUT (OUT_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, ORDER_SEQ, OUT_QTY, INSERT_ID)
        SELECT NEXTVAL(OUT_SEQ) AS OUT_SEQ
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , A.ORDER_SEQ
            , A.ORDER_QTY
            , #{LOGIN_USER_ID} AS INSERT_ID
        FROM TBL_CONTROL_PART_ORDER A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.ORDER_SEQ = #{ORDER_SEQ}
            AND EXISTS(SELECT X.CONTROL_SEQ FROM TBL_CONTROL X WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.DEL_YN = 'N' AND X.CONTROL_STATUS IN ('ORD001','ORD003'))
    </insert>

    <update id="updateOutgoingOutType5After1" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
        SET A.OUT_FINISH_DT = CASE WHEN A.OUT_FINISH_DT IS NULL THEN NOW() ELSE A.OUT_FINISH_DT END
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND A.ORDER_SEQ = #{ORDER_SEQ}
            AND IFNULL(A.ORDER_QTY, 0) = (SELECT IFNULL(SUM(M.OUT_QTY), 0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ)
    </update>

    <select id="selectOutgoingReturnInfo1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
          , X.ORDER_QTY
          , X.OUT_QTY - X.RETURN_QTY AS REAL_OUT_QTY
          , SF_GET_DATE_F(X.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                  , A.ORDER_QTY
                        , A.OUT_FINISH_DT
                  , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ ) AS OUT_QTY
                  , (SELECT IFNULL(SUM(M.ERROR_QTY),0) FROM TBL_INSPECT M WHERE M.INSPECT_TYPE = '2' AND M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.RETURN_SETTLEMENT_DT IS NULL) AS RETURN_QTY
                FROM TBL_CONTROL_PART_ORDER A
                WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                  AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                  AND A.ORDER_SEQ = #{ORDER_SEQ}
              ) X
    </select>
    <select id="selectOutgoingReturnInfoOrderList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
             , X.ORDER_QTY
             , X.OUT_QTY
             , X.RETURN_QTY
             , (X.OUT_QTY - X.RETURN_QTY) AS REAL_OUT_QTY
             , X.CONTROL_NUM
             , SF_GET_DATE_F(X.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
             , X.DRAWING_NUM
             , X.MAIN_INSPECTION_NM
             , X.ITEM_NM
             , X.ORDER_DUE_DT
             , X.ORDER_QTY_INFO
             , X.SIZE_TXT
             , X.MATERIAL_DETAIL_NM
             , X.SURFACE_TREAT_NM
             , X.WORK_TYPE_NM
             , X.SIZE_TXT_WORK_TYPE_NM
             , X.ORDER_COMP_NM
             , X.OUTSIDE_COMP_NM
             , X.EMERGENCY_YN
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, A.OUT_FINISH_DT, A.ORDER_QTY, B.CONTROL_NUM, A.DRAWING_NUM, SF_GET_CODE_NM('1059', B.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
                     , A.ITEM_NM
                     , SF_GET_DATE_F(A.ORDER_DUE_DT,'YYYY','') AS ORDER_DUE_DT
                     , CASE
                        WHEN B.SAME_SIDE_YN = 'Y' THEN CONCAT(IFNULL(A.ORDER_QTY , 0),' (',IFNULL(A.ORIGINAL_SIDE_QTY ,0),',',IFNULL(A.OTHER_SIDE_QTY ,0),')')
                        ELSE A.ORDER_QTY
                      END ORDER_QTY_INFO
                     , C.SIZE_TXT
                     , B.EMERGENCY_YN
                     , SF_GET_CODE_NM('1027', C.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                     , SF_GET_CODE_NM('1039', C.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
                     , SF_GET_CODE_NM('1033', C.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                     , SF_GET_COMP_NM(B.ORDER_COMP_CD) AS ORDER_COMP_NM
                     , SF_GET_COMP_NM(C.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                     , CONCAT(C.SIZE_TXT, ' / ', SF_GET_CODE_NM('1033', C.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM
                     , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ ) AS OUT_QTY
                     , (SELECT IFNULL(SUM(M.ERROR_QTY),0) FROM TBL_INSPECT M WHERE M.INSPECT_TYPE = '2' AND M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.RETURN_SETTLEMENT_DT IS NULL) AS RETURN_QTY
                FROM TBL_CONTROL_PART_ORDER A
                     INNER JOIN TBL_CONTROL_PART C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                     INNER JOIN TBL_CONTROL B ON C.CONTROL_SEQ = B.CONTROL_SEQ AND B.DEL_YN = 'N'
                WHERE A.ORDER_SEQ = #{ORDER_SEQ}
                    <if test="CONTROL_SEQ != null and CONTROL_SEQ !=''">
                        AND A.CONTROL_SEQ = #{CONTROL_SEQ}
                    </if>
             ) X
    </select>
    <select id="selectOutgoingReturnInfoOrderVer1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.ORDER_SEQ
            , X.ORDER_QTY
            , X.OUT_QTY
            , X.RETURN_QTY
            , (X.OUT_QTY - X.RETURN_QTY) AS REAL_OUT_QTY
            , X.CONTROL_NUM
            , SF_GET_DATE_F(X.OUT_FINISH_DT,'YYYY','') AS OUT_FINISH_DT
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, A.OUT_FINISH_DT, A.ORDER_QTY, B.CONTROL_NUM
                    , (SELECT IFNULL(SUM(M.OUT_QTY),0) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ ) AS OUT_QTY
                    , (SELECT IFNULL(SUM(M.ERROR_QTY),0) FROM TBL_INSPECT M WHERE M.INSPECT_TYPE = '2' AND M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.RETURN_SETTLEMENT_DT IS NULL) AS RETURN_QTY
                FROM TBL_CONTROL_PART_ORDER A
                         INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.DEL_YN = 'N'
                WHERE A.ORDER_SEQ = #{ORDER_SEQ}
             ) X
    </select>
    <select id="selectOutgoingReturnInfoOrderVer2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            C.CONTROL_NUM,
            A.DRAWING_NUM,
            SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM,
            A.ITEM_NM,
            SF_GET_DATE_F(A.ORDER_DUE_DT,'YYYY','') AS ORDER_DUE_DT,
            CASE
                WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(IFNULL(A.ORDER_QTY , 0),' (',IFNULL(A.ORIGINAL_SIDE_QTY ,0),',',IFNULL(A.OTHER_SIDE_QTY ,0),')')
                ELSE A.ORDER_QTY
            END ORDER_QTY_INFO,
            A.SIZE_TXT,
            SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            SF_GET_CODE_NM('1039', A.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM,
            SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM,
            CONCAT(A.SIZE_TXT, ' / ', SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM,
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
            SF_GET_COMP_NM(C.ORDER_COMP_CD) AS OUTSIDE_COMP_NM
        FROM TBL_ORDER A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
            AND A.ORDER_SEQ = #{ORDER_SEQ}
    </select>
    <select id="selectOutgoingReturnInfo2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
            , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', B.PART_NUM) END AS CONTROL_NUM
            , CASE WHEN B.DRAWING_VER IS NULL THEN B.DRAWING_NUM ELSE CONCAT(B.DRAWING_NUM, ' (', B.DRAWING_VER, ')') END AS DRAWING_NUM
            , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
            , CONCAT(SF_GET_DATE_F(C.ORDER_DUE_DT,'YYYY',''), CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴급' ELSE SPACE(0) END) AS INNER_DUE_DT
            , A.EMERGENCY_YN
            , C.ITEM_NM
            , SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
            , CASE
                  WHEN A.SAME_SIDE_YN = 'Y' THEN CONCAT(SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0),' (',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),',',IFNULL(SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1),0),')')
                  ELSE SF_GET_CONTROL_ORDER_QTY(B.CONTROL_SEQ, 0)
              END ORDER_QTY_INFO
            , B.SIZE_TXT
            , SF_GET_CODE_NM('1039', B.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
            , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , CONCAT(B.SIZE_TXT, ' / ', SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE})) AS  SIZE_TXT_WORK_TYPE_NM
            , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
            , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , (SELECT COUNT(*) + 1 FROM TBL_INSPECT M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS Q_SEQ
            , B.IMG_GFILE_SEQ
        FROM TBL_CONTROL A, TBL_CONTROL_PART B
            LEFT OUTER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    <if test="ORDER_SEQ != null and ORDER_SEQ != ''">
                        AND C.ORDER_SEQ = #{ORDER_SEQ}
                    </if>
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND A.DEL_YN = 'N'
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>
    <insert id="insertOutgoingReturn" parameterType="java.util.HashMap">
        INSERT INTO TBL_INSPECT (
            INSPECT_SEQ
            , CONTROL_SEQ, CONTROL_DETAIL_SEQ
            , INSPECT_METHOD, INSPECT_USER_ID, INSPECT_GRADE, INSPECT_RESULT, INSPECT_DESC
            , ERROR_QTY, ERROR_PROCESS, ERROR_REASON, ERROR_ACTION, ERROR_NOTE
            , INSERT_ID, INSPECT_TYPE, ORDER_SEQ
        )VALUES (
               NEXTVAL(SEQ_INSPECT)
            , #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}
            , '3', #{INSPECT_USER_ID}, #{INSPECT_GRADE}, #{INSPECT_RESULT}, #{INSPECT_DESC}
            , #{ERROR_QTY}, #{ERROR_PROCESS}, #{ERROR_REASON}, #{ERROR_ACTION}, #{ERROR_NOTE}
            , #{LOGIN_USER_ID}, '2',#{ORDER_SEQ}
        )
    </insert>


    <select id="selectOutgoingReturnCompleteList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            T.INSPECT_SEQ, T.CONTROL_SEQ, T.CONTROL_DETAIL_SEQ, T.ORDER_SEQ, X.CONTROL_VER
            , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , Z.REGIST_NUM
            , Z.ORDER_NUM
            , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = Y.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.CONTROL_NUM
            , Y.DRAWING_NUM
            , Y.IMG_GFILE_SEQ
            , SF_GET_CODE_NM('1033', Y.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , SF_GET_CODE_NM('1027', Y.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , SF_GET_CODE_NM('1039', Y.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM
            , Y.SIZE_TXT
            , Z.ORDER_QTY
            , CASE WHEN T.ORDER_PACKING_NUM_CNT > 0 AND T.ORDER_PACKING_NUM_CNT <![CDATA[ < ]]> Z.PACKING_CNT
                   THEN CONCAT('(',cast(T.ORDER_PACKING_NUM_CNT as char(1)),'/',Z.PACKING_CNT,')')
              ELSE T.ORDER_OUT_QTY
              END AS OUT_QTY
            , SF_GET_DATE_F(Z.OUT_FINISH_DT,'YY','') AS OUT_FINISH_DT
            , T.ERROR_QTY
            , SF_GET_DATE_F(T.RETURN_DT,'YY','') AS RETURN_DT
            , SF_GET_CODE_NM('1040', T.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM
            , SF_GET_CODE_NM('1021', T.INSPECT_RESULT, #{LOGIN_LOCALE}) AS INSPECT_RESULT_NM
            , T.ERROR_NOTE
            , (SELECT SF_GET_CODE_NM('1009', M.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION_NM FROM TBL_POP M WHERE M.POP_SEQ = T.POP_SEQ) AS POP_NM
            FROM (  SELECT A.INSPECT_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ
                    , A.ERROR_QTY
                    , A.INSERT_DT AS RETURN_DT
                    , A.INSPECT_GRADE
                    , A.INSPECT_RESULT
                    , A.ERROR_NOTE
                    , (SELECT MAX(M.POP_SEQ) FROM TBL_POP M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ) AS POP_SEQ
                    , (SELECT COUNT(M.PACKING_NUM) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_PACKING_NUM_CNT
                    , (SELECT SUM(M.OUT_QTY) FROM TBL_OUT M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_SEQ = A.ORDER_SEQ) AS ORDER_OUT_QTY
                    FROM TBL_INSPECT A
                    WHERE A.INSPECT_TYPE = '2'
                    AND A.RETURN_SETTLEMENT_DT IS NULL
                ) T, TBL_CONTROL X, TBL_CONTROL_PART Y, TBL_CONTROL_PART_ORDER Z
        WHERE T.CONTROL_SEQ = X.CONTROL_SEQ
            AND T.CONTROL_SEQ = Y.CONTROL_SEQ
            AND T.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
            AND T.CONTROL_SEQ = Z.CONTROL_SEQ
            AND T.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
            AND T.ORDER_SEQ = Z.ORDER_SEQ
        ORDER BY 1,2
    </select>

    <update id="updateOutgoingReturnComplete" parameterType="java.util.HashMap">
        UPDATE TBL_INSPECT SET RETURN_SETTLEMENT_DT = NOW() WHERE INSPECT_SEQ = #{INSPECT_SEQ}
    </update>

    <select id="selectOutgoingLabelType1" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_NUM
            , C.DRAWING_NUM
            , C.REGIST_NUM
            , C.IMG_GFILE_SEQ
            , C.ORDER_NUM
            , C.ORDER_QTY
            , C.PACKING_CNT
            , C.CONTROL_SEQ
            , C.CONTROL_DETAIL_SEQ
            , C.ORDER_SEQ
        FROM TBL_CONTROL A
            , TBL_CONTROL_PART B
            , TBL_CONTROL_PART_ORDER C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND A.DEL_YN = 'N'
            AND C.CONTROL_SEQ = #{CONTROL_SEQ}
            AND C.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND C.ORDER_SEQ = #{ORDER_SEQ}
     </select>
    <select id="selectOutgoingLabelType1OrderVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.REGIST_NUM,
               A.ORDER_NUM,
               A.DRAWING_NUM,
               A.IMG_GFILE_SEQ,
               A.ORDER_QTY,
               A.PACKING_CNT,
               A.ORDER_SEQ,
               B.CONTROL_SEQ,
               B.CONTROL_DETAIL_SEQ
        FROM TBL_ORDER A
                 INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ
                 INNER JOIN TBL_CONTROL C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
            AND A.ORDER_SEQ = #{ORDER_SEQ}
        GROUP BY A.ORDER_SEQ
    </select>
    <select id="selectOutgoingLabelType1Combo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            BARCODE_NUM AS CODE_CD, PACKING_NUM AS CODE_NM
        FROM TBL_OUT_BARCODE
        WHERE 1=1
        AND CONTROL_SEQ = #{CONTROL_SEQ}
        AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        AND ORDER_SEQ = #{ORDER_SEQ}
        AND DEL_YN = 'N'
        ORDER BY PACKING_NUM
    </select>
    <select id="selectOutgoingLabelType1ComboOrderVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            BARCODE_NUM AS CODE_CD, PACKING_NUM AS CODE_NM
        FROM TBL_OUT_BARCODE
        WHERE 1=1
          AND ORDER_SEQ = #{ORDER_SEQ}
          AND DEL_YN = 'N'
        GROUP BY ORDER_SEQ, PACKING_NUM
        ORDER BY PACKING_NUM
    </select>
    <select id="selectOutgoingLabelType2OrderVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT BARCODE_NUM
        FROM TBL_OUT_BARCODE
        WHERE DEL_YN = 'N'
            AND ORDER_SEQ = #{ORDER_SEQ}
            AND CONTROL_SEQ IS NULL
    </select>
    <select id="selectOutgoingLabelType2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT BARCODE_NUM
        FROM TBL_OUT_BARCODE
        WHERE DEL_YN = 'N'
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </select>
    <select id="selectOutgoingLabelType3" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.BARCODE_NUM
        FROM TBL_OUT_BARCODE A
        WHERE A.CONTROL_SEQ = (SELECT M.CONTROL_SEQ FROM TBL_CONTROL_BARCODE M WHERE M.BARCODE_NUM = #{BARCODE_NUM} AND M.DEL_YN = 'N')
            AND A.DEL_YN = 'N'
        ORDER BY A.CONTROL_DETAIL_SEQ, A.ORDER_SEQ, A.PACKING_NUM
    </select>
    <select id="selectOutgoingLabelType4" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT BARCODE_NUM
        FROM TBL_OUT_BARCODE
        WHERE DEL_YN = 'N'
            AND ORDER_SEQ = #{ORDER_SEQ}
        LIMIT 1;
    </select>
    <select id="selectCommItemDetailGridCamPopBefore" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ
            , B.CONTROL_DETAIL_SEQ
            , A.ORDER_COMP_CD
            , B.SIZE_TXT
            , B.DRAWING_NUM
            , B.MATERIAL_TYPE
            , (SELECT M.FILE_SIZE FROM TBL_FILE M WHERE M.GFILE_SEQ = B.DXF_GFILE_SEQ) AS CAD_FILE_SIZE
        FROM TBL_CONTROL A
            , TBL_CONTROL_PART B
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectCamWorkDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT J.CONTROL_SEQ
			, J.CONTROL_DETAIL_SEQ
			, SF_GET_DATE_F(J.ORDER_CONFIRM_DT, 'YYYY', '') AS ORDER_CONFIRM_DT
			, CASE WHEN J.OUTSIDE_YN = 'Y' THEN J.OUTSIDE_YN END AS OUTSIDE_YN
			, J.CONTROL_NUM
            , (SELECT Y.REGIST_NUM FROM TBL_CONTROL_PART_ORDER_MAIN Y WHERE Y.CONTROL_SEQ = J.CONTROL_SEQ AND Y.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ) AS REGIST_NUM
            , J.WORK_TYPE_NM
			, J.ORDER_COMP_NM
			, J.SIZE_TXT
			, J.MATERIAL_TYPE_NM
			, J.DRAWING_NUM
			, J.IMG_GFILE_SEQ
			, J.CAD_FILE_SIZE
			, J.DXF_GFILE_SEQ
			, J.MATERIAL_DETAIL_NM
			, J.CONTROL_PART_QTY
			, CASE WHEN TRUNCATE((IFNULL(J.NC_WORK_TIME, 0) + IFNULL(J.MILLING_WORK_TIME, 0) + IFNULL(J.GRINDING_WORK_TIME, 0) + IFNULL(J.LATHE_WORK_TIME, 0)) / J.CONTROL_PART_QTY, 1) > 0 THEN CONCAT(TRUNCATE((IFNULL(J.NC_WORK_TIME, 0) + IFNULL(J.MILLING_WORK_TIME, 0) + IFNULL(J.GRINDING_WORK_TIME, 0) + IFNULL(J.LATHE_WORK_TIME, 0)) / 60 / J.CONTROL_PART_QTY, 1), '''') END AS UNIT_TOTAL_WORK_TIME
			, CONCAT(TRUNCATE(J.NC_WORK_TIME / 60 / J.CONTROL_PART_QTY, 1), '''') AS UNIT_NC_WORK_TIME
			, CASE WHEN TRUNCATE(IFNULL(J.NC_WORK_TIME, 0) + IFNULL(J.MILLING_WORK_TIME, 0) + IFNULL(J.GRINDING_WORK_TIME, 0) + IFNULL(J.LATHE_WORK_TIME, 0), 1) > 0 THEN CONCAT(TRUNCATE((IFNULL(J.NC_WORK_TIME, 0) + IFNULL(J.MILLING_WORK_TIME, 0) + IFNULL(J.GRINDING_WORK_TIME, 0) + IFNULL(J.LATHE_WORK_TIME, 0)) / 60, 1), '''') END AS TOTAL_WORK_TIME
			, CONCAT(TRUNCATE(J.NC_WORK_TIME / 60, 1), '''') AS NC_WORK_TIME
			, CONCAT(TRUNCATE(J.MILLING_WORK_TIME / 60, 1), '''') AS MILLING_WORK_TIME
			, CONCAT(TRUNCATE(J.GRINDING_WORK_TIME / 60, 1), '''') AS GRINDING_WORK_TIME
			, CONCAT(TRUNCATE(J.LATHE_WORK_TIME / 60, 1), '''') AS LATHE_WORK_TIME
			, J.POINT_1 + J.POINT_2 + J.POINT_3 + J.POINT_4 + J.POINT_5 AS POINT_SUM
			, K.SEQ AS CAM_STEP
            , SF_GET_CODE_NM('1080', K.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION <!-- CAM 가공위치 -->
			, K.WORK_DESC
			, K.DESIGN_QTY
			, CASE WHEN K.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT M.FILE_SEQ FROM TBL_FILE M WHERE M.GFILE_SEQ = K.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXC') END CAM_FILE_SEQ <!-- CAM FILE -->
            , CASE WHEN K.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT M.FILE_SEQ FROM TBL_FILE M WHERE M.GFILE_SEQ = K.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXN') END NC_FILE_SEQ <!-- NC FILE -->
			, SF_GET_USER_NM(K.WORK_USER_ID) AS WORK_USER_NM
            , SF_GET_DATE_F(K.INSERT_DT, 'YY', 'M') AS CAM_INSERT_DT <!-- 실적등록일시 -->
            , (	SELECT CONCAT(IFNULL(P.HISTORY_NOTE, SPACE(0)), IFNULL(P.NOTE, SPACE(0)))
                FROM TBL_CAM P
                    , TBL_CONTROL_PART Q
                    , TBL_CONTROL R
                WHERE P.CONTROL_SEQ = Q.CONTROL_SEQ
                    AND P.CONTROL_DETAIL_SEQ  = Q.CONTROL_DETAIL_SEQ
                    AND Q.CONTROL_SEQ = R.CONTROL_SEQ
                    AND R.CONTROL_SEQ = J.CONTROL_SEQ
                    AND (P.CONTROL_SEQ, P.CONTROL_DETAIL_SEQ) IN ( SELECT
                                                                        N.CONTROL_SEQ
                                                                        , N.CONTROL_DETAIL_SEQ
                                                                    FROM TBL_CONTROL M
                                                                        , TBL_CONTROL_PART N
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        <if test="ORDER_COMP_YN != null and ORDER_COMP_YN == ''">
                                                                            AND M.ORDER_COMP_CD = J.ORDER_COMP_CD
                                                                        </if>
                                                                        AND N.SIZE_TXT = J.SIZE_TXT
                                                                        AND N.CONTROL_SEQ = J.CONTROL_SEQ
                                                                        AND N.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ
                                                                        AND M.DEL_YN = 'N'
                                                                 )
               ) AS CAM_EXPERIENCE_NOTE <!-- 경험 기록사항 -->
			, CONCAT(IFNULL(J.HISTORY_NOTE, SPACE(0)), IFNULL(J.NOTE, SPACE(0))) AS CAM_WORK_NOTE <!-- CAM 작업 기록 및 비고 공유 사항 -->
        FROM (
            SELECT G.CONTROL_SEQ
                , G.CONTROL_DETAIL_SEQ
                , G.ORDER_CONFIRM_DT
                , G.OUTSIDE_YN
                , G.CONTROL_NUM
                , G.IMG_GFILE_SEQ
                , G.DXF_GFILE_SEQ
                , G.WORK_TYPE_NM
                , G.ORDER_COMP_CD
                , G.ORDER_COMP_NM
                , G.SIZE_TXT
                , G.DRAWING_NUM
                , G.MATERIAL_TYPE
                , G.MATERIAL_TYPE_NM
                , G.MATERIAL_DETAIL_NM
                , G.CONTROL_PART_QTY
                , G.CAD_FILE_SIZE
                , G.NC_WORK_TIME
                , G.MILLING_WORK_TIME
                , G.GRINDING_WORK_TIME
                , G.LATHE_WORK_TIME
                , CASE WHEN G.ORDER_COMP_CD = #{ORDER_COMP_CD} THEN 1 ELSE 0 END AS POINT_1
                , CASE WHEN G.SIZE_TXT = #{SIZE_TXT} THEN 1 ELSE 0 END AS POINT_2
                , CASE WHEN G.DRAWING_NUM = #{DRAWING_NUM} THEN 1 ELSE 0 END AS POINT_3
                , CASE WHEN G.MATERIAL_TYPE = #{MATERIAL_TYPE} THEN 1 ELSE 0 END AS POINT_4
                , CASE WHEN G.CAD_FILE_SIZE = #{CAD_FILE_SIZE} THEN 1 ELSE 0 END AS POINT_5
                , H.CAM_SEQ
                , H.HISTORY_NOTE
                , H.NOTE
            FROM (
                SELECT D.CONTROL_SEQ
                    , D.CONTROL_DETAIL_SEQ
                    , D.ORDER_CONFIRM_DT
                    , D.OUTSIDE_YN
                    , D.CONTROL_NUM
                    , D.IMG_GFILE_SEQ
                    , D.DXF_GFILE_SEQ
                    , D.WORK_TYPE_NM
                    , D.ORDER_COMP_CD
                    , D.ORDER_COMP_NM
                    , D.SIZE_TXT
                    , D.DRAWING_NUM
                    , D.MATERIAL_TYPE
                    , D.MATERIAL_TYPE_NM
                    , D.MATERIAL_DETAIL_NM
                    , D.CONTROL_PART_QTY
                    , D.CAD_FILE_SIZE
                    , E.NC_WORK_TIME
                    , E.MILLING_WORK_TIME
                    , E.GRINDING_WORK_TIME
                    , E.LATHE_WORK_TIME
                FROM (
                    SELECT B.CONTROL_SEQ
                        , B.CONTROL_DETAIL_SEQ
                        , (SELECT MAX(M.STATUS_DT) FROM TBL_CONTROL_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.ORDER_STATUS = 'ORD001' GROUP BY M.CONTROL_SEQ) AS ORDER_CONFIRM_DT
                        , B.OUTSIDE_YN
                        , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, '#', B.PART_NUM) END AS CONTROL_NUM
                        , B.IMG_GFILE_SEQ
                        , B.DXF_GFILE_SEQ
                        , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
                        , A.ORDER_COMP_CD
                        , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_NM
                        , B.SIZE_TXT
                        , B.DRAWING_NUM
                        , B.MATERIAL_TYPE
                        , SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                        , SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                        , (SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0)) AS CONTROL_PART_QTY
                        , (SELECT M.FILE_SIZE FROM TBL_FILE M WHERE M.GFILE_SEQ = B.DXF_GFILE_SEQ) AS CAD_FILE_SIZE
                    FROM TBL_CONTROL A
                        , TBL_CONTROL_PART B
                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                        AND (B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN (
                                                                        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                                        FROM TBL_CONTROL A
                                                                            , TBL_CONTROL_PART B
                                                                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                            AND A.DEL_YN = 'N'
                                                                            <if test="ORDER_COMP_YN != null and ORDER_COMP_YN == ''">
                                                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
                                                                            </if>
                                                                            AND B.SIZE_TXT = #{SIZE_TXT}
                                                                            AND B.MATERIAL_TYPE = #{MATERIAL_TYPE}
                                                                     )
                ) D LEFT OUTER JOIN (SELECT
                                        D.CONTROL_SEQ
                                        , D.CONTROL_DETAIL_SEQ
                                        , MAX(CASE WHEN D.PROCESS_TYPE = 'MPR010' THEN D.WORK_TIME END) AS NC_WORK_TIME
                                        , MAX(CASE WHEN D.PROCESS_TYPE = 'MPR020' THEN D.WORK_TIME END) AS MILLING_WORK_TIME
                                        , MAX(CASE WHEN D.PROCESS_TYPE = 'MPR030' THEN D.WORK_TIME END) AS GRINDING_WORK_TIME
                                        , MAX(CASE WHEN D.PROCESS_TYPE = 'MPR040' THEN D.WORK_TIME END) AS LATHE_WORK_TIME
                                    FROM (
                                        SELECT
                                            A.PROCESS_TYPE
                                            , B.CONTROL_SEQ
                                            , B.CONTROL_DETAIL_SEQ
                                            , SUM(TIMESTAMPDIFF(SECOND, C.WORK_START_DT, C.WORK_STOP_DT)) AS WORK_TIME
                                        FROM
                                            TBL_EQUIP A
                                            , TBL_MCT_WORK B
                                            , TBL_MCT_WORK_TIME C
                                        WHERE
                                            A.EQUIP_SEQ = B.EQUIP_SEQ
                                            AND B.MCT_WORK_SEQ = C.MCT_WORK_SEQ
                                            AND B.DEL_YN = 'N'
                                        GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.PROCESS_TYPE
                                    ) D
                                    GROUP BY D.CONTROL_SEQ, D.CONTROL_DETAIL_SEQ) E ON D.CONTROL_SEQ = E.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
            ) G LEFT OUTER JOIN TBL_CAM H ON G.CONTROL_SEQ = H.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = H.CONTROL_DETAIL_SEQ
        ) J LEFT OUTER JOIN TBL_CAM_DETAIL K ON J.CAM_SEQ = K.CAM_SEQ
        ORDER BY CASE WHEN CONCAT(J.CONTROL_SEQ, J.CONTROL_DETAIL_SEQ) = CONCAT(#{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}) THEN 0 ELSE 1 END <!-- , POINT_SUM DESC -->, J.ORDER_CONFIRM_DT DESC, J.CONTROL_NUM, K.SEQ
    </select>
    <select id="selectOutgoingHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 3. 출하 이력관리 쿼리 -->
        <!-- 기능설계서에서 누적칼럼 없애고 반품조치일 추가 -->
        SELECT X.KEY_SEQ
            , X.CONTROL_VER
            , X.DRAWING_VER
            , X.CONTROL_SEQ
            , X.CONTROL_DETAIL_SEQ
            , X.ORDER_SEQ
            , X.OUT_RETURN_TYPE
            , CASE X.OUT_RETURN_TYPE WHEN '1' THEN '출고' WHEN '2' THEN '반품' ELSE '폐기' END AS OUT_RETURN_TYPE_NM
            , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , (SELECT M.COMP_NM FROM TBL_COMPANY M WHERE M.COMP_CD = X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.REGIST_NUM
            , X.ORDER_NUM
            , X.CONTROL_NUM
            , X.DRAWING_NUM
            , SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , X.SIZE_TXT
            , X.ORDER_QTY
            , X.OUT_QTY
            , CASE WHEN X.OUT_RETURN_TYPE = '1' AND X.PACKING_NUM IS NOT NULL THEN X.PACKING_CNT END AS PACKING_CNT
            , CASE WHEN X.OUT_RETURN_TYPE = '1' AND X.PACKING_NUM IS NOT NULL THEN CONCAT(X.PACKING_NUM,'/',X.PACKING_CNT) END AS OUT_PACKING_INFO
            , X.RETURN_QTY
            , SF_GET_DATE_F(X.INSERT_DT,'YY','M') AS INSERT_DT
            , SF_GET_DATE_F(X.RETURN_SETTLEMENT_DT,'YY','M') AS RETURN_SETTLEMENT_DT
            , SF_GET_OUT_RETURN_LAST_YN(X.OUT_RETURN_TYPE, X.KEY_SEQ) AS LAST_YN
        FROM (  SELECT A.OUT_SEQ AS KEY_SEQ
                    , '1' AS OUT_RETURN_TYPE
                    , B.CONTROL_VER
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.ORDER_SEQ
                    , C.OUTSIDE_COMP_CD
                    , D.REGIST_NUM
                    , D.ORDER_NUM
                    , B.CONTROL_NUM
                    , B.ORDER_COMP_CD
                    , CASE WHEN C.PART_NUM IS NULL THEN D.DRAWING_NUM ELSE C.DRAWING_NUM END AS DRAWING_NUM
                    , C.MATERIAL_DETAIL
                    , C.SIZE_TXT
                    , D.ORDER_QTY
                    , A.OUT_QTY
                    , D.PACKING_CNT
                    , A.PACKING_NUM
                    , NULL AS RETURN_QTY
                    , A.INSERT_DT
                    , '' AS RETURN_SETTLEMENT_DT
                    , C.DRAWING_VER
                FROM TBL_OUT A
                    , TBL_CONTROL B
                    , TBL_CONTROL_PART C
                    , TBL_CONTROL_PART_ORDER D
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND A.ORDER_SEQ = D.ORDER_SEQ
                    AND A.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_ST_DT},'/',space(0)),'%Y%m%d') AND DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY)
                    AND B.DEL_YN = 'N'
                    AND IFNULL(D.SCRAP_YN, 'N') = 'N'
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND B.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND (UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%') OR UPPER(D.REGIST_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%'))
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(C.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(D.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
                UNION ALL
                SELECT A.INSPECT_SEQ AS KEY_SEQ
                    , '2' AS OUT_RETURN_TYPE
                    , B.CONTROL_VER
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.ORDER_SEQ
                    , C.OUTSIDE_COMP_CD
                    , D.REGIST_NUM
                    , D.ORDER_NUM
                    , B.CONTROL_NUM
                    , B.ORDER_COMP_CD
                    , CASE WHEN C.PART_NUM IS NULL THEN D.DRAWING_NUM ELSE C.DRAWING_NUM END AS DRAWING_NUM
                    , C.MATERIAL_DETAIL
                    , C.SIZE_TXT
                    , D.ORDER_QTY
                    , NULL AS OUT_QTY
                    , D.PACKING_CNT
                    , NULL AS PACKING_NUM
                    , A.ERROR_QTY AS RETURN_QTY
                    , A.INSERT_DT
                    , A.RETURN_SETTLEMENT_DT
                    , C.DRAWING_VER
                FROM TBL_INSPECT A
                    , TBL_CONTROL B
                    , TBL_CONTROL_PART C
                    , TBL_CONTROL_PART_ORDER D
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = C.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND A.ORDER_SEQ = D.ORDER_SEQ
                    AND A.INSPECT_TYPE = '2'
                    AND A.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_ST_DT},'/',space(0)),'%Y%m%d') AND DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY) <!-- 인덱스 고려 -->
                    AND B.DEL_YN = 'N'
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND B.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND (UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%') OR UPPER(D.REGIST_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%'))
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(C.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(D.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
                UNION ALL
                SELECT C.ORDER_SEQ AS KEY_SEQ
					, '3' AS OUT_RETURN_TYPE
                    , A.CONTROL_VER
                    , C.CONTROL_SEQ
                    , C.CONTROL_DETAIL_SEQ
                    , C.ORDER_SEQ
                    , B.OUTSIDE_COMP_CD
                    , C.REGIST_NUM
                    , C.ORDER_NUM
                    , A.CONTROL_NUM
                    , A.ORDER_COMP_CD
                    , CASE WHEN B.PART_NUM IS NULL THEN C.DRAWING_NUM ELSE B.DRAWING_NUM END AS DRAWING_NUM
                    , B.MATERIAL_DETAIL
                    , B.SIZE_TXT
                    , C.ORDER_QTY
                    , C.ORDER_QTY AS OUT_QTY
                    , C.PACKING_CNT
                    , NULL AS PACKING_NUM
                    , NULL AS RETURN_QTY
                    , C.OUT_FINISH_DT
                    , NULL AS RETURN_SETTLEMENT_DT
                    , B.DRAWING_VER
				FROM TBL_CONTROL A
					, TBL_CONTROL_PART B
					, TBL_CONTROL_PART_ORDER C
				WHERE B.CONTROL_SEQ = A.CONTROL_SEQ
					AND C.CONTROL_SEQ = B.CONTROL_SEQ
					AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
					AND A.DEL_YN = 'N'
					AND C.SCRAP_YN = 'Y'
 					AND C.OUT_FINISH_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_ST_DT},'/',space(0)),'%Y%m%d') AND DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY)
                    <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                        AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
                    </if>
                    <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                        AND (UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%') OR UPPER(C.REGIST_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%'))
                    </if>
                    <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                        AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
                    </if>
                    <if test="SEL_ORDER_NUM !='' and SEL_ORDER_NUM != null">
                        AND UPPER(C.ORDER_NUM) LIKE CONCAT('%', UPPER(#{SEL_ORDER_NUM}), '%')
                    </if>
            ) X
        WHERE 1 = 1
        <choose>
            <when  test="SEL_OUTGOING_DATE_TYPE == 1">
                AND DATE_FORMAT(X.INSERT_DT, '%Y/%m/%d') BETWEEN #{SEL_ST_DT} AND #{SEL_END_DT}
            </when>
        </choose>
        ORDER BY X.INSERT_DT DESC, X.CONTROL_NUM
    </select>
    <select id="selectInspectionHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 2. 검사 이력관리 쿼리 -->
        <!-- 항목은 검사리스트와 동일하게 하고 MCT 실적은 제거 -->
        <!-- 검색조건 확인필요 (불량코드콤보는 note값으로 처리, Show All seq 삭제) -->
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, SF_GET_CONTROL_PART_INFO(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO
            , SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', '') AS WORK_FINISH_DT
            , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
            , SF_GET_DATE_F(B.INNER_DUE_DT,'','') AS INNER_DUE_DT
            , CASE WHEN IFNULL(A.EMERGENCY_YN, 'N') = 'Y' THEN '긴' ELSE SPACE(0) END AS EMERGENCY_YN
            , SF_GET_CODE_NM('1059', A.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM
            , A.CONTROL_NUM
            , B.PART_NUM
            , B.DRAWING_NUM
            , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
            , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
            , B.SIZE_TXT
            , A.NOTE
            , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
            , D.INSPECT_SEQ
            , D.INSPECT_NUM AS Q_SEQ
            , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = D.INSPECT_USER_ID) AS Q_INSPECT_USER_NM
            , SF_GET_CODE_NM('1060', D.INSPECT_METHOD, #{LOGIN_LOCALE}) AS Q_INSPECT_METHOD_NM
            , SF_GET_CODE_NM('1040', D.INSPECT_GRADE, #{LOGIN_LOCALE}) AS Q_INSPECT_GRADE_NM
            , (SELECT M.NOTE FROM TBL_CODE M WHERE M.HIGH_CD = '1040' AND M.CODE_CD = D.INSPECT_GRADE) AS Q_INSPECT_GRADE_NOTE
            , D.ERROR_QTY AS Q_ERROR_QTY
            , CASE WHEN D.INSPECT_TYPE = '2' THEN SF_GET_DATE_F(D.INSERT_DT,'YY','') END AS Q_RETURN_DT
            , CASE WHEN D.INSPECT_TYPE = '1' THEN
                    CASE WHEN jmes.SF_GET_CODE_NM('1019', D.INSPECT_RESULT, #{LOGIN_LOCALE}) IS NULL THEN jmes.SF_GET_CODE_NM('1020', D.INSPECT_RESULT, #{LOGIN_LOCALE})
                         ELSE jmes.SF_GET_CODE_NM('1019', D.INSPECT_RESULT, #{LOGIN_LOCALE}) END
                WHEN D.INSPECT_TYPE = '2' THEN SF_GET_CODE_NM('1021', D.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS Q_INSPECT_RESULT_NM
            , D.INSPECT_DESC AS Q_INSPECT_DESC
            , SF_GET_CODE_NM('1010', D.ERROR_PROCESS, #{LOGIN_LOCALE}) AS Q_ERROR_PROCESS_NM
            , SF_GET_CODE_NM('1032', D.ERROR_REASON, #{LOGIN_LOCALE}) AS Q_ERROR_REASON_NM
            , SF_GET_CODE_NM('1025', D.ERROR_ACTION, #{LOGIN_LOCALE}) AS Q_ERROR_ACTION_NM
            , D.ERROR_NOTE AS Q_ERROR_NOTE
            , SF_GET_DATE_F(D.INSERT_DT,'','M') AS INSEPCT_INSERT_DT
            , B.IMG_GFILE_SEQ
            , A.CONTROL_VER
            , B.DRAWING_VER
            , (SELECT X.REGIST_NUM FROM TBL_CONTROL_PART_ORDER_MAIN X WHERE X.CONTROL_SEQ = B.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS REGIST_NUM
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_INSPECT D ON D.CONTROL_SEQ = B.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001', 'ORD003')
            <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
            </if>
            <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
            </if>
            <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
            </if>
            <if test="SEL_MATERIAL_DETAIL !='' and SEL_MATERIAL_DETAIL != null">
                AND B.MATERIAL_DETAIL = #{SEL_MATERIAL_DETAIL}
            </if>
            <if test="SEL_INSPECT_METHOD !='' and SEL_INSPECT_METHOD != null">
                AND D.INSPECT_METHOD = #{SEL_INSPECT_METHOD}   <!-- 측정방식('1060') -->
            </if>
            <if test="HIDDEN_SEL_INSPECT_GRADE_SELECT !='' and HIDDEN_SEL_INSPECT_GRADE_SELECT != null">
                AND D.INSPECT_GRADE IN (${HIDDEN_SEL_INSPECT_GRADE_SELECT})    <!-- 검사결과등급(복수) -->
            </if>
            <if test="SEL_INSPECT_RESULT !='' and SEL_INSPECT_RESULT != null">
                AND D.INSPECT_RESULT = #{SEL_INSPECT_RESULT}            <!-- 불량코드 ('1020','1021') -->
            </if>
            <if test="SEL_ERROR_ACTION !='' and SEL_ERROR_ACTION != null">
                AND D.ERROR_ACTION = #{SEL_ERROR_ACTION}   <!-- 조치('1025') -->
            </if>
            <if test="SEL_INSPECT_USER_ID !='' and SEL_INSPECT_USER_ID != null">
                AND D.INSPECT_USER_ID = #{SEL_INSPECT_USER_ID}   <!-- 검사자 -->
            </if>
            <if test="SEL_INSPECTION_ST_DT !='' and SEL_INSPECTION_ST_DT != null and SEL_INSPECTION_END_DT !='' and SEL_INSPECTION_END_DT != null">
                AND D.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_INSPECTION_ST_DT},'/',space(0)),'%Y%m%d') AND  DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_INSPECTION_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY)
            </if>
        ORDER BY A.CONTROL_SEQ , B.CONTROL_DETAIL_SEQ, D.INSPECT_SEQ DESC
    </select>
    <select id="selectInspectionResultHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, SF_GET_CONTROL_PART_INFO(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_INFO
             , SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
             , B.DRAWING_NUM
             , B.IMG_GFILE_SEQ
             , B.SIZE_TXT
             , B.MATERIAL_NOTE
             , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY
             , SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
             , SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
             , SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM
             , SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
             , D.PRODUCT_NUM
             , (SELECT M.USER_NM FROM TBL_USER M WHERE M.USER_ID = D.INSERT_ID) AS INSPECT_RESULT_USER_NM
             , C.LAYER_AREA_NAME
             , COUNT(D.RESULT_VALUE) AS VALUE_CNT
             , SF_GET_DATE_F(D.INSERT_DT,'','M') AS INSEPCT_RESULT_INSERT_DT
             , D.INSPECT_RESULT_VALUE_SEQ
             , C.INSPECT_RESULT_SEQ
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_INSPECT_RESULT C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_INSPECT_RESULT_VALUE D ON D.INSPECT_RESULT_SEQ = C.INSPECT_RESULT_SEQ
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_STATUS IN ('ORD001', 'ORD003')
            <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
                AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
            </if>
            <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null">
                AND UPPER(A.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{SEL_CONTROL_NUM}), '%')
            </if>
            <if test="SEL_NOTE !='' and SEL_NOTE != null">
                AND UPPER(B.MATERIAL_NOTE) LIKE CONCAT('%', UPPER(#{SEL_NOTE}), '%')
            </if>
            <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
                AND UPPER(B.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{SEL_DRAWING_NUM}), '%')
            </if>
            <if test="SEL_MATERIAL_DETAIL !='' and SEL_MATERIAL_DETAIL != null">
                AND B.MATERIAL_DETAIL = #{SEL_MATERIAL_DETAIL}
            </if>
            <if test="SEL_INSPECT_USER_ID !='' and SEL_INSPECT_USER_ID != null">
                AND D.INSERT_ID = #{SEL_INSPECT_USER_ID}   <!-- 검사자 -->
            </if>
            <if test="SEL_INSPECTION_ST_DT !='' and SEL_INSPECTION_ST_DT != null and SEL_INSPECTION_END_DT !='' and SEL_INSPECTION_END_DT != null">
                AND D.INSERT_DT BETWEEN STR_TO_DATE(REPLACE(#{SEL_INSPECTION_ST_DT},'/',space(0)),'%Y%m%d') AND  DATE_ADD(STR_TO_DATE(REPLACE(#{SEL_INSPECTION_END_DT},'/',space(0)),'%Y%m%d'), INTERVAL+1 DAY)
            </if>
        GROUP BY C.INSPECT_RESULT_SEQ, D.PRODUCT_NUM
        ORDER BY D.INSERT_DT DESC
    </select>
    <delete id="deleteOutgoingHistoryInspectionCancelStep1" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUT WHERE OUT_SEQ = #{OUT_SEQ}
    </delete>
    <update id="updateOutgoingHistoryInspectionCancelStep2" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER
        SET OUT_FINISH_DT = NULL
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateOutgoingHistoryInspectionCancelStep3" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET OUT_FINISH_DT = NULL
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>
    <update id="updateOutgoingHistoryInspectionCancelStep3OrderVer" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON B.CONTROL_SEQ = A.CONTROL_SEQ AND B.ORDER_SEQ = #{ORDER_SEQ}
        SET A.OUT_FINISH_DT = NULL
    </update>
    <delete id="deleteOutgoingHistoryReturnCancelStep1" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT WHERE INSPECT_SEQ = #{INSPECT_SEQ}
    </delete>

    <delete id="deleteOutgoingDisposal" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUT
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </delete>
    <delete id="deleteOutgoingDisposalOrderVer" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUT
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </delete>
    <update id="updateOutgoingDisposalOrderVer1" parameterType="java.util.HashMap">
        UPDATE
            TBL_CONTROL_PART_ORDER
        SET
            SCRAP_YN = 'Y'
          , OUT_FINISH_DT = NOW()
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateOutgoingDisposalOrderVer2" parameterType="java.util.HashMap">
        UPDATE
            TBL_ORDER
        SET
            SCRAP_YN = 'Y'
          , OUT_FINISH_DT = NOW()
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <update id="updateOutgoingDisposal" parameterType="java.util.HashMap">
        UPDATE
            TBL_CONTROL_PART_ORDER
        SET
            SCRAP_YN = 'Y'
            , OUT_FINISH_DT = NOW()
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <update id="updateOutgoingCancelDisposalOrderVer" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART_ORDER A
            INNER JOIN TBL_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.DEL_YN = 'N'
        SET
            A.SCRAP_YN = 'N'
            , A.OUT_FINISH_DT = NULL
            , A.UPDATE_DT = NOW()
            , A.UPDATE_ID = #{LOGIN_USER_ID}
            , B.SCRAP_YN = 'N'
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </update>
    <update id="updateOutgoingCancelDisposal" parameterType="java.util.HashMap">
        UPDATE
            TBL_CONTROL_PART_ORDER
        SET
            SCRAP_YN = 'N'
            , OUT_FINISH_DT = NULL
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <update id="updateOutFinishStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET OUT_FINISH_STATUS = SF_GET_OUT_FINISH_STATUS(#{CONTROL_SEQ})
            , OUT_FINISH_STATUS_DT = CASE WHEN SF_GET_OUT_FINISH_STATUS(#{CONTROL_SEQ}) IS NOT NULL THEN NOW() ELSE NULL END
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateOutFinishStatusUseOrderSeq" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.ORDER_SEQ = #{ORDER_SEQ}
        SET A.OUT_FINISH_STATUS = SF_GET_OUT_FINISH_STATUS(A.CONTROL_SEQ)
          , A.OUT_FINISH_STATUS_DT = CASE WHEN SF_GET_OUT_FINISH_STATUS(A.CONTROL_SEQ) IS NOT NULL THEN NOW() ELSE NULL END
          , A.UPDATE_DT = NOW()
          , A.UPDATE_ID = #{LOGIN_USER_ID}
    </update>
    <update id="updateOrderOutFinishStatusForBarcode" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.ORDER_SEQ = B.ORDER_SEQ AND B.CONTROL_SEQ = #{CONTROL_SEQ}
        SET
            A.OUT_FINISH_STATUS_DT = CASE WHEN SF_GET_ORDER_OUT_FINISH_STATUS(A.ORDER_SEQ) IS NOT NULL THEN NOW() ELSE NULL END,
            A.OUT_FINISH_STATUS = SF_GET_ORDER_OUT_FINISH_STATUS(A.ORDER_SEQ),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
    </update>
    <update id="updateOrderOutFinishStatus" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
        SET A.OUT_FINISH_STATUS_DT = CASE WHEN SF_GET_ORDER_OUT_FINISH_STATUS(A.ORDER_SEQ) IS NOT NULL THEN NOW() ELSE NULL END,
            A.OUT_FINISH_STATUS = SF_GET_ORDER_OUT_FINISH_STATUS(A.ORDER_SEQ),
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
    </update>

    <update id="updateOrderOutFinishStatusCancel" parameterType="java.util.HashMap">
        UPDATE TBL_ORDER A
        SET A.OUT_FINISH_DT = NULL,
            A.OUT_FINISH_STATUS_DT = NOW(),
            A.OUT_FINISH_STATUS = NULL,
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.ORDER_SEQ = #{ORDER_SEQ}
          AND EXISTS ( SELECT 1 FROM TBL_CONTROL_PART_ORDER M WHERE M.ORDER_SEQ = A.ORDER_SEQ)
    </update>
    <select id="selectLayerInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT LAYER_AREA_NAME,
               AREA_TYPE,
               AREA_NAME,
               AREA_COORDINATE,
               MARK_TYPE,
               SF_GET_CODE_NM('1101',MARK_TYPE,#{LOGIN_LOCALE}) AS MARK_TYPE_NM
        FROM TBL_LAYER_AREA
        WHERE LAYER_AREA_NAME = #{LAYER_AREA_NAME}
        ORDER BY AREA_TYPE, AREA_COORDINATE
    </select>
    <select id="selectLayerInfoForBtn" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.LAYER_AREA_NAME, GROUP_CONCAT(X.DIV_CNT ORDER BY AREA_TYPE SEPARATOR ', ') AS DIV_TXT
        FROM (
                 SELECT A.LAYER_AREA_NAME, A.AREA_TYPE, COUNT(*) AS DIV_CNT
                 FROM TBL_LAYER_AREA A
                 GROUP BY A.LAYER_AREA_NAME, A.AREA_TYPE
                 ORDER BY A.LAYER_AREA_NAME, A.AREA_TYPE
             ) X
        GROUP BY X.LAYER_AREA_NAME
    </select>
    <insert id="insertLayerInfo" parameterType="java.util.HashMap">
        INSERT INTO TBL_LAYER_AREA (
            LAYER_AREA_NAME,
            AREA_TYPE,
            MARK_TYPE,
            AREA_NAME,
            AREA_COORDINATE,
            INSERT_ID
        )
        VALUES (
            #{LAYER_AREA_NAME},
            #{AREA_TYPE},
            #{MARK_TYPE},
            #{AREA_NAME},
            #{AREA_COORDINATE},
            #{LOGIN_USER_ID}
        )
        ON DUPLICATE KEY UPDATE
            AREA_COORDINATE = #{AREA_COORDINATE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <delete id="deleteLayerInfo" parameterType="java.util.HashMap">
        DELETE FROM TBL_LAYER_AREA
        WHERE LAYER_AREA_NAME = #{LAYER_AREA_NAME}
            AND AREA_TYPE = #{AREA_TYPE}
            AND MARK_TYPE = #{MARK_TYPE}
            AND AREA_NAME = #{AREA_NAME}
    </delete>
    <select id="selectInspectionResult" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.INSPECT_RESULT_SEQ,
               A.CONTROL_SEQ,
               A.CONTROL_DETAIL_SEQ,
               B.POINT_SEQ,
               B.POINT_NUM,
               '1' AS EYE_VIEW,
               B.POINT_POSITION,
               C.RESULT_VALUE,
               C.INSPECT_RESULT_VALUE_SEQ,
               C.PRODUCT_NUM,
               B.COORDINATE_X,
               B.COORDINATE_Y,
               '1' AS DELETE_BTN,
               A.LAYER_AREA_NAME
        FROM TBL_INSPECT_RESULT A
            INNER JOIN TBL_INSPECT_RESULT_POINT B ON A.INSPECT_RESULT_SEQ = B.INSPECT_RESULT_SEQ
            LEFT OUTER JOIN TBL_INSPECT_RESULT_VALUE C ON B.POINT_SEQ = C.POINT_SEQ AND B.INSPECT_RESULT_SEQ = C.INSPECT_RESULT_SEQ
            <if test="PRODUCT_NUM !='' and PRODUCT_NUM != null">
                AND C.PRODUCT_NUM = #{PRODUCT_NUM}
            </if>
        WHERE 1=1
            <if test="CONTROL_SEQ !='' and CONTROL_SEQ != null">
                AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            </if>
            <if test="CONTROL_DETAIL_SEQ !='' and CONTROL_DETAIL_SEQ != null">
                AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            </if>
        ORDER BY B.POINT_NUM
    </select>

    <select id="selectInspectionResultControlInfoBarcode" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.BARCODE_NUM
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , C.IMG_GFILE_SEQ
            , C.SIZE_TXT
            , CASE WHEN C.PART_NUM IS NULL THEN B.CONTROL_NUM ELSE CONCAT(B.CONTROL_NUM, ' # ', IFNULL(C.PART_NUM, SPACE(0))) END AS CONTROL_NUM
            , SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS QTY
            , SF_GET_CODE_NM('1033', C.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , MAX(D.PRODUCT_NUM) AS PRODUCT_NUM
            , CASE WHEN D.PRODUCT_NUM IS NOT NULL THEN D.PRODUCT_NUM + 1
                   ELSE 1
              END AS NEXT_PRODUCT_NUM
            ,(
             SELECT COUNT(DISTINCT Y.PRODUCT_NUM)
             FROM TBL_INSPECT_RESULT X
                INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON X.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
             WHERE X.CONTROL_SEQ = A.CONTROL_SEQ
                AND X.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            ) AS INSPECT_RESULT_CNT
            ,(
             SELECT MAX(Y.PRODUCT_NUM)
             FROM TBL_INSPECT_RESULT X
                INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON X.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
             WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            ) AS LAST_PRODUCT_NUM
            , D.LAYER_AREA_NAME
            , D.INSPECT_RESULT_SEQ
            , D.IMG_GFILE_SEQ AS POINT_IMG_GFILE_SEQ
        FROM jmes.TBL_CONTROL_BARCODE A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.DEL_YN = 'N'
            INNER JOIN TBL_CONTROL_PART C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN (
                SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.INSPECT_RESULT_SEQ, Y.PRODUCT_NUM, X.LAYER_AREA_NAME, X.IMG_GFILE_SEQ
                FROM TBL_INSPECT_RESULT X
                    LEFT OUTER JOIN TBL_INSPECT_RESULT_VALUE Y ON X.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
            ) D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
        WHERE A.DEL_YN = 'N'
          AND A.BARCODE_NUM = #{BARCODE_NUM}
    </select>
    <select id="selectInspectionResultControlInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.CONTROL_SEQ,
            B.CONTROL_DETAIL_SEQ,
            CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' # ', IFNULL(B.PART_NUM, SPACE(0))) END AS CONTROL_NUM,
            SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS QTY,
            SF_GET_CODE_NM('1033', B.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM,
            CASE WHEN D.PRODUCT_NUM IS NOT NULL THEN MAX(D.PRODUCT_NUM)
                 WHEN #{PRODUCT_NUM} IS NOT NULL THEN #{PRODUCT_NUM}
                 ELSE SPACE(0)
            END AS PRODUCT_NUM,
            (
             SELECT COUNT(DISTINCT Y.PRODUCT_NUM)
             FROM TBL_INSPECT_RESULT X
                INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON X.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
             WHERE X.CONTROL_SEQ = A.CONTROL_SEQ
                AND X.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            ) AS INSPECT_RESULT_CNT,
            (
             SELECT MAX(Y.PRODUCT_NUM)
             FROM TBL_INSPECT_RESULT X
                INNER JOIN TBL_INSPECT_RESULT_VALUE Y ON X.INSPECT_RESULT_SEQ = Y.INSPECT_RESULT_SEQ
             WHERE X.CONTROL_SEQ = A.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            ) AS LAST_PRODUCT_NUM,
            B.IMG_GFILE_SEQ,
            B.SIZE_TXT,
            C.LAYER_AREA_NAME,
            C.INSPECT_RESULT_SEQ,
            C.IMG_GFILE_SEQ AS POINT_IMG_GFILE_SEQ
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN TBL_INSPECT_RESULT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_INSPECT_RESULT_VALUE D ON C.INSPECT_RESULT_SEQ = D.INSPECT_RESULT_SEQ
            <if test="PRODUCT_NUM !='' and PRODUCT_NUM != null">
                AND D.PRODUCT_NUM = #{PRODUCT_NUM}
            </if>
        WHERE A.DEL_YN = 'N'
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectInspectionResultExistCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT CAST(A.INSPECT_RESULT_SEQ AS CHAR) AS INSPECT_RESULT_SEQ
        FROM TBL_INSPECT_RESULT A
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        LIMIT 1
    </select>
    <select id="selectInspectionResultSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT CAST(NEXTVAL(SEQ_INSPECT_RESULT) AS CHAR) AS INSPECT_RESULT_SEQ FROM DUAL
    </select>

    <insert id="insertInspectionResult" parameterType="java.util.HashMap">
        INSERT INTO TBL_INSPECT_RESULT (
            INSPECT_RESULT_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            LAYER_AREA_NAME,
            IMG_GFILE_SEQ,
            INSERT_ID
        )
        VALUES (
            #{INSPECT_RESULT_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            #{LAYER_AREA_NAME},
            #{IMG_GFILE_SEQ},
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="insertInspectionResultPoint" parameterType="java.util.HashMap">
        <selectKey keyProperty="POINT_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_INSPECT_RESULT_POINT) FROM DUAL
        </selectKey>
        INSERT INTO jmes.TBL_INSPECT_RESULT_POINT (
            INSPECT_RESULT_SEQ,
            POINT_SEQ,
            POINT_NUM,
            POINT_POSITION,
            COORDINATE_X,
            COORDINATE_Y,
            INSERT_ID
        )
        VALUES (
            #{INSPECT_RESULT_SEQ},
            #{POINT_SEQ},
            #{POINT_NUM},
            #{POINT_POSITION},
            #{COORDINATE_X},
            #{COORDINATE_Y},
            #{LOGIN_USER_ID}
        );
    </insert>
    <insert id="insertInspectionResultValue" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSPECT_RESULT_VALUE (
            INSPECT_RESULT_VALUE_SEQ,
            POINT_SEQ,
            INSPECT_RESULT_SEQ,
            RESULT_VALUE,
            PRODUCT_NUM,
            INSERT_ID
        )
        VALUES (
            NEXTVAL(SEQ_INSPECT_RESULT_VALUE),
            #{POINT_SEQ},
            #{INSPECT_RESULT_SEQ},
            #{RESULT_VALUE},
            #{PRODUCT_NUM},
            #{LOGIN_USER_ID}
        );
    </insert>

    <update id="updateInspectionResult" parameterType="java.util.HashMap">
        UPDATE TBL_INSPECT_RESULT
        SET
            UPDATE_DT = NOW(),
            <if test="LAYER_AREA_NAME != null and LAYER_AREA_NAME !=''">
                LAYER_AREA_NAME = #{LAYER_AREA_NAME},
            </if>
            <if test="IMG_GFILE_SEQ != null and IMG_GFILE_SEQ !=''">
                IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            </if>
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateInspectionResultPoint" parameterType="java.util.HashMap">
        UPDATE TBL_INSPECT_RESULT_POINT
        SET
            UPDATE_DT = NOW(),
            <if test="POINT_NUM != null and POINT_NUM !=''">
                POINT_NUM = #{POINT_NUM},
            </if>
            <if test="POINT_POSITION != null and POINT_POSITION !=''">
                POINT_POSITION = #{POINT_POSITION},
            </if>
            <if test="COORDINATE_X != null and COORDINATE_X !=''">
                COORDINATE_X = #{COORDINATE_X},
            </if>
            <if test="COORDINATE_Y != null and COORDINATE_Y !=''">
                COORDINATE_Y = #{COORDINATE_Y},
            </if>
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND POINT_SEQ = #{POINT_SEQ}
    </update>
    <update id="updateInspectionResultValue" parameterType="java.util.HashMap">
        UPDATE TBL_INSPECT_RESULT_VALUE
        SET
            UPDATE_DT = NOW(),
            <if test="RESULT_VALUE != null and RESULT_VALUE !=''">
                RESULT_VALUE = #{RESULT_VALUE},
            </if>
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE POINT_SEQ = #{POINT_SEQ}
            AND INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND INSPECT_RESULT_VALUE_SEQ = #{INSPECT_RESULT_VALUE_SEQ}
    </update>

    <delete id="deleteInspectionResultProdNum" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT_VALUE
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND PRODUCT_NUM = #{PRODUCT_NUM}
    </delete>
    <delete id="deleteInspectionResultPointData" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT_POINT
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND NOT EXISTS (
                SELECT 1
                FROM TBL_INSPECT_RESULT_VALUE X
                WHERE X.INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            )
    </delete>
    <delete id="deleteInspectionResultData" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            AND NOT EXISTS (
                SELECT 1
                FROM TBL_INSPECT_RESULT_POINT X
                WHERE X.INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
            )
    </delete>

    <delete id="deleteInspectionResultValue" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT_VALUE
        WHERE POINT_SEQ = #{POINT_SEQ}
            AND INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
    </delete>
    <delete id="deleteInspectionResultPoint" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT_POINT
        WHERE POINT_SEQ = #{POINT_SEQ}
          AND INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
    </delete>

    <select id="selectInspectPointList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            CASE WHEN D.PART_NUM IS NULL THEN C.CONTROL_NUM ELSE CONCAT(C.CONTROL_NUM, ' # ', IFNULL(D.PART_NUM, SPACE(0))) END AS CONTROL_NUM,
            D.SIZE_TXT,
            D.MATERIAL_TYPE,
            D.CONTROL_SEQ,
            D.CONTROL_DETAIL_SEQ,
            D.IMG_GFILE_SEQ,
            SF_GET_CODE_NM('1035', D.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
            (SELECT COUNT(*) FROM TBL_INSPECT_RESULT_POINT X WHERE X.INSPECT_RESULT_SEQ = A.INSPECT_RESULT_SEQ) AS POINT_CNT,
            SF_GET_DATE_F(MAX(A.INSERT_DT), '', 'M') AS LATEST_UPDATE_DT,
            COUNT(DISTINCT E.PRODUCT_NUM) AS INSPECT_RESULT_CNT,
            MIN(E.PRODUCT_NUM) AS LATEST_PRODUCT_NUM,
            MAX(A.LAYER_AREA_NAME) AS LAYER_AREA_NAME
        FROM TBL_INSPECT_RESULT A
            INNER JOIN TBL_INSPECT_RESULT_POINT B ON A.INSPECT_RESULT_SEQ = B.INSPECT_RESULT_SEQ
            INNER JOIN TBL_INSPECT_RESULT_VALUE E ON B.POINT_SEQ = E.POINT_SEQ AND B.INSPECT_RESULT_SEQ = E.INSPECT_RESULT_SEQ
            INNER JOIN TBL_CONTROL C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND C.DEL_YN = 'N'
            INNER JOIN TBL_CONTROL_PART D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                AND D.SIZE_TXT LIKE CONCAT('%',#{SIZE_TXT},'%')
            <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                AND D.MATERIAL_TYPE = #{MATERIAL_TYPE}
            </if>
        GROUP BY D.CONTROL_SEQ, D.CONTROL_DETAIL_SEQ
        ORDER BY C.CONTROL_NUM, A.INSERT_DT
    </select>
    <select id="selectInspectionResultPrdNumList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT DISTINCT C.PRODUCT_NUM
        FROM TBL_INSPECT_RESULT A
             INNER JOIN TBL_INSPECT_RESULT_POINT B ON A.INSPECT_RESULT_SEQ = B.INSPECT_RESULT_SEQ
             INNER JOIN TBL_INSPECT_RESULT_VALUE C ON B.POINT_SEQ = C.POINT_SEQ AND B.INSPECT_RESULT_SEQ = C.INSPECT_RESULT_SEQ
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY C.PRODUCT_NUM
    </select>

    <select id="selectInspectionResultValueList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.INSPECT_RESULT_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            B.POINT_NUM, B.POINT_SEQ, B.POINT_POSITION, C.RESULT_VALUE, C.PRODUCT_NUM, C.INSPECT_RESULT_VALUE_SEQ,
            (SELECT COUNT(*) FROM TBL_INSPECT_RESULT_POINT X WHERE X.INSPECT_RESULT_SEQ = A.INSPECT_RESULT_SEQ) AS POINT_CNT
        FROM TBL_INSPECT_RESULT A
            INNER JOIN TBL_INSPECT_RESULT_POINT B ON A.INSPECT_RESULT_SEQ = B.INSPECT_RESULT_SEQ
            INNER JOIN TBL_INSPECT_RESULT_VALUE C ON B.POINT_SEQ = C.POINT_SEQ AND B.INSPECT_RESULT_SEQ = C.INSPECT_RESULT_SEQ
            <if test="LIMIT_PRODUCT_NUM != null and LIMIT_PRODUCT_NUM !=''">
                AND C.PRODUCT_NUM  <![CDATA[<=]]> #{LIMIT_PRODUCT_NUM}
            </if>
        WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
        ORDER BY C.PRODUCT_NUM, B.POINT_NUM
    </select>

    <select id="selectExistsValue" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT INSPECT_RESULT_VALUE_SEQ, POINT_SEQ, INSPECT_RESULT_SEQ, PRODUCT_NUM
        FROM TBL_INSPECT_RESULT_VALUE
        WHERE POINT_SEQ = #{POINT_SEQ}
            AND PRODUCT_NUM = #{PRODUCT_NUM}
            AND INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
    </select>

    <delete id="deleteInspectionResultProdNumList" parameterType="java.util.HashMap">
        DELETE FROM TBL_INSPECT_RESULT_VALUE
        WHERE INSPECT_RESULT_SEQ = #{INSPECT_RESULT_SEQ}
          AND PRODUCT_NUM IN (${PRODUCT_NUM_LIST})
    </delete>

    <select id="selectRandRange" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT RAND_NUM, RAND_TITLE, RAND_FROM, RAND_TO
        FROM TBL_RAND_RANGE
    </select>
    <insert id="insertRandRange" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_RAND_RANGE (
            RAND_NUM,
            RAND_TITLE,
            RAND_FROM,
            RAND_TO,
            INSERT_ID
        )
        VALUES (
            #{RAND_NUM},
            #{RAND_TITLE},
            #{RAND_FROM},
            #{RAND_TO},
            #{LOGIN_USER_ID}
        );
    </insert>

    <update id="updateRandRange" parameterType="java.util.HashMap">
        UPDATE TBL_RAND_RANGE
        SET UPDATE_ID = #{LOGIN_USER_ID},
            RAND_TITLE = #{RAND_TITLE},
            RAND_FROM = #{RAND_FROM},
            RAND_TO = #{RAND_TO},
            UPDATE_DT = NOW()
        WHERE RAND_NUM = #{RAND_NUM}
    </update>

    <delete id="deleteRandRange" parameterType="java.util.HashMap">
        DELETE FROM TBL_RAND_RANGE
        WHERE RAND_NUM = #{RAND_NUM}
    </delete>
</mapper>