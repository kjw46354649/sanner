<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="outMapper">

    <select id="selectOutsideOrderManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
            C.OUTSIDE_REQUEST_SEQ,
            CASE
                WHEN B.OUTSIDE_STATUS IN ('OST001', 'OST003') THEN SF_GET_DATE_F(C.INSERT_DT, 'YY', 'M')
                ELSE NULL
            END AS OUTSIDE_REQUEST_DT,
            H.INSPECT_SEQ, <!-- SEQ -->
            H.INSPECT_GRADE, <!-- 등급 -->
            SF_GET_CODE_NM('1040', H.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM, <!-- 등급 -->
            H.INSPECT_TYPE, <!-- 불량/반품 -->
            CASE H.INSPECT_TYPE
                WHEN '1' THEN '불량'
                WHEN '2' THEN '반품'
            END AS INSPECT_TYPE_NM, <!-- 불량/반품 -->
            H.INSPECT_RESULT, <!-- 불량코드 -->
            CASE H.INSPECT_TYPE
                WHEN '1' THEN IF(H.INSPECT_GRADE = 'GRD040', SF_GET_CODE_NM('1020', H.INSPECT_RESULT, #{LOGIN_LOCALE}), NULL)
                WHEN '2' THEN SF_GET_CODE_NM('1021', H.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS INSPECT_RESULT_NM,  <!-- 불량코드 -->
            H.INSPECT_DESC, <!-- 비고 -->
            H.ERROR_ACTION, <!-- 조치 -->
            SF_GET_CODE_NM('1025', H.ERROR_ACTION, #{LOGIN_LOCALE}) AS ERROR_ACTION_NM, <!-- 조치 -->
            H.ERROR_NOTE, <!-- 조치방안 -->
            SF_GET_DATE_F(IF(TIMESTAMPDIFF(SECOND, H.INSERT_DT, H.UPDATE_DT) <![CDATA[ < ]]> 0, H.INSERT_DT, H.UPDATE_DT), 'YY', 'M') AS INSPECT_INSERT_UPDATE_DT <!-- 측정 일시 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND B.DRAWING_NUM LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="ITEM_NM != null and ITEM_NM != ''">
                AND B.ITEM_NM LIKE CONCAT('%', UPPER(#{ITEM_NM}), '%')
            </if>
            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            </if>
            <if test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
                AND B.OUTSIDE_STATUS = #{OUTSIDE_STATUS}
            </if>
            <if test="IN_STOCK != null and IN_STOCK != ''">
                AND B.OUTSIDE_IN_DT IS NOT NULL
            </if>
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST_DETAIL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                                            AND C.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST D ON C.OUTSIDE_REQUEST_SEQ = D.OUTSIDE_REQUEST_SEQ
            LEFT OUTER JOIN TBL_INSPECT H ON B.CONTROL_SEQ = H.CONTROL_SEQ
                                            AND B.CONTROL_DETAIL_SEQ = H.CONTROL_DETAIL_SEQ
                                            AND H.INSPECT_SEQ = (SELECT MAX(INSPECT_SEQ)
                                                                FROM TBL_INSPECT
                                                                WHERE 1 = 1
                                                                    AND CONTROL_SEQ = B.CONTROL_SEQ
                                                                    AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
        WHERE 1 = 1
<!--            AND A.CONTROL_STATUS = 'ORD001' 확정 -->
            AND B.OUTSIDE_YN = 'Y'
            AND NOT EXISTS (SELECT *
                            FROM TBL_OUTSIDE_CLOSE
                            WHERE CONTROL_SEQ = B.CONTROL_SEQ AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
<!--             AND NOT EXISTS (SELECT * -->
<!--                             FROM TBL_OUTSIDE_REQUEST AA -->
<!--                                 INNER JOIN TBL_OUTSIDE_REQUEST_DETAIL BB ON AA.OUTSIDE_REQUEST_SEQ = BB.OUTSIDE_REQUEST_SEQ -->
<!--                             WHERE 1 = 1 -->
<!--                                 AND AA.OUTSIDE_STATUS = 'OST004' -->
<!--                                 AND BB.CONTROL_SEQ = B.CONTROL_SEQ -->
<!--                                 AND BB.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) -->
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="MODULE_NM != null and MODULE_NM != ''">
            AND A.MODULE_NM LIKE CONCAT('%', #{MODULE_NM}, '%')
        </if>
        <choose>
            <!-- 확정일시 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC00'">
                AND DATE_FORMAT(A.STATUS_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 외주요청일시 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC01'">
                AND DATE_FORMAT(B.OUTSIDE_STATUS_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 요망납기 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC02'">
                AND DATE_FORMAT(B.OUTSIDE_HOPE_DUE_DT, '%Y%m%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 입고일시 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC03'">
                AND DATE_FORMAT(B.OUTSIDE_IN_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
        </choose>
        ORDER BY A.CONTROL_SEQ, B.PART_NUM
    </select>
    
    <select id="selectOutsideProcessRequestList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            C.OUTSIDE_REQUEST_SEQ
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST_DETAIL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                                            AND C.DEL_YN = 'N'
        WHERE
            B.CONTROL_SEQ IN (${CONTROL_SEQ})
            AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
    </select>

    <update id="updateOutsideProcessRequest" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            OUTSIDE_REQUEST_FINISH_YN = #{OUTSIDE_REQUEST_FINISH_YN}, <!-- 완제품 -->
            OUTSIDE_REQUEST_PROCESS_YN = #{OUTSIDE_REQUEST_PROCESS_YN}, <!-- 가공 -->
            OUTSIDE_REQUEST_GRIND_YN = #{OUTSIDE_REQUEST_GRIND_YN}, <!-- 연마 -->
            OUTSIDE_REQUEST_SURFACE_YN = #{OUTSIDE_REQUEST_SURFACE_YN}, <!-- 표면 처리 -->
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC}, <!-- 기타사항 -->
            OUTSIDE_HOPE_DUE_DT = #{OUTSIDE_HOPE_DUE_DT}, <!-- 요망 납기 -->
            OUTSIDE_NOTE = #{OUTSIDE_NOTE} <!-- 비고 -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectOutSideCloseVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT MAX(C.CLOSE_VER) AS MAX_CLOSE_VER
        FROM TBL_CONTROL A
        INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
        INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND A.COMP_CD = #{COMP_CD}
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            AND CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
        GROUP BY
            A.COMP_CD,
            B.OUTSIDE_COMP_CD,
            C.CLOSE_MONTH,
            C.CLOSE_VER
    </select>

    <select id="selectOutsideCloseLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD,
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM,
            X.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            X.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN,
            X.CLOSE_VER,
            CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN,
            COUNT(*) AS CNT,
            CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') AS CONTROL_PART_QTY,
            FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT,
            FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT <!-- 마감 금액 -->
        FROM (
            SELECT
                A.COMP_CD,
                B.OUTSIDE_COMP_CD,
                SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
                C.CLOSE_MONTH,
                DATE_FORMAT(STR_TO_DATE(C.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
                C.CLOSE_VER,
                B.UNIT_FINAL_AMT,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                B.UNIT_FINAL_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS TOTAL_AMT, <!-- 발주가 -->
                D.FINAL_NEGO_AMT <!-- 마감금액 -->
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.OUTSIDE_YN = 'Y'
                    AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON A.COMP_CD = D.COMP_CD
                    AND B.OUTSIDE_COMP_CD = D.OUTSIDE_COMP_CD
                    AND C.CLOSE_MONTH = D.CLOSE_MONTH
                    AND C.CLOSE_VER = D.CLOSE_VER
            WHERE 1 = 1
                AND A.DEL_YN = 'N'
                AND A.COMP_CD = #{COMP_CD}) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectOutsideCloseRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD,
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM,
            X.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            X.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN,
            X.CLOSE_VER,
            CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN,
            SUM(X.CNT) AS CNT,
            CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') AS CONTROL_PART_QTY,
            FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT,
            FORMAT(SUM(X.FINAL_NEGO_AMT), 0) AS FINAL_NEGO_AMT
        FROM (
            SELECT
                P.COMP_CD,
                P.OUTSIDE_COMP_CD,
                P.CLOSE_MONTH,
                COUNT(*) AS CNT,
                P.CLOSE_VER,
                SUM(P.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                SUM(P.TOTAL_AMT) AS TOTAL_AMT,
                P.FINAL_NEGO_AMT
            FROM (
                SELECT
                    A.COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    C.CLOSE_MONTH,
                    C.CLOSE_VER,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                    B.UNIT_FINAL_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS TOTAL_AMT,
                    D.FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.OUTSIDE_YN = 'Y'
                    AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON A.COMP_CD = D.COMP_CD
                    AND B.OUTSIDE_COMP_CD = D.OUTSIDE_COMP_CD
                    AND C.CLOSE_MONTH = D.CLOSE_MONTH
                    AND C.CLOSE_VER = D.CLOSE_VER
                WHERE 1 = 1
                    AND A.DEL_YN = 'N'
                    AND A.COMP_CD = #{COMP_CD}) P
            GROUP BY P.COMP_CD, P.OUTSIDE_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
            UNION ALL
            SELECT
                Q.COMP_CD,
                Q.OUTSIDE_COMP_CD,
                Q.CLOSE_MONTH,
                COUNT(*) AS CNT,
                Q.CLOSE_VER,
                SUM(Q.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                SUM(Q.TOTAL_AMT) AS TOTAL_AMT,
                SUM(Q.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT
                    A.COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH}) AS CLOSE_MONTH,
                    #{CLOSE_VER} AS CLOSE_VER,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                    B.UNIT_FINAL_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS TOTAL_AMT,
                    B.UNIT_FINAL_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                WHERE 1 = 1
                    AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                    AND NOT EXISTS (SELECT *
                                    FROM TBL_CONTROL AA
                                    INNER JOIN TBL_CONTROL_PART BB ON AA.CONTROL_SEQ = BB.CONTROL_SEQ
                                        AND BB.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                                        AND BB.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                                    INNER JOIN TBL_OUTSIDE_CLOSE CC ON BB.CONTROL_SEQ = CC.CONTROL_SEQ
                                        AND BB.CONTROL_DETAIL_SEQ = CC.CONTROL_DETAIL_SEQ
                                        AND CC.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                                        AND CC.CLOSE_VER = #{CLOSE_VER}
                                    WHERE 1 = 1
                                        AND AA.COMP_CD = #{COMP_CD})) Q
            GROUP BY Q.COMP_CD, Q.OUTSIDE_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <update id="updateOutsideCloseRequest" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST
        SET
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD},
        </if>
        <if test="OUTSIDE_GFILE_SEQ != null and OUTSIDE_GFILE_SEQ != ''">
            OUTSIDE_GFILE_SEQ = #{OUTSIDE_GFILE_SEQ},
        </if>
        <if test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
            OUTSIDE_STATUS = #{OUTSIDE_STATUS},
        </if>
        <if test="NOTE != null and NOTE != ''">
            NOTE = #{NOTE},
        </if>
            STATUS_DT = NOW()
        WHERE
            OUTSIDE_REQUEST_SEQ = #{OUTSIDE_REQUEST_SEQ}
    </update>

    <insert id="createOutsideClose" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_CLOSE (
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            CLOSE_DT
        ) VALUES (
            #{CLOSE_MONTH},
            #{CLOSE_VER},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NOW()
        ) ON DUPLICATE KEY
	        UPDATE
		        CLOSE_DT = NOW()
    </insert>

    <insert id="createOutsideCloseHistory" parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_OUTSIDE_CLOSE_HISTORY (
            HISTORY_SEQ,
            HISTORY_DT,
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ
        ) VALUES (
            NEXTVAL(SEQ_OUTSIDE_CLOSE_HISTORY),
            NOW(),
            #{CLOSE_MONTH},
            CAST(#{CLOSE_VER} AS INTEGER),
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ}
        )
    </insert>

    <insert id="createOutsideCloseNote" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_CLOSE_NOTE (
            CLOSE_MONTH,
            CLOSE_VER,
            COMP_CD,
            OUTSIDE_COMP_CD,
            CLOSE_NOTE,
            FINAL_NEGO_AMT,
            INSERT_ID
        ) VALUES (
            #{CLOSE_MONTH},
            #{CLOSE_VER},
            #{COMP_CD},
            #{OUTSIDE_COMP_CD},
            #{CLOSE_NOTE},
            REPLACE(#{FINAL_NEGO_AMT}, ',', SPACE(0)),
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                CLOSE_NOTE = #{CLOSE_NOTE},
                FINAL_NEGO_AMT = #{FINAL_NEGO_AMT},
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateOutsideCloseFinalNego" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_CLOSE_NOTE
        SET
            FINAL_NEGO_AMT = #{FINAL_NEGO_AMT}
        WHERE CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </update>

    <select id="selectOutsideCloseHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
<!--             C.OUTSIDE_REQUEST_SEQ, -->
            DATE_FORMAT(STR_TO_DATE(E.CLOSE_MONTH, '%Y%m'), '%Y.%m') AS OUTSIDE_CLOSE_MONTH,
            E.CLOSE_VER,
            SF_GET_DATE_F(E.CLOSE_DT, 'YY', 'M') AS OUTSIDE_CLOSE_DT
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                AND B.OUTSIDE_STATUS = 'OST004'
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND B.DRAWING_NUM LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="ITEM_NM != null and ITEM_NM != ''">
                AND B.ITEM_NM LIKE CONCAT('%', UPPER(#{ITEM_NM}), '%')
            </if>
<!--             LEFT OUTER JOIN TBL_OUTSIDE_REQUEST_DETAIL C ON B.CONTROL_SEQ = C.CONTROL_SEQ -->
<!--                                                             AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ -->
<!--                                                             AND C.DEL_YN = 'N' -->
<!--             LEFT OUTER JOIN TBL_OUTSIDE_REQUEST D ON C.OUTSIDE_REQUEST_SEQ = D.OUTSIDE_REQUEST_SEQ -->
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE E ON B.CONTROL_SEQ = E.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
<!--        <if test="ORDER_NUM != null and ORDER_NUM != ''">-->
<!--            AND C.ORDER_NUM LIKE CONCAT('%', #{ORDER_NUM}, '%')-->
<!--        </if>-->
            <!-- AND E.OUTSIDE_STATUS = 'OST004' -->
    </select>

    <select id="selectOutsideCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            A.COMP_CD,
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
            SUBSTR(D.CLOSE_MONTH, 1, 4) AS YEAR,
            CONCAT(QUARTER(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m')), '분기') AS QUARTER,
            CONCAT(SUBSTR(D.CLOSE_MONTH, 5), '월') AS FINISH_MONTH,
            CONCAT(D.CLOSE_VER, '차') AS CLOSE_VER, /* 차수 */
            B.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            SUM(C.ORDER_QTY) AS ITEM_NUMBER,
            SUM(B.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
            SUM(B.UNIT_FINAL_AMT) * 0.1 AS VAT_AMOUNT,
            SUM(B.UNIT_FINAL_AMT) + SUM(B.UNIT_FINAL_AMT) * 0.1 AS TOTAL_AMOUNT,
            E.CLOSE_NOTE
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_OUTSIDE_CLOSE D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                              AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE_NOTE E ON A.COMP_CD = E.COMP_CD
                                                        AND B.OUTSIDE_COMP_CD = E.OUTSIDE_COMP_CD
                                                        AND D.CLOSE_MONTH = E.CLOSE_MONTH
                                                        AND D.CLOSE_VER = E.CLOSE_VER
        WHERE 1 = 1
        <choose>
            <when test="RANGE_SEARCH != null and RANGE_SEARCH != ''">
                AND (D.CLOSE_MONTH BETWEEN  DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_RIGHT}, #{CLOSE_MONTH_RIGHT}), '%Y%m'), '%Y%m'))
            </when>
            <otherwise>
                AND D.CLOSE_MONTH <![CDATA[ > ]]> DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m')
            </otherwise>
        </choose>
        <choose>
            <when test="CLOSE_VER != null and CLOSE_VER != ''">
                AND D.CLOSE_VER = #{CLOSE_VER}
            </when>
            <otherwise>
                AND D.CLOSE_VER = (SELECT MAX(CLOSE_VER)
                                   FROM TBL_OUTSIDE_CLOSE
                                   WHERE
                                        D.CLOSE_MONTH = CLOSE_MONTH
                                        AND D.CONTROL_SEQ = CONTROL_SEQ
                                        AND D.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ)
            </otherwise>
        </choose>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        <if test="CLOSE_NOTE != null and CLOSE_NOTE != ''">
            AND D.CLOSE_NOTE LIKE CONCAT('%', #{CLOSE_NOTE}, '%')
        </if>
        GROUP BY
            A.COMP_CD,
            B.OUTSIDE_COMP_CD,
            D.CLOSE_MONTH,
            D.CLOSE_VER
        ORDER BY
            SF_GET_COMP_NM(A.COMP_CD),
            YEAR,
            FINISH_MONTH
    </select>

    <update id="updateOutsideCloseNote" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_OUTSIDE_CLOSE_NOTE
        SET
            CLOSE_NOTE = #{CLOSE_NOTE}
        WHERE CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </update>

    <select id="selectOutsideYearCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            Z.CLOSE_MONTH,
            Z.COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.COMP_CD) AS COMP_NM,
            Z.OUTSIDE_COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_CD_NM,
            CASE WHEN STATUS_TYPE = '1' THEN '외주금액' ELSE '원발주 금액' END STATUS_TYPE,
            SUM(CASE WHEN Z.MM = '01' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_01_AMT,
            SUM(CASE WHEN Z.MM = '02' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_02_AMT,
            SUM(CASE WHEN Z.MM = '03' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_03_AMT,
            SUM(CASE WHEN Z.MM IN ('01', '02', '03') THEN Z.ORDER_AMT ELSE 0 END) ORDER_03_SUM_AMT,
            SUM(CASE WHEN Z.MM = '04' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_04_AMT,
            SUM(CASE WHEN Z.MM = '05' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_05_AMT,
            SUM(CASE WHEN Z.MM = '06' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_06_AMT,
            SUM(CASE WHEN Z.MM IN ('04', '05', '06') THEN Z.ORDER_AMT ELSE 0 END) ORDER_06_SUM_AMT,
            SUM(CASE WHEN Z.MM = '07' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_07_AMT,
            SUM(CASE WHEN Z.MM = '08' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_08_AMT,
            SUM(CASE WHEN Z.MM = '09' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_09_AMT,
            SUM(CASE WHEN Z.MM IN ('07', '08', '09') THEN Z.ORDER_AMT ELSE 0 END) ORDER_09_SUM_AMT,
            SUM(CASE WHEN Z.MM = '10' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_10_AMT,
            SUM(CASE WHEN Z.MM = '11' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_11_AMT,
            SUM(CASE WHEN Z.MM = '12' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_12_AMT,
            SUM(CASE WHEN Z.MM IN ('10', '11', '12') THEN Z.ORDER_AMT ELSE 0 END) ORDER_12_SUM_AMT,
            SUM(Z.ORDER_AMT) TOTAL_AMT
        FROM (
            SELECT
                G.CLOSE_MONTH, F.MM, G.COMP_CD, G.STATUS_TYPE, G.OUTSIDE_COMP_CD, G.ORDER_AMT
            FROM TBL_YYYYMMDD F
                INNER JOIN (
                    SELECT
                        K.STATUS_TYPE, K.COMP_CD, K.OUTSIDE_COMP_CD, K.CLOSE_MONTH, K.ORDER_AMT
                    FROM (
                        SELECT
                            '1' AS STATUS_TYPE, A.COMP_CD, B.OUTSIDE_COMP_CD, D.CLOSE_MONTH, SUM(B.UNIT_FINAL_AMT * C.ORDER_QTY) AS ORDER_AMT
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C, TBL_OUTSIDE_CLOSE D
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.DEL_YN = 'N' AND IFNULL(B.PART_NUM, '0') = '0'
                            AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                            AND SUBSTR(D.CLOSE_MONTH, 1, 4) = #{YEAR}
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND A.COMP_CD = #{COMP_CD}
                            </if>
                            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                            </if>
                        GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
                        UNION ALL
                        SELECT
                            '2' AS STATUS_TYPE, A.COMP_CD, B.OUTSIDE_COMP_CD, D.CLOSE_MONTH, SUM(B.OUTSIDE_UNIT_AMT * C.ORDER_QTY) AS ORDER_AMT
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C, TBL_OUTSIDE_CLOSE D
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.DEL_YN = 'N' AND IFNULL(B.PART_NUM, '0') = '0'
                            AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                            AND SUBSTR(D.CLOSE_MONTH, 1, 4) = #{YEAR}
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND A.COMP_CD = #{COMP_CD}
                            </if>
                            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                            </if>
                        GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
                    ) K
                ) G ON CONCAT(F.YYYY, F.MM) = G.CLOSE_MONTH
            WHERE F.YYYY = #{YEAR}
        ) Z
        GROUP BY Z.CLOSE_MONTH, Z.COMP_CD, Z.OUTSIDE_COMP_CD, Z.STATUS_TYPE
    </select>

    <select id="selectMonthCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.COMP_CD,
            A.COMP_NM,
            B.COMP_CD AS OUTSIDE_COMP_CD,
            B.COMP_NM AS OUTSIDE_COMP_NM,
            C.YYYY,
            C.MM,
            QUARTER(C.DT) AS QUARTER,
            X.OUTPUT_AMT,
            Y.DEPOSIT_AMT
        FROM TBL_COMPANY A
            INNER JOIN TBL_COMPANY B ON B.CO_COMPANY_YN = 'Y'
            CROSS JOIN TBL_YYYYMMDD C
            LEFT OUTER JOIN (SELECT
                                 C.CLOSE_MONTH,
                                 A.COMP_CD,
                                 A.ORDER_COMP_CD,
                                 SUM(B.UNIT_FINAL_AMT * D.ORDER_QTY) AS OUTPUT_AMT
                             FROM TBL_CONTROL A
                                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                 INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                 INNER JOIN TBL_CONTROL_PART_ORDER D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                                                        AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                             GROUP BY A.COMP_CD,
                                      A.ORDER_COMP_CD) X ON A.COMP_CD = X.COMP_CD
                                                            AND B.COMP_CD = X.ORDER_COMP_CD
                                                            AND CONCAT(C.YYYY, C.MM) = X.CLOSE_MONTH
            LEFT OUTER JOIN(SELECT
                                COMP_CD,
                                ORDER_COMP_CD,
                                SUBSTR(DATE_FORMAT(STR_TO_DATE(DEPOSIT_DT, '%Y%m%d'), '%Y%m%d'), 1, 4) AS YEAR,
                                SUBSTR(DATE_FORMAT(STR_TO_DATE(DEPOSIT_DT, '%Y%m%d'), '%Y%m%d'), 5, 2) AS MONTH,
                                DEPOSIT_AMT
                            FROM TBL_MONEY_DEPOSIT) Y ON A.COMP_CD = Y.COMP_CD
                                                         AND B.COMP_CD = Y.ORDER_COMP_CD
                                                         AND C.YYYY = Y.YEAR
                                                         AND C.MM = Y.MONTH
        WHERE
            A.FAMILY_COMPANY_YN = 'Y'
            AND C.YYYY = #{YEAR}
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        <if test="CLOSE_NOTE != null and CLOSE_NOTE != ''">
            AND D.CLOSE_NOTE LIKE CONCAT('%', #{CLOSE_NOTE}, '%')
        </if>
        GROUP BY
            A.COMP_CD,
            B.COMP_CD,
            C.YYYY,
            C.MM
    </select>

    <select id="selectOutsideCloseCancelLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD,
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM,
            X.ORDER_COMP_CD,
            SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM,
            X.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            X.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
            X.CLOSE_VER,
            CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN,
            COUNT(*) AS CNT,
            CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') AS CONTROL_PART_QTY,
            FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT,
            FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT
        FROM (
            SELECT
                C.COMP_CD,
                C.ORDER_COMP_CD,
                B.OUTSIDE_COMP_CD,
                A.CLOSE_MONTH,
                A.CLOSE_VER,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                B.UNIT_FINAL_AMT,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) * B.UNIT_FINAL_AMT AS TOTAL_AMT,
                D.FINAL_NEGO_AMT
            FROM TBL_OUTSIDE_CLOSE A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND B.OUTSIDE_YN = 'Y'
                INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON A.CLOSE_MONTH = D.CLOSE_MONTH
                    AND A.CLOSE_VER = D.CLOSE_VER
                    AND C.COMP_CD = D.COMP_CD
                    AND B.OUTSIDE_COMP_CD = D.OUTSIDE_COMP_CD
            WHERE 1 = 1
                AND (A.CLOSE_MONTH, B.OUTSIDE_COMP_CD, C.COMP_CD, C.ORDER_COMP_CD) IN (SELECT AA.CLOSE_MONTH, BB.OUTSIDE_COMP_CD, CC.COMP_CD, CC.ORDER_COMP_CD
                                                                                      FROM TBL_OUTSIDE_CLOSE AA
                                                                                          LEFT OUTER JOIN TBL_CONTROL_PART BB ON AA.CONTROL_SEQ = BB.CONTROL_SEQ AND AA.CONTROL_DETAIL_SEQ = BB.CONTROL_DETAIL_SEQ
                                                                                          LEFT OUTER JOIN TBL_CONTROL CC ON BB.CONTROL_SEQ = CC.CONTROL_SEQ
                                                                                      WHERE 1 = 1
                                                                                          AND AA.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ}))) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectOutsideCloseCancelRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD,
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM,
            X.ORDER_COMP_CD,
            SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM,
            X.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            X.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
            X.CLOSE_VER,
            CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN,
            CASE WHEN SUM(X.CNT) > 0 THEN FORMAT(SUM(X.CNT), 0) ELSE '-' END AS CNT,
            CASE WHEN SUM(X.CONTROL_PART_QTY) > 0 THEN CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') ELSE '-' END AS CONTROL_PART_QTY,
            CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT,
            CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN FORMAT(SUM(X.FINAL_NEGO_AMT), 0) ELSE '-' END AS FINAL_NEGO_AMT
        FROM (
            SELECT
                Q.COMP_CD,
                Q.ORDER_COMP_CD,
                Q.OUTSIDE_COMP_CD,
                Q.CLOSE_MONTH,
                Q.CLOSE_VER,
                SUM(Q.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                COUNT(*) AS CNT,
                Q.UNIT_FINAL_AMT,
                SUM(Q.TOTAL_AMT) AS TOTAL_AMT,
                Q.FINAL_NEGO_AMT
            FROM (
                SELECT
                    C.COMP_CD,
                    C.ORDER_COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    A.CLOSE_MONTH,
                    A.CLOSE_VER,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                    B.UNIT_FINAL_AMT,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) * B.UNIT_FINAL_AMT AS TOTAL_AMT,
                    D.FINAL_NEGO_AMT
                FROM TBL_OUTSIDE_CLOSE A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = A.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                    AND B.OUTSIDE_YN = 'Y'
                INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND C.DEL_YN = 'N'
                INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON A.CLOSE_MONTH = D.CLOSE_MONTH
                    AND A.CLOSE_VER = D.CLOSE_VER
                    AND C.COMP_CD = D.COMP_CD
                    AND B.OUTSIDE_COMP_CD = D.OUTSIDE_COMP_CD
                WHERE 1 = 1
                    AND (A.CLOSE_MONTH, B.OUTSIDE_COMP_CD, C.COMP_CD, C.ORDER_COMP_CD) IN (SELECT AA.CLOSE_MONTH, BB.OUTSIDE_COMP_CD, CC.COMP_CD, CC.ORDER_COMP_CD
                                                                                            FROM TBL_OUTSIDE_CLOSE AA
                                                                                                LEFT OUTER JOIN TBL_CONTROL_PART BB ON AA.CONTROL_SEQ = BB.CONTROL_SEQ
                                                                                                    AND AA.CONTROL_DETAIL_SEQ = BB.CONTROL_DETAIL_SEQ
                                                                                                LEFT OUTER JOIN TBL_CONTROL CC ON BB.CONTROL_SEQ = CC.CONTROL_SEQ
                                                                                                    AND CC.DEL_YN = 'N'
                                                                                            WHERE AA.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ}))) Q
                GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.OUTSIDE_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER
            UNION ALL
            SELECT
                P.COMP_CD,
                P.ORDER_COMP_CD,
                P.OUTSIDE_COMP_CD,
                P.CLOSE_MONTH,
                P.CLOSE_VER,
                SUM(P.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                COUNT(*) * -1 AS CNT,
                P.UNIT_FINAL_AMT,
                SUM(P.TOTAL_AMT) AS TOTAL_AMT,
                SUM(P.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT
                    C.COMP_CD,
                    C.ORDER_COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    A.CLOSE_MONTH,
                    A.CLOSE_VER,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) * -1 AS CONTROL_PART_QTY,
                    B.UNIT_FINAL_AMT * -1 AS UNIT_FINAL_AMT,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) * B.UNIT_FINAL_AMT * -1 AS TOTAL_AMT,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) * B.UNIT_FINAL_AMT * -1 AS FINAL_NEGO_AMT
                FROM TBL_OUTSIDE_CLOSE A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND B.OUTSIDE_YN = 'Y'
                INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND C.DEL_YN = 'N'
                INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON A.CLOSE_MONTH = D.CLOSE_MONTH
                    AND A.CLOSE_VER = D.CLOSE_VER
                    AND C.COMP_CD = D.COMP_CD
                    AND B.OUTSIDE_COMP_CD = D.OUTSIDE_COMP_CD
                WHERE 1 = 1
                    AND A.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})) P
            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.OUTSIDE_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectRequestOutsideMailContent" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT REPLACE(TEMPLATE_CONTENT, '%COMP_CD%', (SELECT COMP_NM FROM TBL_COMPANY WHERE COMP_CD = #{COMP_CD})) AS TEMPLATE_CONTENT
        FROM TBL_MAIL_TEMPLATE
        WHERE TEMPLATE_SEQ = #{TEMPLATE_SEQ}
    </select>

    <select id="selectOutsideMailDestination" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            B.STAFF_SEQ,
            B.COMP_CD,
            B.STAFF_NM,
            B.STAFF_EMAIL,
            B.STAFF_TEL
        FROM TBL_COMPANY A
            INNER JOIN TBL_COMPANY_STAFF B ON A.COMP_CD = B.COMP_CD AND B.DEL_YN = 'N'
        WHERE A.COMP_CD = #{OUTSIDE_COMP_CD} AND A.DEL_YN = 'N'
    </select>

    <insert id="createOutsideRequest" parameterType="java.util.HashMap" >
        <selectKey keyProperty="OUTSIDE_REQUEST_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_OUTSIDE_REQUEST)
        </selectKey>
        INSERT INTO TBL_OUTSIDE_REQUEST (
            OUTSIDE_REQUEST_SEQ,
            OUTSIDE_ORDER_NUM,
            OUTSIDE_COMP_CD,
            OUTSIDE_GFILE_SEQ,
            <!-- OUTSIDE_STATUS, -->
            <!-- STATUS_DT, -->
            NOTE,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            #{OUTSIDE_ORDER_NUM},
            #{OUTSIDE_COMP_CD},
            #{GFILE_SEQ},
            <!-- #{OUTSIDE_STATUS}, -->
            <!-- NOW(), -->
            REPLACE(#{EMAIL_CONTENT_TXT}, 'undefined', SPACE(0)),
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="createOutsideRequestDetail" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_REQUEST_DETAIL (
            OUTSIDE_REQUEST_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="createOutsideRequestReceiver" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_REQUEST_RECEIVER (
            OUTSIDE_REQUEST_SEQ,
            SEQ,
            RECEIVER_NM,
            RECEIVER_EMAIL,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            NEXTVAL(SEQ_DUMMY),
            #{STAFF_NM},
            #{STAFF_EMAIL},
            NOW()
        )
    </insert>

    <insert id="createMailAttachCadFilePlus" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_FILE
        (FILE_SEQ, FILE_NM, FILE_PATH, TIME_PATH, ORGINAL_FILE_NM, FILE_TYPE, FILE_EXT, FILE_SIZE,
            FILE_KIND, GFILE_SEQ, INSERT_ID)
        SELECT
            NEXTVAL(SEQ_FILE), Z.FILE_NM, Z.FILE_PATH, Z.TIME_PATH, Z.ORGINAL_FILE_NM, Z.FILE_TYPE, Z.FILE_EXT, Z.FILE_SIZE,
            Z.FILE_KIND, #{GFILE_SEQ}, #{LOGIN_USER_ID}
        FROM (
        	SELECT
                A.FILE_NM, A.FILE_PATH, A.TIME_PATH, A.ORGINAL_FILE_NM, A.FILE_TYPE, A.FILE_EXT, A.FILE_SIZE, A.FILE_KIND
        	FROM jmes.TBL_FILE A, jmes.TBL_CONTROL_PART B
        	WHERE B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.GFILE_SEQ = B.DXF_GFILE_SEQ
        	UNION ALL
        	SELECT
                A.FILE_NM, A.FILE_PATH, A.TIME_PATH, A.ORGINAL_FILE_NM, A.FILE_TYPE, A.FILE_EXT, A.FILE_SIZE, A.FILE_KIND
        	FROM jmes.TBL_FILE A, jmes.TBL_CONTROL_PART B
        	WHERE B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.GFILE_SEQ = B.PDF_GFILE_SEQ
        ) Z
    </insert>

    <update id="updateOutsideRequestDetailDelete" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST_DETAIL
        SET
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND OUTSIDE_REQUEST_SEQ = #{OUTSIDE_REQUEST_SEQ}
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateCancelOutsideRequestStatus" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST
        SET
            OUTSIDE_STATUS = (SELECT A.OUTSIDE_STATUS FROM TBL_OUTSIDE_REQUEST A INNER JOIN TBL_OUTSIDE_REQUEST_DETAIL B ON A.OUTSIDE_REQUEST_SEQ = B.OUTSIDE_REQUEST_SEQ WHERE 1 = 1 AND A.DEL_YN = 'Y' AND B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} ORDER BY A.OUTSIDE_REQUEST_SEQ DESC LIMIT 1),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND OUTSIDE_STATUS = 'OST004' AND DEL_YN = 'N' AND OUTSIDE_REQUEST_SEQ = (SELECT MAX(OUTSIDE_REQUEST_SEQ) FROM TBL_OUTSIDE_REQUEST_DETAIL WHERE CONTROL_SEQ = #{CONTROL_SEQ} AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
    </update>

    <delete id="deleteOutsideClose" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
   </delete>

    <delete id="deleteOutsideCloseHistory" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE_HISTORY
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
   </delete>

    <delete id="deleteOutsideCloseNote" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE_NOTE
        WHERE 1 = 1
            AND CLOSE_MONTH = REPLACE(#{OUTSIDE_CLOSE_MONTH}, '.', SPACE(0))
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            AND NOT EXISTS (SELECT *
                            FROM TBL_OUTSIDE_CLOSE
                            WHERE 1 = 1
                                AND CLOSE_MONTH = REPLACE(#{OUTSIDE_CLOSE_MONTH}, '.', SPACE(0))
                                AND CLOSE_VER = #{CLOSE_VER}
                                AND CONTROL_SEQ = #{CONTROL_SEQ}
                                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
   </delete>

    <select id="createInvoiceNum" parameterType="java.util.HashMap" resultType="string">
        SELECT CONCAT('IV-', LPAD(NEXTVAL(SEQ_INVOICE), 6, 0))
    </select>

</mapper>