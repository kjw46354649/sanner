<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="outMapper">

    <select id="selectOutsideOrderManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            (SELECT M.UNIT_FINAL_EST_AMT FROM TBL_CONTROL_PART_ORDER_MAIN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ) AS UNIT_FINAL_EST_AMT,
            (SELECT M.UNIT_FINAL_AMT FROM TBL_CONTROL_PART_ORDER_MAIN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ) AS UNIT_FINAL_AMT,
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT2,
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
            CASE
                WHEN B.OUTSIDE_STATUS IN ('OST001', 'OST003')
                    THEN (SELECT SF_GET_DATE_F(M.INSERT_DT, 'YY', 'M') FROM TBL_OUTSIDE_REQUEST_DETAIL M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N' ORDER BY M.INSERT_DT DESC LIMIT 1)
            END AS OUTSIDE_REQUEST_DT,
            IFNULL( CASE
                        WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.OUTSIDE_UNIT_AMT
                                                                    FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND M.OUTSIDE_YN = 'Y'
                                                                        AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                        AND N.DEL_YN = 'N'
                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                    LIMIT 1)
                        ELSE (  SELECT M.OUTSIDE_UNIT_AMT
                                FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND M.OUTSIDE_YN = 'Y'
                                    AND M.DRAWING_NUM = B.DRAWING_NUM
                                    AND N.CONTROL_STATUS = 'ORD003'
                                    AND N.DEL_YN = 'N'
                                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                ORDER BY M.CONTROL_SEQ DESC
                                LIMIT 1)
            END, SPACE(0)) AS PREV_OUTSIDE_UNIT_AMT, <!-- 외주 종전가 -->
            C.INSPECT_NUM,
            C.INSPECT_GRADE, <!-- 등급 -->
            SF_GET_CODE_NM('1040', C.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM, <!-- 등급 -->
            C.INSPECT_TYPE, <!-- 불량/반품 -->
            CASE C.INSPECT_TYPE
                WHEN '1' THEN '불량'
                WHEN '2' THEN '반품'
            END AS INSPECT_TYPE_NM, <!-- 불량/반품 -->
            C.INSPECT_RESULT, <!-- 불량코드 -->
            CASE C.INSPECT_TYPE
                WHEN '1' THEN IF(C.INSPECT_GRADE = 'GRD040', SF_GET_CODE_NM('1020', C.INSPECT_RESULT, #{LOGIN_LOCALE}), NULL)
                WHEN '2' THEN SF_GET_CODE_NM('1021', C.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS INSPECT_RESULT_NM,  <!-- 불량코드 -->
            C.INSPECT_DESC, <!-- 비고 -->
            C.ERROR_ACTION, <!-- 조치 -->
            SF_GET_CODE_NM('1025', C.ERROR_ACTION, #{LOGIN_LOCALE}) AS ERROR_ACTION_NM, <!-- 조치 -->
            C.ERROR_NOTE, <!-- 조치방안 -->
            SF_GET_DATE_F(IF(TIMESTAMPDIFF(SECOND, C.INSERT_DT, C.UPDATE_DT) <![CDATA[ < ]]> 0, C.INSERT_DT, C.UPDATE_DT), 'YY', 'M') AS INSPECT_INSERT_UPDATE_DT <!-- 측정 일시 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                AND B.OUTSIDE_YN = 'Y'
            <choose>
                <when test="INCLUDE_REQUEST_COMPLETE != null and INCLUDE_REQUEST_COMPLETE != '' or INCLUDE_RECEIVED_COMPLETE != null and INCLUDE_RECEIVED_COMPLETE != ''">
                    <choose>
                        <when test="INCLUDE_REQUEST_COMPLETE != null and INCLUDE_REQUEST_COMPLETE != '' and INCLUDE_RECEIVED_COMPLETE != null and INCLUDE_RECEIVED_COMPLETE != ''">
                            AND (B.OUTSIDE_STATUS IS NULL OR B.OUTSIDE_STATUS IN ('OST001', 'OST002', 'OST003'))
                        </when>
                        <when test="INCLUDE_REQUEST_COMPLETE != null and INCLUDE_REQUEST_COMPLETE != ''">
                            AND (B.OUTSIDE_STATUS IS NULL OR B.OUTSIDE_STATUS IN ('OST001', 'OST002'))
                        </when>
                        <when test="INCLUDE_RECEIVED_COMPLETE != null and INCLUDE_RECEIVED_COMPLETE != ''">
                            AND (B.OUTSIDE_STATUS IS NULL OR B.OUTSIDE_STATUS IN ('OST002', 'OST003'))
                        </when>
                    </choose>
                </when>
                <otherwise>
                    AND (B.OUTSIDE_STATUS IS NULL OR B.OUTSIDE_STATUS = 'OST002')
                </otherwise>
            </choose>
<!--            <if test="INCLUDE_RECEIVED_COMPLETE != null and INCLUDE_RECEIVED_COMPLETE != ''">-->
<!--                AND B.OUTSIDE_IN_DT IS NOT NULL-->
<!--            </if>-->
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND B.DRAWING_NUM LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            </if>
            <if test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
                AND B.OUTSIDE_STATUS = #{OUTSIDE_STATUS}
            </if>
            LEFT OUTER JOIN TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                            AND C.INSPECT_SEQ = (   SELECT MAX(INSPECT_SEQ)
                                                                    FROM TBL_INSPECT
                                                                    WHERE CONTROL_SEQ = B.CONTROL_SEQ AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            AND NOT EXISTS (SELECT *
                            FROM TBL_OUTSIDE_CLOSE
                            WHERE CONTROL_SEQ = B.CONTROL_SEQ AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
<!--            AND A.CONTROL_STATUS = 'ORD001' 확정 -->
        <choose>
            <!-- 주문확정일 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC00'">
                AND DATE_FORMAT(A.STATUS_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
             <!-- 외주확정일 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC04'">
                AND DATE_FORMAT(B.OUTSIDE_CONFIRM_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 외주요청일시 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC01'">
                AND DATE_FORMAT(B.OUTSIDE_STATUS_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 요망납기 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC02'">
                AND DATE_FORMAT(B.OUTSIDE_HOPE_DUE_DT, '%Y%m%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
            <!-- 입고일시 -->
            <when test="OUTSIDE_SEARCH_CONDITION == 'OSC03'">
                AND DATE_FORMAT(B.OUTSIDE_IN_DT, '%Y/%m/%d') BETWEEN #{OUTSIDE_MANAGE_START_DATE} AND #{OUTSIDE_MANAGE_END_DATE}
            </when>
        </choose>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        ORDER BY A.CONTROL_NUM, B.PART_NUM
    </select>

    <select id="selectOutsideProcessRequestList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            <include refid="orderMapper.controlPartOrder"/>,
            D.OUTSIDE_REQUEST_SEQ,
            SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1) AS DNJSCLD,
            SF_GET_SIDE_QTY(A.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(B.PART_UNIT_QTY, 1) AS EOCLD
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST_DETAIL D ON D.CONTROL_SEQ = B.CONTROL_SEQ
                                                            AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                                                            AND D.DEL_YN = 'N'
        WHERE
            A.DEL_YN = 'N'
            AND B.CONTROL_SEQ IN (${CONTROL_SEQ})
            AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
    </select>

    <update id="updateOutsideProcessRequest" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            OUTSIDE_REQUEST_FINISH_YN = #{OUTSIDE_REQUEST_FINISH_YN}, <!-- 완제품 -->
            OUTSIDE_REQUEST_PROCESS_YN = #{OUTSIDE_REQUEST_PROCESS_YN}, <!-- 가공 -->
            OUTSIDE_REQUEST_GRIND_YN = #{OUTSIDE_REQUEST_GRIND_YN}, <!-- 연마 -->
            OUTSIDE_REQUEST_SURFACE_YN = #{OUTSIDE_REQUEST_SURFACE_YN}, <!-- 표면 처리 -->
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC}, <!-- 기타사항 -->
            OUTSIDE_HOPE_DUE_DT = #{OUTSIDE_HOPE_DUE_DT}, <!-- 요망 납기 -->
            OUTSIDE_NOTE = #{OUTSIDE_NOTE} <!-- 비고 -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectOutSideCloseVer" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT MAX(C.CLOSE_VER) AS MAX_CLOSE_VER
        FROM TBL_CONTROL A
        INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
        INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND A.COMP_CD = #{COMP_CD}
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            AND CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
        GROUP BY
            A.COMP_CD,
            B.OUTSIDE_COMP_CD,
            C.CLOSE_MONTH,
            C.CLOSE_VER
    </select>

    <select id="selectOutsideCloseLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            X.COMP_CD, <!-- 사업자 -->
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM, <!-- 사업자 -->
            X.OUTSIDE_COMP_CD, <!-- 외주업체(대상업체) -->
            CONCAT('\'', X.OUTSIDE_COMP_CD, '\'') AS OUTSIDE_COMP_CD_QUOTATION, <!-- 외주업체(대상업체) -->
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM, <!-- 외주업체(대상업체) -->
            X.CLOSE_MONTH, <!-- 마감 월 -->
            SUBSTR(X.CLOSE_MONTH, 1, 4) AS OUTSIDE_CLOSE_YEAR,
            SUBSTR(X.CLOSE_MONTH, 5, 2) AS OUTSIDE_CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN,  <!-- 마감 월 -->
            MAX(X.CLOSE_VER) AS CLOSE_VER,  <!-- 차수 -->
            CONCAT(MAX(X.CLOSE_VER), '차') AS VIEW_CLOSE_VER, <!-- 차수 -->
            COUNT(*) AS CNT, <!-- 품수 -->
            CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), ' EA') AS CONTROL_PART_QTY, <!-- 수량 -->
            FORMAT(SUM(X.OUTSIDE_TOTAL_AMT), 0) AS OUTSIDE_TOTAL_AMT, <!-- 외주 금액 -->
            FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT, <!-- 마감 금액 -->
            MAX(X.CLOSE_VER) AS NEW_CLOSE_VER,  <!-- 신규 차수 -->
            0 AS UPDATE_CLOSE_VER <!-- 업데이트 차수(화면에서 신규차수 선택용도) -->
        FROM (
            SELECT
                #{COMP_CD} AS COMP_CD,
                B.OUTSIDE_COMP_CD,
                SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
                CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH}) AS CLOSE_MONTH,
                IFNULL((SELECT MAX(AA.CLOSE_VER)
                        FROM TBL_OUTSIDE_CLOSE AA
                            INNER JOIN TBL_OUTSIDE_CLOSE_NOTE BB ON AA.CLOSE_MONTH = BB.CLOSE_MONTH  AND AA.CLOSE_VER = BB.CLOSE_VER
                                AND BB.OUTSIDE_COMP_CD IN (SELECT OUTSIDE_COMP_CD FROM TBL_CONTROL_PART N WHERE N.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ}))
                        WHERE 1 = 1
                            AND AA.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                            AND B.OUTSIDE_COMP_CD = BB.OUTSIDE_COMP_CD), 0) + 1 AS CLOSE_VER,
                B.OUTSIDE_UNIT_AMT,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT, <!-- 외주 금액 -->
                B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS FINAL_NEGO_AMT
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                LEFT OUTER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
            WHERE 1 = 1
                AND A.DEL_YN = 'N') X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectOutsideCloseRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            SUM(X.STATUS) AS STATUS, <!-- 1: 변경X, 2: 추가, 3: 변경 -->
            X.COMP_CD,
            SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM,
            X.OUTSIDE_COMP_CD,
            CONCAT('\'', X.OUTSIDE_COMP_CD, '\'') AS OUTSIDE_COMP_CD_QUOTATION, <!-- 외주업체(대상업체) -->
            SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            X.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월') AS CLOSE_MONTH_TRAN,
            X.CLOSE_VER,
            CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN,
            SUM(X.CNT) AS CNT,
            CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), ' EA') AS CONTROL_PART_QTY,
            SUM(X.OUTSIDE_TOTAL_AMT) AS OUTSIDE_TOTAL_AMT,
            SUM(X.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
        FROM (
            SELECT
                P.STATUS,
                P.COMP_CD,
                P.OUTSIDE_COMP_CD,
                P.CLOSE_MONTH,
                COUNT(*) AS CNT,
                P.CLOSE_VER,
                SUM(P.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                SUM(P.OUTSIDE_TOTAL_AMT) AS OUTSIDE_TOTAL_AMT,
                P.FINAL_NEGO_AMT
            FROM (
                SELECT
                    1 AS STATUS,
                    D.COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    C.CLOSE_MONTH,
                    C.CLOSE_VER,
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                    B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
                    D.FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                    INNER JOIN TBL_OUTSIDE_CLOSE C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON D.CLOSE_MONTH = C.CLOSE_MONTH AND D.CLOSE_VER = C.CLOSE_VER AND D.OUTSIDE_COMP_CD = B.OUTSIDE_COMP_CD
                WHERE A.DEL_YN = 'N'
                    AND B.OUTSIDE_YN = 'Y'
                    AND B.OUTSIDE_COMP_CD IN (${OUTSIDE_COMP_CD_QUOTATION})
                    AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                    AND D.COMP_CD = #{COMP_CD}) P
            GROUP BY P.COMP_CD, P.OUTSIDE_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER
            UNION ALL
            SELECT
                Q.STATUS,
                Q.COMP_CD,
                Q.OUTSIDE_COMP_CD,
                Q.CLOSE_MONTH,
                COUNT(*) AS CNT,
                Q.CLOSE_VER,
                SUM(Q.CONTROL_PART_QTY) AS CONTROL_PART_QTY,
                SUM(Q.OUTSIDE_TOTAL_AMT) AS OUTSIDE_TOTAL_AMT,
                SUM(Q.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT
                    2 AS STATUS,
                    #{COMP_CD} AS COMP_CD,
                    B.OUTSIDE_COMP_CD,
                    CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH}) AS CLOSE_MONTH,
                    <choose>
                        <when test="CLOSE_VER !='' and CLOSE_VER != null">
                            #{CLOSE_VER} AS CLOSE_VER,
                        </when>
                        <otherwise>
                            IFNULL((SELECT MAX(M.CLOSE_VER)
                            FROM TBL_OUTSIDE_CLOSE_NOTE M
                            WHERE M.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                                AND M.OUTSIDE_COMP_CD = B.OUTSIDE_COMP_CD), 0) + 1 AS CLOSE_VER,
                        </otherwise>
                    </choose>
                    SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
                    B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
                    B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS FINAL_NEGO_AMT
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                WHERE 1 = 1
                    AND A.DEL_YN = 'N'
                    AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                    AND NOT EXISTS ( SELECT *
                                     FROM TBL_CONTROL M
                                              INNER JOIN TBL_CONTROL_PART N ON M.CONTROL_SEQ = N.CONTROL_SEQ
                                              INNER JOIN TBL_OUTSIDE_CLOSE O ON N.CONTROL_SEQ = O.CONTROL_SEQ AND N.CONTROL_DETAIL_SEQ = O.CONTROL_DETAIL_SEQ
                                              INNER JOIN TBL_OUTSIDE_CLOSE_NOTE P ON P.CLOSE_MONTH = O.CLOSE_MONTH AND P.CLOSE_VER = O.CLOSE_VER AND P.OUTSIDE_COMP_CD = N.OUTSIDE_COMP_CD
                                     WHERE M.DEL_YN = 'N'
                                        AND N.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                                        AND N.OUTSIDE_COMP_CD IN (${OUTSIDE_COMP_CD_QUOTATION})
                                        AND O.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                                        <if test="CLOSE_VER != null and CLOSE_VER != ''">
                                            AND O.CLOSE_VER = #{CLOSE_VER}
                                        </if>
                                        AND P.COMP_CD = #{COMP_CD} ) ) Q
            GROUP BY Q.COMP_CD, Q.OUTSIDE_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <update id="updateOutsideCloseRequest" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST
        SET
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD},
        </if>
        <if test="OUTSIDE_GFILE_SEQ != null and OUTSIDE_GFILE_SEQ != ''">
            OUTSIDE_GFILE_SEQ = #{OUTSIDE_GFILE_SEQ},
        </if>
        <if test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
            OUTSIDE_STATUS = #{OUTSIDE_STATUS},
        </if>
        <if test="NOTE != null and NOTE != ''">
            NOTE = #{NOTE},
        </if>
            STATUS_DT = NOW()
        WHERE
            OUTSIDE_REQUEST_SEQ = #{OUTSIDE_REQUEST_SEQ}
    </update>

    <insert id="createOutsideClose" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_CLOSE (
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            CLOSE_DT
        ) VALUES (
            #{CLOSE_MONTH},
            #{CLOSE_VER},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NOW()
        ) ON DUPLICATE KEY
	        UPDATE
		        CLOSE_DT = NOW()
    </insert>

    <insert id="createOutsideCloseHistory" parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_OUTSIDE_CLOSE_HISTORY (
            HISTORY_SEQ,
            HISTORY_DT,
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ
        ) VALUES (
            NEXTVAL(SEQ_OUTSIDE_CLOSE_HISTORY),
            NOW(),
            #{CLOSE_MONTH},
            CAST(#{CLOSE_VER} AS INTEGER),
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ}
        )
    </insert>

    <insert id="createOutsideCloseNote" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_CLOSE_NOTE (
            CLOSE_MONTH,
            CLOSE_VER,
            COMP_CD,
            OUTSIDE_COMP_CD,
            CLOSE_NOTE,
            FINAL_NEGO_AMT,
            INSERT_ID
        ) VALUES (
            #{CLOSE_MONTH},
            #{CLOSE_VER},
            #{COMP_CD},
            #{OUTSIDE_COMP_CD},
            #{CLOSE_NOTE},
            REPLACE(#{FINAL_NEGO_AMT}, ',', SPACE(0)),
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                CLOSE_NOTE = #{CLOSE_NOTE},
                FINAL_NEGO_AMT = REPLACE(#{FINAL_NEGO_AMT}, ',', SPACE(0)),
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateOutsideCloseFinalNego" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_CLOSE_NOTE
        SET
            FINAL_NEGO_AMT = REPLACE(REPLACE(#{FINAL_NEGO_AMT}, ',', SPACE(0)), '-', 0)
        WHERE CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </update>

    <select id="selectOutsideCloseHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            (SELECT M.UNIT_FINAL_AMT FROM TBL_CONTROL_PART_ORDER_MAIN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ) AS UNIT_FINAL_AMT,
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT2,
            DATE_FORMAT(STR_TO_DATE(C.CLOSE_MONTH, '%Y%m'), '%Y.%m') AS OUTSIDE_CLOSE_MONTH,
            C.CLOSE_VER AS OUTSIDE_CLOSE_VER,
            SF_GET_DATE_F(C.CLOSE_DT, 'YY', 'M') AS OUTSIDE_CLOSE_DT,
            SF_GET_COMP_NM(D.COMP_CD) AS OUTSIDE_CLOSE_COMP_NM,
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
            IFNULL( CASE
                        WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.OUTSIDE_UNIT_AMT
                                                                    FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                        AND M.OUTSIDE_YN = 'Y'
                                                                        AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                        AND N.DEL_YN = 'N'
                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                    LIMIT 1)
                        ELSE (  SELECT M.OUTSIDE_UNIT_AMT
                                FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                    AND M.OUTSIDE_YN = 'Y'
                                    AND M.DRAWING_NUM = B.DRAWING_NUM
                                    AND N.CONTROL_STATUS = 'ORD003'
                                    AND N.DEL_YN = 'N'
                                    AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                ORDER BY M.CONTROL_SEQ DESC
                                LIMIT 1)
            END, SPACE(0)) AS PREV_OUTSIDE_UNIT_AMT, <!-- 외주 종전가 -->
            E.INSPECT_NUM, <!-- SEQ -->
            E.INSPECT_GRADE, <!-- 등급 -->
            SF_GET_CODE_NM('1040', E.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM, <!-- 등급 -->
            E.INSPECT_RESULT, <!-- 불량코드 -->
            CASE E.INSPECT_TYPE
                WHEN '1' THEN IF(E.INSPECT_GRADE = 'GRD040', SF_GET_CODE_NM('1020', E.INSPECT_RESULT, #{LOGIN_LOCALE}), NULL)
                WHEN '2' THEN SF_GET_CODE_NM('1021', E.INSPECT_RESULT, #{LOGIN_LOCALE})
            END AS INSPECT_RESULT_NM,  <!-- 불량코드 -->
            SF_GET_DATE_F(E.INSERT_DT, '', 'M') AS INSPECT_DT,
            SF_GET_DATE_F(B.OUTSIDE_CONFIRM_DT, '', 'M') AS OUTSIDE_CONFIRM_DT2, <!-- 외주 확정일시 -->
            (SELECT CASE WHEN B.OUTSIDE_STATUS IN ('OST001', 'OST003', 'OST004') THEN SF_GET_DATE_F(INSERT_DT, '', 'M') ELSE NULL END AS OUTSIDE_REQUEST_DT
            FROM TBL_OUTSIDE_REQUEST_DETAIL
            WHERE B.CONTROL_SEQ = CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ AND DEL_YN = 'N'
            ORDER BY INSERT_DT DESC
            LIMIT 1) AS OUTSIDE_REQUEST_DT
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE_NOTE D ON  D.CLOSE_MONTH = C.CLOSE_MONTH
                AND D.CLOSE_VER = C.CLOSE_VER
                AND D.OUTSIDE_COMP_CD = B.OUTSIDE_COMP_CD
            LEFT OUTER JOIN TBL_INSPECT E ON B.CONTROL_SEQ = E.CONTROL_SEQ
                 AND B.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
                 AND E.INSPECT_SEQ = (  SELECT MAX(INSPECT_SEQ)
                                        FROM TBL_INSPECT
                                        WHERE CONTROL_SEQ = B.CONTROL_SEQ
                                            AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ )
        WHERE A.DEL_YN = 'N'
            AND B.OUTSIDE_STATUS = 'OST004'
            <if test="OUTSIDE_CLOSE_YEAR != null and OUTSIDE_CLOSE_YEAR != ''">
                <choose>
                    <when test="OUTSIDE_CLOSE_MONTH != null and OUTSIDE_CLOSE_MONTH != ''">
                        AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                    </when>
                    <otherwise>
                        AND SUBSTRING(C.CLOSE_MONTH, 1, 4) = #{OUTSIDE_CLOSE_YEAR}
                    </otherwise>
                </choose>
            </if>
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM LIKE CONCAT('%', #{CONTROL_NUM}, '%')
        </if>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
            AND B.DRAWING_NUM LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        ORDER BY C.CLOSE_MONTH, C.CLOSE_VER, A.COMP_CD, A.ORDER_COMP_CD, A.CONTROL_NUM, B.PART_NUM
    </select>

    <select id="selectOutsideCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT 1 AS GROUP_KEY
            , ROW_NUMBER () OVER (ORDER BY COMP_NM, `YEAR`, `QUARTER`, FINISH_MONTH, OUTSIDE_COMP_NM, X.CLOSE_VER) AS ROW_NUM
            , X.COMP_CD
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM
            , X.CLOSE_MONTH
            , SUBSTR(X.CLOSE_MONTH, 1, 4) AS `YEAR`
            , CONCAT(QUARTER(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m')), '분기') AS `QUARTER`
            , CONCAT(SUBSTR(X.CLOSE_MONTH, 5), '월') AS FINISH_MONTH
            , X.CLOSE_VER
            , CONCAT(X.CLOSE_VER, '차') AS VIEW_CLOSE_VER
            , X.OUTSIDE_COMP_CD
            , SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , COUNT(*) AS ITEM_NUMBER
            , SUM(X.CONTROL_PART_QTY) AS CONTROL_PART_QTY
            , SUM(X.ORIGINAL_ORDER_AMT) AS ORIGINAL_ORDER_AMT
            , SUM(X.OUTSIDE_ORDER_AMT) AS OUTSIDE_ORDER_AMT
            , X.FINAL_NEGO_AMT
            , X.VAT_AMOUNT
            , X.TOTAL_AMOUNT
            , X.OUTISDE_CLOSE_NOTE_INSERT_UPDATE_DT
            , X.CLOSE_NOTE
        FROM (
                SELECT E.COMP_CD
                    , D.CLOSE_MONTH
                    , D.CLOSE_VER
                    , B.OUTSIDE_COMP_CD
                    , SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY
                    , SF_GET_CONTROL_FINAL_AMT(A.CONTROL_SEQ) AS ORIGINAL_ORDER_AMT <!-- 원 발주 금액 -->
                    , B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_ORDER_AMT <!-- 외주 발주 금액 -->
                    , E.FINAL_NEGO_AMT <!-- 외주 마감 금액 -->
                    , E.FINAL_NEGO_AMT * 0.1 AS VAT_AMOUNT <!-- 부가세 -->
                    , E.FINAL_NEGO_AMT + E.FINAL_NEGO_AMT * 0.1 AS TOTAL_AMOUNT <!-- 부가세 합계금액 -->
                    , SF_GET_DATE_F(CASE WHEN IFNULL(TIMESTAMPDIFF(SECOND, E.INSERT_DT, E.UPDATE_DT), -1) <![CDATA[ < ]]> 0 THEN E.INSERT_DT ELSE E.UPDATE_DT END, 'YY', 'M') AS OUTISDE_CLOSE_NOTE_INSERT_UPDATE_DT <!-- 업데이트 일시 -->
                    , E.CLOSE_NOTE
                FROM TBL_CONTROL A
                    INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
                    INNER JOIN TBL_OUTSIDE_CLOSE D ON D.CONTROL_SEQ = B.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_OUTSIDE_CLOSE_NOTE E ON E.OUTSIDE_COMP_CD = B.OUTSIDE_COMP_CD
                        AND E.CLOSE_MONTH = D.CLOSE_MONTH
                        AND E.CLOSE_VER = D.CLOSE_VER
                WHERE A.DEL_YN = 'N'
                    AND B.OUTSIDE_YN = 'Y'
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND E.COMP_CD = #{COMP_CD}
                </if>
                <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                    AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                </if>
                <choose>
                    <when test="RANGE_SEARCH != null and RANGE_SEARCH != ''">
                        AND (D.CLOSE_MONTH BETWEEN DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_RIGHT}, #{CLOSE_MONTH_RIGHT}), '%Y%m'), '%Y%m'))
                    </when>
                    <otherwise>
                        AND D.CLOSE_MONTH = DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m')
                    </otherwise>
                </choose>
                <choose>
                    <when test="CLOSE_VER != null and CLOSE_VER != ''">
                        AND D.CLOSE_VER = #{CLOSE_VER}
                    </when>
                    <otherwise>
                        AND D.CLOSE_VER = ( SELECT MAX(CLOSE_VER)
                                            FROM TBL_OUTSIDE_CLOSE
                                            WHERE D.CLOSE_MONTH = CLOSE_MONTH
                                            AND D.CONTROL_SEQ = CONTROL_SEQ
                                            AND D.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ )
                    </otherwise>
                </choose>
                <if test="CLOSE_NOTE != null and CLOSE_NOTE != ''">
                    AND E.CLOSE_NOTE LIKE CONCAT('%', #{CLOSE_NOTE}, '%')
                </if>
        ) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY COMP_NM, `YEAR`, `QUARTER`, FINISH_MONTH, OUTSIDE_COMP_NM, X.CLOSE_VER
    </select>

    <update id="updateOutsideCloseNote" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_OUTSIDE_CLOSE_NOTE
        SET
            CLOSE_NOTE = #{CLOSE_NOTE},
            FINAL_NEGO_AMT = #{FINAL_NEGO_AMT}
        WHERE CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </update>

    <select id="selectOutsideYearCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER (ORDER BY X.YYYY, X.COMP_CD, X.OUTSIDE_COMP_CD, X.STATUS_TYPE) AS ROW_NUM
            , X.YYYY
            , X.MM
            , X.COMP_CD
            , X.COMP_NM
            , X.OUTSIDE_COMP_CD
            , X.OUTSIDE_COMP_NM
            , X.STATUS_TYPE
            , SUM(X.`01_AMT`) AS `01_AMT`
            , SUM(X.`02_AMT`) AS `02_AMT`
            , SUM(X.`03_AMT`) AS `03_AMT`
            , SUM(X.`03_SUM_AMT`) AS `03_SUM_AMT`
            , SUM(X.`04_AMT`) AS `04_AMT`
            , SUM(X.`05_AMT`) AS `05_AMT`
            , SUM(X.`06_AMT`) AS `06_AMT`
            , SUM(X.`06_SUM_AMT`) AS `06_SUM_AMT`
            , SUM(X.`07_AMT`) AS `07_AMT`
            , SUM(X.`08_AMT`) AS `08_AMT`
            , SUM(X.`09_AMT`) AS `09_AMT`
            , SUM(X.`09_SUM_AMT`) AS `09_SUM_AMT`
            , SUM(X.`10_AMT`) AS `10_AMT`
            , SUM(X.`11_AMT`) AS `11_AMT`
            , SUM(X.`12_AMT`) AS `12_AMT`
            , SUM(X.`12_SUM_AMT`) AS `12_SUM_AMT`
            , SUM(X.TOTAL_AMT) AS TOTAL_AMT
        FROM (
            SELECT
                H.YYYY
                , H.MM
                , H.COMP_CD
                , SF_GET_COMP_NM(H.COMP_CD) AS COMP_NM
                , H.OUTSIDE_COMP_CD
                , SF_GET_COMP_NM(H.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , CASE WHEN STATUS_TYPE = '1' THEN '외주금액' ELSE '원발주 금액' END STATUS_TYPE
                , CASE WHEN H.MM = '01' THEN H.ORDER_AMT ELSE 0 END AS `01_AMT`
                , CASE WHEN H.MM = '02' THEN H.ORDER_AMT ELSE 0 END AS `02_AMT`
                , CASE WHEN H.MM = '03' THEN H.ORDER_AMT ELSE 0 END AS `03_AMT`
                , CASE WHEN H.MM IN ('01', '02', '03') THEN H.ORDER_AMT ELSE 0 END AS `03_SUM_AMT`
                , CASE WHEN H.MM = '04' THEN H.ORDER_AMT ELSE 0 END AS `04_AMT`
                , CASE WHEN H.MM = '05' THEN H.ORDER_AMT ELSE 0 END AS `05_AMT`
                , CASE WHEN H.MM = '06' THEN H.ORDER_AMT ELSE 0 END AS `06_AMT`
                , CASE WHEN H.MM IN ('04', '05', '06') THEN H.ORDER_AMT ELSE 0 END AS `06_SUM_AMT`
                , CASE WHEN H.MM = '07' THEN H.ORDER_AMT ELSE 0 END AS `07_AMT`
                , CASE WHEN H.MM = '08' THEN H.ORDER_AMT ELSE 0 END AS `08_AMT`
                , CASE WHEN H.MM = '09' THEN H.ORDER_AMT ELSE 0 END AS `09_AMT`
                , CASE WHEN H.MM IN ('07', '08', '09') THEN H.ORDER_AMT ELSE 0 END AS `09_SUM_AMT`
                , CASE WHEN H.MM = '10' THEN H.ORDER_AMT ELSE 0 END AS `10_AMT`
                , CASE WHEN H.MM = '11' THEN H.ORDER_AMT ELSE 0 END AS `11_AMT`
                , CASE WHEN H.MM = '12' THEN H.ORDER_AMT ELSE 0 END AS `12_AMT`
                , CASE WHEN H.MM IN ('10', '11', '12') THEN H.ORDER_AMT ELSE 0 END AS `12_SUM_AMT`
                , H.ORDER_AMT AS TOTAL_AMT
            FROM (
                SELECT
                    F.YYYY
                    , F.MM
                    , G.COMP_CD
                    , G.STATUS_TYPE
                    , G.OUTSIDE_COMP_CD
                    , G.ORDER_AMT
                FROM TBL_YYYYMMDD F
                    INNER JOIN (
                        SELECT
                            K.STATUS_TYPE
                            , K.COMP_CD
                            , K.OUTSIDE_COMP_CD
                            , K.CLOSE_MONTH
                            , K.ORDER_AMT
                        FROM (
							SELECT '1' AS STATUS_TYPE
						    	, A.COMP_CD
						    	, A.OUTSIDE_COMP_CD
						    	, A.CLOSE_MONTH
						        , SUM(C.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ)) AS ORDER_AMT -- 외주 발주 금액 -->
						    FROM TBL_OUTSIDE_CLOSE_NOTE A
						    	INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
						    	INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND C.OUTSIDE_COMP_CD = A.OUTSIDE_COMP_CD
						    	INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ
							WHERE D.DEL_YN = 'N'
								AND C.OUTSIDE_YN = 'Y'
								AND SUBSTR(A.CLOSE_MONTH, 1, 4) = #{YEAR}
							    <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                                <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                    AND A.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                                </if>
						    GROUP BY A.CLOSE_MONTH, A.COMP_CD, A.OUTSIDE_COMP_CD
						    UNION ALL
							SELECT '2' AS STATUS_TYPE
						    	, A.COMP_CD
						    	, A.OUTSIDE_COMP_CD
						    	, A.CLOSE_MONTH
						        , SUM(SF_GET_CONTROL_FINAL_AMT(D.CONTROL_SEQ)) AS ORDER_AMT -- 원 발주 금액 -->
						    FROM TBL_OUTSIDE_CLOSE_NOTE A
						    	INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
						    	INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND C.OUTSIDE_COMP_CD = A.OUTSIDE_COMP_CD
						    	INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ
							WHERE D.DEL_YN = 'N'
								AND C.OUTSIDE_YN = 'Y'
								AND SUBSTR(A.CLOSE_MONTH, 1, 4) = #{YEAR}
							    <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                                <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                    AND A.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                                </if>
						    GROUP BY A.CLOSE_MONTH, A.COMP_CD, A.OUTSIDE_COMP_CD
                        ) K
                    ) G ON CONCAT(F.YYYY, F.MM) = G.CLOSE_MONTH
                WHERE F.YYYY = #{YEAR}
                GROUP BY G.CLOSE_MONTH, G.COMP_CD, G.OUTSIDE_COMP_CD, G.STATUS_TYPE
            ) H
        ) X
        WHERE 1 = 1
        <if test="ORIGINAL_ORDER_AMOUNT == null">
            AND X.STATUS_TYPE = '외주금액'
        </if>
        GROUP BY X.YYYY, X.COMP_CD, X.OUTSIDE_COMP_CD, X.STATUS_TYPE
        ORDER BY X.YYYY, X.COMP_CD, X.OUTSIDE_COMP_CD, X.STATUS_TYPE
    </select>

    <select id="selectOutsideYearCloseStatusSummary" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT NULL AS ROW_NUM
            , X.YYYY
            , X.MM
            , NULL AS COMP_CD
            , NULL AS COMP_NM
            , NULL AS OUTSIDE_COMP_CD
            , NULL AS OUTSIDE_COMP_NM
            , X.STATUS_TYPE
            , SUM(X.`01_AMT`) AS `01_AMT`
            , SUM(X.`02_AMT`) AS `02_AMT`
            , SUM(X.`03_AMT`) AS `03_AMT`
            , SUM(X.`03_SUM_AMT`) AS `03_SUM_AMT`
            , SUM(X.`04_AMT`) AS `04_AMT`
            , SUM(X.`05_AMT`) AS `05_AMT`
            , SUM(X.`06_AMT`) AS `06_AMT`
            , SUM(X.`06_SUM_AMT`) AS `06_SUM_AMT`
            , SUM(X.`07_AMT`) AS `07_AMT`
            , SUM(X.`08_AMT`) AS `08_AMT`
            , SUM(X.`09_AMT`) AS `09_AMT`
            , SUM(X.`09_SUM_AMT`) AS `09_SUM_AMT`
            , SUM(X.`10_AMT`) AS `10_AMT`
            , SUM(X.`11_AMT`) AS `11_AMT`
            , SUM(X.`12_AMT`) AS `12_AMT`
            , SUM(X.`12_SUM_AMT`) AS `12_SUM_AMT`
            , SUM(X.TOTAL_AMT) AS TOTAL_AMT
        FROM (
            SELECT
                H.YYYY
                , H.MM
                , H.COMP_CD
                , SF_GET_COMP_NM(H.COMP_CD) AS COMP_NM
                , H.OUTSIDE_COMP_CD
                , SF_GET_COMP_NM(H.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , CASE WHEN STATUS_TYPE = '1' THEN '외주금액' ELSE '원발주 금액' END STATUS_TYPE
                , CASE WHEN H.MM = '01' THEN H.ORDER_AMT ELSE 0 END AS `01_AMT`
                , CASE WHEN H.MM = '02' THEN H.ORDER_AMT ELSE 0 END AS `02_AMT`
                , CASE WHEN H.MM = '03' THEN H.ORDER_AMT ELSE 0 END AS `03_AMT`
                , CASE WHEN H.MM IN ('01', '02', '03') THEN H.ORDER_AMT ELSE 0 END AS `03_SUM_AMT`
                , CASE WHEN H.MM = '04' THEN H.ORDER_AMT ELSE 0 END AS `04_AMT`
                , CASE WHEN H.MM = '05' THEN H.ORDER_AMT ELSE 0 END AS `05_AMT`
                , CASE WHEN H.MM = '06' THEN H.ORDER_AMT ELSE 0 END AS `06_AMT`
                , CASE WHEN H.MM IN ('04', '05', '06') THEN H.ORDER_AMT ELSE 0 END AS `06_SUM_AMT`
                , CASE WHEN H.MM = '07' THEN H.ORDER_AMT ELSE 0 END AS `07_AMT`
                , CASE WHEN H.MM = '08' THEN H.ORDER_AMT ELSE 0 END AS `08_AMT`
                , CASE WHEN H.MM = '09' THEN H.ORDER_AMT ELSE 0 END AS `09_AMT`
                , CASE WHEN H.MM IN ('07', '08', '09') THEN H.ORDER_AMT ELSE 0 END AS `09_SUM_AMT`
                , CASE WHEN H.MM = '10' THEN H.ORDER_AMT ELSE 0 END AS `10_AMT`
                , CASE WHEN H.MM = '11' THEN H.ORDER_AMT ELSE 0 END AS `11_AMT`
                , CASE WHEN H.MM = '12' THEN H.ORDER_AMT ELSE 0 END AS `12_AMT`
                , CASE WHEN H.MM IN ('10', '11', '12') THEN H.ORDER_AMT ELSE 0 END AS `12_SUM_AMT`
                , H.ORDER_AMT AS TOTAL_AMT
            FROM (
                SELECT
                    F.YYYY
                    , F.MM
                    , G.COMP_CD
                    , G.STATUS_TYPE
                    , G.OUTSIDE_COMP_CD
                    , G.ORDER_AMT
                FROM TBL_YYYYMMDD F
                    INNER JOIN (
                        SELECT
                            K.STATUS_TYPE
                            , K.COMP_CD
                            , K.OUTSIDE_COMP_CD
                            , K.CLOSE_MONTH
                            , K.ORDER_AMT
                        FROM (
							SELECT '1' AS STATUS_TYPE
						    	, A.COMP_CD
						    	, A.OUTSIDE_COMP_CD
						    	, A.CLOSE_MONTH
						        , SUM(C.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ)) AS ORDER_AMT -- 외주 발주 금액 -->
						    FROM TBL_OUTSIDE_CLOSE_NOTE A
						    	INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
						    	INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND C.OUTSIDE_COMP_CD = A.OUTSIDE_COMP_CD
						    	INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ
							WHERE D.DEL_YN = 'N'
								AND C.OUTSIDE_YN = 'Y'
								AND SUBSTR(A.CLOSE_MONTH, 1, 4) = #{YEAR}
							    <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                                <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                    AND A.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                                </if>
						    GROUP BY A.CLOSE_MONTH, A.COMP_CD, A.OUTSIDE_COMP_CD
						    UNION ALL
							SELECT '2' AS STATUS_TYPE
						    	, A.COMP_CD
						    	, A.OUTSIDE_COMP_CD
						    	, A.CLOSE_MONTH
						        , SUM(SF_GET_CONTROL_FINAL_AMT(D.CONTROL_SEQ)) AS ORDER_AMT -- 원 발주 금액 -->
						    FROM TBL_OUTSIDE_CLOSE_NOTE A
						    	INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
						    	INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND C.OUTSIDE_COMP_CD = A.OUTSIDE_COMP_CD
						    	INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ
							WHERE D.DEL_YN = 'N'
								AND C.OUTSIDE_YN = 'Y'
								AND SUBSTR(A.CLOSE_MONTH, 1, 4) = #{YEAR}
							    <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                                <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                    AND A.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                                </if>
						    GROUP BY A.CLOSE_MONTH, A.COMP_CD, A.OUTSIDE_COMP_CD
                        ) K
                    ) G ON CONCAT(F.YYYY, F.MM) = G.CLOSE_MONTH
                WHERE F.YYYY = #{YEAR}
                GROUP BY G.CLOSE_MONTH, G.COMP_CD, G.OUTSIDE_COMP_CD, G.STATUS_TYPE
            ) H
        ) X
        WHERE 1 = 1
        <if test="ORIGINAL_ORDER_AMOUNT == null">
            AND X.STATUS_TYPE = '외주금액'
        </if>
        GROUP BY X.YYYY, X.STATUS_TYPE
        ORDER BY X.YYYY, X.STATUS_TYPE
    </select>

    <select id="selectOutsideCloseCancelLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM
            , X.ORDER_COMP_CD
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , X.OUTSIDE_COMP_CD
            , SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.CLOSE_MONTH
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN
            , X.CLOSE_VER
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN
            , COUNT(*) AS CNT
            , CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') AS CONTROL_PART_QTY
            , FORMAT(SUM(X.TOTAL_AMT), 0) AS TOTAL_AMT
            , FORMAT(X.FINAL_NEGO_AMT, 0) AS FINAL_NEGO_AMT
        FROM (
            SELECT A.COMP_CD
                , D.ORDER_COMP_CD
                , C.OUTSIDE_COMP_CD
                , A.CLOSE_MONTH
                , A.CLOSE_VER
                , SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY
                , C.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS TOTAL_AMT
                , A.FINAL_NEGO_AMT
            FROM TBL_OUTSIDE_CLOSE_NOTE A
                INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
                INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    AND A.OUTSIDE_COMP_CD = C.OUTSIDE_COMP_CD AND C.OUTSIDE_YN = 'Y'
                INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ AND DEL_YN = 'N'
            WHERE (A.CLOSE_MONTH, A.COMP_CD, C.OUTSIDE_COMP_CD, D.ORDER_COMP_CD) IN ( SELECT M.CLOSE_MONTH, M.COMP_CD, M.OUTSIDE_COMP_CD, P.ORDER_COMP_CD
                                                                                      FROM TBL_OUTSIDE_CLOSE_NOTE M
                                                                                        INNER JOIN TBL_OUTSIDE_CLOSE N ON N.CLOSE_MONTH = M.CLOSE_MONTH AND N.CLOSE_VER = M.CLOSE_VER
                                                                                            AND N.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                                                                                        INNER JOIN TBL_CONTROL_PART O ON O.CONTROL_SEQ = N.CONTROL_SEQ AND O.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                                                            AND M.OUTSIDE_COMP_CD = O.OUTSIDE_COMP_CD AND O.OUTSIDE_YN = 'Y'
                                                                                        INNER JOIN TBL_CONTROL P ON P.CONTROL_SEQ = O.CONTROL_SEQ AND DEL_YN = 'N')) X
        GROUP BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>

    <select id="selectOutsideCloseCancelRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.COMP_CD
            , SF_GET_COMP_NM(X.COMP_CD) AS COMP_NM
            , X.ORDER_COMP_CD
            , SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , X.OUTSIDE_COMP_CD
            , SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
            , X.CLOSE_MONTH
            , DATE_FORMAT(STR_TO_DATE(X.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN
            , X.CLOSE_VER
            , CONCAT(X.CLOSE_VER, '차') AS CLOSE_VER_TRAN
            , CASE WHEN SUM(X.CNT) > 0 THEN FORMAT(SUM(X.CNT), 0) ELSE '-' END AS CNT
            , CASE WHEN SUM(X.CONTROL_PART_QTY) > 0 THEN CONCAT(CAST(SUM(X.CONTROL_PART_QTY) AS CHAR), '건') ELSE '-' END AS CONTROL_PART_QTY
            , CASE WHEN SUM(X.TOTAL_AMT) > 0 THEN FORMAT(SUM(X.TOTAL_AMT), 0) ELSE '-' END AS TOTAL_AMT
            , CASE WHEN SUM(X.FINAL_NEGO_AMT) > 0 THEN FORMAT(SUM(X.FINAL_NEGO_AMT), 0) ELSE '-' END AS FINAL_NEGO_AMT
        FROM (
            SELECT Q.COMP_CD
                , Q.ORDER_COMP_CD
                , Q.OUTSIDE_COMP_CD
                , Q.CLOSE_MONTH
                , Q.CLOSE_VER
                , SUM(Q.CONTROL_PART_QTY) AS CONTROL_PART_QTY
                , COUNT(*) AS CNT
                , SUM(Q.TOTAL_AMT) AS TOTAL_AMT
                , Q.FINAL_NEGO_AMT
            FROM (
                SELECT A.COMP_CD
                    , D.ORDER_COMP_CD
                    , C.OUTSIDE_COMP_CD
                    , A.CLOSE_MONTH
                    , A.CLOSE_VER
                    , SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY
                    , C.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS TOTAL_AMT
                    , A.FINAL_NEGO_AMT
                FROM TBL_OUTSIDE_CLOSE_NOTE A
                    INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
                    INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                        AND A.OUTSIDE_COMP_CD = C.OUTSIDE_COMP_CD AND C.OUTSIDE_YN = 'Y'
                    INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ AND DEL_YN = 'N'
                WHERE (A.CLOSE_MONTH, A.COMP_CD, C.OUTSIDE_COMP_CD, D.ORDER_COMP_CD) IN ( SELECT M.CLOSE_MONTH, M.COMP_CD, M.OUTSIDE_COMP_CD, P.ORDER_COMP_CD
                                                                                          FROM TBL_OUTSIDE_CLOSE_NOTE M
                                                                                            INNER JOIN TBL_OUTSIDE_CLOSE N ON N.CLOSE_MONTH = M.CLOSE_MONTH AND N.CLOSE_VER = M.CLOSE_VER
                                                                                                AND N.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                                                                                            INNER JOIN TBL_CONTROL_PART O ON O.CONTROL_SEQ = N.CONTROL_SEQ AND O.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                                                                AND M.OUTSIDE_COMP_CD = O.OUTSIDE_COMP_CD AND O.OUTSIDE_YN = 'Y'
                                                                                            INNER JOIN TBL_CONTROL P ON P.CONTROL_SEQ = O.CONTROL_SEQ AND DEL_YN = 'N')) Q
                GROUP BY Q.COMP_CD, Q.ORDER_COMP_CD, Q.OUTSIDE_COMP_CD, Q.CLOSE_MONTH, Q.CLOSE_VER
            UNION ALL
            SELECT P.COMP_CD
                , P.ORDER_COMP_CD
                , P.OUTSIDE_COMP_CD
                , P.CLOSE_MONTH
                , P.CLOSE_VER
                , SUM(P.CONTROL_PART_QTY) AS CONTROL_PART_QTY
                , COUNT(*) * -1 AS CNT
                , SUM(P.TOTAL_AMT) AS TOTAL_AMT
                , SUM(P.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
            FROM (
                SELECT A.COMP_CD
                    , D.ORDER_COMP_CD
                    , C.OUTSIDE_COMP_CD
                    , A.CLOSE_MONTH
                    , A.CLOSE_VER
                    , SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) * -1 AS CONTROL_PART_QTY
                    , C.OUTSIDE_UNIT_AMT * -1 * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS TOTAL_AMT
                    , C.OUTSIDE_UNIT_AMT * -1 * SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS FINAL_NEGO_AMT
                FROM TBL_OUTSIDE_CLOSE_NOTE A
                    INNER JOIN TBL_OUTSIDE_CLOSE B ON B.CLOSE_MONTH = A.CLOSE_MONTH AND B.CLOSE_VER = A.CLOSE_VER
                        AND B.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
                    INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                        AND A.OUTSIDE_COMP_CD = C.OUTSIDE_COMP_CD AND C.OUTSIDE_YN = 'Y'
                    INNER JOIN TBL_CONTROL D ON D.CONTROL_SEQ = C.CONTROL_SEQ AND DEL_YN = 'N') P
            GROUP BY P.COMP_CD, P.ORDER_COMP_CD, P.OUTSIDE_COMP_CD, P.CLOSE_MONTH, P.CLOSE_VER) X
        GROUP BY X.COMP_CD, X.ORDER_COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
        ORDER BY X.COMP_CD, X.ORDER_COMP_CD, X.OUTSIDE_COMP_CD, X.CLOSE_MONTH, X.CLOSE_VER
    </select>
    <select id="selectRequestOutsideMailContent" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT REPLACE(TEMPLATE_CONTENT, '%COMP_CD%', (SELECT COMP_NM FROM TBL_COMPANY WHERE COMP_CD = #{COMP_CD})) AS TEMPLATE_CONTENT
        FROM TBL_MAIL_TEMPLATE
        WHERE TEMPLATE_SEQ = #{TEMPLATE_SEQ}
    </select>

    <select id="selectOutsideMailDestination" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM,
            A.STAFF_SEQ,
            A.COMP_CD,
            A.STAFF_NM,
            A.STAFF_EMAIL,
            A.STAFF_TEL,
            A.MAIN_YN
        FROM TBL_COMPANY_STAFF A
            INNER JOIN TBL_COMPANY B ON B.COMP_CD = A.COMP_CD AND B.DEL_YN = 'N'
            	AND B.COMP_CD = #{OUTSIDE_COMP_CD}
        WHERE A.DEL_YN = 'N'
    </select>

    <insert id="createOutsideRequest" parameterType="java.util.HashMap" >
        <selectKey keyProperty="OUTSIDE_REQUEST_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_OUTSIDE_REQUEST)
        </selectKey>
        INSERT INTO TBL_OUTSIDE_REQUEST (
            OUTSIDE_REQUEST_SEQ,
            OUTSIDE_ORDER_NUM,
            OUTSIDE_COMP_CD,
            OUTSIDE_GFILE_SEQ,
            <!-- OUTSIDE_STATUS, -->
            <!-- STATUS_DT, -->
            NOTE,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            #{OUTSIDE_ORDER_NUM},
            #{OUTSIDE_COMP_CD},
            #{GFILE_SEQ},
            <!-- #{OUTSIDE_STATUS}, -->
            <!-- NOW(), -->
            REPLACE(#{EMAIL_CONTENT_TXT}, 'undefined', SPACE(0)),
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="createOutsideRequestDetail" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_REQUEST_DETAIL (
            OUTSIDE_REQUEST_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="createOutsideRequestReceiver" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_REQUEST_RECEIVER (
            OUTSIDE_REQUEST_SEQ,
            SEQ,
            RECEIVER_NM,
            RECEIVER_EMAIL,
            INSERT_ID
        ) VALUES (
            #{OUTSIDE_REQUEST_SEQ},
            NEXTVAL(SEQ_DUMMY),
            #{STAFF_NM},
            #{STAFF_EMAIL},
            NOW()
        )
    </insert>

    <insert id="createMailAttachCadFilePlus" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_FILE
        (FILE_SEQ, FILE_NM, FILE_PATH, TIME_PATH, ORGINAL_FILE_NM, FILE_TYPE, FILE_EXT, FILE_SIZE,
            FILE_KIND, GFILE_SEQ, INSERT_ID)
        SELECT
            NEXTVAL(SEQ_FILE), Z.FILE_NM, Z.FILE_PATH, Z.TIME_PATH, Z.ORGINAL_FILE_NM, Z.FILE_TYPE, Z.FILE_EXT, Z.FILE_SIZE,
            Z.FILE_KIND, #{GFILE_SEQ}, #{LOGIN_USER_ID}
        FROM (
        	SELECT
                A.FILE_NM, A.FILE_PATH, A.TIME_PATH, A.ORGINAL_FILE_NM, A.FILE_TYPE, A.FILE_EXT, A.FILE_SIZE, A.FILE_KIND
        	FROM jmes.TBL_FILE A, jmes.TBL_CONTROL_PART B
        	WHERE B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} AND A.GFILE_SEQ = B.DXF_GFILE_SEQ
        ) Z
    </insert>

    <select id="selectOutsideStatusCheck" parameterType="java.util.HashMap" resultType="java.lang.Boolean">
        SELECT NOT EXISTS ( SELECT *
                            FROM TBL_CONTROL_PART
                            WHERE OUTSIDE_STATUS = #{OUTSIDE_STATUS}
                                <choose>
                                    <when test="PART_STATUS == 'PRO001'">
                                        AND PART_STATUS = 'PRO001'
                                    </when>
                                    <otherwise>
                                        AND PART_STATUS IS NULL
                                    </otherwise>
                                </choose>
                                AND CONTROL_SEQ  = #{CONTROL_SEQ}
                                AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ} ) AS FLAG
    </select>

    <update id="updateOutsideRequestDetailDelete" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST_DETAIL
        SET
            DEL_YN = 'Y',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND OUTSIDE_REQUEST_SEQ = #{OUTSIDE_REQUEST_SEQ}
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateCancelOutsideRequestStatus" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST
        SET
            OUTSIDE_STATUS = (SELECT A.OUTSIDE_STATUS FROM TBL_OUTSIDE_REQUEST A INNER JOIN TBL_OUTSIDE_REQUEST_DETAIL B ON A.OUTSIDE_REQUEST_SEQ = B.OUTSIDE_REQUEST_SEQ WHERE 1 = 1 AND A.DEL_YN = 'Y' AND B.CONTROL_SEQ = #{CONTROL_SEQ} AND B.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ} ORDER BY A.OUTSIDE_REQUEST_SEQ DESC LIMIT 1),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND OUTSIDE_STATUS = 'OST004' AND DEL_YN = 'N' AND OUTSIDE_REQUEST_SEQ = (SELECT MAX(OUTSIDE_REQUEST_SEQ) FROM TBL_OUTSIDE_REQUEST_DETAIL WHERE CONTROL_SEQ = #{CONTROL_SEQ} AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
    </update>

    <delete id="deleteOutsideClose" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
   </delete>

    <delete id="deleteOutsideCloseHistory" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE_HISTORY
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
   </delete>

    <delete id="deleteOutsideCloseNote" parameterType="java.util.HashMap">
        DELETE FROM TBL_OUTSIDE_CLOSE_NOTE
        WHERE 1 = 1
            AND CLOSE_MONTH = REPLACE(#{OUTSIDE_CLOSE_MONTH}, '.', SPACE(0))
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
            AND NOT EXISTS (SELECT *
                            FROM TBL_OUTSIDE_CLOSE
                            WHERE 1 = 1
                                AND CLOSE_MONTH = REPLACE(#{OUTSIDE_CLOSE_MONTH}, '.', SPACE(0))
                                AND CLOSE_VER = #{CLOSE_VER}
                                AND CONTROL_SEQ = #{CONTROL_SEQ}
                                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ})
   </delete>

    <select id="createInvoiceNum" parameterType="java.util.HashMap" resultType="string">
        SELECT CONCAT('IV-', LPAD(NEXTVAL(SEQ_INVOICE), 6, 0))
    </select>

    <update id="updateControlPartOutsourcingOrderManage" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}, <!-- 외주업체 -->
            OUTSIDE_NOTE = #{OUTSIDE_NOTE}, <!-- 비고 -->
            OUTSIDE_MATERIAL_SUPPLY_YN = IFNULL(#{OUTSIDE_MATERIAL_SUPPLY_YN}, 'N'), <!-- 소재 제공 -->
            OUTSIDE_REQUEST_FINISH_YN = IFNULL(#{OUTSIDE_REQUEST_FINISH_YN}, 'N'), <!-- 완제품 -->
            OUTSIDE_REQUEST_PROCESS_YN = IFNULL(#{OUTSIDE_REQUEST_PROCESS_YN}, 'N'), <!-- 가공 -->
            OUTSIDE_REQUEST_GRIND_YN = IFNULL(#{OUTSIDE_REQUEST_GRIND_YN}, 'N'), <!-- 연마 -->
            OUTSIDE_REQUEST_SURFACE_YN = IFNULL(#{OUTSIDE_REQUEST_SURFACE_YN}, 'N'), <!-- 표면 -->
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC}, <!-- 기타사항 -->
            OUTSIDE_HOPE_DUE_DT = DATE_FORMAT(#{OUTSIDE_HOPE_DUE_DT}, '%Y%m%d'), <!-- 외주납기 -->
            OUTSIDE_ORDER_NUM = #{OUTSIDE_ORDER_NUM}, <!-- 외주 발주번호 -->
            OUTSIDE_UNIT_AMT = REPLACE(#{OUTSIDE_UNIT_AMT}, ',', SPACE(0)), <!-- 외주 확정단가 -->
            UPDATE_DT = NOW()
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectOutsideDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            <include refid="orderMapper.control"/>,
            <include refid="orderMapper.controlPart"/>,
            (SELECT M.UNIT_FINAL_AMT FROM TBL_CONTROL_PART_ORDER_MAIN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ) AS UNIT_FINAL_AMT,
            DATE_FORMAT(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m'), '%Y.%m') AS OUTSIDE_CLOSE_MONTH, <!-- 마감 월 -->
            D.CLOSE_VER AS OUTSIDE_CLOSE_VER,
            SF_GET_COMP_NM(E.COMP_CD) AS OUTSIDE_CLOSE_COMP_NM, <!-- 매입 사업자 -->
            SF_GET_DATE_F(B.OUTSIDE_IN_DT, '', 'M') AS OUTSIDE_IN_DT2,
            B.OUTSIDE_UNIT_AMT * SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS OUTSIDE_TOTAL_AMT,
            (SELECT SF_GET_DATE_F(INSERT_DT, 'YY', 'M')
            FROM TBL_OUTSIDE_REQUEST_DETAIL
            WHERE 1 = 1
                AND CONTROL_SEQ = B.CONTROL_SEQ AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND DEL_YN = 'N'
            ORDER BY INSERT_DT DESC
            LIMIT 1) AS OUTSIDE_REQUEST_DT
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN TBL_OUTSIDE_CLOSE D ON D.CONTROL_SEQ = B.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_OUTSIDE_CLOSE_NOTE E ON E.OUTSIDE_COMP_CD = B.OUTSIDE_COMP_CD AND E.CLOSE_MONTH = D.CLOSE_MONTH AND E.CLOSE_VER = D.CLOSE_VER
        WHERE A.DEL_YN = 'N'
            AND B.OUTSIDE_YN = 'Y'
            AND D.CLOSE_MONTH = #{CLOSE_MONTH}
            AND D.CLOSE_VER = #{CLOSE_VER}
            AND E.COMP_CD = #{COMP_CD}
            AND E.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </select>


    <update id="removeOutside" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            OUTSIDE_YN = 'N'
            , OUTSIDE_COMP_CD = NULL
            , OUTSIDE_ORDER_NUM = NULL
            , OUTSIDE_NOTE = NULL
            , OUTSIDE_MATERIAL_SUPPLY_YN = 'N'
            , OUTSIDE_REQUEST_FINISH_YN = 'N'
            , OUTSIDE_REQUEST_PROCESS_YN = 'N'
            , OUTSIDE_REQUEST_GRIND_YN = 'N'
            , OUTSIDE_REQUEST_SURFACE_YN = 'N'
            , OUTSIDE_REQUEST_ETC = NULL
            , OUTSIDE_HOPE_DUE_DT = NULL
            , OUTSIDE_UNIT_AMT = NULL
            , OUTSIDE_CONFIRM_DT = NULL
            , OUTSIDE_IN_DT = NULL
            , OUTSIDE_STATUS = NULL
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

</mapper>