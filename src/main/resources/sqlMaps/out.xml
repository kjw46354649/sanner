<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="outMapper">

    <sql id="outManage">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ, <!-- 주문관리일련번호 -->
            B.CONTROL_DETAIL_SEQ, <!-- 주문관리상세일련번호 -->
            C.ORDER_SEQ, <!-- 발주번호일련번호 -->
            D.OUTSIDE_REQUEST_SEQ, <!-- 외주가공요청일련번호 -->
            A.ORDER_STAFF_SEQ, <!-- 담당자 -->
            F.CLOSE_MONTH, <!-- 마감월 -->
            F.CLOSE_VER, <!-- 차수 -->
            B.PART_STATUS,
            A.COMP_CD, <!-- 사업자 구분 -->
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM, <!-- 사업자 구분 -->
            B.OUTSIDE_YN, <!-- 외주 구분 -->
            A.CONTROL_STATUS, <!-- 원발주 상태 -->
            SF_GET_CODE_NM(1038, A.CONTROL_STATUS, 'KR') AS CONTROL_STATUS_NM,
            '', <!-- 외주발주 상태 -->
            '', <!-- 상태변경 일시 -->
            B.OUTSIDE_COMP_CD, <!-- 외주업체 -->
            SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM, <!-- 외주업체명  -->
            '', <!-- 입고일자 -->
            B.OUTSIDE_ORDER_NUM, <!-- 외주 발주번호 -->
            B.OUTSIDE_NOTE, <!-- 외주 비고 -->
            A.NOTE, <!-- 주문 비고 -->
            B.DRAWING_NUM, <!-- 도면번호 -->
            B.PART_NUM, <!-- Part -->
            B.ITEM_NM, <!-- 품명 -->
            B.SIZE_TXT, <!-- 규격 -->
            B.MATERIAL_DETAIL, <!-- 자재종류 -->
            B.SURFACE_TREAT, <!-- 표면처리 -->
            B.MATERIAL_SUPPLY_YN, <!-- 사급 여부 -->
            B.OUTSIDE_MATERIAL_SUPPLY_YN, <!-- 소재 제공(사급소재인경우 자동으로 Y) -->
            B.OUTSIDE_REQUEST_FINISH_YN, <!-- 외주 요청가공 완제품 -->
            B.OUTSIDE_REQUEST_PROCESS_YN, <!-- 외주 요청가공 가공 -->
            B.OUTSIDE_REQUEST_GRIND_YN, <!-- 외주 요청가공 연마 -->
            B.OUTSIDE_REQUEST_SURFACE_YN, <!-- 외주 요청가공 표면처리 -->
            B.OUTSIDE_REQUEST_ETC, <!-- 외주 요청가공 기타사항 -->
            B.OUTSIDE_HOPE_DUE_DT, <!-- 요망 납기 -->
            B.OUTSIDE_UNIT_AMT, <!-- 외주 확정 단가 -->
            B.UNIT_FINAL_AMT, <!-- 금액 합계 -->
            '', <!-- 외주 종전가 -->
            B.INNER_DUE_DT, <!-- 원발주 납기일 -->
            B.UNIT_FINAL_AMT, <!-- 원발주 공급단가 -->
            A.ORDER_COMP_CD, <!-- 발주처 -->
            SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM, <!-- 발주처 -->
            '', <!-- Seq -->
            '', <!-- 결과 -->
            '', <!-- 불량코드 -->
            '', <!-- 측정일시 -->
            DATE_FORMAT(A.STATUS_DT, '%m/%d %H:%i') AS CONTROL_STATUS_DATE, <!-- 원주문 확정일시 -->
            DATE_FORMAT(E.INSERT_DT, '%m/%d %H:%i') AS OUTSIDE_REQUEST_DATE, <!-- 외주가공 요청일시 -->
            DATE_FORMAT(F.CLOSE_DT, '%m/%d %H:%i') AS OUTSIDE_FINISH_DATE, <!-- 외주가공 마감일시 -->
            '' <!-- DXF -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST_DETAIL D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                                       AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_REQUEST E ON D.OUTSIDE_REQUEST_SEQ = E.OUTSIDE_REQUEST_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE F ON B.CONTROL_SEQ = F.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
    </sql>

    <select id="selectOutsideOrderManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="outManage" />
        WHERE 1 = 1
            AND A.CONTROL_STATUS = 'ORD001'
            AND B.OUTSIDE_YN = 'Y'
            AND B.WORK_TYPE != 'WTP050' <!-- 파트가공 -->
            AND NOT EXISTS (SELECT *
                            FROM TBL_OUTSIDE_CLOSE
                            WHERE
                                CONTROL_SEQ = B.CONTROL_SEQ
                                AND CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
            AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
            AND B.DRAWING_NUM = #{DRAWING_NUM}
        </if>
        <if test="ITEM_NM != null and ITEM_NM != ''">
            AND B.ITEM_NM = #{ITEM_NM}
        </if>
        <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
            AND A.CONTROL_NUM = #{CONTROL_NUM}
        </if>
        <if test="MODULE_NM != null and MODULE_NM != ''">
            AND A.MODULE_NM = #{MODULE_NM}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
    </select>
    
    <select id="selectOutsideProcessRequestList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            B.CONTROL_SEQ,
            B.CONTROL_DETAIL_SEQ,
            A.CONTROL_NUM, <!-- 관리번호 -->
            B.DRAWING_NUM, <!-- 도면번호 -->
            B.PART_NUM, <!-- Part -->
            B.SIZE_TXT, <!-- 규격 -->
            B.MATERIAL_DETAIL, <!-- 자재종류 -->
            B.SURFACE_TREAT, <!-- 표면 처리 -->
            B.OUTSIDE_MATERIAL_SUPPLY_YN, <!-- 소재 제공 -->
            B.OUTSIDE_REQUEST_FINISH_YN, <!-- 완제품 -->
            B.OUTSIDE_REQUEST_PROCESS_YN, <!-- 가공 -->
            B.OUTSIDE_REQUEST_GRIND_YN, <!-- 연마 -->
            B.OUTSIDE_REQUEST_SURFACE_YN, <!-- 표면 처리 -->
            B.OUTSIDE_REQUEST_ETC, <!-- 기타사항 -->
            B.OUTSIDE_HOPE_DUE_DT, <!-- 요망 납기 -->
            B.OUTSIDE_NOTE <!-- 비고 -->
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ 
        WHERE
            B.CONTROL_SEQ IN (#{CONTROL_SEQ})
            AND B.CONTROL_DETAIL_SEQ IN (#{CONTROL_DETAIL_SEQ})
    </select>

    <update id="updateOutsideProcessRequest" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            OUTSIDE_REQUEST_FINISH_YN = #{OUTSIDE_REQUEST_FINISH_YN}, <!-- 완제품 -->
            OUTSIDE_REQUEST_PROCESS_YN = #{OUTSIDE_REQUEST_PROCESS_YN}, <!-- 가공 -->
            OUTSIDE_REQUEST_GRIND_YN = #{OUTSIDE_REQUEST_GRIND_YN}, <!-- 연마 -->
            OUTSIDE_REQUEST_SURFACE_YN = #{OUTSIDE_REQUEST_SURFACE_YN}, <!-- 표면 처리 -->
            OUTSIDE_REQUEST_ETC = #{OUTSIDE_REQUEST_ETC}, <!-- 기타사항 -->
            OUTSIDE_HOPE_DUE_DT = #{OUTSIDE_HOPE_DUE_DT}, <!-- 요망 납기 -->
            OUTSIDE_NOTE = #{OUTSIDE_NOTE} <!-- 비고 -->
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectOutsideCloseLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(A.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            C.CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(C.CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
            C.CLOSE_VER,
            SUM(B.ORDER_QTY) AS ORDER_QTY,
            SUM(A.UNIT_FINAL_AMT) AS TOTAL_AMT
        FROM TBL_CONTROL_PART A
        INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                               AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
        INNER JOIN TBL_OUTSIDE_CLOSE C ON A.CONTROL_SEQ = C.CONTROL_SEQ
                                          AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                          AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
        WHERE
            A.OUTSIDE_YN = 'Y'
            AND A.OUTSIDE_COMP_CD IN (${OUTSIDE_COMP_CD})
        GROUP BY
            A.OUTSIDE_COMP_CD,
            C.CLOSE_VER
    </select>

    <select id="selectOutsideCloseRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            OUTSIDE_COMP_CD,
            OUTSIDE_COMP_NM,
            CLOSE_MONTH,
            DATE_FORMAT(STR_TO_DATE(CLOSE_MONTH, '%Y%m'), '%Y.%m월' ) AS CLOSE_MONTH_TRAN,
            CONCAT(CLOSE_VER, '차') AS CLOSE_VER,
            CONCAT(CAST(SUM(ORDER_QTY) AS CHAR), '건') AS ORDER_QTY,
            FORMAT(SUM(UNIT_FINAL_AMT), 0) AS TOTAL_AMT,
            CONCAT(CAST(SUM(ADD_QTY) AS CHAR), '건') AS ADD_QTY,
            FORMAT(SUM(ADD_UNIT_FINAL_AMT), 0) AS ADD_UNIT_FINAL_AMT
        FROM (
            SELECT
                A.OUTSIDE_COMP_CD,
                SF_GET_COMP_NM(A.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
                C.CLOSE_MONTH,
                C.CLOSE_VER,
                SUM(B.ORDER_QTY) AS ORDER_QTY,
                SUM(A.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
                0 AS ADD_QTY,
                0 AS ADD_UNIT_FINAL_AMT
            FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                                   AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                              AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                              AND C.CLOSE_MONTH = CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH})
                                              AND C.CLOSE_VER = #{CLOSE_VER}
            WHERE
                A.OUTSIDE_YN = 'Y'
                AND A.OUTSIDE_COMP_CD IN (${OUTSIDE_COMP_CD})
            GROUP BY
                A.OUTSIDE_COMP_CD
        UNION ALL
            SELECT
                A.OUTSIDE_COMP_CD,
                SF_GET_COMP_NM(A.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
                CONCAT(#{OUTSIDE_CLOSE_YEAR}, #{OUTSIDE_CLOSE_MONTH}) AS CLOSE_MONTH,
                #{CLOSE_VER},
                SUM(B.ORDER_QTY) AS ORDER_QTY,
                SUM(A.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
                SUM(B.ORDER_QTY) AS ADD_QTY,
                SUM(A.UNIT_FINAL_AMT) AS ADD_UNIT_FINAL_AMT
            FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL_PART_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                                   AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            WHERE
                A.OUTSIDE_YN = 'Y'
                AND A.CONTROL_DETAIL_SEQ IN (${CONTROL_DETAIL_SEQ})
            GROUP BY
                A.OUTSIDE_COMP_CD) X
        GROUP BY
            OUTSIDE_COMP_CD
    </select>

    <update id="updateOutsideCloseRequest" parameterType="java.util.HashMap">
        UPDATE TBL_OUTSIDE_REQUEST
        SET
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD},
        </if>
        <if test="OUTSIDE_GFILE_SEQ != null and OUTSIDE_GFILE_SEQ != ''">
            OUTSIDE_GFILE_SEQ = #{OUTSIDE_GFILE_SEQ},
        </if>
        <if test="OUTSIDE_STATUS != null and OUTSIDE_STATUS != ''">
            OUTSIDE_STATUS = #{OUTSIDE_STATUS},
        </if>
        <if test="NOTE != null and NOTE != ''">
            NOTE = #{NOTE},
        </if>
            STATUS_DT = NOW()
        WHERE
            OUTSIDE_REQUEST_SEQ = #{OUTSIDE_REQUEST_SEQ}
    </update>

    <insert id="createOutsideClose" parameterType="java.util.HashMap" >
        INSERT INTO TBL_OUTSIDE_CLOSE (
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            CLOSE_DT
        ) VALUES (
            #{CLOSE_MONTH},
            #{CLOSE_VER},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NOW()
        ) ON DUPLICATE KEY
	        UPDATE
		        CLOSE_DT = NOW()
    </insert>

    <insert id="createOutsideCloseHistory" parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_OUTSIDE_CLOSE_HISTORY (
            HISTORY_SEQ,
            HISTORY_DT,
            CLOSE_MONTH,
            CLOSE_VER,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ
        ) VALUES (
            NEXTVAL(SEQ_OUTSIDE_CLOSE_HISTORY),
            NOW(),
            #{CLOSE_MONTH},
            CAST(#{CLOSE_VER} AS INTEGER),
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ}
        )
    </insert>

    <select id="selectOutsideCloseHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <include refid="outManage"/>
        WHERE 1 = 1
            <!-- AND E.OUTSIDE_STATUS = 'OST004' -->
            AND B.CONTROL_SEQ = F.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
    </select>

    <delete id="deleteOutsideClose" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_OUTSIDE_CLOSE
        WHERE
            CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
   </delete>

    <select id="selectOutsideCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.COMP_CD,
            SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
            SUBSTR(D.CLOSE_MONTH, 1, 4) AS YEAR,
            CONCAT(QUARTER(STR_TO_DATE(D.CLOSE_MONTH, '%Y%m')), '분기') AS QUARTER,
            CONCAT(SUBSTR(D.CLOSE_MONTH, 5), '월') AS FINISH_MONTH,
            CONCAT(D.CLOSE_VER, '차') AS CLOSE_VER, /* 차수 */
            B.OUTSIDE_COMP_CD,
            SF_GET_COMP_NM(B.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM,
            SUM(C.ORDER_QTY) AS ITEM_NUMBER,
            SUM(B.UNIT_FINAL_AMT) AS UNIT_FINAL_AMT,
            SUM(B.UNIT_FINAL_AMT) * 0.1 AS VAT_AMOUNT,
            SUM(B.UNIT_FINAL_AMT) + SUM(B.UNIT_FINAL_AMT) * 0.1 AS TOTAL_AMOUNT,
            E.CLOSE_NOTE
        FROM TBL_CONTROL A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_OUTSIDE_CLOSE D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                              AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_OUTSIDE_CLOSE_NOTE E ON A.COMP_CD = E.COMP_CD
                                                        AND B.OUTSIDE_COMP_CD = E.OUTSIDE_COMP_CD
                                                        AND D.CLOSE_MONTH = E.CLOSE_MONTH
                                                        AND D.CLOSE_VER = E.CLOSE_VER
        WHERE 1 = 1
        <choose>
            <when test="RANGE_SEARCH != null and RANGE_SEARCH != ''">
                AND (D.CLOSE_MONTH BETWEEN  DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m') AND DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_RIGHT}, #{CLOSE_MONTH_RIGHT}), '%Y%m'), '%Y%m'))
            </when>
            <otherwise>
                AND D.CLOSE_MONTH <![CDATA[ > ]]> DATE_FORMAT(STR_TO_DATE(CONCAT(#{CLOSE_YEAR_LEFT}, #{CLOSE_MONTH_LEFT}), '%Y%m'), '%Y%m')
            </otherwise>
        </choose>
        <choose>
            <when test="CLOSE_VER != null and CLOSE_VER != ''">
                AND D.CLOSE_VER = #{CLOSE_VER}
            </when>
            <otherwise>
                AND D.CLOSE_VER = (SELECT MAX(CLOSE_VER)
                                   FROM TBL_OUTSIDE_CLOSE
                                   WHERE
                                        D.CLOSE_MONTH = CLOSE_MONTH
                                        AND D.CONTROL_SEQ = CONTROL_SEQ
                                        AND D.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ)
            </otherwise>
        </choose>
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        <if test="CLOSE_NOTE != null and CLOSE_NOTE != ''">
            AND D.CLOSE_NOTE LIKE CONCAT('%', #{CLOSE_NOTE}, '%')
        </if>
        GROUP BY
            A.COMP_CD,
            B.OUTSIDE_COMP_CD,
            D.CLOSE_MONTH,
            D.CLOSE_VER
        ORDER BY
            SF_GET_COMP_NM(A.COMP_CD),
            YEAR,
            FINISH_MONTH
    </select>

    <update id="updateOutsideCloseNote" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_OUTSIDE_CLOSE_NOTE
        SET
            CLOSE_NOTE = #{CLOSE_NOTE}
        WHERE CLOSE_MONTH = #{CLOSE_MONTH}
            AND CLOSE_VER = #{CLOSE_VER}
            AND COMP_CD = #{COMP_CD}
            AND OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
    </update>

    <select id="selectOutsideYearCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            Z.CLOSE_MONTH,
            Z.COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.COMP_CD) AS COMP_NM,
            Z.OUTSIDE_COMP_CD,
            (SELECT A.COMP_NM FORM FROM jmes.TBL_COMPANY A WHERE A.COMP_CD = Z.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_CD_NM,
            CASE WHEN STATUS_TYPE = '1' THEN '외주금액' ELSE '원발주 금액' END STATUS_TYPE,
            SUM(CASE WHEN Z.MM = '01' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_01_AMT,
            SUM(CASE WHEN Z.MM = '02' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_02_AMT,
            SUM(CASE WHEN Z.MM = '03' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_03_AMT,
            SUM(CASE WHEN Z.MM IN ('01', '02', '03') THEN Z.ORDER_AMT ELSE 0 END) ORDER_03_SUM_AMT,
            SUM(CASE WHEN Z.MM = '04' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_04_AMT,
            SUM(CASE WHEN Z.MM = '05' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_05_AMT,
            SUM(CASE WHEN Z.MM = '06' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_06_AMT,
            SUM(CASE WHEN Z.MM IN ('04', '05', '06') THEN Z.ORDER_AMT ELSE 0 END) ORDER_06_SUM_AMT,
            SUM(CASE WHEN Z.MM = '07' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_07_AMT,
            SUM(CASE WHEN Z.MM = '08' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_08_AMT,
            SUM(CASE WHEN Z.MM = '09' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_09_AMT,
            SUM(CASE WHEN Z.MM IN ('07', '08', '09') THEN Z.ORDER_AMT ELSE 0 END) ORDER_09_SUM_AMT,
            SUM(CASE WHEN Z.MM = '10' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_10_AMT,
            SUM(CASE WHEN Z.MM = '11' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_11_AMT,
            SUM(CASE WHEN Z.MM = '12' THEN Z.ORDER_AMT ELSE 0 END) AS ORDER_12_AMT,
            SUM(CASE WHEN Z.MM IN ('10', '11', '12') THEN Z.ORDER_AMT ELSE 0 END) ORDER_12_SUM_AMT,
            SUM(Z.ORDER_AMT) TOTAL_AMT
        FROM (
            SELECT
                G.CLOSE_MONTH, F.MM, G.COMP_CD, G.STATUS_TYPE, G.OUTSIDE_COMP_CD, G.ORDER_AMT
            FROM TBL_YYYYMMDD F
                INNER JOIN (
                    SELECT
                        K.STATUS_TYPE, K.COMP_CD, K.OUTSIDE_COMP_CD, K.CLOSE_MONTH, K.ORDER_AMT
                    FROM (
                        SELECT
                            '1' AS STATUS_TYPE, A.COMP_CD, B.OUTSIDE_COMP_CD, D.CLOSE_MONTH, SUM(B.UNIT_FINAL_AMT * C.ORDER_QTY) AS ORDER_AMT
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C, TBL_OUTSIDE_CLOSE D
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.DEL_YN = 'N' AND IFNULL(B.PART_NUM, '0') = '0'
                            AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                            AND SUBSTR(D.CLOSE_MONTH, 1, 4) = #{YEAR}
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND A.COMP_CD = #{COMP_CD}
                            </if>
                            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                            </if>
                        GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
                        UNION ALL
                        SELECT
                            '2' AS STATUS_TYPE, A.COMP_CD, B.OUTSIDE_COMP_CD, D.CLOSE_MONTH, SUM(B.OUTSIDE_UNIT_AMT * C.ORDER_QTY) AS ORDER_AMT
                        FROM TBL_CONTROL A, TBL_CONTROL_PART B, TBL_CONTROL_PART_ORDER C, TBL_OUTSIDE_CLOSE D
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.DEL_YN = 'N' AND IFNULL(B.PART_NUM, '0') = '0'
                            AND B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND B.CONTROL_SEQ = D.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                            AND SUBSTR(D.CLOSE_MONTH, 1, 4) = #{YEAR}
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND A.COMP_CD = #{COMP_CD}
                            </if>
                            <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                                AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
                            </if>
                        GROUP BY A.COMP_CD, A.ORDER_COMP_CD, D.CLOSE_MONTH
                    ) K
                ) G ON CONCAT(F.YYYY, F.MM) = G.CLOSE_MONTH
            WHERE F.YYYY = #{YEAR}
        ) Z
        GROUP BY Z.CLOSE_MONTH, Z.COMP_CD, Z.OUTSIDE_COMP_CD, Z.STATUS_TYPE
    </select>

    <select id="selectMonthCloseStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.COMP_CD,
            A.COMP_NM,
            B.COMP_CD AS OUTSIDE_COMP_CD,
            B.COMP_NM AS OUTSIDE_COMP_NM,
            C.YYYY,
            C.MM,
            QUARTER(C.DT) AS QUARTER,
            X.OUTPUT_AMT,
            Y.DEPOSIT_AMT
        FROM TBL_COMPANY A
            INNER JOIN TBL_COMPANY B ON B.CO_COMPANY_YN = 'Y'
            CROSS JOIN TBL_YYYYMMDD C
            LEFT OUTER JOIN (SELECT
                                 C.CLOSE_MONTH,
                                 A.COMP_CD,
                                 A.ORDER_COMP_CD,
                                 SUM(B.UNIT_FINAL_AMT * D.ORDER_QTY) AS OUTPUT_AMT
                             FROM TBL_CONTROL A
                                 INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ
                                 INNER JOIN TBL_OUTSIDE_CLOSE C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                                                                   AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                 INNER JOIN TBL_CONTROL_PART_ORDER D ON B.CONTROL_SEQ = D.CONTROL_SEQ
                                                                        AND B.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                             GROUP BY A.COMP_CD,
                                      A.ORDER_COMP_CD) X ON A.COMP_CD = X.COMP_CD
                                                            AND B.COMP_CD = X.ORDER_COMP_CD
                                                            AND CONCAT(C.YYYY, C.MM) = X.CLOSE_MONTH
            LEFT OUTER JOIN(SELECT
                                COMP_CD,
                                ORDER_COMP_CD,
                                SUBSTR(DATE_FORMAT(STR_TO_DATE(DEPOSIT_DT, '%Y%m%d'), '%Y%m%d'), 1, 4) AS YEAR,
                                SUBSTR(DATE_FORMAT(STR_TO_DATE(DEPOSIT_DT, '%Y%m%d'), '%Y%m%d'), 5, 2) AS MONTH,
                                DEPOSIT_AMT
                            FROM TBL_MONEY_DEPOSIT) Y ON A.COMP_CD = Y.COMP_CD
                                                         AND B.COMP_CD = Y.ORDER_COMP_CD
                                                         AND C.YYYY = Y.YEAR
                                                         AND C.MM = Y.MONTH
        WHERE
            A.FAMILY_COMPANY_YN = 'Y'
            AND C.YYYY = #{YEAR}
        <if test="COMP_CD != null and COMP_CD != ''">
            AND A.COMP_CD = #{COMP_CD}
        </if>
        <if test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
            AND B.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}
        </if>
        <if test="CLOSE_NOTE != null and CLOSE_NOTE != ''">
            AND D.CLOSE_NOTE LIKE CONCAT('%', #{CLOSE_NOTE}, '%')
        </if>
        GROUP BY
            A.COMP_CD,
            B.COMP_CD,
            C.YYYY,
            C.MM
    </select>

</mapper>