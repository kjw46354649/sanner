<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="material">
    <select id="selectItemOrderRegisterNextMaterialOrderNum" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
			CONCAT('MPO-', DATE_FORMAT(NOW(), '%Y%m%d'), '-', MAX(Z.MATERIAL_ORDER_NUM)) AS MATERIAL_ORDER_NUM
        FROM
        (
        SELECT
            LPAD(IFNULL(MAX(SUBSTRING_INDEX(MATERIAL_ORDER_NUM, '-', -1 )), 0) +1, 3, '0') AS MATERIAL_ORDER_NUM
        FROM TBL_MATERIAL_ORDER A
        WHERE 1=1
            AND SUBSTRING_INDEX(SUBSTRING_INDEX(MATERIAL_ORDER_NUM , '-', -2), '-', 1 ) = DATE_FORMAT(NOW(), '%Y%m%d')
		UNION ALL
        SELECT
            LPAD(IFNULL(MAX(SUBSTRING_INDEX(MATERIAL_ORDER_NUM, '-', -1 )), 0) +1, 3, '0') AS MATERIAL_ORDER_NUM
        FROM TBL_MATERIAL_ORDER_HIST
        WHERE 1=1
            AND SUBSTRING_INDEX(SUBSTRING_INDEX(MATERIAL_ORDER_NUM , '-', -2), '-', 1 ) = DATE_FORMAT(NOW(), '%Y%m%d')
		) Z
    </select>

    <select id="selectItemOrderRegisterList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
			Z.* ,
			SF_GET_CODE_NM('1009', X.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION_NM, <!-- 현재 등록된 위치 -->
			ROW_NUMBER() OVER() AS ROWNUM
		FROM
        (
			SELECT
				A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, F.MATERIAL_ORDER_SEQ, F.MATERIAL_ORDER_NUM,
				A.CONTROL_NUM, A.CONTROL_VER, CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, '#', B.PART_NUM) END AS CONTROL_PART_NUM,
				A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
				A.COMP_CD, SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
				A.CONTROL_STATUS, SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM,
				B.PART_STATUS, SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM,
				(SELECT SF_GET_DATE_F(MAX(M.STATUS_DT),'','M') FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND PART_STATUS = 'PRO002') AS STATUS_DT,
                (SELECT MAX(M.STATUS_DT) FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND PART_STATUS = 'PRO002') AS STATUS_DT_CONDITION,
				B.DRAWING_NUM, B.DRAWING_VER, B.PART_NUM, B.WORK_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN F.MATERIAL_TYPE
					ELSE SF_GET_ETC_CD('1027', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN SF_GET_CODE_NM('1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE})
					ELSE SF_GET_ETC_NM('1035', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE_NM,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN F.MATERIAL_DETAIL
					ELSE B.MATERIAL_DETAIL
				END AS MATERIAL_DETAIL,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN SF_GET_CODE_NM('1027', F.MATERIAL_DETAIL, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE})
				END AS MATERIAL_DETAIL_NM,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN F.MATERIAL_KIND
					ELSE B.MATERIAL_KIND
				END AS MATERIAL_KIND,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN SF_GET_CODE_NM('1029', F.MATERIAL_KIND, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE})
				END AS MATERIAL_KIND_NM,
				B.SIZE_TXT, B.SIZE_TYPE, B.SIZE_W, B.SIZE_H, B.SIZE_D, B.SIZE_L, B.SIZE_T, F.REQUEST_NOTE,
				SF_GET_DATE_F(B.INNER_DUE_DT, '', '') AS INNER_DUE_DT,
				SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY,
				F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
				CASE WHEN F.ORDER_QTY IS NOT NULL THEN F.ORDER_QTY
				    ELSE SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ)-IFNULL(SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY'), 0)
				END AS M_ORDER_QTY,
                F.ORDER_NOTE AS M_ORDER_NOTE,
                CASE WHEN F.SIZE_TXT IS NOT NULL THEN F.SIZE_TXT ELSE B.SIZE_TXT END AS M_SIZE_TXT,
				F.ORDER_STATUS AS M_STATUS,
                CASE
                    WHEN F.ORDER_STATUS IS NOT NULL THEN SF_GET_CODE_NM('1028', F.ORDER_STATUS, #{LOGIN_LOCALE})
                    ELSE CASE
                            WHEN EXISTS(SELECT *
                                        FROM TBL_CONTROL_PART_PROGRESS M
                                        WHERE M.CONTROL_SEQ = B.CONTROL_SEQ
                                          AND M.CONTROL_DETAIL_SEQ= B.CONTROL_DETAIL_SEQ
                                          AND PART_STATUS IN ('PRO021', 'PRO022')) THEN CASE
                                                                                            WHEN B.PART_STATUS IN ('PRO021', 'PRO022') THEN jmes.SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE})
                                                                                            ELSE '소재입고'
                                                                                        END
                            ELSE '주문대기'
                         END
                END AS M_STATUS_NM,
				SF_GET_DATE_F(F.ORDER_DT, '', 'M') AS M_ORDER_DT,
				SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'TXT') AS OUT_SIZE_TXT,
                SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY') AS OUT_QTY, SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'SEQ') MY_MAT_OUT_SEQ,
				CASE WHEN SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'CPL') = SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY') THEN 'Y' ELSE 'N' END OUT_YN,
				SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'CPL') AS COMPLETE_OUT_QTY,
                F.ORDER_STATUS, F.INSERT_DT AS MATERIAL_ORDER_INSERT_DT,
                B.DXF_GFILE_SEQ, B.DWG_GFILE_SEQ, B.PDF_GFILE_SEQ, B.IMG_GFILE_SEQ, F.NOTE, B.OUTSIDE_YN
			FROM TBL_CONTROL A
				INNER JOIN TBL_CONTROL_PART B ON B.CONTROL_SEQ = A.CONTROL_SEQ
				LEFT OUTER JOIN TBL_MATERIAL_ORDER F ON B.CONTROL_SEQ = F.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
				    AND IFNULL(F.ORDER_STATUS, SPACE(0)) IN (SPACE(0), 'MST002', 'MST004')
			WHERE A.CONTROL_STATUS = 'ORD001'
			    AND B.WORK_TYPE != 'WTP020'
                AND IFNULL(B.PART_STATUS, SPACE(0)) NOT IN (SPACE(0), 'PRO003')
                AND B.MATERIAL_SUPPLY_YN = 'N'
                <if test="SHIPMENT_YN == null">
                    AND B.PART_STATUS NOT IN ('PRO016', 'PRO017', 'PRO020')
                </if>
                <if test="IN_YN == null">
                    AND B.PART_STATUS NOT IN ('PRO021', 'PRO022')
                </if>
			GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, F.MATERIAL_ORDER_SEQ
			UNION ALL
			SELECT
				'' AS CONTROL_SEQ, '' AS CONTROL_DETAIL_SEQ, F.MATERIAL_ORDER_SEQ, F.MATERIAL_ORDER_NUM,
				'' AS CONTROL_NUM, '' AS CONTROL_VER, '' AS CONTROL_PART_NUM,
				'' AS ORDER_COMP_CD, '' AS ORDER_COMP_NM, '' AS COMP_CD, '' AS COMP_NM,
				'' AS CONTROL_STATUS, '' AS CONTROL_STATUS_NM,
				'' AS PART_STATUS, '' AS PART_STATUS_NM,
				'' AS STATUS_DT,
				'' AS STATUS_DT_CONDITION,
				'' AS DRAWING_NUM, '' AS DRAWING_VER, '' AS PART_NUM, '' AS WORK_TYPE,
				F.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
				F.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', F.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
				F.MATERIAL_KIND, SF_GET_CODE_NM('1029', F.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
				'' AS SIZE_TXT, '' AS SIZE_TYPE, '' AS SIZE_W, '' AS SIZE_H, '' AS SIZE_D, '' AS SIZE_L, '' AS SIZE_T, F.REQUEST_NOTE,
				'' AS INNER_DUE_DT, 0 AS ORDER_QTY,
				F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
				F.ORDER_QTY-IFNULL(SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY'), 0) AS M_ORDER_QTY,
				F.ORDER_NOTE AS M_ORDER_NOTE, F.SIZE_TXT AS M_SIZE_TXT,
				F.ORDER_STATUS AS M_STATUS, SF_GET_CODE_NM('1028', F.ORDER_STATUS, #{LOGIN_LOCALE}) AS M_STATUS_NM,
				SF_GET_DATE_F(F.ORDER_DT, '', 'M') AS M_ORDER_DT,
				SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'TXT') AS OUT_SIZE_TXT,
                SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY') AS OUT_QTY, SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'SEQ') MY_MAT_OUT_SEQ,
				CASE WHEN SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'CPL') = SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY') THEN 'Y' ELSE 'N' END OUT_YN,
				SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'CPL') AS COMPLETE_OUT_QTY,
                F.ORDER_STATUS, F.INSERT_DT AS MATERIAL_ORDER_INSERT_DT,
                '' AS DXF_GFILE_SEQ, '' AS DWG_GFILE_SEQ, '' AS PDF_GFILE_SEQ, '' AS IMG_GFILE_SEQ, F.NOTE, '' AS OUTSIDE_YN
			FROM TBL_MATERIAL_ORDER F
			WHERE IFNULL(F.ORDER_STATUS, SPACE(0)) NOT IN ('MST003')
				AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART X WHERE X.CONTROL_SEQ = F.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ)
			GROUP BY F.MATERIAL_ORDER_SEQ
		) Z
		    LEFT OUTER JOIN jmes.TBL_POP X ON X.CONTROL_SEQ = Z.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
                AND X.POP_SEQ = (SELECT MAX(K.POP_SEQ)
                                FROM jmes.TBL_POP K
                                WHERE K.CONTROL_SEQ = X.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ)
		WHERE 1 = 1
		<choose>
            <when test="ITEM_ORDER_REGISTER_CONDITION =='IOM010'">
                AND CASE WHEN Z.STATUS_DT_CONDITION IS NULL
                        THEN DATE_FORMAT(Z.MATERIAL_ORDER_INSERT_DT, '%Y/%m/%d') BETWEEN #{ITEM_ORDER_REGISTER_START_DATE} AND #{ITEM_ORDER_REGISTER_END_DATE}
                        ELSE DATE_FORMAT(Z.STATUS_DT_CONDITION, '%Y/%m/%d') BETWEEN #{ITEM_ORDER_REGISTER_START_DATE} AND #{ITEM_ORDER_REGISTER_END_DATE}
                    END
            </when>
            <when test="ITEM_ORDER_REGISTER_CONDITION =='IOM020'">
                AND DATE_FORMAT(Z.M_ORDER_DT, '%Y/%m/%d') BETWEEN #{ITEM_ORDER_REGISTER_START_DATE} AND #{ITEM_ORDER_REGISTER_END_DATE}
            </when>
        </choose>
        <choose>
            <when test="ORDER_STATUS != '' and ORDER_STATUS != null">
                AND IFNULL(Z.ORDER_STATUS, 'NULL') IN (${ORDER_STATUS})
            </when>
            <otherwise>
                AND Z.ORDER_STATUS = '' <!-- 아무것도 표시 안 하기 위함 -->
            </otherwise>
        </choose>
        <if test="OUTSIDE_YN == null">
            AND IFNULL(Z.OUTSIDE_YN, 'N') = 'N'
        </if>
        <if test="COMP_CD != '' and COMP_CD != null">
            AND Z.COMP_CD = #{COMP_CD}
        </if>
        <if test="ORDER_COMP_CD != '' and ORDER_COMP_CD != null">
		    AND Z.ORDER_COMP_CD = #{ORDER_COMP_CD}
        </if>
        <if test="DRAWING_NUM != '' and DRAWING_NUM != null">
		    AND UPPER(Z.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
        </if>
        <if test="WORK_TYPE != '' and WORK_TYPE != null">
            AND Z.WORK_TYPE = #{WORK_TYPE}
        </if>
        <if test="CONTROL_NUM != '' and CONTROL_NUM != null">
		    AND UPPER(Z.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%')
        </if>
        <if test="MATERIAL_ORDER_NUM != '' and MATERIAL_ORDER_NUM != null">
		    AND UPPER(Z.MATERIAL_ORDER_NUM) LIKE CONCAT('%', UPPER(#{MATERIAL_ORDER_NUM}), '%')
        </if>
        <if test="M_COMP_CD != '' and M_COMP_CD != null">
		    AND Z.M_COMP_CD = #{M_COMP_CD}
        </if>
        <if test="MATERIAL_DETAIL != '' and MATERIAL_DETAIL != null">
		    AND Z.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
        </if>
        ORDER BY
            CASE Z.ORDER_STATUS WHEN 'MST001' THEN 3    WHEN 'MST002' THEN 4    WHEN 'MST003' THEN 2    WHEN 'MST004' THEN 5    ELSE 1 END,
            SF_GET_DATE_F(Z.STATUS_DT, 'YYYY', '') DESC, Z.CONTROL_NUM, Z.PART_NUM, Z.MATERIAL_ORDER_NUM DESC, Z.M_COMP_CD, Z.MATERIAL_ORDER_SEQ
    </select>

    <select id="selectItemOrderRegisterDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT *
        FROM (
            SELECT
                A.MY_MAT_STOCK_SEQ, A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
                A.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                A.SIZE_TXT, A.SIZE_W, A.SIZE_H, A.SIZE_T, A.LOC_SEQ, B.LOC_NM,
                IFNULL(C.IN_QTY, 0)
                    - IFNULL((SELECT SUM(OUT_QTY) FROM TBL_MY_MATERIAL_OUT WHERE A.MY_MAT_STOCK_SEQ = MY_MAT_STOCK_SEQ), 0)
                AS STOCK_QTY,
                D.MY_MAT_OUT_SEQ, '' AS OUT_QTY,
                CASE WHEN SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'SEQ') IS NOT NULL THEN 'Y' ELSE 'N' END OUT_YN,
                SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'SEQ'),
                A.NOTE, '' AS CONTROL_SEQ, '' AS CONTROL_DETAIL_SEQ, '' AS MATERIAL_ORDER_SEQ
            FROM TBL_MY_MATERIAL_STOCK A
                INNER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ AND B.DEL_YN = 'N'
                LEFT OUTER JOIN (SELECT SUM(IN_QTY) IN_QTY,MY_MAT_STOCK_SEQ FROM TBL_MY_MATERIAL_IN GROUP BY MY_MAT_STOCK_SEQ) C ON A.MY_MAT_STOCK_SEQ = C.MY_MAT_STOCK_SEQ
                LEFT OUTER JOIN TBL_MY_MATERIAL_OUT D ON A.MY_MAT_STOCK_SEQ = D.MY_MAT_STOCK_SEQ
            WHERE 1=1
            <if test="WAREHOUSE_CD !='' and WAREHOUSE_CD != null">
                AND A.WAREHOUSE_CD = #{WAREHOUSE_CD}
            </if>
            <if test="MATERIAL_DETAIL !='' and MATERIAL_DETAIL != null">
                AND A.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
            </if>
            <choose>
                <when test="AREA == '10'">
                    AND A.SIZE_W BETWEEN #{SIZE_W} * 0.9 AND #{SIZE_W} * 1.1
                    AND A.SIZE_H BETWEEN #{SIZE_H} * 0.9 AND #{SIZE_H} * 1.1
                </when>
                <when test="AREA == '20'">
                    AND A.SIZE_W BETWEEN #{SIZE_W} * 0.8 AND #{SIZE_W} * 1.2
                    AND A.SIZE_H BETWEEN #{SIZE_H} * 0.8 AND #{SIZE_H} * 1.2
                </when>
                <when test="AREA == '00'">
                    AND A.SIZE_W = #{SIZE_W}
                    AND A.SIZE_H = #{SIZE_H}
                </when>
            </choose>
            <choose>
                <when test="CONDITION == '10'">
                    AND A.SIZE_T BETWEEN #{SIZE_T} * 0.9 AND #{SIZE_T} * 1.1
                </when>
                <when test="CONDITION == '20'">
                    AND A.SIZE_T BETWEEN #{SIZE_T} * 0.8 AND #{SIZE_T} * 1.2
                </when>
                <when test="CONDITION == '00'">
                    AND A.SIZE_T = #{SIZE_T}
                </when>
            </choose>
            GROUP BY A.WAREHOUSE_CD, A.MATERIAL_KIND, A.MATERIAL_DETAIL, A.SIZE_TXT
            ) Z
        WHERE Z.STOCK_QTY > 0
        ORDER BY Z.WAREHOUSE_CD, Z.LOC_SEQ
    </select>

    <select id="selectItemOrderRegisterPopListSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT *, ROW_NUMBER() OVER() AS ROWNUM
        FROM
		(
			SELECT
				A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, NULL AS MATERIAL_ORDER_SEQ, IFNULL(F.MATERIAL_ORDER_NUM, SPACE(0)) MATERIAL_ORDER_NUM,
				(SELECT GROUP_CONCAT(MATERIAL_ORDER_NUM ORDER BY M.MATERIAL_ORDER_SEQ DESC SEPARATOR <![CDATA[ '<br>' ]]>) FROM TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.ORDER_STATUS IN ('MST002', 'MST004')) AS FINISH_MATERIAL_ORDER_NUM,
				A.CONTROL_NUM, A.CONTROL_VER, CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_PART_NUM,
				A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
				A.COMP_CD, SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
				A.CONTROL_STATUS, SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM,
				B.STATUS_DT, SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM,
				B.PART_STATUS, B.DRAWING_NUM, B.DRAWING_VER, B.PART_NUM, B.WORK_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN F.MATERIAL_TYPE
					ELSE SF_GET_ETC_CD('1027', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE})
					ELSE SF_GET_ETC_NM('1027', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE_NM,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN F.MATERIAL_DETAIL
					ELSE B.MATERIAL_DETAIL
				END AS MATERIAL_DETAIL,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN SF_GET_CODE_NM('1027', F.MATERIAL_DETAIL, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE})
				END AS MATERIAL_DETAIL_NM,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN F.MATERIAL_KIND
					ELSE B.MATERIAL_KIND
				END AS MATERIAL_KIND,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN SF_GET_CODE_NM('1029', F.MATERIAL_KIND, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE})
				END AS MATERIAL_KIND_NM,
				B.SIZE_TXT, B.SIZE_TYPE, B.SIZE_W, B.SIZE_H, B.SIZE_D, B.SIZE_L, F.REQUEST_NOTE,
				B.DXF_GFILE_SEQ, B.DWG_GFILE_SEQ, B.PDF_GFILE_SEQ, B.IMG_GFILE_SEQ,
				SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY,
				F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
				CASE WHEN F.ORDER_QTY IS NOT NULL THEN F.ORDER_QTY
					ELSE SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ)-IFNULL(SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY'), 0)
				END AS M_ORDER_QTY,
				(SELECT GROUP_CONCAT(M.ORDER_QTY ORDER BY M.MATERIAL_ORDER_SEQ DESC SEPARATOR <![CDATA[ '<br>' ]]>) FROM TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.ORDER_STATUS IN ('MST002', 'MST004')) AS M_ORDER_COMPLETED_QTY,
				F.ORDER_NOTE AS M_ORDER_NOTE, CASE WHEN F.SIZE_TXT IS NOT NULL THEN F.SIZE_TXT ELSE B.SIZE_TXT END AS M_SIZE_TXT,
				CASE WHEN F.HOPE_DUE_DT IS NOT NULL THEN DATE_FORMAT(STR_TO_DATE(F.HOPE_DUE_DT, '%Y%m%d'), '%Y-%m-%d')
					ELSE DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), '%Y-%m-%d')
				END AS HOPE_DUE_DT,
				IFNULL(F.ORDER_STATUS, SPACE(0)) AS ORDER_STATUS, F.NOTE, SF_GET_DATE_F(F.IN_DT,'YYYY','M') AS IN_DT
			FROM TBL_CONTROL A
				INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE != 'WTP020'
					AND IFNULL(B.PART_STATUS, SPACE(0)) NOT IN (SPACE(0), 'PRO003')
					AND B.MATERIAL_SUPPLY_YN = 'N'
				LEFT OUTER JOIN TBL_MATERIAL_ORDER F ON B.CONTROL_SEQ = F.CONTROL_SEQ AND F.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
			WHERE A.DEL_YN = 'N' AND A.CONTROL_STATUS = 'ORD001'
                AND CONCAT(A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN(${CONCAT_SEQ})
			GROUP BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
			UNION ALL
			SELECT
				A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, NULL AS MATERIAL_ORDER_SEQ, IFNULL(F.MATERIAL_ORDER_NUM, SPACE(0)) MATERIAL_ORDER_NUM,
                (SELECT GROUP_CONCAT(MATERIAL_ORDER_NUM ORDER BY M.MATERIAL_ORDER_SEQ DESC SEPARATOR <![CDATA[ '<br>' ]]>) FROM TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.ORDER_STATUS IN ('MST002', 'MST004')) AS FINISH_MATERIAL_ORDER_NUM,
				A.CONTROL_NUM, A.CONTROL_VER, CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_PART_NUM,
				A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
				A.COMP_CD, SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
				A.CONTROL_STATUS, SF_GET_CODE_NM('1038', A.CONTROL_STATUS, #{LOGIN_LOCALE}) AS CONTROL_STATUS_NM,
                B.STATUS_DT, SF_GET_PART_STATUS_NM(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM,
				B.PART_STATUS, B.DRAWING_NUM, B.DRAWING_VER, B.PART_NUM, B.WORK_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN F.MATERIAL_TYPE
					ELSE SF_GET_ETC_CD('1027', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE,
				CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE})
					ELSE SF_GET_ETC_NM('1027', B.MATERIAL_DETAIL)
				END MATERIAL_TYPE_NM,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN F.MATERIAL_DETAIL
					ELSE B.MATERIAL_DETAIL
				END AS MATERIAL_DETAIL,
				CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN SF_GET_CODE_NM('1027', F.MATERIAL_DETAIL, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE})
				END AS MATERIAL_DETAIL_NM,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN F.MATERIAL_KIND
					ELSE B.MATERIAL_KIND
				END AS MATERIAL_KIND,
				CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN SF_GET_CODE_NM('1029', F.MATERIAL_KIND, #{LOGIN_LOCALE})
					ELSE SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE})
				END AS MATERIAL_KIND_NM,
				B.SIZE_TXT, B.SIZE_TYPE, B.SIZE_W, B.SIZE_H, B.SIZE_D, B.SIZE_L, F.REQUEST_NOTE,
				B.DXF_GFILE_SEQ, B.DWG_GFILE_SEQ, B.PDF_GFILE_SEQ, B.IMG_GFILE_SEQ,
				SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY,
				F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
				IFNULL(SF_GET_STOCK_OUT(G.MATERIAL_ORDER_SEQ, 'QTY'), 0) AS M_ORDER_QTY,
				(SELECT GROUP_CONCAT(M.ORDER_QTY ORDER BY M.MATERIAL_ORDER_SEQ DESC SEPARATOR <![CDATA[ '<br>' ]]>) FROM TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.ORDER_STATUS IN ('MST002', 'MST004')) AS M_ORDER_COMPLETED_QTY,
				F.ORDER_NOTE AS M_ORDER_NOTE, CASE WHEN F.SIZE_TXT IS NOT NULL THEN F.SIZE_TXT ELSE B.SIZE_TXT END AS M_SIZE_TXT,
				CASE WHEN F.HOPE_DUE_DT IS NOT NULL THEN DATE_FORMAT(STR_TO_DATE(F.HOPE_DUE_DT, '%Y%m%d'), '%Y-%m-%d')
					ELSE DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 1 DAY), '%Y-%m-%d')
				END AS HOPE_DUE_DT,
				IFNULL(F.ORDER_STATUS, SPACE(0)) AS ORDER_STATUS, F.NOTE, SF_GET_DATE_F(F.IN_DT,'YYYY','M') AS IN_DT
			FROM TBL_CONTROL A
				INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE != 'WTP020'
					AND IFNULL(B.PART_STATUS, SPACE(0)) NOT IN (SPACE(0), 'PRO003')
					AND B.MATERIAL_SUPPLY_YN = 'N'
				INNER JOIN TBL_MATERIAL_ORDER F ON B.CONTROL_SEQ = F.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
				INNER JOIN TBL_MY_MATERIAL_OUT G ON F.MATERIAL_ORDER_SEQ = G.MATERIAL_ORDER_SEQ
			WHERE A.DEL_YN = 'N' AND A.CONTROL_STATUS = 'ORD001'
				AND CONCAT(A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) IN(${CONCAT_SEQ})
			GROUP BY A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
		) Z
		ORDER BY Z.MATERIAL_ORDER_NUM, Z.MATERIAL_DETAIL_NM, Z.REQUEST_NOTE, Z.CONTROL_NUM, Z.PART_NUM
    </select>

    <select id="selectItemOrderRegisterPopListNum" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.*, ROW_NUMBER() OVER() AS ROWNUM
        FROM
        (
            SELECT
                A.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, F.MATERIAL_ORDER_SEQ, F.MATERIAL_ORDER_NUM,
                A.CONTROL_NUM, A.CONTROL_VER, CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_PART_NUM,
                A.ORDER_COMP_CD, SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM,
                A.COMP_CD, SF_GET_COMP_NM(A.COMP_CD) AS COMP_NM,
                B.DRAWING_NUM, B.DRAWING_VER, B.PART_NUM, B.WORK_TYPE,
                CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN F.MATERIAL_TYPE
                    ELSE SF_GET_ETC_CD('1027', B.MATERIAL_DETAIL)
                END MATERIAL_TYPE,
                CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE})
                    ELSE SF_GET_ETC_NM('1027', B.MATERIAL_DETAIL)
                END MATERIAL_TYPE_NM,
                CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN F.MATERIAL_DETAIL
                    ELSE B.MATERIAL_DETAIL
                END AS MATERIAL_DETAIL,
                CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN SF_GET_CODE_NM(1027, F.MATERIAL_DETAIL, #{LOGIN_LOCALE})
                    ELSE SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE})
                END AS MATERIAL_DETAIL_NM,
                CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN F.MATERIAL_KIND
                    ELSE B.MATERIAL_KIND
                END AS MATERIAL_KIND,
                CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN SF_GET_CODE_NM(1029, F.MATERIAL_KIND, #{LOGIN_LOCALE})
                    ELSE SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE})
                END AS MATERIAL_KIND_NM,
                B.SIZE_TXT, B.SIZE_TYPE, B.SIZE_W, B.SIZE_H, B.SIZE_D, B.SIZE_L, F.REQUEST_NOTE,
                B.DXF_GFILE_SEQ, B.DWG_GFILE_SEQ, B.PDF_GFILE_SEQ, B.IMG_GFILE_SEQ,
                SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS ORDER_QTY,
                F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
                CASE WHEN F.ORDER_QTY IS NOT NULL THEN F.ORDER_QTY
                    ELSE SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ)
                END AS M_ORDER_QTY,
                F.ORDER_NOTE AS M_ORDER_NOTE, CASE WHEN F.SIZE_TXT IS NOT NULL THEN F.SIZE_TXT ELSE B.SIZE_TXT END AS M_SIZE_TXT,
                DATE_FORMAT(STR_TO_DATE(F.HOPE_DUE_DT, '%Y%m%d'), '%Y-%m-%d') AS HOPE_DUE_DT,
                F.ORDER_STATUS, F.NOTE, F.ORDER_USER_ID, SF_GET_DATE_F(F.IN_DT,'YYYY','M') AS IN_DT
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE != 'WTP020'
                    AND IFNULL(B.PART_STATUS, SPACE(0)) NOT IN (SPACE(0), 'PRO003')
					AND B.MATERIAL_SUPPLY_YN = 'N'
                INNER JOIN TBL_MATERIAL_ORDER F ON B.CONTROL_SEQ = F.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
                    AND F.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                    <!-- AND IFNULL(F.ORDER_STATUS, SPACE(0)) NOT IN('MST004') -->
            WHERE A.CONTROL_STATUS = 'ORD001'
                AND SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) > 0
            UNION ALL
            SELECT
                '' AS CONTROL_SEQ, '' AS CONTROL_DETAIL_SEQ, F.MATERIAL_ORDER_SEQ, F.MATERIAL_ORDER_NUM,
                '' AS CONTROL_NUM, '' AS CONTROL_VER, '' AS CONTROL_PART_NUM,
                '' AS ORDER_COMP_CD, '' AS ORDER_COMP_NM,
                '' AS COMP_CD, '' AS COMP_NM,
                '' AS DRAWING_NUM, '' AS DRAWING_VER, '' AS PART_NUM, '' AS WORK_TYPE,
                F.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                F.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', F.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                F.MATERIAL_KIND, SF_GET_CODE_NM('1029', F.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                '' AS SIZE_TXT, '' AS SIZE_TYPE, '' AS SIZE_W, '' AS SIZE_H, '' AS SIZE_D, '' AS SIZE_L, F.REQUEST_NOTE,
                '' AS DXF_GFILE_SEQ, '' AS DWG_GFILE_SEQ, '' AS PDF_GFILE_SEQ, '' AS IMG_GFILE_SEQ, 0 AS ORDER_QTY,
                F.MATERIAL_COMP_CD AS M_COMP_CD, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS M_COMP_NM,
                F.ORDER_QTY AS M_ORDER_QTY,
                F.ORDER_NOTE AS M_ORDER_NOTE, F.SIZE_TXT AS M_SIZE_TXT,
                DATE_FORMAT(STR_TO_DATE(F.HOPE_DUE_DT, '%Y%m%d'), '%Y-%m-%d') AS HOPE_DUE_DT,
                F.ORDER_STATUS, F.NOTE, F.ORDER_USER_ID, SF_GET_DATE_F(F.IN_DT,'YYYY','M') AS IN_DT
            FROM TBL_MATERIAL_ORDER F
            WHERE NOT EXISTS (SELECT * FROM TBL_CONTROL_PART X WHERE X.CONTROL_SEQ = F.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ)
                AND F.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                <!-- AND IFNULL(F.ORDER_STATUS, SPACE(0)) NOT IN('MST004') -->
                <!-- AND F.ORDER_QTY-IFNULL(SF_GET_STOCK_OUT(F.MATERIAL_ORDER_SEQ, 'QTY'), 0) > 0 -->
        ) Z
        ORDER BY Z.MATERIAL_ORDER_NUM, Z.MATERIAL_DETAIL_NM, Z.REQUEST_NOTE, Z.CONTROL_NUM, Z.PART_NUM
    </select>

    <update id="updateItemOrderRegisterPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
        SET
            PART_STATUS = 'PRO004',
            STATUS_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW()
        WHERE 1 = 1
            AND A.PART_STATUS = 'PRO002'
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateItemOrderRegisterOrderStatus" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET SEND_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1=1
            AND MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
    </update>

    <insert id="insertItemOrderRegisterControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS
            (CONTROL_SEQ, CONTROL_DETAIL_SEQ, SEQ, PART_STATUS, STATUS_DT, INSERT_ID)
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, NEXTVAL(SEQ_CONTROL_PART_PROGRESS), A.PART_STATUS, NOW(), #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART A
        WHERE 1 = 1
            AND A.PART_STATUS = 'PRO004'
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.PART_STATUS = A.PART_STATUS)
    </insert>

    <update id="insertUpdateItemOrderRegister" parameterType="java.util.HashMap">
        INSERT INTO TBL_MATERIAL_ORDER
        (
            MATERIAL_ORDER_SEQ, MATERIAL_ORDER_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ,
            MATERIAL_COMP_CD, HOPE_DUE_DT, SIZE_TXT,
            SIZE_TYPE, SIZE_W, SIZE_H, SIZE_T, SIZE_D, SIZE_L, REQUEST_NOTE,
            MATERIAL_TYPE, MATERIAL_DETAIL, MATERIAL_KIND,
            ORDER_NOTE, ORDER_QTY, ORDER_AMT, ORDER_USER_ID,
            ORDER_STATUS, ORDER_DT, IN_DT, CANCEL_DT, NOTE,
            INSERT_DT, INSERT_ID, CANCEL_USER_ID
        )
        VALUES
        (
            <choose>
                <when  test="MATERIAL_ORDER_SEQ !='' and MATERIAL_ORDER_SEQ != null">
                    #{MATERIAL_ORDER_SEQ},
                </when>
                <otherwise>
                    NEXTVAL(SEQ_MATERIAL_ORDER),
                </otherwise>
            </choose>
            #{MATERIAL_ORDER_NUM}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ},
            #{M_COMP_CD}, REPLACE(#{HOPE_DUE_DT}, '-', SPACE(0)), #{M_SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT}), #{REQUEST_NOTE},
            #{MATERIAL_TYPE}, #{MATERIAL_DETAIL}, #{MATERIAL_KIND},
            #{M_ORDER_NOTE}, #{M_ORDER_QTY}, #{ORDER_AMT}, #{ORDER_USER_ID},
            #{ORDER_STATUS}, #{ORDER_DT}, #{IN_DT}, #{CANCEL_DT}, #{NOTE},
            NOW(), #{LOGIN_USER_ID}, #{CANCEL_USER_ID}
        )
        ON DUPLICATE KEY UPDATE
            MATERIAL_COMP_CD = #{M_COMP_CD},
            HOPE_DUE_DT = REPLACE(#{HOPE_DUE_DT}, '-', SPACE(0)),
            SIZE_TXT = #{M_SIZE_TXT},
            SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT}),
            SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT}),
            SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT}),
            SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT}),
            SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT}),
            SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT}),
            REQUEST_NOTE = #{REQUEST_NOTE},
            MATERIAL_TYPE = #{MATERIAL_TYPE},
            MATERIAL_DETAIL = #{MATERIAL_DETAIL},
            MATERIAL_KIND = #{MATERIAL_KIND},
            ORDER_NOTE = #{M_ORDER_NOTE},
            ORDER_QTY = #{M_ORDER_QTY},
            ORDER_USER_ID = #{ORDER_USER_ID},
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </update>

    <insert id="insertItemOrderRegisterOut1" parameterType="java.util.HashMap">
        <selectKey keyProperty="MATERIAL_ORDER_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_MATERIAL_ORDER) FROM DUAL
        </selectKey>
        INSERT INTO TBL_MATERIAL_ORDER (
            MATERIAL_ORDER_SEQ
            , MATERIAL_ORDER_NUM
            , CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , INSERT_ID
        ) VALUES (
            #{MATERIAL_ORDER_SEQ}
            , #{MATERIAL_ORDER_NUM}
            , #{CONTROL_SEQ}
            , #{CONTROL_DETAIL_SEQ}
            , #{LOGIN_USER_ID}
        )
    </insert>

    <insert id="insertItemOrderRegisterOut2" parameterType="java.util.HashMap">
        <selectKey keyProperty="MY_MAT_OUT_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_MY_MAT_OUT) FROM DUAL
        </selectKey>
        INSERT INTO TBL_MY_MATERIAL_OUT
        (MY_MAT_OUT_SEQ, OUT_QTY, OUT_DT, OUT_USER_ID, MY_MAT_STOCK_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, MATERIAL_ORDER_SEQ, OUT_STATUS, INSERT_ID)
        VALUES
        (
        #{MY_MAT_OUT_SEQ}, #{OUT_QTY}, NOW(), #{OUT_USER_ID}, #{MY_MAT_STOCK_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ},
        #{MATERIAL_ORDER_SEQ}, 'OUT001', #{LOGIN_USER_ID}
        )
    </insert>

    <update id="updateItemOrderRegisterOut3" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER A, TBL_MY_MATERIAL_OUT B, TBL_MY_MATERIAL_STOCK C
        SET A.MATERIAL_TYPE = C.MATERIAL_TYPE
            , A.MATERIAL_DETAIL = C.MATERIAL_DETAIL
            , A.MATERIAL_KIND = C.MATERIAL_KIND
            , A.SIZE_TXT = C.SIZE_TXT
            , A.SIZE_TYPE = C.SIZE_TYPE
            , A.SIZE_W = C.SIZE_W
            , A.SIZE_H = C.SIZE_H
            , A.SIZE_T = C.SIZE_T
            , A.SIZE_D = C.SIZE_D
            , A.SIZE_L = C.SIZE_L
        WHERE B.MATERIAL_ORDER_SEQ = A.MATERIAL_ORDER_SEQ
            AND C.MY_MAT_STOCK_SEQ = B.MY_MAT_STOCK_SEQ
            AND C.DEL_YN = 'N'
            AND B.MY_MAT_OUT_SEQ = #{MY_MAT_OUT_SEQ}
    </update>

    <delete id="deleteItemOrderRegisterOut" parameterType="java.util.HashMap">
        DELETE FROM TBL_MY_MATERIAL_OUT
        WHERE MY_MAT_OUT_SEQ IN(${MY_MAT_OUT_SEQ})
    </delete>

    <insert id="insertItemOrderRegisterPopSave" parameterType="java.util.HashMap" >
        <selectKey keyProperty="MATERIAL_ORDER_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_MATERIAL_ORDER) FROM DUAL
        </selectKey>
        INSERT INTO TBL_MATERIAL_ORDER
        (
            MATERIAL_ORDER_SEQ, MATERIAL_ORDER_NUM,
            CONTROL_SEQ, CONTROL_DETAIL_SEQ,
            MATERIAL_COMP_CD, HOPE_DUE_DT, SIZE_TXT,
            SIZE_TYPE, SIZE_W, SIZE_H, SIZE_T, SIZE_D, SIZE_L, REQUEST_NOTE,
            MATERIAL_TYPE, MATERIAL_DETAIL, MATERIAL_KIND,
            ORDER_NOTE, ORDER_QTY, ORDER_AMT, ORDER_USER_ID, NOTE,
            INSERT_DT, INSERT_ID
        )
        SELECT
            #{MATERIAL_ORDER_SEQ}, #{MATERIAL_ORDER_NUM},
            #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ},
            #{M_COMP_CD}, REPLACE(#{HOPE_DUE_DT}, '-', SPACE(0)), #{M_SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT}), #{REQUEST_NOTE},
            #{MATERIAL_TYPE}, #{MATERIAL_DETAIL}, #{MATERIAL_KIND},
            #{M_ORDER_NOTE}, #{M_ORDER_QTY}, #{ORDER_AMT}, #{ORDER_USER_ID}, #{NOTE},
            NOW(), #{LOGIN_USER_ID}
        FROM DUAL
        WHERE NOT EXISTS (SELECT * FROM TBL_MATERIAL_ORDER M WHERE M.MATERIAL_ORDER_NUM = #{ORIGINAL_MATERIAL_ORDER_NUM})
    </insert>

    <update id="updateItemOrderRegisterPopSave" parameterType="java.util.HashMap">
        UPDATE
            TBL_MATERIAL_ORDER
        SET
            MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
            , MATERIAL_COMP_CD = #{M_COMP_CD}
            , HOPE_DUE_DT = DATE_FORMAT(#{HOPE_DUE_DT}, '%Y%m%d')
            , SIZE_TXT = #{M_SIZE_TXT}
            , SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT})
            , SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT})
            , SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT})
            , SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT})
            , SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT})
            , SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT})
            , REQUEST_NOTE = #{REQUEST_NOTE}
            , ORDER_NOTE = #{M_ORDER_NOTE}
            , ORDER_QTY = #{M_ORDER_QTY}
            , ORDER_STATUS = NULL
            , ORDER_USER_ID = #{ORDER_USER_ID}
            , MATERIAL_KIND = #{MATERIAL_KIND}
            , MATERIAL_TYPE = #{MATERIAL_TYPE}
            , MATERIAL_DETAIL = #{MATERIAL_DETAIL}
            , NOTE = #{NOTE}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </update>

    <update id="insertUpdateItemOrderRegisterPopStatus" parameterType="java.util.HashMap">
        INSERT INTO TBL_MATERIAL_ORDER
        (
            MATERIAL_ORDER_SEQ, MATERIAL_ORDER_NUM, CONTROL_SEQ, CONTROL_DETAIL_SEQ,
            MATERIAL_COMP_CD, HOPE_DUE_DT, SIZE_TXT,
            SIZE_TYPE, SIZE_W, SIZE_H, SIZE_T, SIZE_D, SIZE_L, REQUEST_NOTE,
            MATERIAL_TYPE, MATERIAL_DETAIL, MATERIAL_KIND,
            ORDER_NOTE, ORDER_QTY, ORDER_AMT, ORDER_USER_ID,
            ORDER_STATUS, ORDER_DT,
            INSERT_DT, INSERT_ID
        )
        VALUES
        (
            <choose>
                <when  test="MATERIAL_ORDER_SEQ !='' and MATERIAL_ORDER_SEQ != null">
                    #{MATERIAL_ORDER_SEQ},
                </when>
                <otherwise>
                    NEXTVAL(SEQ_MATERIAL_ORDER),
                </otherwise>
            </choose>
             #{MATERIAL_ORDER_NUM}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ},
            #{M_COMP_CD}, REPLACE(#{HOPE_DUE_DT}, '-', SPACE(0)), #{M_SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT}), #{REQUEST_NOTE},
            #{MATERIAL_TYPE}, #{MATERIAL_DETAIL}, #{MATERIAL_KIND},
            #{M_ORDER_NOTE}, #{M_ORDER_QTY}, #{ORDER_AMT}, #{ORDER_USER_ID},
            'MST002', NOW(),
            NOW(), #{LOGIN_USER_ID}
        )
        ON DUPLICATE KEY UPDATE
            MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM},
            MATERIAL_COMP_CD = #{M_COMP_CD},
            HOPE_DUE_DT = REPLACE(#{HOPE_DUE_DT}, '-', SPACE(0)),
            SIZE_TXT = #{M_SIZE_TXT},
            SIZE_TYPE = SF_GET_SIZE_TXT('SIZE_TYPE', #{M_SIZE_TXT}),
            SIZE_W = SF_GET_SIZE_TXT('SIZE_W', #{M_SIZE_TXT}),
            SIZE_H = SF_GET_SIZE_TXT('SIZE_H', #{M_SIZE_TXT}),
            SIZE_T = SF_GET_SIZE_TXT('SIZE_T', #{M_SIZE_TXT}),
            SIZE_D = SF_GET_SIZE_TXT('SIZE_D', #{M_SIZE_TXT}),
            SIZE_L = SF_GET_SIZE_TXT('SIZE_L', #{M_SIZE_TXT}),
            REQUEST_NOTE = #{REQUEST_NOTE},
            MATERIAL_TYPE = #{MATERIAL_TYPE},
            MATERIAL_DETAIL = #{MATERIAL_DETAIL},
            MATERIAL_KIND = #{MATERIAL_KIND},
            ORDER_NOTE = #{M_ORDER_NOTE},
            ORDER_QTY = #{M_ORDER_QTY},
            ORDER_USER_ID = #{ORDER_USER_ID},
            ORDER_DT = NOW(),
            ORDER_STATUS = 'MST002',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID},
            CANCEL_DT = NULL,
            CANCEL_USER_ID = NULL
    </update>

    <update id="updateItemOrderRegisterMaterialOrderCancel" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET
            ORDER_STATUS = 'MST003',
            ORDER_DT = NULL,
            CANCEL_DT = NOW(),
            CANCEL_USER_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ IN(${MATERIAL_ORDER_SEQ})
    </update>

    <update id="updateItemOrderRegisterControlPartCancel" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART A
        SET PART_STATUS = 'PRO002',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONCAT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) IN(${CONCAT_SEQ})
            AND NOT EXISTS (SELECT * FROM TBL_MATERIAL_ORDER M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.ORDER_STATUS IN ('MST001','MST002','MST004'))
    </update>

    <delete id="deleteMaterialOrderToSequence" parameterType="java.util.HashMap">
        DELETE FROM TBL_MATERIAL_ORDER
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </delete>

    <delete id="deleteMaterialOrderToNumber" parameterType="java.util.HashMap">
        DELETE FROM TBL_MATERIAL_ORDER
        WHERE MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
    </delete>

    <insert id="insertItemOrderRegisterMasterOrderHistory" parameterType="java.util.HashMap" >
        INSERT INTO TBL_MATERIAL_ORDER_HIST
        SELECT
            NEXTVAL(SEQ_MATERIAL_ORDER_HIST)
            , MATERIAL_ORDER_SEQ
            , MATERIAL_ORDER_NUM
            , CONTROL_SEQ
            , CONTROL_DETAIL_SEQ
            , MATERIAL_COMP_CD
            , HOPE_DUE_DT
            , SIZE_TXT
            , SIZE_TYPE
            , SIZE_W
            , SIZE_H
            , SIZE_T
            , SIZE_D
            , SIZE_L
            , REQUEST_NOTE
            , ORDER_NOTE
            , ORDER_QTY
            , ORDER_AMT
            , INSPECT_MATERIAL_YN
            , INSPECT_SURFACE_YN
            , INSPECT_SIZE_YN
            , INSPECT_NOTE
            , ORDER_STATUS
            , ORDER_DT
            , IN_DT
            , CANCEL_DT
            , CANCEL_USER_ID
            , SEND_DT
            , MATERIAL_KIND
            , MATERIAL_TYPE
            , MATERIAL_DETAIL
            , NOTE
            , NOW() <!-- INSERT_DT -->
            , #{LOGIN_USER_ID} <!-- INSERT_ID -->
            , NULL <!-- UPDATE_DT -->
            , NULL <!-- UPDATE_ID -->
        FROM TBL_MATERIAL_ORDER A
        WHERE A.ORDER_STATUS = 'MST002'
            AND A.MATERIAL_ORDER_SEQ IN(${MATERIAL_ORDER_SEQ})
    </insert>

    <select id="selectItemOrderRegisterPopMailTable" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
			A.MATERIAL_ORDER_SEQ, A.MATERIAL_ORDER_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ,
            A.MATERIAL_COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
            D.COMP_CD, E.COMP_NM AS COMP_NM,
            SF_GET_DATE_F(A.ORDER_DT, '', '') AS ORDER_DT, A.SIZE_TXT, A.ORDER_QTY AS ORDER_QTY,
            IFNULL(A.ORDER_NOTE, SPACE(0)) AS ORDER_NOTE,
            IFNULL(A.REQUEST_NOTE, SPACE(0)) AS REQUEST_NOTE,
            A.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
			A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
			A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM
        FROM TBL_MATERIAL_ORDER A
            INNER JOIN TBL_COMPANY C ON A.MATERIAL_COMP_CD = C.COMP_CD
            LEFT OUTER JOIN TBL_CONTROL D ON A.CONTROL_SEQ = D.CONTROL_SEQ
            LEFT OUTER JOIN TBL_COMPANY E ON IFNULL(D.COMP_CD, 'CMP0003') = E.COMP_CD
        WHERE 1=1
			AND A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
			AND A.ORDER_QTY > 0
        ORDER BY MATERIAL_COMP_CD
    </select>

    <select id="selectItemOrderRegisterPopTable" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
			GROUP_CONCAT(Z.MATERIAL_ORDER_SEQ) CONCAT_SEQ,
            Z.MATERIAL_COMP_NM, Z.MATERIAL_COMP_EMAIL,
            GROUP_CONCAT(Z.CONTENTS separator ', ') CONTENTS,
            Z.MATERIAL_COMP_CD, #{MATERIAL_ORDER_NUM} AS MATERIAL_ORDER_NUM,
            DATE_FORMAT(NOW(), '%Y-%m-%d') AS ORDER_DT,
            Z.USER_ID, Z.USER_NM, Z.USER_TEL, Z.POSITION_NM
        FROM
			(
			SELECT
				A.MATERIAL_ORDER_SEQ, A.MATERIAL_COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
				CONCAT(C.CEO_NM ,'(',C.COMP_EMAIL,')' )AS MATERIAL_COMP_EMAIL,
				CONCAT( SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(1),
						A.SIZE_TXT, SPACE(1), A.ORDER_QTY, 'EA') AS CONTENTS,
                E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
			FROM TBL_MATERIAL_ORDER A
				INNER JOIN TBL_COMPANY C ON A.MATERIAL_COMP_CD = C.COMP_CD
                LEFT OUTER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
			WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
 			    <!-- AND IFNULL(A.ORDER_STATUS, SPACE(0)) NOT IN('MST004', 'MST005') -->
 			    AND A.ORDER_QTY > 0
            UNION ALL
            SELECT
				A.MATERIAL_ORDER_SEQ, C.COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
				CONCAT(C.CEO_NM ,'(',C.COMP_EMAIL,')' )AS MATERIAL_COMP_EMAIL,
				CONCAT( SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(1),
						A.SIZE_TXT, SPACE(1), IFNULL(SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'QTY'), 0), 'EA') AS CONTENTS,
                E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
			FROM TBL_MATERIAL_ORDER A
				INNER JOIN TBL_COMPANY C ON 'CMP0076' = C.COMP_CD
                INNER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
			WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
 			    <!-- AND IFNULL(A.ORDER_STATUS, SPACE(0)) NOT IN('MST004', 'MST005') -->
			    AND IFNULL(SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'QTY'), 0) > 0
			) Z
        GROUP BY Z.MATERIAL_COMP_CD
        ORDER BY MATERIAL_COMP_CD
    </select>

    <select id="selectItemOrderRegisterPopTable2" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.MATERIAL_ORDER_SEQ
            , X.MATERIAL_COMP_CD
            , X.MATERIAL_COMP_NM
            , X.COMP_EMAIL
            , SF_GET_CODE_NM('1027', X.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
            , X.SIZE_TXT
            , CONCAT(X.ORDER_QTY, 'EA') AS ORDER_QTY_INFO
            , X.USER_ID
            , X.USER_NM
            , X.USER_TEL
            , X.POSITION_NM
        FROM (
            SELECT
                A.MATERIAL_ORDER_SEQ, A.MATERIAL_COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
                C.COMP_EMAIL,
                A.MATERIAL_DETAIL,
                A.SIZE_TXT,
                A.ORDER_QTY,
                E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
            FROM TBL_MATERIAL_ORDER A
                INNER JOIN TBL_COMPANY C ON A.MATERIAL_COMP_CD = C.COMP_CD
                LEFT OUTER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
            WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                AND A.ORDER_QTY > 0
            UNION ALL
            SELECT
                A.MATERIAL_ORDER_SEQ, C.COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
                C.COMP_EMAIL,
                A.MATERIAL_DETAIL,
                A.SIZE_TXT,
                A.ORDER_QTY,
                E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
            FROM TBL_MATERIAL_ORDER A
                INNER JOIN TBL_COMPANY C ON 'CMP0076' = C.COMP_CD
                INNER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
            WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                AND IFNULL(SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'QTY'), 0) > 0
            UNION ALL 
            SELECT NULL AS MATERIAL_ORDER_SEQ
                , Q.MATERIAL_COMP_CD
                , Q.MATERIAL_COMP_NM
                , Q.COMP_EMAIL
                , Q.SIZE_TXT
                , Q.MATERIAL_DETAIL
                , SUM(ORDER_QTY)
                , Q.USER_ID
                , Q.USER_NM
                , Q.USER_TEL
                , Q.POSITION_NM 
            FROM (
                SELECT
                    A.MATERIAL_ORDER_SEQ, A.MATERIAL_COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
                    C.COMP_EMAIL,
                    A.MATERIAL_DETAIL,
                    A.SIZE_TXT,
                    A.ORDER_QTY,
                    E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
                FROM TBL_MATERIAL_ORDER A
                    INNER JOIN TBL_COMPANY C ON A.MATERIAL_COMP_CD = C.COMP_CD
                    LEFT OUTER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                    LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
                WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                    AND A.ORDER_QTY > 0
                UNION ALL
                SELECT
                    A.MATERIAL_ORDER_SEQ, C.COMP_CD, C.COMP_NM AS MATERIAL_COMP_NM,
                    C.COMP_EMAIL,
                    A.MATERIAL_DETAIL,
                    A.SIZE_TXT,
                    A.ORDER_QTY,
                    E.USER_ID, E.USER_NM, E.USER_TEL, E.POSITION_NM
                FROM TBL_MATERIAL_ORDER A
                    INNER JOIN TBL_COMPANY C ON 'CMP0076' = C.COMP_CD
                    INNER JOIN TBL_MY_MATERIAL_OUT D ON A.MATERIAL_ORDER_SEQ = D.MATERIAL_ORDER_SEQ
                    LEFT OUTER JOIN TBL_USER E ON A.ORDER_USER_ID = E.USER_ID AND E.DEL_YN = 'N'
                WHERE A.MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
                    AND IFNULL(SF_GET_STOCK_OUT(D.MATERIAL_ORDER_SEQ, 'QTY'), 0) > 0
            ) Q
            GROUP BY Q.MATERIAL_COMP_CD
        ) X 
        ORDER BY X.MATERIAL_COMP_CD, MATERIAL_ORDER_SEQ IS NULL ASC
    </select>

    <select id="selectItemOrderRegisterOrderSheetListPdf" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT *, ROW_NUMBER() OVER(ORDER BY Z.MATERIAL_ORDER_SEQ) AS SEQ
        FROM (
            SELECT
                F.MATERIAL_ORDER_NUM, F.MATERIAL_ORDER_SEQ, F.ORDER_DT, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS ORDER_COMP_NM,
                SF_GET_DATE_F(B.INNER_DUE_DT, '', '') AS INNER_DUE_DT,
                CASE WHEN F.MATERIAL_TYPE IS NOT NULL THEN SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE})
                    ELSE SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE})
                END MATERIAL_TYPE_NM,
                CASE WHEN F.MATERIAL_DETAIL IS NOT NULL THEN SF_GET_CODE_NM(1027, F.MATERIAL_DETAIL, #{LOGIN_LOCALE})
                    ELSE SF_GET_CODE_NM('1027', B.MATERIAL_DETAIL, #{LOGIN_LOCALE})
                END AS MATERIAL_DETAIL_NM,
                CASE WHEN F.MATERIAL_KIND IS NOT NULL THEN SF_GET_CODE_NM(1029, F.MATERIAL_KIND, #{LOGIN_LOCALE})
                    ELSE SF_GET_CODE_NM('1029', B.MATERIAL_KIND, #{LOGIN_LOCALE})
                END AS MATERIAL_KIND_NM,
                F.SIZE_TXT, F.ORDER_NOTE, F.INSPECT_NOTE, F.ORDER_QTY, F.HOPE_DUE_DT, F.REQUEST_NOTE,
                A.CONTROL_NUM, IFNULL(B.PART_NUM, SPACE(0)) PART_NUM
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE != 'WTP020'
                INNER JOIN TBL_MATERIAL_ORDER F ON B.CONTROL_SEQ = F.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
                    AND F.MATERIAL_ORDER_SEQ IN(${CONCAT_SEQ})
            WHERE A.CONTROL_STATUS = 'ORD001'
            GROUP BY F.MATERIAL_ORDER_SEQ
            UNION ALL
            SELECT
                F.MATERIAL_ORDER_NUM, F.MATERIAL_ORDER_SEQ, F.ORDER_DT, SF_GET_COMP_NM(F.MATERIAL_COMP_CD) AS ORDER_COMP_NM,
                SPACE(0) AS INNER_DUE_DT,
                SF_GET_CODE_NM( '1035', F.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                SF_GET_CODE_NM(1027, F.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                SF_GET_CODE_NM(1029, F.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                F.SIZE_TXT, F.ORDER_NOTE, F.INSPECT_NOTE, F.ORDER_QTY, F.HOPE_DUE_DT, F.REQUEST_NOTE,
                SPACE(0) AS CONTROL_NUM, SPACE(0) AS PART_NUM
            FROM TBL_MATERIAL_ORDER F
            WHERE 1=1
                AND F.MATERIAL_ORDER_SEQ IN(${CONCAT_SEQ})
                AND NOT EXISTS ( SELECT * FROM TBL_CONTROL_PART
                                        WHERE F.CONTROL_SEQ = CONTROL_SEQ AND F.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ)
            ) Z
        ORDER BY Z.MATERIAL_ORDER_SEQ
    </select>

    <select id="selectItemOrderHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER() AS ROWNUM
            , X.MATERIAL_ORDER_SEQ
            , X.MATERIAL_ORDER_NUM
            , X.MATERIAL_COMP_CD
            , SF_GET_COMP_NM(X.MATERIAL_COMP_CD) AS MATERIAL_COMP_NM
            , X.MATERIAL_DETAIL
            , X.ORDER_DT
            , X.IN_DT
            , SUM(X.ORDER_QTY) ORDER_QTY
            , SUM(X.IN_QTY) AS IN_QTY
            , GROUP_CONCAT(X.CONCAT_SEQ) CONCAT_SEQ
            ,
            CASE
                WHEN GROUP_CONCAT(X.IN_DT) IS NOT NULL THEN 'Y'
                ELSE 'N'
            END IN_YN
            , SF_GET_USER_NM(X.ORDER_USER_ID) AS ORDER_USER_NM
        FROM (
            SELECT A.MATERIAL_ORDER_SEQ
                , A.CONTROL_SEQ
                , A.CONTROL_DETAIL_SEQ
                , CONCAT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS CONCAT_SEQ
                , A.MATERIAL_ORDER_NUM
                , A.MATERIAL_COMP_CD
                , SF_GET_COMP_NM(A.MATERIAL_COMP_CD) AS MATERIAL_COMP_NM
                , A.MATERIAL_DETAIL
                , A.ORDER_QTY
                , CASE WHEN A.IN_DT IS NOT NULL THEN A.ORDER_QTY END AS IN_QTY
                , jmes.SF_GET_DATE_F(A.ORDER_DT,'YY','M') AS ORDER_DT
                , A.IN_DT
                , A.ORDER_USER_ID
            FROM TBL_MATERIAL_ORDER
            WHERE A.ORDER_STATUS IN ('MST002','MST004')
                AND SF_GET_DATE_F(A.ORDER_DT,'YYYY','') >= #{ITEM_ORDER_HISTORY_START_DATE}
                AND SF_GET_DATE_F(A.ORDER_DT,'YYYY','') <![CDATA[ <= ]]> #{ITEM_ORDER_HISTORY_END_DATE}
                <if test="CONTROL_NUM !='' and CONTROL_NUM != null">
                    AND EXISTS (	SELECT 1
                            FROM TBL_CONTROL M
                                , TBL_CONTROL_PART N
                            WHERE N.CONTROL_SEQ = M.CONTROL_SEQ
                                AND N.CONTROL_SEQ = A.CONTROL_SEQ
                                AND N.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                                AND M.DEL_YN = 'N'
                                AND UPPER(M.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%'))
                </if>
            	<if test="MATERIAL_ORDER_NUM !='' and MATERIAL_ORDER_NUM != null">
	                AND UPPER(A.MATERIAL_ORDER_NUM) LIKE CONCAT('%', UPPER(#{MATERIAL_ORDER_NUM}), '%')
	            </if>
	            <if test="MATERIAL_COMP_CD !='' and MATERIAL_COMP_CD != null">
	                AND A.MATERIAL_COMP_CD = #{MATERIAL_COMP_CD}
	            </if>
	            <if test="MATERIAL_DETAIL !='' and MATERIAL_DETAIL != null">
	                AND A.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
	            </if>
        ) X
        GROUP BY X.MATERIAL_COMP_CD, X.MATERIAL_ORDER_NUM
        ORDER BY X.ORDER_DT DESC
    </select>

    <select id="selectItemOrderHistoryListDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT * FROM
            (
                SELECT
                    A.MATERIAL_ORDER_SEQ, A.MATERIAL_ORDER_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, C.CONTROL_NUM, B.PART_NUM, CASE WHEN B.PART_NUM IS NULL THEN C.CONTROL_NUM ELSE CONCAT(C.CONTROL_NUM, '#', B.PART_NUM) END AS CONTROL_PART_NUM,
                    A.MATERIAL_COMP_CD, SF_GET_COMP_NM(A.MATERIAL_COMP_CD) AS MATERIAL_COMP_NM,
                    DATE_FORMAT(STR_TO_DATE(A.HOPE_DUE_DT, '%Y%m%d'), '%y/%m/%d') AS HOPE_DUE_DT, A.SIZE_TXT,
                    A.MATERIAL_TYPE, SF_GET_CODE_NM('1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                    A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                    A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                    A.ORDER_NOTE, A.REQUEST_NOTE, A.ORDER_QTY, A.ORDER_AMT,
                    INSPECT_MATERIAL_YN, INSPECT_SURFACE_YN, INSPECT_SIZE_YN, INSPECT_NOTE,
                    ORDER_STATUS, jmes.SF_GET_DATE_F(ORDER_DT,'YY','') AS ORDER_DT,
                    CASE WHEN IN_DT IS NOT NULL THEN 'Y' ELSE 'N' END IN_YN,
                    SF_GET_DATE_F(CANCEL_DT, 'YY', 'M') CANCEL_DT,
                    A.INSERT_DT, A.INSERT_ID, A.UPDATE_DT, A.UPDATE_ID, SF_GET_DATE_F(A.IN_DT,'','M') AS IN_DT,
                    CANCEL_USER_ID,
                    A.IN_UNIT_AMT, A.IN_NOTE, A.IN_UNIT_AMT * A.ORDER_QTY AS IN_SUM_AMT, A.UNIT_MATERIAL_AUTO_AMT
                FROM TBL_MATERIAL_ORDER A
                    INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                    INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                UNION ALL
                SELECT
                    A.MATERIAL_ORDER_SEQ, A.MATERIAL_ORDER_NUM, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, '' AS CONTROL_NUM, '' AS PART_NUM, '' AS CONTROL_PART_NUM,
                    A.MATERIAL_COMP_CD, SF_GET_COMP_NM(A.MATERIAL_COMP_CD) AS MATERIAL_COMP_NM,
                    DATE_FORMAT(STR_TO_DATE(A.HOPE_DUE_DT, '%Y%m%d'), '%y/%m/%d') AS HOPE_DUE_DT, A.SIZE_TXT,
                    A.MATERIAL_TYPE, SF_GET_CODE_NM('1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                    A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                    A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                    A.ORDER_NOTE, A.REQUEST_NOTE, A.ORDER_QTY, A.ORDER_AMT,
                    INSPECT_MATERIAL_YN, INSPECT_SURFACE_YN, INSPECT_SIZE_YN, INSPECT_NOTE,
                    ORDER_STATUS, jmes.SF_GET_DATE_F(ORDER_DT,'YY','') AS ORDER_DT,
                    CASE WHEN IN_DT IS NOT NULL THEN 'Y' ELSE 'N' END IN_YN,
                    SF_GET_DATE_F(CANCEL_DT, 'YY', 'M') CANCEL_DT,
                    A.INSERT_DT, A.INSERT_ID, A.UPDATE_DT, A.UPDATE_ID, SF_GET_DATE_F(A.IN_DT,'','M') AS IN_DT,
                    CANCEL_USER_ID,
                    A.IN_UNIT_AMT, A.IN_NOTE, A.IN_UNIT_AMT * A.ORDER_QTY AS IN_SUM_AMT, '' AS UNIT_MATERIAL_AUTO_AMT
                FROM TBL_MATERIAL_ORDER A
                WHERE NOT EXISTS ( SELECT * FROM TBL_CONTROL_PART
                                    WHERE A.CONTROL_SEQ = CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = CONTROL_DETAIL_SEQ)
            ) Z
        WHERE 1 = 1
            AND MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
            AND MATERIAL_COMP_CD = #{MATERIAL_COMP_CD}
        ORDER BY MATERIAL_ORDER_SEQ, MATERIAL_ORDER_NUM, MATERIAL_COMP_CD
    </select>

    <update id="updateItemOrderHistoryInspection" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET UPDATE_DT = NOW(),
        <if test="INSPECT_MATERIAL_YN != '' and INSPECT_MATERIAL_YN != null">
            INSPECT_MATERIAL_YN = #{INSPECT_MATERIAL_YN},
        </if>
        <if test="INSPECT_SURFACE_YN != '' and INSPECT_SURFACE_YN != null">
            INSPECT_SURFACE_YN = #{INSPECT_SURFACE_YN},
        </if>
        <if test="INSPECT_SIZE_YN != '' and INSPECT_SIZE_YN != null">
            INSPECT_SIZE_YN = #{INSPECT_SIZE_YN},
        </if>
        <if test="ORDER_AMT != '' and ORDER_AMT != null">
            ORDER_AMT = #{ORDER_AMT},
        </if>
        <if test="INSPECT_NOTE != '' and INSPECT_NOTE != null">
            INSPECT_NOTE = #{INSPECT_NOTE},
        </if>
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </update>

    <update id="updateItemOrderHistoryOrderIn" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET ORDER_STATUS = 'MST004',
            IN_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
            AND INSPECT_MATERIAL_YN = 'Y'
            AND INSPECT_SURFACE_YN = 'Y'
            AND INSPECT_SIZE_YN = 'Y'
    </update>

    <update id="updateItemOrderHistoryPartIn" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER A
			INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
        SET B.PART_STATUS = 'PRO005',
            B.UPDATE_DT = NOW(),
            B.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
            AND A.INSPECT_MATERIAL_YN = 'Y'
            AND A.INSPECT_SURFACE_YN = 'Y'
            AND INSPECT_SIZE_YN = 'Y'
            AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO005')
    </update>

    <update id="updateItemOrderHistoryOrderInManual" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET ORDER_STATUS = 'MST004',
            INSPECT_MATERIAL_YN = 'Y',
            INSPECT_SURFACE_YN = 'Y',
            INSPECT_SIZE_YN = 'Y',
            IN_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </update>

    <update id="updateItemOrderHistoryPartInManual" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER A
			INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
        SET B.PART_STATUS = 'PRO005',
            B.UPDATE_DT = NOW(),
            B.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
            AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO005')
    </update>

    <insert id="insertInWareHouseManagePartProgressManual" parameterType="java.util.HashMap">
        INSERT INTO TBL_CONTROL_PART_PROGRESS
            (CONTROL_SEQ, CONTROL_DETAIL_SEQ, SEQ, PART_STATUS, STATUS_DT, INSERT_ID)
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, NEXTVAL(SEQ_CONTROL_PART_PROGRESS), A.PART_STATUS, NOW(), #{LOGIN_USER_ID}
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_MATERIAL_ORDER B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                AND B.MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
                AND NOT EXISTS (SELECT * FROM TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO005')
    </insert>

    <insert id="insertInWareHouseManageOutManual" parameterType="java.util.HashMap">
        INSERT INTO TBL_MY_MATERIAL_OUT
        (MY_MAT_OUT_SEQ, OUT_QTY, OUT_DT, OUT_USER_ID, MY_MAT_STOCK_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, MATERIAL_ORDER_SEQ, OUT_STATUS, INSERT_ID)
        VALUES
        (NEXTVAL(SEQ_MY_MAT_OUT), #{OUT_QTY}, NOW(), #{OUT_USER_ID}, #{MY_MAT_STOCK_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}, #{MATERIAL_ORDER_SEQ}, 'OUT002', #{LOGIN_USER_ID})
    </insert>

    <update id="updateItemOrderStatus" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET UPDATE_DT = NOW(),
            ORDER_STATUS = #{ORDER_STATUS},
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </update>

    <select id="selectInWarehouseManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROWNUM,
            A.MY_MAT_STOCK_SEQ,
            A.MATERIAL_TYPE, SF_GET_CODE_NM('1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
            A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
            A.SIZE_TXT, A.SIZE_TYPE, A.SIZE_W, A.SIZE_H, A.SIZE_T, A.SIZE_D, A.SIZE_L,
            A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
            A.LOC_SEQ, B.LOC_NM,
            SUM(IFNULL((SELECT SUM(OUT_QTY) FROM TBL_MY_MATERIAL_OUT WHERE A.MY_MAT_STOCK_SEQ = MY_MAT_STOCK_SEQ AND OUT_STATUS = 'OUT001'), 0)) AS OUT_WAIT_QTY,
            SUM(IFNULL((SELECT SUM(IN_QTY) FROM TBL_MY_MATERIAL_IN WHERE A.MY_MAT_STOCK_SEQ = MY_MAT_STOCK_SEQ), 0)) -
            SUM(IFNULL((SELECT SUM(OUT_QTY) FROM TBL_MY_MATERIAL_OUT WHERE A.MY_MAT_STOCK_SEQ = MY_MAT_STOCK_SEQ AND OUT_STATUS = 'OUT002'), 0)) AS STOCK_QTY,
            A.NOTE, #{LOGIN_USER_ID} AS OUT_USER_ID
        FROM TBL_MY_MATERIAL_STOCK A
            LEFT OUTER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ AND B.DEL_YN = 'N'
        WHERE A.DEL_YN ='N'
        <if test="WAREHOUSE_CD !='' and WAREHOUSE_CD != null">
            AND A.WAREHOUSE_CD = #{WAREHOUSE_CD}
        </if>
        <if test="LOC_SEQ !='' and LOC_SEQ != null">
            AND A.LOC_SEQ = #{LOC_SEQ}
        </if>
        <if test="MATERIAL_DETAIL !='' and MATERIAL_DETAIL != null">
            AND A.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
        </if>
        <if test="MATERIAL_KIND !='' and MATERIAL_KIND != null">
            AND A.MATERIAL_KIND = #{MATERIAL_KIND}
        </if>
        GROUP BY A.WAREHOUSE_CD, A.MATERIAL_KIND, A.MATERIAL_DETAIL, A.SIZE_TXT
    </select>

    <select id="selectInWarehouseManageListDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER() OVER() AS ROWNUM,
            F.CONTROL_SEQ, E.CONTROL_DETAIL_SEQ, A.MY_MAT_STOCK_SEQ, C.MY_MAT_OUT_SEQ,
            F.CONTROL_NUM, E.PART_NUM,
            E.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
            A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
            A.SIZE_TXT, A.SIZE_TYPE, A.SIZE_W, A.SIZE_H, A.SIZE_T, A.SIZE_D, A.SIZE_L,
            C.OUT_QTY, SF_GET_DATE_F(C.OUT_DT, 'YYYY', '') AS OUT_DT, C.OUT_USER_ID,
            A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
            A.LOC_SEQ, B.LOC_NM,
            D.MATERIAL_ORDER_NUM
        FROM TBL_MY_MATERIAL_STOCK A
            INNER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ
                AND B.DEL_YN = 'N'
            INNER JOIN TBL_MY_MATERIAL_OUT C ON A.MY_MAT_STOCK_SEQ = C.MY_MAT_STOCK_SEQ
                AND C.OUT_STATUS = 'OUT001'
            INNER JOIN TBL_MATERIAL_ORDER D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL_PART E ON E.CONTROL_SEQ = D.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL F ON E.CONTROL_SEQ = F.CONTROL_SEQ
        WHERE A.DEL_YN ='N'
        GROUP BY A.WAREHOUSE_CD, A.MATERIAL_KIND, A.MATERIAL_DETAIL, A.SIZE_TXT
    </select>

    <select id="selectInWarehouseManageOutList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.*
        FROM (
            SELECT
                A.MY_MAT_STOCK_SEQ, C.MY_MAT_IN_SEQ, '' AS MY_MAT_OUT_SEQ,
                jmes.SF_GET_CODE_NM('1055', 1, #{LOGIN_LOCALE}) AS IN_OUT_NM,
                A.LOC_SEQ, B.LOC_NM,
                A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
                A.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                A.SIZE_TXT, C.IN_QTY, SPACE(0) AS OUT_QTY,
                SPACE(0) AS MATERIAL_ORDER_NUM, SPACE(0) AS CONTROL_NUM,
                SF_GET_USER_NM(C.INSERT_ID) AS REGISTED_USER,
                CASE WHEN C.UPDATE_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(C.UPDATE_DT,'YY','M')
					ELSE jmes.SF_GET_DATE_F(C.INSERT_DT,'YY','M')
                END AS REGISTED_DT,
                A.NOTE
            FROM TBL_MY_MATERIAL_STOCK A
                INNER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ AND B.DEL_YN = 'N'
                INNER JOIN TBL_MY_MATERIAL_IN C ON A.MY_MAT_STOCK_SEQ = C.MY_MAT_STOCK_SEQ
            WHERE 1=1
            UNION ALL
            SELECT
                A.MY_MAT_STOCK_SEQ, '' AS MY_MAT_IN_SEQ, D.MY_MAT_OUT_SEQ,
                jmes.SF_GET_CODE_NM('1055', 2, #{LOGIN_LOCALE}) AS IN_OUT_NM,
                A.LOC_SEQ, B.LOC_NM,
                A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
                A.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
                A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
                A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
                A.SIZE_TXT, SPACE(0) AS IN_QTY, D.OUT_QTY,
                G.MATERIAL_ORDER_NUM, E.CONTROL_NUM,
                SF_GET_USER_NM(D.INSERT_ID) AS REGISTED_USER,
                CASE WHEN D.UPDATE_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(D.UPDATE_DT,'YY','M')
					ELSE jmes.SF_GET_DATE_F(D.INSERT_DT,'YY','M')
                END AS REGISTED_DT,
                A.NOTE
            FROM TBL_MY_MATERIAL_STOCK A
                INNER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ AND B.DEL_YN = 'N'
                INNER JOIN TBL_MY_MATERIAL_OUT D ON A.MY_MAT_STOCK_SEQ = D.MY_MAT_STOCK_SEQ AND D.OUT_STATUS = 'OUT002'
                LEFT OUTER JOIN TBL_CONTROL E ON D.CONTROL_SEQ = E.CONTROL_SEQ
                LEFT OUTER JOIN TBL_CONTROL_PART F ON E.CONTROL_SEQ = F.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ AND F.CONTROL_DETAIL_SEQ
                LEFT OUTER JOIN TBL_MATERIAL_ORDER G ON F.CONTROL_SEQ = G.CONTROL_SEQ AND F.CONTROL_DETAIL_SEQ AND G.CONTROL_DETAIL_SEQ
            WHERE 1=1
            ) Z
        WHERE 1 = 1
        <if test="WAREHOUSE_CD !='' and WAREHOUSE_CD != null">
            AND Z.WAREHOUSE_CD = #{WAREHOUSE_CD}
        </if>
        <if test="LOC_SEQ !='' and LOC_SEQ != null">
            AND Z.LOC_SEQ = #{LOC_SEQ}
        </if>
        <if test="MATERIAL_DETAIL !='' and MATERIAL_DETAIL != null">
            AND Z.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
        </if>
        <if test="MATERIAL_KIND !='' and MATERIAL_KIND != null">
            AND Z.MATERIAL_KIND = #{MATERIAL_KIND}
        </if>
        <if test="IN_OUT_NM !='' and IN_OUT_NM != null">
            AND Z.IN_OUT_NM = #{IN_OUT_NM}
        </if>
        ORDER BY Z.REGISTED_DT DESC
    </select>

    <select id="selectCommonWarehouseManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            WAREHOUSE_CD , SF_GET_CODE_NM('1049', WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
            LOC_SEQ, LOC_NM, LOC_DESC, LOC_USE,
            CASE WHEN UPDATE_DT IS NOT NULL THEN jmes.SF_GET_DATE_F(UPDATE_DT,'YY','M')
            ELSE jmes.SF_GET_DATE_F(INSERT_DT,'YY','M')
            END AS UPDATE_DT
        FROM TBL_WAREHOUSE_LOCATION
        WHERE 1=1
            AND DEL_YN = 'N'
            <if test="WAREHOUSE_CD !='' and WAREHOUSE_CD != null">
                AND WAREHOUSE_CD = #{WAREHOUSE_CD}
            </if>
    </select>

    <insert id="insertUpdateInWarehouseManageMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_MY_MATERIAL_STOCK
        (
            MY_MAT_STOCK_SEQ, MATERIAL_TYPE, MATERIAL_DETAIL, MATERIAL_KIND,
            SIZE_TXT, SIZE_TYPE, SIZE_W, SIZE_H, SIZE_T, SIZE_D, SIZE_L,
            WAREHOUSE_CD, LOC_SEQ, NOTE,
            DEL_YN, INSERT_ID
        )
        VALUES
        (
            <choose>
                <when test="MY_MAT_STOCK_SEQ !=null and MY_MAT_STOCK_SEQ !=''">
                    #{MY_MAT_STOCK_SEQ},
                </when>
                <otherwise>
                    NEXTVAL(SEQ_MY_MAT_STOCK),
                </otherwise>
            </choose>
            #{MATERIAL_TYPE}, #{MATERIAL_DETAIL},#{MATERIAL_KIND},
            #{SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}), SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            #{WAREHOUSE_CD}, #{LOC_SEQ}, #{NOTE},
            'N', NULL
        )
        ON DUPLICATE KEY UPDATE
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <select id="selectInWarehouseManageSaveCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT COUNT(*) AS CNT
        FROM TBL_MY_MATERIAL_STOCK
        WHERE MATERIAL_DETAIL = #{MATERIAL_DETAIL}
			AND MATERIAL_KIND = #{MATERIAL_KIND}
            AND SIZE_TXT = #{SIZE_TXT}
            AND WAREHOUSE_CD = #{WAREHOUSE_CD}
            AND LOC_SEQ = #{LOC_SEQ}
    </select>

    <insert id="insertUpdateInWarehouseManageDetail" parameterType="java.util.HashMap">
        INSERT INTO TBL_MY_MATERIAL_IN
        (
            MY_MAT_IN_SEQ,
            <if test="IN_QTY !='' and IN_QTY != null">
                IN_QTY,
            </if>
            IN_DT, MY_MAT_STOCK_SEQ, INSERT_ID
        )
        VALUES
        (
            NEXTVAL(SEQ_MY_MAT_IN),
            <if test="IN_QTY !='' and IN_QTY != null">
                #{IN_QTY},
            </if>
            NOW(),
        <choose>
            <when test="MY_MAT_STOCK_SEQ !=null and MY_MAT_STOCK_SEQ !=''">
                #{MY_MAT_STOCK_SEQ},
            </when>
            <otherwise>
                LASTVAL(SEQ_MY_MAT_STOCK),
            </otherwise>
        </choose>
        NULL
        )
    </insert>

    <insert id="insertUpdateCommonWarehouseManage" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_WAREHOUSE_LOCATION
        (
            WAREHOUSE_CD, LOC_SEQ, LOC_NM, LOC_DESC, LOC_USE, DEL_YN, INSERT_ID
        )
        VALUES
        (
            #{WAREHOUSE_CD},
            <choose>
                <when test="LOC_SEQ !=null and LOC_SEQ !=''">
                    #{LOC_SEQ},
                </when>
                <otherwise>
                    NEXTVAL(SEQ_LOC),
                </otherwise>
            </choose>
            #{LOC_NM}, #{LOC_DESC}, #{LOC_USE}, 'N', NULL
        )
        ON DUPLICATE KEY UPDATE
            LOC_NM = #{LOC_NM},
            LOC_DESC = #{LOC_DESC},
            LOC_USE = #{LOC_USE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <delete id="deleteInWarehouseManageMaster" parameterType="java.util.HashMap">
        DELETE FROM TBL_MY_MATERIAL_STOCK
        WHERE MY_MAT_STOCK_SEQ = #{MY_MAT_STOCK_SEQ}
    </delete>

    <delete id="deleteInWarehouseManageDetail" parameterType="java.util.HashMap">
        DELETE FROM TBL_MY_MATERIAL_IN
        WHERE MY_MAT_STOCK_SEQ = #{MY_MAT_STOCK_SEQ}
    </delete>

    <delete id="deleteCommonWarehouseManage" parameterType="java.util.HashMap">
        DELETE FROM TBL_WAREHOUSE_LOCATION
        WHERE 1=1
            AND LOC_SEQ = #{LOC_SEQ}
    </delete>

    <update id="updateInWarehouseOut" parameterType="java.util.HashMap">
        UPDATE TBL_MY_MATERIAL_OUT
        SET OUT_STATUS = 'OUT002',
            UPDATE_DT = NOW(),
            UPDATE_ID = #{UPDATE_ID}
        WHERE MY_MAT_OUT_SEQ = #{MY_MAT_OUT_SEQ}
    </update>

    <update id="updateInWarehouseScan" parameterType="java.util.HashMap">
        UPDATE TBL_MY_MATERIAL_OUT A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL_PART C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.BARCODE_NUM = #{BARCODE_NUM}
        SET A.OUT_STATUS = 'OUT002',
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{UPDATE_ID}
    </update>

    <select id="selectInWarehousePop" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.MY_MAT_STOCK_SEQ) AS SEQ,
            F.CONTROL_SEQ, E.CONTROL_DETAIL_SEQ, A.MY_MAT_STOCK_SEQ, C.MY_MAT_OUT_SEQ,
            F.CONTROL_NUM,
            E.MATERIAL_TYPE, SF_GET_CODE_NM( '1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM,
            A.MATERIAL_DETAIL, SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM,
            A.MATERIAL_KIND, SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM,
            A.SIZE_TXT, A.SIZE_TYPE, A.SIZE_W, A.SIZE_H, A.SIZE_T, A.SIZE_D, A.SIZE_L,
            SUM(IFNULL(Z.IN_QTY, 0)) - SUM(IFNULL(C.OUT_QTY, 0)) AS STOCK_QTY,
            C.OUT_QTY, C.OUT_DT, C.OUT_USER_ID,
            A.WAREHOUSE_CD, SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM,
            A.LOC_SEQ, B.LOC_NM,
            D.MATERIAL_ORDER_NUM, jmes.SF_GET_DATE_F(D.ORDER_DT,'YYYY','') AS ORDER_DT,
            G.BARCODE_NUM
        FROM TBL_MY_MATERIAL_STOCK A
            INNER JOIN TBL_WAREHOUSE_LOCATION B ON A.WAREHOUSE_CD = B.WAREHOUSE_CD AND A.LOC_SEQ = B.LOC_SEQ
                AND B.DEL_YN = 'N'
            INNER JOIN TBL_MY_MATERIAL_OUT C ON A.MY_MAT_STOCK_SEQ = C.MY_MAT_STOCK_SEQ
                AND C.OUT_STATUS = 'OUT001'
                <if test="MY_MAT_OUT_SEQ !='' and MY_MAT_OUT_SEQ !=null">
                    AND C.MY_MAT_OUT_SEQ = #{MY_MAT_OUT_SEQ}
                </if>
            INNER JOIN TBL_MATERIAL_ORDER D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL_PART E ON E.CONTROL_SEQ = D.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL F ON E.CONTROL_SEQ = F.CONTROL_SEQ AND F.DEL_YN = 'N'
            INNER JOIN TBL_CONTROL_BARCODE G ON E.CONTROL_SEQ = G.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = G.CONTROL_DETAIL_SEQ AND G.DEL_YN = 'N' AND IFNULL(G.DRAWING_VER, SPACE(0)) = IFNULL(E.DRAWING_VER, SPACE(0))
                <if test="BARCODE_NUM !='' and BARCODE_NUM !=null">
                    AND G.BARCODE_NUM = #{BARCODE_NUM}
                </if>
            LEFT OUTER JOIN TBL_MY_MATERIAL_IN Z ON A.MY_MAT_STOCK_SEQ = Z.MY_MAT_STOCK_SEQ
        WHERE A.DEL_YN ='N'
        ORDER BY A.MY_MAT_STOCK_SEQ
    </select>

    <select id="selectConsumableInCnt" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT COUNT(*) AS CNT FROM jmes.TBL_CONSUMABLE_IN WHERE CONSUMABLE_STOCK_SEQ = #{CONSUMABLE_STOCK_SEQ}
    </select>
    <select id="selectConsumableList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        A.CONSUMABLE_STOCK_SEQ
        , A.WAREHOUSE_CD, jmes.SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_CD_NM
        , A.LOC_SEQ, (SELECT LOC_NM FROM jmes.TBL_WAREHOUSE_LOCATION WHERE WAREHOUSE_CD = A.WAREHOUSE_CD AND LOC_SEQ = A.LOC_SEQ) AS LOC_SEQ_NM
        , A.CONSUMABLE_NUM
        , A.CONSUMABLE_NM
        , A.CONSUMABLE_TYPE, jmes.SF_GET_CODE_NM('1053', A.CONSUMABLE_TYPE, #{LOGIN_LOCALE}) AS CONSUMABLE_TYPE_NM
        , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_CONSUMABLE_IN WHERE CONSUMABLE_STOCK_SEQ = A.CONSUMABLE_STOCK_SEQ) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_CONSUMABLE_OUT WHERE CONSUMABLE_STOCK_SEQ = A.CONSUMABLE_STOCK_SEQ) AS STOCK_QTY
        , A.NOTE
        , NULL AS IN_QTY
        , A.ACTIVE_YN
        FROM jmes.TBL_CONSUMABLE_STOCK A
        WHERE 1=1
        <if test="SEL_CONSUMABLE_STOCK_SEQ !='' and SEL_CONSUMABLE_STOCK_SEQ != null">
            AND A.CONSUMABLE_STOCK_SEQ = #{SEL_CONSUMABLE_STOCK_SEQ}
        </if>
        <if test="SEL_WAREHOUSE_CD !='' and SEL_WAREHOUSE_CD != null">
            AND A.WAREHOUSE_CD = #{SEL_FACTORY_AREA}
        </if>
        <if test="SEL_LOC_SEQ !='' and SEL_LOC_SEQ != null">
            AND A.LOC_SEQ = #{SEL_LOC_SEQ}
        </if>
        <if test="SEL_CONSUMABLE_TYPE !='' and SEL_CONSUMABLE_TYPE != null">
            AND A.CONSUMABLE_TYPE = #{SEL_CONSUMABLE_TYPE}
        </if>
        <if test="SEL_CONSUMABLE_NUM !='' and SEL_CONSUMABLE_NUM != null">
            AND A.CONSUMABLE_NUM LIKE CONCAT('%', #{SEL_CONSUMABLE_NUM}, '%')
        </if>
        <if test="SEL_CONSUMABLE_NM !='' and SEL_CONSUMABLE_NM != null">
            AND A.CONSUMABLE_NM LIKE CONCAT('%', #{SEL_CONSUMABLE_NM}, '%')
        </if>
        <if test="SEL_ACTIVE_YN !='' and SEL_ACTIVE_YN != null">
            AND A.ACTIVE_YN = #{SEL_ACTIVE_YN}
        </if>
        ORDER BY A.CONSUMABLE_STOCK_SEQ
    </select>

    <delete id="deleteConsumable" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_CONSUMABLE_STOCK WHERE CONSUMABLE_STOCK_SEQ = #{CONSUMABLE_STOCK_SEQ}
    </delete>
    <update id="updateConsumable" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_CONSUMABLE_STOCK
        SET
              CONSUMABLE_NM = #{CONSUMABLE_NM}
            , CONSUMABLE_TYPE = #{CONSUMABLE_TYPE}
            , NOTE = #{NOTE}
            , ACTIVE_YN = #{ACTIVE_YN}
            , UPDATE_ID = #{LOGIN_USER_ID}
            , UPDATE_DT = NOW()
        WHERE CONSUMABLE_STOCK_SEQ = #{CONSUMABLE_STOCK_SEQ}
    </update>
    <insert id="insertConsumable" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_CONSUMABLE_STOCK
        (
            CONSUMABLE_STOCK_SEQ, WAREHOUSE_CD, LOC_SEQ,
            CONSUMABLE_NUM, CONSUMABLE_NM, CONSUMABLE_TYPE,
            NOTE, ACTIVE_YN,
            INSERT_ID, INSERT_DT
        )VALUES(
            NEXTVAL(jmes.SEQ_CONSUMABLE_STOCK), #{WAREHOUSE_CD}, #{LOC_SEQ},
            #{CONSUMABLE_NUM}, #{CONSUMABLE_NM}, #{CONSUMABLE_TYPE},
            #{NOTE}, #{ACTIVE_YN},
            #{LOGIN_USER_ID}, NOW()
        )
    </insert>

    <insert id="insertConsumableIn" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_CONSUMABLE_IN
        (CONSUMABLE_IN_SEQ, CONSUMABLE_STOCK_SEQ, IN_QTY, INSERT_ID, INSERT_DT)
        SELECT
              NEXTVAL(jmes.SEQ_CONSUMABLE_IN) AS CONSUMABLE_IN_SEQ
            , A.CONSUMABLE_STOCK_SEQ
            , #{IN_QTY} AS IN_QTY
            , #{LOGIN_USER_ID} AS INSERT_ID
            , NOW() AS INSERT_DT
        FROM jmes.TBL_CONSUMABLE_STOCK A
        WHERE A.WAREHOUSE_CD = #{WAREHOUSE_CD}
          AND A.LOC_SEQ = #{LOC_SEQ}
          AND A.CONSUMABLE_NUM = #{CONSUMABLE_NUM}
          AND #{IN_QTY} > 0
    </insert>
    <insert id="insertConsumableOut" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_CONSUMABLE_OUT
        (
            CONSUMABLE_OUT_SEQ, CONSUMABLE_STOCK_SEQ, OUT_QTY,
            REQUEST_USER_ID, OUT_USE, INSERT_ID, INSERT_DT
        )VALUES(
            NEXTVAL(jmes.SEQ_CONSUMABLE_OUT), #{CONSUMABLE_STOCK_SEQ}, #{OUT_QTY},
            #{REQUEST_USER_ID}, #{OUT_USE}, #{LOGIN_USER_ID}, NOW()
        )
    </insert>
    <select id="selectConsumableHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              jmes.SF_GET_CODE_NM('1055', X.IN_OUT_TYPE, #{LOGIN_LOCALE}) AS IN_OUT_NM
            , jmes.SF_GET_CODE_NM('1049', X.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_NM
            , (SELECT LOC_NM FROM jmes.TBL_WAREHOUSE_LOCATION WHERE WAREHOUSE_CD = X.WAREHOUSE_CD AND LOC_SEQ = X.LOC_SEQ ) AS LOC_NM
            , X.CONSUMABLE_NUM
            , X.CONSUMABLE_NM
            , jmes.SF_GET_CODE_NM('1053', X.CONSUMABLE_TYPE, #{LOGIN_LOCALE}) AS CONSUMABLE_TYPE_NM
            , X.IN_QTY
            , X.OUT_QTY
            , (SELECT USER_NM FROM jmes.TBL_USER WHERE USER_ID = X.REQUEST_USER_ID) AS REQUEST_USER_NM
            , jmes.SF_GET_DATE_F(X.IN_OUT_DT,'YY','M') AS IN_OUT_DT
        FROM (
            SELECT
                '1' AS IN_OUT_TYPE
                , A.WAREHOUSE_CD, A.LOC_SEQ, A.CONSUMABLE_NUM, A.CONSUMABLE_NM
                , A.CONSUMABLE_TYPE, B.IN_QTY, NULL AS OUT_QTY
                , B.INSERT_ID AS REQUEST_USER_ID, B.IN_DT AS IN_OUT_DT
            FROM jmes.TBL_CONSUMABLE_STOCK A, jmes.TBL_CONSUMABLE_IN B
            WHERE A.CONSUMABLE_STOCK_SEQ = B.CONSUMABLE_STOCK_SEQ
                <if test="SEL_WAREHOUSE_CD !='' and SEL_WAREHOUSE_CD != null">
                    AND A.WAREHOUSE_CD = #{SEL_WAREHOUSE_CD}
                </if>
                <if test="SEL_LOC_SEQ !='' and SEL_LOC_SEQ != null">
                    AND A.LOC_SEQ = #{SEL_LOC_SEQ}
                </if>
                <if test="SEL_CONSUMABLE_TYPE !='' and SEL_CONSUMABLE_TYPE != null">
                    AND A.CONSUMABLE_TYPE = #{SEL_CONSUMABLE_TYPE}
                </if>
                <if test="SEL_CONSUMABLE_NUM !='' and SEL_CONSUMABLE_NUM != null">
                    AND A.CONSUMABLE_NUM LIKE CONCAT('%', #{SEL_CONSUMABLE_NUM}, '%')
                </if>
                <if test="SEL_CONSUMABLE_NM !='' and SEL_CONSUMABLE_NM != null">
                    AND A.CONSUMABLE_NM LIKE CONCAT('%', #{SEL_CONSUMABLE_NM}, '%')
                </if>
                <if test="SEL_ACTIVE_YN !='' and SEL_ACTIVE_YN != null">
                    AND A.ACTIVE_YN = #{SEL_ACTIVE_YN}
                </if>
                <if test='SEL_DAY_TYPE == "1"'>
                    AND DATE_FORMAT(B.IN_DT, '%Y/%m/%d') >= #{MATERIAL_CONSUMABLE_ST_DT}
                    AND DATE_FORMAT(B.IN_DT, '%Y/%m/%d') <![CDATA[ <= ]]> #{MATERIAL_CONSUMABLE_END_DT}
                </if>
            UNION ALL
            SELECT
                 '2' AS IN_OUT_TYPE
                , A.WAREHOUSE_CD, A.LOC_SEQ, A.CONSUMABLE_NUM, A.CONSUMABLE_NM
                , A.CONSUMABLE_TYPE, NULL AS IN_QTY, B.OUT_QTY
                , B.REQUEST_USER_ID, B.OUT_DT AS IN_OUT_DT
            FROM jmes.TBL_CONSUMABLE_STOCK A, jmes.TBL_CONSUMABLE_OUT B
            WHERE A.CONSUMABLE_STOCK_SEQ = B.CONSUMABLE_STOCK_SEQ
                <if test="SEL_WAREHOUSE_CD !='' and SEL_WAREHOUSE_CD != null">
                    AND A.WAREHOUSE_CD = #{SEL_WAREHOUSE_CD}
                </if>
                <if test="SEL_LOC_SEQ !='' and SEL_LOC_SEQ != null">
                    AND A.LOC_SEQ = #{SEL_LOC_SEQ}
                </if>
                <if test="SEL_CONSUMABLE_TYPE !='' and SEL_CONSUMABLE_TYPE != null">
                    AND A.CONSUMABLE_TYPE = #{SEL_CONSUMABLE_TYPE}
                </if>
                <if test="SEL_CONSUMABLE_NUM !='' and SEL_CONSUMABLE_NUM != null">
                    AND A.CONSUMABLE_NUM LIKE CONCAT('%', #{SEL_CONSUMABLE_NUM}, '%')
                </if>
                <if test="SEL_CONSUMABLE_NM !='' and SEL_CONSUMABLE_NM != null">
                    AND A.CONSUMABLE_NM LIKE CONCAT('%', #{SEL_CONSUMABLE_NM}, '%')
                </if>
                <if test="SEL_ACTIVE_YN !='' and SEL_ACTIVE_YN != null">
                    AND A.ACTIVE_YN = #{SEL_ACTIVE_YN}
                </if>
                <if test='SEL_DAY_TYPE == "1"'>
                    AND DATE_FORMAT(B.OUT_DT, '%Y/%m/%d') >= #{MATERIAL_CONSUMABLE_ST_DT}
                    AND DATE_FORMAT(B.OUT_DT, '%Y/%m/%d') <![CDATA[ <= ]]> #{MATERIAL_CONSUMABLE_END_DT}
                </if>
        ) X
        ORDER BY X.IN_OUT_DT DESC
    </select>

    <select id="selectWarehouseLocationList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            LOC_NM AS CODE_NM, CAST(LOC_SEQ AS CHAR) AS CODE_CD
        FROM TBL_WAREHOUSE_LOCATION
        WHERE 1=1
        AND DEL_YN = 'N'
        <if test="WAREHOUSE_CD !='' and WAREHOUSE_CD != null">
            AND WAREHOUSE_CD = #{WAREHOUSE_CD}
        </if>
    </select>
    <select id="selectInsideStockList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.ORDER_COMP_CD
          , (SELECT COMP_NM FROM jmes.TBL_COMPANY WHERE COMP_CD = A.ORDER_COMP_CD) AS ORDER_COMP_CD_NM
          , A.DRAWING_NUM
          , A.ITEM_NM
          , A.INSIDE_STOCK_NUM
          , A.COMP_CD
          , (SELECT COMP_NM FROM jmes.TBL_COMPANY WHERE COMP_CD = A.COMP_CD) AS COMP_CD_NM
          , A.SIZE_TXT
          , A.MATERIAL_DETAIL
          , jmes.SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
          , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_INSIDE_OUT WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) AS INSIDE_STOCK_CURR_QTY
          , A.WAREHOUSE_CD
          , jmes.SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_CD_NM
          , A.LOC_SEQ
          , (SELECT LOC_NM FROM jmes.TBL_WAREHOUSE_LOCATION WHERE WAREHOUSE_CD = A.WAREHOUSE_CD AND LOC_SEQ = A.LOC_SEQ ) AS LOC_SEQ_NM
          , A.DWG_GFILE_SEQ
          , A.DXF_GFILE_SEQ
          , A.IMG_GFILE_SEQ
          , A.PDF_GFILE_SEQ
          , jmes.SF_GET_DATE_F(A.INSERT_DT, 'YY', 'M') AS INSERT_TIME
          , jmes.SF_GET_DATE_F(A.UPDATE_DT, 'YY', 'M') AS UPDATE_TIME
          , A.NOTE
        FROM jmes.TBL_INSIDE_STOCK A
        WHERE 1=1
        <if test="SEL_COMP_CD !='' and SEL_COMP_CD != null">
            AND A.COMP_CD = #{SEL_COMP_CD}
        </if>
        <if test="SEL_ORDER_COMP_CD !='' and SEL_ORDER_COMP_CD != null">
            AND A.ORDER_COMP_CD = #{SEL_ORDER_COMP_CD}
        </if>
        <if test="SEL_DRAWING_NUM !='' and SEL_DRAWING_NUM != null">
            AND A.DRAWING_NUM LIKE CONCAT('%', #{SEL_DRAWING_NUM}, '%')
        </if>
        <if test="SEL_ITEM_NM !='' and SEL_ITEM_NM != null">
            AND A.ITEM_NM LIKE CONCAT('%', #{SEL_ITEM_NM}, '%')
        </if>
        <if test="SEL_CONTROL_NUM !='' and SEL_CONTROL_NUM != null"> <!-- FIXME -->
            AND A.CONTROL_SEQ IN (SELECT CONTROL_SEQ FROM jmes.TBL_CONTROL B WHERE B.CONTROL_NUM LIKE CONCAT('%', #{SEL_CONTROL_NUM}, '%'))
        </if>
        <if test="HIDDEN_SEL_MATERIAL_DETAIL != '' and HIDDEN_SEL_MATERIAL_DETAIL != null">
                AND A.MATERIAL_DETAIL IN (${HIDDEN_SEL_MATERIAL_DETAIL})
        </if>
        <if test="SEL_WAREHOUSE_CD !='' and SEL_WAREHOUSE_CD != null">
            AND A.WAREHOUSE_CD = #{SEL_WAREHOUSE_CD}
        </if>
        <if test="SEL_LOC_SEQ !='' and SEL_LOC_SEQ != null">
            AND A.LOC_SEQ = #{SEL_LOC_SEQ}
        </if>
        <if test="SEL_SIZE_TYPE !='' and SEL_SIZE_TYPE != null">
            AND A.SIZE_TYPE = #{SEL_SIZE_TYPE}
        </if>
        <if test='SEL_SIZE_SEARCH_TYPE =="1"'>
            <if test='SEL_SIZE_TYPE =="MSS010"'>
                AND A.SIZE_W BETWEEN #{SEL_SIZE_SEARCH_TYPE_R_1} and #{SEL_SIZE_SEARCH_TYPE_R_2}
                AND A.SIZE_H BETWEEN #{SEL_SIZE_SEARCH_TYPE_R_3} and #{SEL_SIZE_SEARCH_TYPE_R_4}
                AND A.SIZE_T BETWEEN #{SEL_SIZE_SEARCH_TYPE_R_5} and #{SEL_SIZE_SEARCH_TYPE_R_6}
            </if>
            <if test='SEL_SIZE_TYPE =="MSS020" or SEL_SIZE_TYPE =="MSS030" or SEL_SIZE_TYPE =="MSS040"'>
                AND A.SIZE_D BETWEEN #{SEL_SIZE_SEARCH_TYPE_R_1} and #{SEL_SIZE_SEARCH_TYPE_R_2}
                AND A.SIZE_L BETWEEN #{SEL_SIZE_SEARCH_TYPE_R_3} and #{SEL_SIZE_SEARCH_TYPE_R_4}
            </if>
        </if>
        <if test='SEL_SIZE_SEARCH_TYPE =="2"'>
            <if test='SEL_SIZE_TYPE =="MSS010"'>
                AND A.SIZE_W = #{SEL_SIZE_SEARCH_TYPE_E_1}
                AND A.SIZE_H = #{SEL_SIZE_SEARCH_TYPE_E_2}
                AND A.SIZE_T = #{SEL_SIZE_SEARCH_TYPE_E_3}
            </if>
            <if test='SEL_SIZE_TYPE =="MSS020" or SEL_SIZE_TYPE =="MSS030" or SEL_SIZE_TYPE =="MSS040"'>
                AND A.SIZE_D = #{SEL_SIZE_SEARCH_TYPE_E_1}
                AND A.SIZE_L = #{SEL_SIZE_SEARCH_TYPE_E_2}
            </if>
        </if>
    </select>
    <select id="selectInsideStockIn_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT COUNT(*) AS CNT FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </select>
    <select id="selectInsideStockIn" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT COUNT(*) AS CNT FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM IN(${INSIDE_STOCK_NUM})
    </select>
    <delete id="deleteInsideStock_old" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_INSIDE_STOCK WHERE INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </delete>
    <delete id="deleteInsideStock" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_INSIDE_STOCK WHERE INSIDE_STOCK_NUM IN(${INSIDE_STOCK_NUM})
    </delete>
    <select id="selectInsideStockAbbrNm" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.ABBR_NM
        FROM TBL_CODE A, TBL_CODE B
        WHERE A.HIGH_CD = '1035'
        AND B.HIGH_CD = '1027'
        AND A.CODE_CD = B.REF_CD
        AND B.CODE_CD = #{MATERIAL_DETAIL}
    </select>
    <select id="selectInsideStockSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT CONCAT(#{ORDER_COMP_CD},'-',#{ABBR_NM},'-',LPAD(IFNULL(CONVERT(MAX(SUBSTRING(INSIDE_STOCK_NUM,-4,4)),INT)+1,1),4,'0')) AS INSIDE_STOCK_NUM
        FROM jmes.TBL_INSIDE_STOCK
        WHERE INSIDE_STOCK_NUM LIKE CONCAT(#{ORDER_COMP_CD},'-',#{ABBR_NM},'-','%')
    </select>
    <insert id="insertInsideStock" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSIDE_STOCK
        (
            INSIDE_STOCK_NUM, ORDER_COMP_CD, DRAWING_NUM, ITEM_NM, COMP_CD,
            MATERIAL_TYPE, MATERIAL_DETAIL,
            SIZE_TXT,
            SIZE_TYPE,
            SIZE_W,
            SIZE_H,
            SIZE_T,
            SIZE_D,
            SIZE_L,
            WAREHOUSE_CD,
            LOC_SEQ, NOTE, INSERT_ID
        )VALUES (
            #{INSIDE_STOCK_NUM}, #{ORDER_COMP_CD}, #{DRAWING_NUM}, #{ITEM_NM}, #{COMP_CD},
            (SELECT REF_CD FROM jmes.TBL_CODE WHERE HIGH_CD = '1027' AND CODE_CD = #{MATERIAL_DETAIL}), #{MATERIAL_DETAIL},
            #{SIZE_TXT},
            SF_GET_SIZE_TXT('SIZE_TYPE', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_W', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_H', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_T', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_D', #{SIZE_TXT}),
            SF_GET_SIZE_TXT('SIZE_L', #{SIZE_TXT}),
            #{WAREHOUSE_CD},
            #{LOC_SEQ}, #{NOTE}, #{LOGIN_USER_ID}
        )
    </insert>
    <update id="updateInsideStock" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_INSIDE_STOCK
        SET COMP_CD = #{COMP_CD}
            , WAREHOUSE_CD = #{WAREHOUSE_CD}
            , LOC_SEQ = #{LOC_SEQ}
            , NOTE = #{NOTE}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </update>
    <update id="updateInsideStockPop" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_INSIDE_STOCK
        SET   WAREHOUSE_CD = #{WAREHOUSE_CD}
            , LOC_SEQ = #{LOC_SEQ}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </update>
    <insert id="insertInsideStockIn" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_INSIDE_IN (INSIDE_IN_SEQ, INSIDE_STOCK_NUM, IN_QTY, CONTROL_SEQ, INSERT_ID)
        SELECT NEXTVAL(jmes.SEQ_INSIDE_IN)
        , #{INSIDE_STOCK_NUM}
        , #{IN_OUT_QTY}
        , #{CONTROL_SEQ}
        , #{LOGIN_USER_ID}
        FROM DUAL
        WHERE #{IN_OUT_QTY} > 0
    </insert>
    <insert id="insertInsideStockOut" parameterType="java.util.HashMap">
      INSERT INTO jmes.TBL_INSIDE_OUT (INSIDE_OUT_SEQ, INSIDE_STOCK_NUM, OUT_QTY, INSERT_ID)
      VALUES ( NEXTVAL(jmes.SEQ_INSIDE_OUT), #{INSIDE_STOCK_NUM}, #{IN_OUT_QTY}, #{LOGIN_USER_ID} )
    </insert>
    <select id="selectInsideStockPopInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.DRAWING_NUM
            , A.INSIDE_STOCK_NUM
            , A.SIZE_TXT
            , A.WAREHOUSE_CD
            , jmes.SF_GET_CODE_NM('1049', A.WAREHOUSE_CD, #{LOGIN_LOCALE}) AS WAREHOUSE_CD_NM
            , A.LOC_SEQ
            , (SELECT LOC_NM FROM jmes.TBL_WAREHOUSE_LOCATION WHERE WAREHOUSE_CD = A.WAREHOUSE_CD AND LOC_SEQ = A.LOC_SEQ ) AS LOC_SEQ_NM
            , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_INSIDE_OUT WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) AS POP_STOCK_QTY
            , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_INSIDE_OUT WHERE INSIDE_STOCK_NUM = A.INSIDE_STOCK_NUM) AS POP_STOCK_QTY_AFTER
            , '0' AS ORDER_QTY
            , '' AS CONTROL_SEQ
        FROM jmes.TBL_INSIDE_STOCK A
        WHERE A.INSIDE_STOCK_NUM = #{V_INSIDE_STOCK_NUM}
    </select>
    <select id="selectInsideStockPopInfoBarcode" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              C.DRAWING_NUM, C.INSIDE_STOCK_NUM, C.SIZE_TXT
            , C.WAREHOUSE_CD, C.LOC_SEQ
            , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = C.INSIDE_STOCK_NUM) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_INSIDE_OUT WHERE INSIDE_STOCK_NUM = C.INSIDE_STOCK_NUM) AS POP_STOCK_QTY
            , (SELECT IFNULL(SUM(IN_QTY),0) FROM jmes.TBL_INSIDE_IN WHERE INSIDE_STOCK_NUM = C.INSIDE_STOCK_NUM) - (SELECT IFNULL(SUM(OUT_QTY),0) FROM jmes.TBL_INSIDE_OUT WHERE INSIDE_STOCK_NUM = C.INSIDE_STOCK_NUM) +
              (SELECT IFNULL(SUM(ORDER_QTY),0) FROM jmes.TBL_CONTROL_PART_ORDER WHERE CONTROL_SEQ = B.CONTROL_SEQ)  AS POP_STOCK_QTY_AFTER
            , (SELECT IFNULL(SUM(ORDER_QTY),0) FROM jmes.TBL_CONTROL_PART_ORDER WHERE CONTROL_SEQ = B.CONTROL_SEQ) AS ORDER_QTY
            , A.CONTROL_SEQ
        FROM jmes.TBL_CONTROL_BARCODE A, jmes.TBL_CONTROL_PART B, jmes.TBL_INSIDE_STOCK C
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
        AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
        AND B.DRAWING_NUM = C.DRAWING_NUM
        AND A.DEL_YN = 'N'
        AND A.BARCODE_NUM = #{BARCODE_NUM}
    </select>

    <select id="selectInsideStockPopInfoBarcodeNew" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              C.MATERIAL_DETAIL, B.ORDER_COMP_CD, C.DRAWING_NUM, R.ITEM_NM, B.COMP_CD
            , C.SIZE_TXT, C.SIZE_TYPE, C.SIZE_W, C.SIZE_H, C.SIZE_T, C.SIZE_D, C.SIZE_L
            , '0' AS POP_STOCK_QTY
            , '' AS INSIDE_STOCK_NUM
            , (SELECT IFNULL(SUM(ORDER_QTY),0) FROM jmes.TBL_CONTROL_PART_ORDER WHERE CONTROL_SEQ = B.CONTROL_SEQ) AS POP_STOCK_QTY_AFTER
            , (SELECT IFNULL(SUM(ORDER_QTY),0) FROM jmes.TBL_CONTROL_PART_ORDER WHERE CONTROL_SEQ = B.CONTROL_SEQ) AS ORDER_QTY
            , A.CONTROL_SEQ
        FROM jmes.TBL_CONTROL_BARCODE A, jmes.TBL_CONTROL B, jmes.TBL_CONTROL_PART C, jmes.TBL_CONTROL_PART_ORDER_MAIN R
        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
        AND A.CONTROL_SEQ = C.CONTROL_SEQ
        AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
		AND A.CONTROL_SEQ = R.CONTROL_SEQ
        AND A.DEL_YN = 'N'
        AND B.DEL_YN = 'N'
        AND A.BARCODE_NUM = #{BARCODE_NUM}
    </select>

    <select id="manageStockCadFiles_select" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            UUID() AS ROWNUM,
            A.INSIDE_STOCK_NUM AS SORTKEY, <!-- 정렬을 위한 조회 -->
            A.INSIDE_STOCK_NUM, <!-- 재고번호 -->
            A.ITEM_NM, <!-- 품명 -->
            A.DRAWING_NUM,
            #{DXF_GFILE_SEQ} AS DXF_GFILE_SEQ,
            #{PDF_GFILE_SEQ} AS PDF_GFILE_SEQ,
            #{IMG_GFILE_SEQ} AS IMG_GFILE_SEQ
        FROM TBL_INSIDE_STOCK A
        WHERE 1 = 1
            /*AND IFNULL(C.CONTROL_STATUS, 'ORD002') IN ('ORD002')*/
            AND UPPER(A.DRAWING_NUM) = #{MAPPING_STR}
    </select>

    <update id="manageStockCadFiles" parameterType="java.util.HashMap">
        UPDATE TBL_INSIDE_STOCK
        SET
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </update>

    <!--<update id="manageStockCadFiles" parameterType="java.util.HashMap">
        UPDATE TBL_INSIDE_STOCK
        SET
            /*DRAWING_NUM = #{NEW_DRAWING_NUM},*/
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ},
            PDF_GFILE_SEQ = NULL,
            IMG_GFILE_SEQ = NULL,
            UPDATE_DT = NOW()
            &lt;!&ndash; ,UPDATE_ID = #{LOGIN_USER_ID} &ndash;&gt;
        WHERE
            INSIDE_STOCK_NUM = #{INSIDE_STOCK_NUM}
    </update>

    <update id="manageStockCadFiles_mapping" parameterType="java.util.HashMap">
        UPDATE TBL_INSIDE_STOCK
        SET
            PDF_GFILE_SEQ = #{PDF_GFILE_SEQ},
            IMG_GFILE_SEQ = #{IMG_GFILE_SEQ},
            UPDATE_DT = NOW()
            &lt;!&ndash; ,UPDATE_ID = #{LOGIN_USER_ID} &ndash;&gt;
        WHERE
            DXF_GFILE_SEQ = #{DXF_GFILE_SEQ}
    </update>-->

    <select id="selectItemOrderRegisterOrderDatetime" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT SF_GET_DATE_F(ORDER_DT,'YYYY','M') AS ORDER_DT
        FROM TBL_MATERIAL_ORDER
        WHERE MATERIAL_ORDER_NUM = #{MATERIAL_ORDER_NUM}
        GROUP BY MATERIAL_ORDER_NUM;
    </select>

    <update id="updateItemOrderHistoryRight" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET
            INSPECT_NOTE = #{INSPECT_NOTE},
            IN_UNIT_AMT = #{IN_UNIT_AMT},
            IN_NOTE = #{IN_NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MATERIAL_ORDER_SEQ = #{MATERIAL_ORDER_SEQ}
    </update>

    <update id="updateControlPartMaterial" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            MATERIAL_KIND = #{MATERIAL_KIND}
            , MATERIAL_DETAIL = #{MATERIAL_DETAIL}
            , MATERIAL_TYPE = SF_GET_ETC_CD('1027', #{MATERIAL_DETAIL})
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateMaterialOrderUnitMaterialAutoAmt" parameterType="java.util.HashMap">
        UPDATE TBL_MATERIAL_ORDER
        SET
            UNIT_MATERIAL_AUTO_AMT = SF_GET_CALC_MATERIAL_AMT('MATERIAL_ORDER', #{MATERIAL_ORDER_SEQ}, '')
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

</mapper>