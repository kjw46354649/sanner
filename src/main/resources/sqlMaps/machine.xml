<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="machine">

    <select id="selectMachineList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
            SELECT
                  A.EQUIP_SEQ
                , A.EQUIP_ID
                , A.PHOTO_GFILE_SEQ
                , jmes.SF_GET_FILE_ORGINAL_NM(A.PHOTO_GFILE_SEQ, NULL) as PHOTO_GFILE_SEQ_NM
                , A.EQUIP_NM
                , jmes.SF_GET_CODE_NM('1010', A.PROCESS_TYPE, 'KR') AS PROCESS_TYPE_NM
                , jmes.SF_GET_CODE_NM('1012', A.EQUIP_TYPE, 'KR') AS EQUIP_TYPE_NM
                -- , jmes.SF_GET_CODE_NM('1034', A.EQUIP_SIZE, 'KR') AS EQUIP_SIZE_NM
                , A.EQUIP_SIZE
                , jmes.SF_GET_CODE_NM('1037', A.EQUIP_COMP_CD, 'KR') AS EQUIP_COMP_NM
                , jmes.SF_GET_CODE_NM('1022', A.RESELLER_CD, 'KR') AS RESELLER_NM
                , jmes.SF_GET_CODE_NM('1005', A.FACTORY_AREA, 'KR') AS FACTORY_AREA_NM
                , jmes.SF_GET_CODE_NM('1014', (SELECT REF_CD FROM jmes.TBL_CODE WHERE HIGH_CD = '1005' AND CODE_CD = A.FACTORY_AREA), 'KR') AS FACTORY_NM
                , jmes.SF_GET_DATE_F(A.PURCHASE_DT,'YY','') AS PURCHASE_DT
                , (SELECT USER_NM FROM jmes.TBL_USER WHERE USER_ID = A.MAIN_USER_ID) AS MAIN_USER_NM
                , (SELECT USER_NM FROM jmes.TBL_USER WHERE USER_ID = A.SUB_USER_ID) AS SUB_USER_NM
                , (SELECT CONCAT(FLOOR(SUM(TIMESTAMPDIFF(MINUTE, Y.WORK_START_DT, Y.WORK_STOP_DT) / 60)),'H ', MOD(SUM(TIMESTAMPDIFF(MINUTE, Y.WORK_START_DT, Y.WORK_STOP_DT)), 60), 'M')
                    FROM jmes.TBL_MCT_WORK X, jmes.TBL_MCT_WORK_TIME Y
                    WHERE X.MCT_WORK_SEQ = Y.MCT_WORK_SEQ
                        AND X.DEL_YN = 'N'
                        AND Y.WORK_STOP_DT IS NOT NULL
                        AND X.EQUIP_SEQ = A.EQUIP_SEQ) AS WORKING_TIME
                , (SELECT jmes.SF_GET_DATE_F(MAX(REPAIR_END_DT),'YY','') FROM jmes.TBL_EQUIP_REPAIR WHERE EQUIP_SEQ = A.EQUIP_SEQ) AS LAST_REPAIR_DT
                , (SELECT jmes.SF_GET_DATE_F(MAX(M.WORK_FINISH_DT),'YY','') FROM jmes.TBL_MCT_WORK M WHERE M.EQUIP_SEQ = A.EQUIP_SEQ) AS LAST_WORK_FINISH_DT
                , ( SELECT Y.CONTROL_NUM
                    FROM jmes.TBL_MCT_WORK X, jmes.TBL_CONTROL Y
                    WHERE X.CONTROL_SEQ = Y.CONTROL_SEQ
                        AND X.EQUIP_SEQ = A.EQUIP_SEQ
                    ORDER BY X.MCT_WORK_SEQ DESC
                    LIMIT 1) AS LAST_CONTROL_NUM
                , A.NOTE
                , A.MODEL_NUM, A.SERIAL_NUM
            FROM jmes.TBL_EQUIP A
            WHERE A.EQUIP_KIND = #{SEL_EQUIP_KIND}
            AND A.DEL_YN = 'N'
            <if test="SEL_EQUIP_TYPE !='' and SEL_EQUIP_TYPE != null">
                AND A.EQUIP_TYPE = #{SEL_EQUIP_TYPE}
            </if>
            <if test="SEL_EQUIP_SIZE !='' and SEL_EQUIP_SIZE != null">
                AND A.EQUIP_SIZE = #{SEL_EQUIP_SIZE}
            </if>
            <if test="SEL_EQUIP_NM !='' and SEL_EQUIP_NM != null">
                AND A.EQUIP_NM LIKE CONCAT('%', #{SEL_EQUIP_NM}, '%')
            </if>
            <if test="SEL_FACTORY_AREA !='' and SEL_FACTORY_AREA != null">
                AND A.FACTORY_AREA = #{SEL_FACTORY_AREA}
            </if>
            <if test="SEL_MAIN_USER_ID !='' and SEL_MAIN_USER_ID != null">
                AND EXISTS (  SELECT 1
                                FROM jmes.TBL_USER
                                WHERE USER_ID IN (A.MAIN_USER_ID, A.SUB_USER_ID)
                                AND USER_NM LIKE CONCAT('%', #{SEL_MAIN_USER_ID}, '%')
                           )
            </if>
            <if test="SEL_TERM_DT_USE or SEL_TERM_DT_USE ==true">
                <if test='SEL_DAY_TYPE == "1"'>
                    AND A.PURCHASE_DT >= REPLACE(#{SEL_ST_DT},'-',space(0))
                    AND A.PURCHASE_DT <![CDATA[ <= ]]> REPLACE(#{SEL_END_DT},'-',space(0))
                </if>
            </if>
            ORDER BY A.EQUIP_ID
        </select>

    <select id="selectMachineInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ, A.EQUIP_ID
            , jmes.SF_GET_CODE_NM('1051', A.EQUIP_KIND, 'KR') AS EQUIP_KIND_NM
            , A.PHOTO_GFILE_SEQ
            , A.EQUIP_NM
            , A.PROCESS_TYPE
            , A.EQUIP_TYPE
            , A.EQUIP_SIZE
            , A.EQUIP_COMP_CD
            , A.FACTORY_AREA
            , A.MAIN_USER_ID
            , A.SUB_USER_ID
            , jmes.SF_GET_DATE_F(A.PURCHASE_DT,'YYYY','') AS PURCHASE_DT
            , A.RESELLER_CD
            , A.ETC_GFILE_SEQ
            , jmes.SF_GET_FILE_ORGINAL_NM(A.ETC_GFILE_SEQ, NULL) as ETC_GFILE_SEQ_NM
            , A.NOTE
            , A.MODEL_NUM, A.SERIAL_NUM
        FROM jmes.TBL_EQUIP A
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
    </select>
    <select id="selectMachineSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT NEXTVAL(jmes.SEQ_EQUIP) AS SEQ FROM dual
    </select>

    <insert id="insertMachineMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_EQUIP (EQUIP_SEQ, EQUIP_ID, EQUIP_KIND, EQUIP_NM
                              , PROCESS_TYPE, EQUIP_TYPE, EQUIP_SIZE
                              , EQUIP_COMP_CD, FACTORY_AREA
                              , MAIN_USER_ID, SUB_USER_ID, PURCHASE_DT, RESELLER_CD, NOTE
                              , PHOTO_GFILE_SEQ, ETC_GFILE_SEQ, INSERT_ID, MODEL_NUM, SERIAL_NUM)
        VALUES (  #{EQUIP_SEQ}, #{EQUIP_ID}, #{EQUIP_KIND}, #{EQUIP_NM}
                , #{PROCESS_TYPE, jdbcType=VARCHAR}, #{EQUIP_TYPE}, #{EQUIP_SIZE}
                , #{EQUIP_COMP_CD}, #{FACTORY_AREA}
                , #{MAIN_USER_ID}, #{SUB_USER_ID}, REPLACE(#{PURCHASE_DT},'-',space(0)), #{RESELLER_CD}, #{NOTE}
                , #{PHOTO_GFILE_SEQ}, #{ETC_GFILE_SEQ}, #{LOGIN_USER_ID}, #{MODEL_NUM}, #{SERIAL_NUM} )
    </insert>
    <update id="updateMachineMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP
        SET EQUIP_ID = #{EQUIP_ID}
              , EQUIP_NM = #{EQUIP_NM}
              , PROCESS_TYPE = #{PROCESS_TYPE, jdbcType=VARCHAR}
              , EQUIP_TYPE = #{EQUIP_TYPE}
              , EQUIP_SIZE = #{EQUIP_SIZE}
              , EQUIP_COMP_CD = #{EQUIP_COMP_CD}
              , FACTORY_AREA = #{FACTORY_AREA}
              , MAIN_USER_ID = #{MAIN_USER_ID}
              , SUB_USER_ID = #{SUB_USER_ID}
              , PURCHASE_DT = REPLACE(#{PURCHASE_DT},'-',space(0))
              , RESELLER_CD = #{RESELLER_CD}
              , NOTE = #{NOTE}
              , MODEL_NUM = #{MODEL_NUM}
              , SERIAL_NUM = #{SERIAL_NUM}
            <if test="PHOTO_GFILE_SEQ != null and PHOTO_GFILE_SEQ != ''">
                  , PHOTO_GFILE_SEQ = #{PHOTO_GFILE_SEQ}
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
              , ETC_GFILE_SEQ = #{ETC_GFILE_SEQ}
            </if>
              , UPDATE_DT = NOW()
              , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </update>
    <delete id="deleteMachineMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP
        SET DEL_YN = 'Y'
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </delete>

    <select id="selectMachineLogList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ
          , A.SEQ
          , A.REPAIR_TYPE
          , A.REPAIR_DESC
          , jmes.SF_GET_DATE_F(A.REPAIR_START_DT,'YY','M') AS REPAIR_START_DT
          , jmes.SF_GET_DATE_F(A.REPAIR_END_DT,'YY','M') AS REPAIR_END_DT
          , CONCAT(DATEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT) * 24 + HOUR(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)), 'H ', MINUTE(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)),'M') AS REPAIR_TIME
          , A.NOTE
          , A.BEFORE_GFILE_SEQ
          , A.AFTER_GFILE_SEQ
        FROM jmes.TBL_EQUIP_REPAIR A
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
    </select>
    <select id="selectMachineHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ
          , A.SEQ
          , A.REPAIR_TYPE
          , SF_GET_CODE_NM(1036, REPAIR_TYPE, 'KR') AS REPAIR_TYPE_NM
          , A.REPAIR_DESC
          , jmes.SF_GET_DATE_F(A.REPAIR_START_DT,'YYYY','M') AS REPAIR_START_DT
          , jmes.SF_GET_DATE_F(A.REPAIR_END_DT,'YYYY','M') AS REPAIR_END_DT
          , CONCAT(DATEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT) * 24 + HOUR(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)), 'H ', MINUTE(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)),'M') AS REPAIR_TIME
          , A.NOTE
          , A.BEFORE_GFILE_SEQ
          , A.AFTER_GFILE_SEQ
        FROM jmes.TBL_EQUIP_REPAIR A
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
    </select>
    <insert id="insertMachineMasterHistory" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_EQUIP_REPAIR ( EQUIP_SEQ, SEQ, REPAIR_TYPE
                                            , REPAIR_START_DT, REPAIR_END_DT
                                            , REPAIR_DESC, NOTE, BEFORE_GFILE_SEQ, AFTER_GFILE_SEQ, INSERT_ID)
        VALUES (#{EQUIP_SEQ},NEXTVAL(jmes.SEQ_DUMMY),#{REPAIR_TYPE}
                , STR_TO_DATE(#{REPAIR_START_DT},'%Y-%m-%d %H:%i'), STR_TO_DATE(#{REPAIR_END_DT},'%Y-%m-%d %H:%i')
                , #{REPAIR_DESC}, #{NOTE}, #{BEFORE_GFILE_SEQ}, #{AFTER_GFILE_SEQ}, #{LOGIN_USER_ID})
    </insert>
    <update id="updateMachineMasterHistory" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP_REPAIR
        SET  REPAIR_TYPE = #{REPAIR_TYPE}
            , REPAIR_START_DT = STR_TO_DATE(#{REPAIR_START_DT},'%Y-%m-%d %H:%i')
            , REPAIR_END_DT = STR_TO_DATE(#{REPAIR_END_DT},'%Y-%m-%d %H:%i')
            , REPAIR_DESC = #{REPAIR_DESC}
            , NOTE = #{NOTE}
            , BEFORE_GFILE_SEQ = #{BEFORE_GFILE_SEQ}
            , AFTER_GFILE_SEQ = #{AFTER_GFILE_SEQ}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
            AND SEQ = #{SEQ}
    </update>
    <delete id="deleteMachineMasterHistory" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_EQUIP_REPAIR
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
            AND SEQ = #{SEQ}
    </delete>
    <select id="selectEquipId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            EQUIP_SEQ,
            EQUIP_ID,
            EQUIP_NM,
            LAYOUT_ROW,
            LAYOUT_COL
        FROM TBL_EQUIP
        WHERE 1 = 1
            AND FACTORY_AREA = #{FACTORY_AREA}
            AND PROCESS_TYPE = 'MPR010'
    </select>
    <select id="selectProcessPlanGridList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.IMG_GFILE_SEQ,
            E.EQUIP_SEQ,
            E.EQUIP_ID,
            A.CONTROL_SEQ,
            A.CONTROL_DETAIL_SEQ,
            D.MCT_PLAN_SEQ,
            SF_GET_DATE_F(A.INNER_DUE_DT,'YYYY','') AS INNER_DUE_DT, <!-- 납기 -->
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_UNIT_QTY, <!-- Part 수량 -->
            A.MATERIAL_DETAIL, <!-- 소재 -->
            A.SIZE_TXT, <!-- 규격 -->
            C.POP_POSITION, <!-- 현재위치 -->
            D.WORKING_TIME,  <!-- 예상 시간(분) -->
            D.SORT_NUM,
            F.WORK_USER_ID,
            F.WORK_STATUS
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ
                                         AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_MCT_PLAN D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                         AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_EQUIP E ON D.EQUIP_SEQ = E.EQUIP_SEQ
            LEFT OUTER JOIN TBL_MCT_WORK F ON A.CONTROL_SEQ = F.CONTROL_SEQ
                                              AND A.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
                                              AND E.EQUIP_SEQ = F.EQUIP_SEQ
        WHERE
            E.EQUIP_SEQ = #{EQUIP_SEQ}
            AND D.DEL_YN = 'N'
        ORDER BY D.SORT_NUM
    </select>
    <insert id="insertMctPlan"  parameterType="java.util.HashMap" >
        INSERT INTO TBL_MCT_PLAN (
            MCT_PLAN_SEQ,
            EQUIP_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            WORKING_TIME,
            SORT_NUM
        ) VALUES(
            NEXTVAL(SEQ_MCT_PLAN),
            #{EQUIP_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            #{WORKING_TIME},
            #{SORT_NUM}
        )
    </insert>
    <update id="updateMctPlan"  parameterType="java.util.HashMap" >
        UPDATE TBL_MCT_PLAN
        SET
            EQUIP_SEQ = #{EQUIP_SEQ},
            WORKING_TIME = #{WORKING_TIME},
            SORT_NUM = #{SORT_NUM},
            UPDATE_DT = NOW()
        WHERE MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </update>
    <delete id="deleteMctPlan" parameterType="java.util.HashMap">
        UPDATE TBL_MCT_PLAN
        SET
            UPDATE_DT = NOW(),
            <!-- UPDATE_ID = NULL, -->
            DEL_YN = 'Y'
        WHERE
            MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </delete>
    <delete id="deleteMctWork" parameterType="java.util.HashMap">
        UPDATE TBL_MCT_WORK
        SET
            UPDATE_DT = NOW(),
            <!-- UPDATE_ID = NULL, -->
            DEL_YN = 'Y'
        WHERE
            MCT_WORK_SEQ = (SELECT MCT_WORK_SEQ
                            FROM TBL_MCT_WORK
                            WHERE
                                DEL_YN = 'N'
                                AND CONTROL_SEQ = #{CONTROL_SEQ}
                                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                AND EQUIP_SEQ = #{EQUIP_SEQ})
    </delete>

    <select id="selectProcessTargetList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ,
            A.CONTROL_DETAIL_SEQ,
            A.IMG_GFILE_SEQ,
            SF_GET_DATE_F(A.INNER_DUE_DT, 'YYYY', '') AS INNER_DUE_DT, <!-- 납기 -->
            CASE WHEN B.EMERGENCY_YN = 'Y' THEN '긴' END AS EMERGENCY_YN, <!-- 긴급 -->
            CASE WHEN B.MAIN_INSPECTION = 'Y' THEN '주' END AS MAIN_INSPECTION, <!-- 주요 검사품 -->
            CASE WHEN A.WORK_TYPE = 'WTP030' THEN '수' WHEN A.WORK_TYPE = 'WTP040' THEN '재' END AS WORK_NM, <!-- 형태 -->
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'EQUIP_SEQ') AS EQUIP_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'WORKING_TIME') AS WORKING_TIME_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'STATUS') AS STATUS_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'EQUIP_SEQ')  AS EQUIP_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'WORKING_TIME') AS WORKING_TIME_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'STATUS') AS STATUS_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'EQUIP_SEQ')  AS EQUIP_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'WORKING_TIME') AS WORKING_TIME_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'STATUS') AS STATUS_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'EQUIP_SEQ')  AS EQUIP_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'WORKING_TIME') AS WORKING_TIME_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'STATUS') AS STATUS_4,
            SF_GET_CODE_NM(1009, H.POP_POSITION, 'KR') AS POP_POSITION, <!-- 현재위치 -->
            SF_GET_CODE_NM(1013, A.PART_STATUS, 'KR') AS PART_STATUS, <!-- 진행상태 -->
            SUM(CASE WHEN G.PROCESS_TYPE = 'MPR010' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_NC,	<!-- 가공진행현황_NC -->
            CASE WHEN G.PROCESS_TYPE = 'MPR010' AND MIN(F.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN G.PROCESS_TYPE = 'MPR010' AND MIN(F.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_NC_COLOR,
            SUM(CASE WHEN G.PROCESS_TYPE = 'MPR020' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_MILLING, <!-- 가공진행현황_밀링 -->
            CASE WHEN G.PROCESS_TYPE = 'MPR020' AND MIN(F.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN G.PROCESS_TYPE = 'MPR020' AND MIN(F.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_MILLING_COLOR,
            SUM(CASE WHEN G.PROCESS_TYPE = 'MPR030' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_RACK, <!-- 가공진행현황_선반 -->
            CASE WHEN G.PROCESS_TYPE = 'MPR030' AND MIN(F.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN G.PROCESS_TYPE = 'MPR030' AND MIN(F.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_RACK_COLOR,
            SUM(CASE WHEN G.PROCESS_TYPE = 'MPR040' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_GRINDING, <!-- 가공진행현황_연마 -->
            CASE WHEN G.PROCESS_TYPE = 'MPR040' AND  MIN(F.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN G.PROCESS_TYPE = 'MPR040' AND MIN(F.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_GRINDING_COLOR,
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_NUM, <!-- Part -->
            A.MATERIAL_DETAIL, <!-- 소재종류 상세 -->
            IFNULL(SF_GET_CODE_NM(1027, A.MATERIAL_DETAIL, 'KR'), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!-- 수량 -->
            A.SIZE_TXT AS STANDARD_SIZE, <!-- 규격 -->
            SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE, <!-- 소재 주문 규격 -->
            CONCAT(IFNULL(B.NOTE, SPACE(0)), IFNULL(D.ORDER_NOTE, SPACE(0))) AS NOTE, <!-- 비고 기록사항 -->
            SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME,	<!-- 예상가공 시간(분) (계획 + 실행) -->
            A.MCT_NOTE, <!-- 가공계획 비고 -->
            A.MCT_WORK_TYPE, <!-- 작업 구분 -->
            H.POP_PREV_POSITION, <!-- 이전 위치 -->
            (SELECT TRUE
            FROM TBL_MCT_WORK
            WHERE
                CONTROL_SEQ <![CDATA[<>]]> A.CONTROL_SEQ
                AND CONTROL_DETAIL_SEQ  <![CDATA[<>]]> A.CONTROL_DETAIL_SEQ
                AND NOT EXISTS (SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                FROM TBL_CONTROL_PART tcp
                                WHERE
                                    DRAWING_NUM = A.DRAWING_NUM
                                    AND INSERT_DT >= DATE_SUB(NOW(), INTERVAL 6 MONTH))) AS PAST_WORKER_BOOL, <!-- 과거 경험(NC설계 기준) -->
            (SELECT WORK_USER_ID
            FROM TBL_MCT_WORK
            WHERE
                (CONTROL_SEQ, CONTROL_DETAIL_SEQ) IN (SELECT CONTROL_SEQ, CONTROL_DETAIL_SEQ
                                                      FROM TBL_CONTROL_PART
                                                      WHERE
                                                          DRAWING_NUM = A.DRAWING_NUM
                                                          AND INSERT_DT >= DATE_SUB(NOW(), INTERVAL 6 MONTH))
                AND CONTROL_SEQ <![CDATA[<>]]> A.CONTROL_SEQ
                AND CONTROL_DETAIL_SEQ  <![CDATA[<>]]> A.CONTROL_DETAIL_SEQ
            ORDER BY INSERT_DT DESC
            LIMIT 1) AS PAST_WORKER, <!-- 과거 경험(NC설계 기준) -->
            SF_GET_DATE_F(A.STATUS_DT,'YYYY','M') AS SATAUS_DT, <!-- 확정 일시 -->
            SF_GET_DATE_F(D.IN_DT,'YYYY','M') AS MATERIAL_INNER_DT <!-- 소재 입고 일시 -->
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            INNER JOIN TBL_CONTROL_PART_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ
                                                   AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_MATERIAL_ORDER D ON A.CONTROL_SEQ = D.CONTROL_SEQ
                                                    AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
         	LEFT OUTER JOIN TBL_MCT_PLAN E ON A.CONTROL_SEQ = E.CONTROL_SEQ
         	                                  AND A.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ
         	LEFT OUTER JOIN TBL_MCT_WORK F ON A.CONTROL_SEQ = F.CONTROL_SEQ
         	                                  AND A.CONTROL_DETAIL_SEQ = F.CONTROL_DETAIL_SEQ
         	LEFT OUTER JOIN TBL_EQUIP G ON E.EQUIP_SEQ = G.EQUIP_SEQ
                                           AND F.EQUIP_SEQ = G.EQUIP_SEQ
            LEFT OUTER JOIN TBL_POP H ON A.CONTROL_SEQ = H.CONTROL_SEQ
                                         AND A.CONTROL_DETAIL_SEQ = H.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            AND B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
            AND A.PART_STATUS IN ('PRO002', 'PRO004', 'PRO005', 'PRO006', 'PRO007', 'PRO008', 'PRO008')
        <if test="POP_POSITION != null and POP_POSITION != ''">
            AND H.POP_POSITION = #{POP_POSITION}
        </if>
        <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
            AND A.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
        </if>
        <if test="PROGRESS != null and PROGRESS != ''">
            AND A.PART_STATUS = #{PROGRESS}
        </if>
        <if test="MCT_WORK_TYPE != null and MCT_WORK_TYPE!= ''">
            AND A.MCT_WORK_TYPE = #{MCT_WORK_TYPE}
        </if>
        GROUP BY
            A.CONTROL_SEQ,
            A.CONTROL_DETAIL_SEQ
        ORDER BY
            B.CONTROL_NUM,
            IFNULL(A.PART_NUM, 0),
            A.INNER_DUE_DT
    </select>
    <update id="updateMctTarget"  parameterType="java.util.HashMap" >
        UPDATE TBL_CONTROL_PART
        SET
            MCT_NOTE = #{MCT_NOTE},
            MCT_WORK_TYPE = #{MCT_WORK_TYPE}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>
    <update id="updateMctPlanFromTarget"  parameterType="java.util.HashMap" >
        UPDATE TBL_MCT_PLAN
        SET
            WORKING_TIME = #{WORKING_TIME},
            UPDATE_DT = NOW()
        WHERE MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </update>
    <select id="selectCamWorkHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ,
            A.CONTROL_DETAIL_SEQ,
            SF_GET_DATE_F(A.INNER_DUE_DT,'YYYY','') AS INNER_DUE_DT, <!-- 납기 -->
            '', <!-- 출고 -->
            CASE
                WHEN B.EMERGENCY_YN = 'Y' THEN '긴'
            END AS EMERGENCY_YN, <!-- 긴급 -->
            CASE
                WHEN B.MAIN_INSPECTION = 'Y' THEN '주'
            END AS MAIN_INSPECTION, <!-- 주요 검사품 -->
            CASE
                WHEN A.WORK_TYPE = 'WTP030' THEN '수'
                WHEN A.WORK_TYPE = 'WTP040' THEN '재'
            END AS WORK_NM, <!-- 형태 -->
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_NUM, <!-- Part  -->
            A.MATERIAL_DETAIL, <!-- 소재종류 상세 -->
            IFNULL(SF_GET_CODE_NM(1027, A.MATERIAL_DETAIL, 'KR'), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 상세 -->
            SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!-- 수량 -->
            A.SIZE_TXT AS STANDARD_SIZE, <!-- 규격 -->
            SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE, <!-- 소재 주문 규격(Size) -->
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'EQUIP_SEQ') AS EQUIP_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'WORKING_TIME') AS WORKING_TIME_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'STATUS') AS STATUS_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'EQUIP_SEQ')  AS EQUIP_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'WORKING_TIME') AS WORKING_TIME_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'STATUS') AS STATUS_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'EQUIP_SEQ')  AS EQUIP_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'WORKING_TIME') AS WORKING_TIME_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'STATUS') AS STATUS_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'EQUIP_SEQ')  AS EQUIP_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'WORKING_TIME') AS WORKING_TIME_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'STATUS') AS STATUS_4,
            SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME, <!-- 총 가공 시간// 데이터 확인 필요 -->
            CONCAT(TIMESTAMPDIFF(MINUTE, D.WORK_START_DT, WORK_FINISH_DT) / SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), '분') AS UNIT_LEAD_TIME, <!-- 단위소요시간 -->
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR010' THEN 1 ELSE NULL END) AS PROCESS_NC, <!-- 가공진행현황_NC -->
            CASE WHEN E.PROCESS_TYPE = 'MPR010' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR010' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_NC_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR020' THEN 1 ELSE NULL END) AS PROCESS_MILLING, <!-- 가공진행현황_밀링 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR020' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR020' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_MILLING_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR030' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_RACK, <!-- 가공진행현황_선반 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR030' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR030' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_RACK_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR040' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_GRINDING, <!-- 가공진행현황_연마 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR040' AND  MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR040' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_GRINDING_COLOR,
            SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME, <!-- 총 가공 시간(위와 같음)// 데이터 확인 필요 -->
            A.PART_STATUS, <!-- 진행상태 -->
            SF_GET_CODE_NM(1013, A.PART_STATUS, 'KR') AS PART_STATUS_NM, <!-- 진행상태 -->
            SF_GET_CODE_NM(1009, C.POP_POSITION, 'KR') AS POP_POSITION, <!-- 현재위치 -->
            A.MCT_WORK_TYPE, <!-- MCT 작업 구분 -->
            IFNULL(SF_GET_CODE_NM(1011, A.MCT_WORK_TYPE, 'KR'), SPACE(0)) AS MCT_WORK_TYPE_NM, <!-- MCT 작업 구분 이름 -->
            CASE WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NOT NULL THEN 'CWS030'
                WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NULL THEN 'CWS020'
                ELSE 'CWS010'
            END CAM_STATUS, <!-- CAM 상태 -->
            G.CAM_SEQ, <!-- CAM 마스터 번호 -->
            H.SEQ AS CAM_STEP, <!-- CAM 스탭 -->
            SF_GET_CODE_NM(1080, H.WORK_DIRECTION, 'EN') AS WORK_DIRECTION, <!-- CAM 가공위치 -->
            H.WORK_DESC, <!-- CAM 작업 내용 -->
            H.WORK_USER_ID, <!-- CAM 작업자 -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXC') ELSE SPACE(0) END CAM_FILE_SEQ, <!-- CAM FILE -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXN') ELSE SPACE(0) END NC_FILE_SEQ, <!-- NC FILE -->
            G.HISTORY_NOTE,  <!-- CAM 기록사항 -->
            G.NOTE, <!-- CAM 비고 -->
            CONCAT(IFNULL(G.HISTORY_NOTE, SPACE(0)), IFNULL(G.NOTE, SPACE(0))) AS CAM_WORK_NOTE, <!-- CAM 작업 기록 및 비고 공유 사항 -->
            SF_GET_DATE_F(G.FINISH_DT, '', 'M') AS CAM_FINISH_DT, <!-- CAM 업데이트 일시, -->
            SF_GET_CODE_NM(1009, C.POP_PREV_POSITION, 'KR') AS POP_PREV_POSITION, <!-- 이전위치 -->
            '', <!-- 과거 경험(NC 기준) 1ea L/T -->
            '', <!-- 과거 경험(NC 기준) 날짜 -->
            '', <!-- 과거 경험(NC 기준) 수행자 -->
            SF_GET_DATE_F(A.STATUS_DT,'YYYY','M') AS SATAUS_DT, <!-- 가공확정 일시 -->
            SF_GET_MATERIAL_RECEIPT_DT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT, <!-- 소재 입고 일시 -->
            J.INSPECT_SEQ AS INSPECT_STEP, <!-- 풀질 스탭 -->
            SF_GET_CODE_NM(1040, J.INSPECT_GRADE, 'EN') AS INSPECT_GRADE,
            CASE WHEN J.INSPECT_RESULT LIKE 'QCC%' THEN SF_GET_CODE_NM(1019, J.INSPECT_RESULT, 'EN')
                 WHEN J.INSPECT_RESULT LIKE 'QCD%' THEN SF_GET_CODE_NM(1020, J.INSPECT_RESULT, 'EN')
                 ELSE SPACE(0)
                END AS INSPECT_RESULT,  <!-- 불량 코드 -->
            J.ERROR_QTY, <!-- 불량 수량 -->
            SF_GET_CODE_NM(1032, J.ERROR_REASON, 'EN') AS ERROR_REASON, <!-- 불량 원인 -->
            J.ERROR_NOTE, <!-- 불량 조치방안 -->
             SF_GET_DATE_F(J.INSERT_DT, '', '') AS INSPECT_DT <!-- 풀질현황 -->
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                         AND C.POP_SEQ = (SELECT MAX(C.POP_SEQ) FROM TBL_POP K WHERE K.POP_SEQ = C.POP_SEQ AND K.CONTROL_SEQ = C.CONTROL_SEQ
                                                                                                   AND K.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ GROUP BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ)
            LEFT OUTER JOIN TBL_MCT_WORK D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_EQUIP E ON E.EQUIP_SEQ = D.EQUIP_SEQ
            LEFT OUTER JOIN TBL_CODE F ON F.CODE_CD = D.WORK_STATUS AND F.HIGH_CD = '1079'
            LEFT OUTER JOIN TBL_CAM G ON G.CONTROL_SEQ = A.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_CAM_DETAIL H ON G.CAM_SEQ = H.CAM_SEQ AND H.SEQ = (SELECT MAX(I.SEQ) FROM TBL_CAM_DETAIL I WHERE H.CAM_SEQ = I.CAM_SEQ GROUP BY I.CAM_SEQ)
            LEFT OUTER JOIN TBL_INSPECT J ON A.CONTROL_SEQ = J.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ AND J.INSPECT_TYPE = '1'
                                             AND J.INSPECT_SEQ = (SELECT MAX(INSPECT_SEQ) FROM TBL_INSPECT I WHERE J.CONTROL_SEQ = I.CONTROL_SEQ AND J.CONTROL_DETAIL_SEQ = I.CONTROL_DETAIL_SEQ AND I.INSPECT_TYPE = '1')
    </select>
    <select id="selectNcPerformanceHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ,
            A.CONTROL_DETAIL_SEQ,
            SF_GET_CODE_NM(1005, E.FACTORY_AREA, 'KR') AS FACTORY_AREA, <!-- 공정구분 -->
            E.EQUIP_NM, <!-- NC 명 -->
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_NUM, <!-- Part -->
            A.DRAWING_NUM, <!-- 도면번호 -->
            A.ITEM_NM, <!-- 품명 -->
            SF_GET_CODE_NM(1033, A.WORK_TYPE, 'KR') AS WORK_TYPE, <!-- 형태 -->
            SF_GET_CODE_NM(1027, A.MATERIAL_DETAIL, 'KR') AS MATERIAL_DETAIL, <!-- 소재종류 -->
            SF_GET_CODE_NM(1029, A.MATERIAL_KIND, 'KR') AS MATERIAL_KIND, <!-- 소재분류? -->
            A.PART_UNIT_QTY, <!-- 수량 -->
            A.SIZE_TXT AS STANDARD_SIZE, <!-- 규격 -->
            SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE, <!-- 소재 주문 규격(Size) -->
            A.MATERIAL_FINISH_TM, <!-- TM각비 -->
            A.MATERIAL_FINISH_GRIND, <!-- 연마 -->
            A.MATERIAL_FINISH_HEAT, <!-- 열처리 -->
            SF_GET_DATE_F(D.WORK_START_DT, 'YYYY', 'M') AS WORK_START_DT, <!-- 착수일시 -->
            SF_GET_DATE_F(D.WORK_FINISH_DT, 'YYYY', 'M') AS WORK_FINISH_DT, <!-- 완료일시 -->
            CONCAT(D.WORK_TEMP_STOP_DT, '분') AS WORK_STOP_DT, <!-- 정지시간 -->
            CONCAT(TIMESTAMPDIFF(MINUTE, D.WORK_START_DT, WORK_FINISH_DT), '분') AS LEAD_TIME, <!-- 소요시간 -->
            CONCAT(TIMESTAMPDIFF(MINUTE, D.WORK_START_DT, WORK_FINISH_DT) / SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), '분') AS UNIT_LEAD_TIME,  <!-- 단위소요 -->
            D.WORK_USER_ID <!-- 작업자 -->
        FROM TBL_CONTROL_PART A
            INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN TBL_MATERIAL_ORDER C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_MCT_WORK D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.DEL_YN = 'N'
            LEFT OUTER JOIN TBL_EQUIP E ON E.EQUIP_SEQ = D.EQUIP_SEQ
        WHERE
            B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
    </select>

    <select id="selectResultManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.DRAWING_NUM, A.IMG_GFILE_SEQ, A.DXF_GFILE_SEQ,
            jmes.SF_GET_DATE_F(A.INNER_DUE_DT, '', '') AS INNER_DUE_DT, <!-- 내부가공납기 -->
            CASE WHEN B.EMERGENCY_YN = 'Y' THEN '긴' END AS EMERGENCY_YN, <!-- 긴급 -->
            CASE WHEN B.MAIN_INSPECTION = 'Y' THEN '주' END AS MAIN_INSPECTION, <!-- 주요 검사품 -->
            CASE WHEN A.WORK_TYPE = 'WTP030' THEN '수' WHEN A.WORK_TYPE = 'WTP040' THEN '재' END AS WORK_NM, <!-- 형태 -->
            A.ITEM_NM, <!-- 품명 -->
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'EQUIP_ID') AS EQUIP_ID_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'EQUIP_SEQ') AS EQUIP_SEQ_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'WORKING_TIME') AS WORKING_TIME_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 1, 'STATUS') AS STATUS_1,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'EQUIP_ID') AS EQUIP_ID_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'EQUIP_SEQ')  AS EQUIP_SEQ_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'WORKING_TIME') AS WORKING_TIME_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 2, 'STATUS') AS STATUS_2,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'EQUIP_ID') AS EQUIP_ID_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'EQUIP_SEQ')  AS EQUIP_SEQ_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'WORKING_TIME') AS WORKING_TIME_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 3, 'STATUS') AS STATUS_3,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'MCT_PLAN_SEQ') AS MCT_PLAN_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'EQUIP_ID') AS EQUIP_ID_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'EQUIP_SEQ')  AS EQUIP_SEQ_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'WORKING_TIME') AS WORKING_TIME_4,
            SF_GET_MCT_PLAN(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 4, 'STATUS') AS STATUS_4,
            SF_GET_CODE_NM(1009, C.POP_POSITION, 'KR') AS POP_POSITION, <!-- 현재위치 -->
            SF_GET_CODE_NM(1013, A.PART_STATUS, 'KR') AS PART_STATUS, <!-- 진행상태 -->
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR010' THEN 1 ELSE NULL END) AS PROCESS_NC,	<!-- 가공진행현황_NC -->
            CASE WHEN E.PROCESS_TYPE = 'MPR010' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR010' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_NC_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR020' THEN 1 ELSE NULL END) AS PROCESS_MILLING,	<!-- 가공진행현황_밀링 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR020' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR020' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_MILLING_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR030' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_RACK,	<!-- 가공진행현황_선반 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR030' AND MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR030' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_RACK_COLOR,
            SUM(CASE WHEN E.PROCESS_TYPE = 'MPR040' THEN 1 ELSE NULL END) AS PROCESS_PROGRESS_GRINDING,	<!-- 가공진행현황_연마 -->
            CASE WHEN E.PROCESS_TYPE = 'MPR040' AND  MIN(D.WORK_STATUS) = 'DBS030' THEN 'BLUE'
                 WHEN E.PROCESS_TYPE = 'MPR040' AND MIN(D.WORK_STATUS) IS NOT NULL THEN 'GREEN' ELSE SPACE(0) END AS PROCESS_GRINDING_COLOR,
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_NUM, <!-- Part -->
            A.MATERIAL_DETAIL, <!-- 소재종류 상세 -->
            IFNULL(SF_GET_CODE_NM(1027, A.MATERIAL_DETAIL, 'KR'), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS ORDER_QTY, <!-- 수량 -->
            A.SIZE_TXT AS STANDARD_SIZE, <!-- 규격 -->
            jmes.SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE,	<!-- 소재 주문 규격 -->
            B.NOTE AS CONTROL_NOTE, <!-- 주문 확정 비고 -->
            jmes.SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME,	<!-- 작업 시간 (계획 + 실행) -->
            A.MCT_WORK_TYPE, <!-- MCT 작업 구분 -->
            IFNULL(SF_GET_CODE_NM(1011, A.MCT_WORK_TYPE, 'KR'), SPACE(0)) AS MCT_WORK_TYPE_NM, <!-- MCT 작업 구분 이름 -->
            CASE WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NOT NULL THEN 'CWS030'
                WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NULL THEN 'CWS020'
                ELSE 'CWS010'
            END CAM_STATUS, <!-- CAM 상태 -->
            G.CAM_SEQ, <!-- CAM 마스터 번호 -->
            H.SEQ AS CAM_STEP, <!-- CAM 스탭 -->
            SF_GET_CODE_NM(1080, H.WORK_DIRECTION, 'EN') AS WORK_DIRECTION, <!-- CAM 가공위치 -->
            H.WORK_DESC, <!-- CAM 작업 내용 -->
            H.WORK_USER_ID, <!-- CAM 작업자 -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXC') ELSE SPACE(0) END CAM_FILE_SEQ, <!-- CAM FILE -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXN') ELSE SPACE(0) END NC_FILE_SEQ, <!-- NC FILE -->
            G.HISTORY_NOTE,  <!-- CAM 기록사항 -->
            G.NOTE, <!-- CAM 비고 및 공유사항 -->
            CONCAT(IFNULL(G.HISTORY_NOTE, SPACE(0)), IFNULL(G.NOTE, SPACE(0))) AS CAM_WORK_NOTE,    <!-- CAM 작업 기록 및 비고 공유 사항 -->
            jmes.SF_GET_DATE_F(G.FINISH_DT, '', 'M') AS CAM_FINISH_DT, <!-- CAM 업데이트 일시, -->
            C.POP_PREV_POSITION, <!-- 이전 위치 -->
            jmes.SF_GET_DATE_F(A.STATUS_DT, '', 'M') AS SATAUS_DT, <!-- 확정 일시 -->
            jmes.SF_GET_MATERIAL_RECEIPT_DT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT, <!-- 소재 입고 일시 -->
            J.INSPECT_SEQ AS INSPECT_STEP, <!-- 풀질 스탭 -->
            SF_GET_CODE_NM(1040, J.INSPECT_GRADE, 'EN') AS INSPECT_GRADE,
            CASE WHEN J.INSPECT_RESULT LIKE 'QCC%' THEN SF_GET_CODE_NM(1019, J.INSPECT_RESULT, 'EN')
                 WHEN J.INSPECT_RESULT LIKE 'QCD%' THEN SF_GET_CODE_NM(1020, J.INSPECT_RESULT, 'EN')
                 ELSE SPACE(0)
                END AS INSPECT_RESULT,	-- 불량 코드 -->
            J.ERROR_QTY, <!-- 불량 수량 -->
            SF_GET_CODE_NM(1032, J.ERROR_REASON, 'EN') AS ERROR_REASON, <!-- 불량 원인 -->
            J.ERROR_NOTE, <!-- 불량 조치방안 -->
            jmes.SF_GET_DATE_F(J.INSERT_DT, '', '') AS INSPECT_DT <!-- 풀질현황 -->
        FROM jmes.TBL_CONTROL_PART A
                 INNER JOIN jmes.TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
                 LEFT OUTER JOIN jmes.TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND C.POP_SEQ = (SELECT MAX(C.POP_SEQ) FROM jmes.TBL_POP K WHERE K.POP_SEQ = C.POP_SEQ AND K.CONTROL_SEQ = C.CONTROL_SEQ
                                                                                 AND K.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ GROUP BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ
                    )
                 LEFT OUTER JOIN jmes.TBL_MCT_WORK D ON A.CONTROL_SEQ = D.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.DEL_YN = 'N'
                 LEFT OUTER JOIN jmes.TBL_EQUIP E ON E.EQUIP_SEQ = D.EQUIP_SEQ
                 LEFT OUTER JOIN jmes.TBL_CODE F ON F.CODE_CD = D.WORK_STATUS AND F.HIGH_CD = '1079'
                 LEFT OUTER JOIN jmes.TBL_CAM G ON G.CONTROL_SEQ = A.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                 LEFT OUTER JOIN jmes.TBL_CAM_DETAIL H ON G.CAM_SEQ = H.CAM_SEQ AND H.SEQ = (SELECT MAX(I.SEQ) FROM jmes.TBL_CAM_DETAIL I WHERE H.CAM_SEQ = I.CAM_SEQ GROUP BY I.CAM_SEQ)
                 LEFT OUTER JOIN jmes.TBL_INSPECT J ON A.CONTROL_SEQ = J.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ AND J.INSPECT_TYPE = '1'
            AND J.INSPECT_SEQ = (SELECT MAX(INSPECT_SEQ) FROM jmes.TBL_INSPECT I WHERE J.CONTROL_SEQ = I.CONTROL_SEQ AND J.CONTROL_DETAIL_SEQ = I.CONTROL_DETAIL_SEQ AND I.INSPECT_TYPE = '1')
        WHERE 1 = 1
          AND IFNULL(A.OUTSIDE_YN, 'N') = 'N'
          AND A.PART_STATUS IN ('PRO002', 'PRO004', 'PRO005', 'PRO006', 'PRO007', 'PRO008', 'PRO009')
        GROUP BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ
        ORDER BY B.CONTROL_NUM, IFNULL(A.PART_NUM, 0), A.INNER_DUE_DT
    </select>

    <select id="selectCamMasterInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CAM_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.START_DT, A.HISTORY_NOTE, A.NOTE
        FROM jmes.TBL_CAM A
        WHERE 1 = 1
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectCamDetailInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.CAM_SEQ, A.SEQ, A.WORK_DIRECTION, A.WORK_DESC, A.WORK_USER_ID, A.DESIGN_QTY, A.WORK_TIME,
            A.CAM_GFILE_SEQ, C.FILE_SEQ AS CAM_FILE_SEQ, C.ORGINAL_FILE_NM AS CAM_FILE_NM, D.FILE_SEQ AS NC_FILE_SEQ, D.ORGINAL_FILE_NM AS NC_FILE_NM
        FROM jmes.TBL_CAM_DETAIL A
            INNER JOIN jmes.TBL_CAM B ON A.CAM_SEQ = B.CAM_SEQ
            LEFT OUTER JOIN jmes.TBL_FILE C ON C.GFILE_SEQ = A.CAM_GFILE_SEQ AND C.FILE_KIND = 'EXC'
            LEFT OUTER JOIN jmes.TBL_FILE D ON D.GFILE_SEQ = A.CAM_GFILE_SEQ AND D.FILE_KIND = 'EXN'
        WHERE 1 = 1
          AND A.CAM_SEQ = #{CAM_SEQ}
        GROUP BY A.CAM_SEQ, A.SEQ
    </select>

    <insert id="insertMctCamWork"  parameterType="java.util.HashMap" >
        <selectKey keyProperty="CAM_SEQ" resultType="integer" order="BEFORE">
            SELECT (CASE WHEN #{CAM_SEQ} IS NOT NULL THEN #{CAM_SEQ} ELSE NEXTVAL(SEQ_CAM) END) AS CAM_SEQ FROM DUAL
        </selectKey>
        INSERT INTO jmes.TBL_CAM
        (CAM_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, START_DT, HISTORY_NOTE, NOTE, INSERT_ID)
        VALUES
        (#{CAM_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}, NOW(), #{HISTORY_NOTE}, #{NOTE}, #{LOGIN_USER_ID})
        ON DUPLICATE KEY UPDATE
            HISTORY_NOTE = #{HISTORY_NOTE},
            NOTE = #{NOTE},
            FINISH_DT= NULL,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <delete id="deleteMctCamWork"  parameterType="java.util.HashMap" >
        DELETE FROM jmes.TBL_CAM
        WHERE CAM_SEQ = #{CAM_SEQ}
    </delete>

    <update id="updateMctCamWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM
        SET
            HISTORY_NOTE = #{HISTORY_NOTE},
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CAM_SEQ = #{CAM_SEQ}
    </update>

    <update id="updateMctCamWorkComplete"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM
        SET
            HISTORY_NOTE = #{HISTORY_NOTE},
            NOTE = #{NOTE},
            FINISH_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CAM_SEQ = #{CAM_SEQ}
    </update>

    <insert id="insertMctCamDetailWork"  parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_CAM_DETAIL
        (CAM_SEQ, SEQ, WORK_DIRECTION, WORK_DESC, WORK_USER_ID, DESIGN_QTY, CAM_GFILE_SEQ, INSERT_ID)
        VALUES
        (#{CAM_SEQ}, (SELECT IFNULL(MAX(B.SEQ), 0) + 1 FROM jmes.TBL_CAM_DETAIL B WHERE B.CAM_SEQ = #{CAM_SEQ}),
            #{WORK_DIRECTION}, #{WORK_DESC}, #{WORK_USER_ID}, #{DESIGN_QTY}, #{CAM_GFILE_SEQ}, #{LOGIN_USER_ID} )
    </insert>

    <update id="updateMctCamDetailWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM_DETAIL
        SET
            WORK_DIRECTION = #{WORK_DIRECTION},
            WORK_DESC = #{WORK_DESC},
            WORK_USER_ID = #{WORK_USER_ID},
            DESIGN_QTY = #{DESIGN_QTY},
            CAM_GFILE_SEQ = #{CAM_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </update>

    <update id="updateMctCamDetailGfile"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM_DETAIL
        SET
            CAM_GFILE_SEQ = #{CAM_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </update>

    <delete id="deleteMctCamDetailWork"  parameterType="java.util.HashMap" >
        DELETE FROM jmes.TBL_CAM_DETAIL
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </delete>

    <insert id="createCamStartControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            'PRO006',
            NOW(),
            #{LOGIN_USER_ID}
        )
    </insert>

    <update id="updateCamStartControlPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = 'PRO006',
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <insert id="beforeStatusControlPartProgress" parameterType="java.util.HashMap" >
        DELETE FROM TBL_CONTROL_PART_PROGRESS A
        WHERE A.PART_STATUS = 'PRO006'
            AND A.SEQ = (SELECT MAX(B.SEQ) FROM TBL_CONTROL_PART_PROGRESS B WHERE A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </insert>

    <insert id="beforeStatusControlPart" parameterType="java.util.HashMap" >
        UPDATE TBL_CONTROL_PART A
            INNER JOIN  TBL_CONTROL_PART_PROGRESS B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND A.PART_STATUS != B.PART_STATUS
                AND B.SEQ = (SELECT MAX(C.SEQ) FROM TBL_CONTROL_PART_PROGRESS C WHERE C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ)
        SET
            A.PART_STATUS = B.PART_STATUS,
            A.STATUS_DT = B.STATUS_DT,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.PART_STATUS = 'PRO006'
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </insert>


</mapper>