<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="machine">

    <select id="selectMachineList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
              A.EQUIP_SEQ
            , A.EQUIP_ID
            , A.PHOTO_GFILE_SEQ
            , jmes.SF_GET_FILE_ORGINAL_NM(A.PHOTO_GFILE_SEQ, '1') as PHOTO_GFILE_SEQ_NM
            , A.EQUIP_NM
            , jmes.SF_GET_CODE_NM('1010', A.PROCESS_TYPE, #{LOGIN_LOCALE}) AS PROCESS_TYPE_NM
            , jmes.SF_GET_CODE_NM('1012', A.EQUIP_TYPE, #{LOGIN_LOCALE}) AS EQUIP_TYPE_NM
            <!-- , jmes.SF_GET_CODE_NM('1034', A.EQUIP_SIZE, #{LOGIN_LOCALE}) AS EQUIP_SIZE_NM -->
            , A.EQUIP_SIZE
            , jmes.SF_GET_CODE_NM('1037', A.EQUIP_COMP_CD, #{LOGIN_LOCALE}) AS EQUIP_COMP_NM
            , jmes.SF_GET_CODE_NM('1022', A.RESELLER_CD, #{LOGIN_LOCALE}) AS RESELLER_NM
            , jmes.SF_GET_CODE_NM('1005', A.FACTORY_AREA, #{LOGIN_LOCALE}) AS FACTORY_AREA_NM
            , jmes.SF_GET_CODE_NM('1014', (SELECT REF_CD FROM jmes.TBL_CODE WHERE HIGH_CD = '1005' AND CODE_CD = A.FACTORY_AREA), #{LOGIN_LOCALE}) AS FACTORY_NM
            , jmes.SF_GET_DATE_F(A.PURCHASE_DT,'YY','') AS PURCHASE_DT
            , (SELECT USER_NM FROM jmes.TBL_USER WHERE USER_ID = A.MAIN_USER_ID) AS MAIN_USER_NM
            , (SELECT USER_NM FROM jmes.TBL_USER WHERE USER_ID = A.SUB_USER_ID) AS SUB_USER_NM
            , (SELECT CONCAT(FLOOR(SUM(TIMESTAMPDIFF(MINUTE, Y.WORK_START_DT, Y.WORK_STOP_DT) / 60)),'H ', MOD(SUM(TIMESTAMPDIFF(MINUTE, Y.WORK_START_DT, Y.WORK_STOP_DT)), 60), 'M')
                FROM jmes.TBL_MCT_WORK X, jmes.TBL_MCT_WORK_TIME Y
                WHERE X.MCT_WORK_SEQ = Y.MCT_WORK_SEQ
                    AND X.DEL_YN = 'N'
                    AND Y.WORK_STOP_DT IS NOT NULL
                    AND X.EQUIP_SEQ = A.EQUIP_SEQ) AS WORKING_TIME
            , (SELECT jmes.SF_GET_DATE_F(MAX(REPAIR_END_DT),'YY','') FROM jmes.TBL_EQUIP_REPAIR WHERE EQUIP_SEQ = A.EQUIP_SEQ) AS LAST_REPAIR_DT
            , (SELECT jmes.SF_GET_DATE_F(MAX(M.WORK_FINISH_DT),'YY','') FROM jmes.TBL_MCT_WORK M WHERE M.EQUIP_SEQ = A.EQUIP_SEQ) AS LAST_WORK_FINISH_DT
            , ( SELECT Y.CONTROL_NUM
                FROM jmes.TBL_MCT_WORK X, jmes.TBL_CONTROL Y
                WHERE X.CONTROL_SEQ = Y.CONTROL_SEQ
                    AND X.EQUIP_SEQ = A.EQUIP_SEQ
                ORDER BY X.MCT_WORK_SEQ DESC
                LIMIT 1) AS LAST_CONTROL_NUM
            , A.NOTE
            , A.MODEL_NUM, A.SERIAL_NUM
            , A.COMBO_BOX_SORT_NUM
            , A.REPORT_SHOW_YN
        FROM jmes.TBL_EQUIP A
        WHERE A.DEL_YN = 'N'
        <if test="SEL_EQUIP_KIND !='' and SEL_EQUIP_KIND != null">
            AND A.EQUIP_KIND = #{SEL_EQUIP_KIND}
        </if>
        <if test="SEL_EQUIP_TYPE !='' and SEL_EQUIP_TYPE != null">
            AND A.EQUIP_TYPE = #{SEL_EQUIP_TYPE}
        </if>
        <if test="SEL_EQUIP_SIZE !='' and SEL_EQUIP_SIZE != null">
            AND A.EQUIP_SIZE = #{SEL_EQUIP_SIZE}
        </if>
        <if test="SEL_EQUIP_NM !='' and SEL_EQUIP_NM != null">
            AND A.EQUIP_SEQ = #{SEL_EQUIP_NM}
        </if>
        <if test="SEL_FACTORY_AREA !='' and SEL_FACTORY_AREA != null">
            AND A.FACTORY_AREA = #{SEL_FACTORY_AREA}
        </if>
        <if test="SEL_MAIN_USER_ID !='' and SEL_MAIN_USER_ID != null">
            AND EXISTS (  SELECT 1
                            FROM jmes.TBL_USER
                            WHERE USER_ID IN (A.MAIN_USER_ID, A.SUB_USER_ID)
                            AND USER_NM LIKE CONCAT('%', #{SEL_MAIN_USER_ID}, '%')
                       )
        </if>
<!--            <if test="SEL_TERM_DT_USE or SEL_TERM_DT_USE ==true">-->
            <if test='SEL_DAY_TYPE == "1"'>
                AND A.PURCHASE_DT >= REPLACE(#{SEL_ST_DT},'/',space(0))
                AND A.PURCHASE_DT <![CDATA[ <= ]]> REPLACE(#{SEL_END_DT},'/',space(0))
            </if>
<!--            </if>-->
        <if test="SEL_MAIN_USER_ID !='' and SEL_MAIN_USER_ID != null">
            AND (A.MAIN_USER_ID = #{SEL_MAIN_USER_ID} OR SUB_USER_ID = #{SEL_MAIN_USER_ID})
        </if>
        ORDER BY A.EQUIP_ID
    </select>

    <select id="selectMachineInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ, A.EQUIP_ID
            , jmes.SF_GET_CODE_NM('1051', A.EQUIP_KIND, #{LOGIN_LOCALE}) AS EQUIP_KIND_NM
            , A.PHOTO_GFILE_SEQ
            , A.EQUIP_NM
            , A.PROCESS_TYPE
            , A.EQUIP_TYPE
            , A.EQUIP_SIZE
            , A.EQUIP_COMP_CD
            , A.FACTORY_AREA
            , A.MAIN_USER_ID
            , A.SUB_USER_ID
            , jmes.SF_GET_DATE_F(A.PURCHASE_DT,'YYYY','') AS PURCHASE_DT
            , A.RESELLER_CD
            , A.ETC_GFILE_SEQ
            , jmes.SF_GET_FILE_ORGINAL_NM(A.ETC_GFILE_SEQ, '1') as ETC_GFILE_SEQ_NM
            , A.NOTE
            , A.MODEL_NUM
            , A.SERIAL_NUM
            , A.COST_PER_HOUR
            , A.COMBO_BOX_SORT_NUM
        FROM jmes.TBL_EQUIP A
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
    </select>
    <select id="selectMachineSeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT NEXTVAL(jmes.SEQ_EQUIP) AS SEQ FROM dual
    </select>

    <insert id="insertMachineMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_EQUIP (EQUIP_SEQ, EQUIP_ID, EQUIP_KIND, EQUIP_NM
                              , PROCESS_TYPE, EQUIP_TYPE, EQUIP_SIZE
                              , EQUIP_COMP_CD, FACTORY_AREA
                              , MAIN_USER_ID, SUB_USER_ID, PURCHASE_DT, RESELLER_CD, NOTE
                              , PHOTO_GFILE_SEQ, ETC_GFILE_SEQ, INSERT_ID, MODEL_NUM, SERIAL_NUM, COST_PER_HOUR, COMBO_BOX_SORT_NUM)
        VALUES (  #{EQUIP_SEQ}, #{EQUIP_ID}, #{EQUIP_KIND}, #{EQUIP_NM}
                , #{PROCESS_TYPE, jdbcType=VARCHAR}, #{EQUIP_TYPE}, #{EQUIP_SIZE}
                , #{EQUIP_COMP_CD}, #{FACTORY_AREA}
                , #{MAIN_USER_ID}, #{SUB_USER_ID}, REPLACE(#{PURCHASE_DT},'/',space(0)), #{RESELLER_CD}, #{NOTE}
                , #{PHOTO_GFILE_SEQ}, #{ETC_GFILE_SEQ}, #{LOGIN_USER_ID}, #{MODEL_NUM}, #{SERIAL_NUM}, #{COST_PER_HOUR}, #{COMBO_BOX_SORT_NUM})
    </insert>
    <update id="updateMachineMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP
        SET EQUIP_ID = #{EQUIP_ID}
              , EQUIP_NM = #{EQUIP_NM}
              , PROCESS_TYPE = #{PROCESS_TYPE, jdbcType=VARCHAR}
              , EQUIP_TYPE = #{EQUIP_TYPE}
              , EQUIP_SIZE = #{EQUIP_SIZE}
              , EQUIP_COMP_CD = #{EQUIP_COMP_CD}
              , FACTORY_AREA = #{FACTORY_AREA}
              , MAIN_USER_ID = #{MAIN_USER_ID}
              , SUB_USER_ID = #{SUB_USER_ID}
              , PURCHASE_DT = REPLACE(#{PURCHASE_DT},'/',space(0))
              , RESELLER_CD = #{RESELLER_CD}
              , NOTE = #{NOTE}
              , MODEL_NUM = #{MODEL_NUM}
              , SERIAL_NUM = #{SERIAL_NUM}
              , COST_PER_HOUR = #{COST_PER_HOUR}
              , COMBO_BOX_SORT_NUM = #{COMBO_BOX_SORT_NUM}
            <if test="PHOTO_GFILE_SEQ != null and PHOTO_GFILE_SEQ != ''">
                  , PHOTO_GFILE_SEQ = #{PHOTO_GFILE_SEQ}
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
              , ETC_GFILE_SEQ = #{ETC_GFILE_SEQ}
            </if>
              , UPDATE_DT = NOW()
              , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </update>
    <delete id="deleteMachineMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP
        SET DEL_YN = 'Y'
          , UPDATE_DT = NOW()
          , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
    </delete>

    <select id="selectMachineLogList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY A.MCT_WORK_SEQ) AS RNUM
          , B.PROCESS_TYPE, jmes.SF_GET_CODE_NM('1010', B.PROCESS_TYPE, #{LOGIN_LOCALE}) AS PROCESS_TYPE_NM
          , B.EQUIP_NM
          , jmes.SF_GET_CODE_NM('1079', A.WORK_STATUS, #{LOGIN_LOCALE}) AS WORK_STATUS
          , jmes.SF_GET_DATE_F(A.WORK_START_DT,'','M') AS WORK_START_DT
          , jmes.SF_GET_DATE_F(A.WORK_FINISH_DT,'','M') AS WORK_FINISH_DT
          , (SELECT SUM(TIMESTAMPDIFF(MINUTE, M.WORK_START_DT, M.WORK_STOP_DT)) FROM jmes.TBL_MCT_WORK_TIME M WHERE M.MCT_WORK_SEQ = A.MCT_WORK_SEQ) AS WORKING_TIME     -- 확인
          , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = A.WORK_USER_ID) AS WORK_USER
          , A.FINISH_QTY
          , A.ERROR_QTY
        FROM jmes.TBL_MCT_WORK A, jmes.TBL_EQUIP B
        WHERE A.EQUIP_SEQ = B.EQUIP_SEQ
          AND A.DEL_YN = 'N'
          AND A.EQUIP_SEQ = #{EQUIP_SEQ}
        ORDER BY 1 DESC
    </select>
    <select id="selectMachineHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.EQUIP_SEQ
          , A.SEQ
          , A.REPAIR_TYPE
          , SF_GET_CODE_NM('1036', REPAIR_TYPE, #{LOGIN_LOCALE}) AS REPAIR_TYPE_NM
          , A.REPAIR_DESC
          , jmes.SF_GET_DATE_F(A.REPAIR_START_DT,'YYYY','M') AS REPAIR_START_DT
          , jmes.SF_GET_DATE_F(A.REPAIR_END_DT,'YYYY','M') AS REPAIR_END_DT
          , CONCAT(DATEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT) * 24 + HOUR(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)), 'H ', MINUTE(TIMEDIFF(A.REPAIR_END_DT, A.REPAIR_START_DT)),'M') AS REPAIR_TIME
          , A.NOTE
          , A.BEFORE_GFILE_SEQ
          , A.AFTER_GFILE_SEQ
        FROM jmes.TBL_EQUIP_REPAIR A
        WHERE A.EQUIP_SEQ = #{EQUIP_SEQ}
    </select>
    <insert id="insertMachineMasterHistory" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_EQUIP_REPAIR ( EQUIP_SEQ, SEQ, REPAIR_TYPE
                                            , REPAIR_START_DT, REPAIR_END_DT
                                            , REPAIR_DESC, NOTE, BEFORE_GFILE_SEQ, AFTER_GFILE_SEQ, INSERT_ID)
        VALUES (#{EQUIP_SEQ},NEXTVAL(jmes.SEQ_DUMMY),#{REPAIR_TYPE}
                , STR_TO_DATE(#{REPAIR_START_DT},'%Y/%m/%d %H:%i'), STR_TO_DATE(#{REPAIR_END_DT},'%Y/%m/%d %H:%i')
                , #{REPAIR_DESC}, #{NOTE}, #{BEFORE_GFILE_SEQ}, #{AFTER_GFILE_SEQ}, #{LOGIN_USER_ID})
    </insert>
    <update id="updateMachineMasterHistory" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_EQUIP_REPAIR
        SET  REPAIR_TYPE = #{REPAIR_TYPE}
            , REPAIR_START_DT = STR_TO_DATE(#{REPAIR_START_DT},'%Y/%m/%d %H:%i')
            , REPAIR_END_DT = STR_TO_DATE(#{REPAIR_END_DT},'%Y/%m/%d %H:%i')
            , REPAIR_DESC = #{REPAIR_DESC}
            , NOTE = #{NOTE}
            , BEFORE_GFILE_SEQ = #{BEFORE_GFILE_SEQ}
            , AFTER_GFILE_SEQ = #{AFTER_GFILE_SEQ}
            , UPDATE_DT = NOW()
            , UPDATE_ID = #{LOGIN_USER_ID}
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
            AND SEQ = #{SEQ}
    </update>
    <delete id="deleteMachineMasterHistory" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_EQUIP_REPAIR
        WHERE EQUIP_SEQ = #{EQUIP_SEQ}
            AND SEQ = #{SEQ}
    </delete>
    <select id="selectEquipId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            EQUIP_SEQ,
            EQUIP_ID,
            EQUIP_NM,
            LAYOUT_ROW,
            LAYOUT_COL
        FROM TBL_EQUIP
        WHERE 1 = 1
            AND FACTORY_AREA = #{FACTORY_AREA}
            AND PROCESS_TYPE = 'MPR010'
    </select>
    <select id="selectProcessPlanGridInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.EQUIP_SEQ,
            A.EQUIP_NM,
            B.MCT_WORK_SEQ,
            C.CONTROL_SEQ,
            C.CONTROL_DETAIL_SEQ,
            B.WORK_START_DT,
            B.WORK_FINISH_DT,
            CASE
                WHEN B.WORK_START_DT IS NOT NULL AND B.WORK_FINISH_DT IS NULL THEN '진행중'
                WHEN B.WORK_START_DT IS NOT NULL AND B.WORK_FINISH_DT IS NOT NULL AND WORK_TEMP_STOP_DT IS NOT NULL THEN '임시중지'
                WHEN B.WORK_START_DT IS NOT NULL AND B.WORK_FINISH_DT IS NOT NULL THEN '완료'
                WHEN B.WORK_START_DT IS NOT NULL AND B.WORK_STATUS = 'DBS030' THEN '취소'
            END AS EQUIP_STATUS,
            B.WORK_USER_ID,
            SF_GET_USER_NM(A.LOGIN_USER_ID) AS WORK_USER_NM,
            CASE WHEN C.PART_NUM IS NULL THEN D.CONTROL_NUM ELSE CONCAT(D.CONTROL_NUM, ' #', C.PART_NUM) END AS CONTROL_NUM, <!-- 관리번호 -->
            C.MATERIAL_TYPE,
            UPPER(SUBSTRING(SF_GET_CODE_NM('1035', C.MATERIAL_TYPE, #{LOGIN_LOCALE}), 1, 2)) AS MATERIAL_TYPE_NM_SUBSTR, <!-- 재질 -->
            SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY,
            CONCAT(SF_GET_DRAWING_WORK_TIME('W_MINUTE', B.MCT_WORK_SEQ), '''', ' / ', CASE WHEN SF_GET_DRAWING_WORK_TIME('T_MINUTE', B.MCT_WORK_SEQ) > 0 THEN CONCAT(SF_GET_DRAWING_WORK_TIME('T_MINUTE', B.MCT_WORK_SEQ), '''') ELSE '-' END )  AS WORK_TIME
        FROM TBL_EQUIP A
            LEFT OUTER JOIN TBL_MCT_WORK B ON A.EQUIP_SEQ = B.EQUIP_SEQ
                AND B.MCT_WORK_SEQ = (SELECT MAX(MCT_WORK_SEQ) FROM TBL_MCT_WORK WHERE EQUIP_SEQ = TRIM(#{EQUIP_SEQ}) AND DEL_YN = 'N')
            LEFT OUTER JOIN TBL_CONTROL_PART C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN TBL_CONTROL D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND D.DEL_YN = 'N'
        WHERE A.DEL_YN = 'N'
            AND A.EQUIP_SEQ = TRIM(#{EQUIP_SEQ})
    </select>
    <select id="selectProcessPlanGridList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER(ORDER BY A.SORT_NUM) AS ROW_NUM,
            A.MCT_PLAN_SEQ,
            E.EQUIP_SEQ,
            A.SORT_NUM,
            B.IMG_GFILE_SEQ,
            B.CONTROL_SEQ,
            B.CONTROL_DETAIL_SEQ,
            SF_GET_DATE_F(B.INNER_DUE_DT,'','') AS INNER_DUE_DT, <!-- 납기 -->
            CASE WHEN B.PART_NUM IS NULL THEN C.CONTROL_NUM ELSE CONCAT(C.CONTROL_NUM, ' # ', B.PART_NUM) END AS CONTROL_NUM, <!-- 관리번호 -->
            SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY, <!-- 수량 -->
            B.MATERIAL_TYPE, <!-- 재질 -->
            UPPER(SUBSTRING(SF_GET_CODE_NM('1035', B.MATERIAL_TYPE, #{LOGIN_LOCALE}), 1, 2)) AS MATERIAL_TYPE_NM_SUBSTR, <!-- 재질 -->
            CONCAT(A.WORKING_TIME, '''') AS WORKING_TIME <!-- 예상 시간(분) -->
        FROM TBL_MCT_PLAN A
            INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
            INNER JOIN TBL_CONTROL C ON B.CONTROL_SEQ = C.CONTROL_SEQ
            LEFT OUTER JOIN TBL_EQUIP E ON A.EQUIP_SEQ = E.EQUIP_SEQ
        WHERE A.DEL_YN = 'N'
            AND C.DEL_YN = 'N'
            AND E.EQUIP_SEQ = #{EQUIP_SEQ}
        ORDER BY A.SORT_NUM
    </select>

    <insert id="insertMctPlan"  parameterType="java.util.HashMap" >
        <selectKey keyProperty="MCT_PLAN_SEQ" resultType="int" order="BEFORE">
            SELECT NEXTVAL(SEQ_MCT_PLAN) FROM DUAL
        </selectKey>
        INSERT INTO TBL_MCT_PLAN (
            MCT_PLAN_SEQ,
            EQUIP_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            WORKING_TIME,
            SORT_NUM,
            INSERT_ID
        ) VALUES(
            #{MCT_PLAN_SEQ},
            #{EQUIP_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            REGEXP_REPLACE(#{WORKING_TIME}, '[^0-9]', SPACE(0)),
            (SELECT IFNULL(MAX(M.SORT_NUM), 0) + 1 FROM TBL_MCT_PLAN M WHERE M.DEL_YN = 'N' AND M.EQUIP_SEQ = #{EQUIP_SEQ}),
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                EQUIP_SEQ = #{EQUIP_SEQ},
                WORKING_TIME = REGEXP_REPLACE(#{WORKING_TIME}, '[^0-9]', SPACE(0)),
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <insert id="insertMctPlanFromTarget"  parameterType="java.util.HashMap" >
        INSERT INTO TBL_MCT_PLAN (
            MCT_PLAN_SEQ,
            EQUIP_SEQ,
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            WORKING_TIME,
            SORT_NUM,
            INSERT_ID
        ) VALUES(
            IFNULL(#{MCT_PLAN_SEQ}, NEXTVAL(SEQ_MCT_PLAN)),
            #{EQUIP_SEQ},
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            REGEXP_REPLACE(#{WORKING_TIME}, '[^0-9]', SPACE(0)),
            (SELECT IFNULL(MAX(M.SORT_NUM), 0) + 1 FROM TBL_MCT_PLAN M WHERE M.DEL_YN = 'N' AND M.EQUIP_SEQ = #{EQUIP_SEQ}),
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
            UPDATE
                EQUIP_SEQ = #{EQUIP_SEQ},
                WORKING_TIME = REGEXP_REPLACE(#{WORKING_TIME}, '[^0-9]', SPACE(0)),
                UPDATE_DT = NOW(),
                UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateMctPlan"  parameterType="java.util.HashMap" >
        UPDATE TBL_MCT_PLAN
        SET
            EQUIP_SEQ = #{EQUIP_SEQ},
            WORKING_TIME = REGEXP_REPLACE(#{WORKING_TIME}, '[^0-9]', SPACE(0)),
            SORT_NUM = #{SORT_NUM},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </update>
    <delete id="deleteMctPlan" parameterType="java.util.HashMap">
        UPDATE TBL_MCT_PLAN
        SET
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID},
            DEL_YN = 'Y'
        WHERE
            MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </delete>

    <delete id="deleteMctPlanAll" parameterType="java.util.HashMap">
        UPDATE TBL_MCT_PLAN
        SET
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID},
            DEL_YN = 'Y'
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
            AND DEL_YN = 'N'
    </delete>

    <delete id="deleteMctWork" parameterType="java.util.HashMap">
        UPDATE TBL_MCT_WORK
        SET
            UPDATE_DT = NOW(),
            <!-- UPDATE_ID = NULL, -->
            DEL_YN = 'Y'
        WHERE
            MCT_WORK_SEQ = (SELECT MCT_WORK_SEQ
                            FROM TBL_MCT_WORK
                            WHERE
                                DEL_YN = 'N'
                                AND CONTROL_SEQ = #{CONTROL_SEQ}
                                AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
                                AND EQUIP_SEQ = #{EQUIP_SEQ})
    </delete>

    <select id="selectWorkPlanGridList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROWNUM,
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, B.CONTROL_NUM, A.DRAWING_NUM, A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ, A.IMG_GFILE_SEQ,
            CASE WHEN A.PART_NUM IS NULL THEN B.CONTROL_NUM ELSE CONCAT(B.CONTROL_NUM, ' #', A.PART_NUM) END AS CONTROL_NUM_PART_NUM,
            jmes.SF_GET_DATE_F(A.INNER_DUE_DT, '', '') AS INNER_DUE_DT, <!-- 내부가공납기 -->
            CASE WHEN IFNULL(B.EMERGENCY_YN, 'N') = 'Y' THEN '긴' ELSE SPACE(0) END AS EMERGENCY_YN, <!-- 긴급 -->
            CASE WHEN IFNULL(B.MAIN_INSPECTION, 'N') = 'Y' THEN '주' ELSE SPACE(0) END AS MAIN_INSPECTION, <!-- 주요 검사품 -->
            CASE WHEN A.WORK_TYPE = 'WTP030' THEN '수' WHEN A.WORK_TYPE = 'WTP040' THEN '재' ELSE SPACE(0) END AS WORK_NM, <!-- 형태 -->
            C.MCT_PLAN_SEQ,
            C.EQUIP_SEQ, <!-- NC No. -->
            C.WORKING_TIME, <!-- E/T -->
            SF_GET_CODE_NM('1009', Y.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION, <!-- 현재위치 -->
            SF_GET_PART_STATUS_NM(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS, <!-- 진행상태 -->
            Z.RECENTLY_EQUIP_NM, Z.RECENTLY_WORKING_TIME, Z.RECENTLY_WORK_TYPE,
            (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Z.WORK_USER_ID) AS RECENTLY_WORK_USER_NM, <!-- CAM 작업자 -->
            B.CONTROL_NUM, <!-- 관리번호 -->
            A.PART_NUM, <!-- Part -->
            A.MATERIAL_DETAIL, <!-- 소재종류 상세 -->
            IFNULL(SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY, <!-- 수량 -->
            A.SIZE_TXT AS STANDARD_SIZE, <!-- 규격 -->
            jmes.SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE, <!-- 소재 주문 규격 -->
            LTRIM(CONCAT(IFNULL(B.NOTE, SPACE(0)), ' ', IFNULL(A.MATERIAL_NOTE, SPACE(0)))) AS CONTROL_NOTE_AND_MATERIAL_NOTE, <!-- 비고 기록사항 -->
            A.MCT_NOTE, <!-- 가공계획 비고 -->
            A.MCT_WORK_TYPE, <!-- MCT 작업 구분 -->
            IFNULL(SF_GET_CODE_NM('1011', A.MCT_WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS MCT_WORK_TYPE_NM, <!-- MCT 작업 구분 이름 -->
            jmes.SF_GET_RECENT_MCT_WORK('LEAD_TIME', A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS LAST_UNIT_LEAD_TIME,
            jmes.SF_GET_RECENT_MCT_WORK('START_DATE', A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS LAST_MCT_START_DT,
            jmes.SF_GET_RECENT_MCT_WORK('WORKER', A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS LAST_MCT_WORK_USER,
            CASE WHEN B.CONTROL_STATUS IN ('ORD001','ORD003','ORD004') THEN (   SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT), '', '')
                                                                                FROM jmes.TBL_CONTROL_PART_PROGRESS M
                                                                              	WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.PART_STATUS = 'PRO002'
                                                                            )
            END AS PROCESS_CONFIRM_DT, <!-- 가공확정 일시 -->
            jmes.SF_GET_MATERIAL_RECEIPT_DT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT <!-- 소재 입고 일시 -->
        FROM jmes.TBL_CONTROL_PART A
            INNER JOIN jmes.TBL_CONTROL B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            LEFT OUTER JOIN jmes.TBL_MCT_PLAN C ON C.CONTROL_SEQ = A.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND C.DEL_YN = 'N'
            LEFT OUTER JOIN jmes.TBL_POP Y ON Y.CONTROL_SEQ = A.CONTROL_SEQ AND Y.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                AND Y.POP_SEQ = (   SELECT MAX(K.POP_SEQ) FROM jmes.TBL_POP K
                                    WHERE K.CONTROL_SEQ = Y.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
                                    GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ
                )
            LEFT OUTER JOIN (
                SELECT
                    A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, B.EQUIP_NM AS RECENTLY_EQUIP_NM, A.WORK_USER_ID,
                    IFNULL(SF_GET_CODE_NM('1010', B.PROCESS_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS RECENTLY_WORK_TYPE,
                    CONCAT(TRUNCATE(IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)/3600,0),'h ',TRUNCATE((IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)%3600)/60,0),'m') AS RECENTLY_WORKING_TIME
                FROM TBL_MCT_WORK A
                    INNER JOIN jmes.TBL_EQUIP B ON B.EQUIP_SEQ = A.EQUIP_SEQ
                WHERE A.DEL_YN = 'N'
                    AND A.MCT_WORK_SEQ IN (SELECT MAX(X.MCT_WORK_SEQ) FROM TBL_MCT_WORK X
                                           WHERE  X.DEL_YN = 'N' AND X.WORK_FINISH_DT IS NOT NULL
                                           GROUP BY X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
                    )
            ) Z ON Z.CONTROL_SEQ = A.CONTROL_SEQ AND Z.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
        WHERE IFNULL(A.WORK_TYPE, SPACE(0)) != 'WTP020' <!-- 조립이 아닌경우 -->
            AND B.DEL_YN = 'N'
            AND B.CONTROL_STATUS IN ('ORD001', 'ORD003')
            AND B.OUT_FINISH_DT IS NULL
    		<choose>
                <when test="OPTION == 'OUTSOURCING_PROCESSING'">
                    AND A.OUTSIDE_YN = 'Y'
                </when>
                <otherwise>
                    AND (A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) IN (  SELECT M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ <!-- 가공확정된 대상 -->
                                                    FROM TBL_CONTROL_PART_PROGRESS M
                                                    WHERE CONTROL_SEQ = A.CONTROL_SEQ
                                                        AND CONTROL_DETAIL_SEQ  = A.CONTROL_DETAIL_SEQ
                                                        AND EXISTS (SELECT * FROM TBL_CONTROL_PART_PROGRESS K WHERE K.CONTROL_SEQ = M.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ AND K.PART_STATUS = 'PRO002')
                                                    GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ
                                                 )
                    AND A.OUTSIDE_YN = 'N'
                </otherwise>
            </choose>
            <if test="OPTION == 'NC_COMPLETE'">
                AND (A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) IN (  SELECT M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ
                                                                FROM TBL_MCT_WORK M
                                                                WHERE M.CONTROL_SEQ = A.CONTROL_SEQ
                                                                    AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                                                                    AND EXISTS (SELECT * FROM TBL_MCT_WORK K WHERE K.CONTROL_SEQ = M.CONTROL_SEQ AND K.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ)
                                                                GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ )
            </if>
            <choose>
                <when test="OPTION == 'FINISHED_PROCESSING'">
                    AND A.INNER_WORK_FINISH_DT IS NOT NULL
                </when>
                <otherwise>
                    AND A.INNER_WORK_FINISH_DT IS NULL
                </otherwise>
            </choose>
            <if test="WORK_FACTORY != null and WORK_FACTORY!= ''">
                AND A.WORK_FACTORY = #{WORK_FACTORY}
            </if>
            <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                AND A.MATERIAL_TYPE = #{MATERIAL_TYPE}
            </if>
            <if test="CONTROL_NUM_OR_DRAWING_NUM != null and CONTROL_NUM_OR_DRAWING_NUM != ''">
                AND (UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM_OR_DRAWING_NUM}), '%') OR UPPER(A.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM_OR_DRAWING_NUM}), '%'))
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                AND A.MATERIAL_KIND = #{MATERIAL_KIND}
            </if>
            <if test="COMP_CD != null and COMP_CD != ''">
                AND B.COMP_CD = CASE WHEN 'FCT010' = #{COMP_CD} THEN 'CMP0003' WHEN 'FCT020' = #{COMP_CD} THEN 'CMP0002' WHEN 'FCT030' = #{COMP_CD} THEN 'CMP0001' END
            </if>
            <if test="POP_POSITION != null and POP_POSITION != ''">
                AND Y.POP_POSITION = #{POP_POSITION}
            </if>
        ORDER BY B.CONTROL_NUM, IFNULL(A.PART_NUM, 0), A.INNER_DUE_DT
    </select>

    <update id="updateMctTarget"  parameterType="java.util.HashMap" >
        UPDATE TBL_CONTROL_PART
        SET
            MCT_NOTE = #{MCT_NOTE},
            MCT_WORK_TYPE = #{MCT_WORK_TYPE}
        WHERE
            CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <update id="updateMctPlanFromTarget"  parameterType="java.util.HashMap" >
        UPDATE TBL_MCT_PLAN
        SET
            EQUIP_SEQ = #{EQUIP_SEQ},
            WORKING_TIME = #{WORKING_TIME},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE MCT_PLAN_SEQ = #{MCT_PLAN_SEQ}
    </update>

    <select id="selectCamWorkHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.INNER_DUE_DT, B.CONTROL_NUM, IFNULL(A.PART_NUM, 0), H.CAM_SEQ) AS ROW_NUM
	        , DENSE_RANK () OVER(ORDER BY A.INNER_DUE_DT, B.CONTROL_NUM, IFNULL(A.PART_NUM, 0), H.CAM_SEQ) AS `NO`
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , ( SELECT jmes.SF_GET_DATE_F(MAX(IFNULL(M.UPDATE_DT, M.INSERT_DT)), 'YY', 'M')
                FROM jmes.TBL_CAM_DETAIL M, jmes.TBL_CAM N
                WHERE M.CAM_SEQ = N.CAM_SEQ
                    AND N.CONTROL_SEQ = A.CONTROL_SEQ
                    AND N.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                    AND G.FINISH_DT IS NOT NULL
              ) AS CAM_RECENTLY_REGISTRATION_DT <!-- 실적등록일시 -->
            , jmes.SF_GET_DATE_F(A.INNER_DUE_DT, 'YY', '') AS INNER_DUE_DT <!-- 내부가공납기 -->
            , jmes.SF_GET_DATE_F(A.INNER_WORK_FINISH_DT, 'YY', '') AS INNER_WORK_FINISH_DT <!-- 가공완료-->
            , CASE WHEN A.OUTSIDE_YN = 'Y' THEN A.OUTSIDE_YN END AS OUTSIDE_YN
            , jmes.SF_GET_CODE_NM('1014', A.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
            , jmes.SF_GET_COMP_NM(B.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주처 -->
            , B.CONTROL_NUM
            , CASE WHEN A.PART_NUM IS NULL THEN B.CONTROL_NUM ELSE CONCAT(B.CONTROL_NUM, ' # ', IFNULL(A.PART_NUM, SPACE(0))) END AS CONTROL_PART_NUM
            , jmes.SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM
            , A.SIZE_TXT
            , jmes.SF_GET_CODE_NM('1035', A.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
            , A.DRAWING_NUM
            , IFNULL(jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), 0) AS CONTROL_PART_QTY <!-- 주문수량 -->
            , (SELECT M.FILE_SIZE FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = A.DXF_GFILE_SEQ) AS CAD_FILE_SIZE
            , jmes.SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM <!-- 소재 종류 -->
            , jmes.SF_GET_CODE_NM('1029', A.MATERIAL_KIND, #{LOGIN_LOCALE}) AS MATERIAL_KIND_NM <!-- 소재 형태 -->
            , jmes.SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE	<!-- 소재 주문 규격 -->
            , ( SELECT CONCAT(TRUNCATE(TRUNCATE(SUM(TIMESTAMPDIFF(SECOND, N.WORK_START_DT, N.WORK_STOP_DT)) / 60, 0) / jmes.SF_GET_CONTROL_PART_QTY(M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ), 1), '''')
                FROM TBL_MCT_WORK M
                    , TBL_MCT_WORK_TIME N
                WHERE N.MCT_WORK_SEQ = M.MCT_WORK_SEQ
                    AND M.CONTROL_SEQ = A.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                    AND M.EQUIP_SEQ IN (SELECT EQUIP_SEQ FROM TBL_EQUIP WHERE PROCESS_TYPE = 'MPR010')
                GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ
              ) AS NC_WORK_TIME <!-- CNC -->
            , ( SELECT CONCAT(TRUNCATE(TRUNCATE(SUM(TIMESTAMPDIFF(SECOND, N.WORK_START_DT, N.WORK_STOP_DT)) / 60, 0) / jmes.SF_GET_CONTROL_PART_QTY(M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ), 1), '''')
                FROM TBL_MCT_WORK M
                    , TBL_MCT_WORK_TIME N
                WHERE N.MCT_WORK_SEQ = M.MCT_WORK_SEQ
                    AND M.CONTROL_SEQ = A.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ
              ) AS TOTAL_WORK_TIME <!-- 전공정 -->
            , H.SEQ AS CAM_STEP <!-- CAM 스탭 -->
            , SF_GET_CODE_NM('1080', H.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION <!-- CAM 가공위치 -->
            , H.WORK_DESC <!-- CAM 작업 내용 -->
            , H.DESIGN_QTY <!-- 단위 수량 -->
            , jmes.SF_GET_USER_NM(H.WORK_USER_ID) AS WORK_USER_NM
            , jmes.SF_GET_DATE_F(H.INSERT_DT, 'YY', 'M') AS CAM_INSERT_DT <!-- 실적등록일시 -->
            , (	SELECT CONCAT(IFNULL(M.HISTORY_NOTE, SPACE(0)), IFNULL(M.NOTE, SPACE(0)))
                FROM jmes.TBL_CAM M
                    , jmes.TBL_CONTROL_PART N
                    , jmes.TBL_CONTROL O
                WHERE O.CONTROL_SEQ = N.CONTROL_SEQ
                    AND N.CONTROL_SEQ = M.CONTROL_SEQ
                    AND N.CONTROL_DETAIL_SEQ  = M.CONTROL_DETAIL_SEQ
                    AND M.CONTROL_SEQ = A.CONTROL_SEQ
                    AND (M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ) IN ( SELECT
                                                                        P.CONTROL_SEQ
                                                                        , P.CONTROL_DETAIL_SEQ
                                                                    FROM TBL_CONTROL_PART P
                                                                        , TBL_CONTROL Q
                                                                    WHERE Q.CONTROL_SEQ = P.CONTROL_SEQ
                                                                        AND Q.DEL_YN = 'N'
                                                                        AND Q.ORDER_COMP_CD = O.ORDER_COMP_CD
                                                                        AND P.SIZE_TXT = N.SIZE_TXT
                                                                        AND P.CONTROL_SEQ = A.CONTROL_SEQ
                                                                        AND P.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                                                                 )
               ) AS CAM_EXPERIENCE_NOTE <!-- 경험 기록사항 -->
            , CONCAT(IFNULL(G.HISTORY_NOTE, SPACE(0)), IFNULL(G.NOTE, SPACE(0))) AS CAM_WORK_NOTE <!-- CAM 작업 기록 및 비고 공유 사항 -->
            , A.DXF_GFILE_SEQ
            , A.IMG_GFILE_SEQ
            , CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT M.FILE_SEQ FROM TBL_FILE M WHERE M.GFILE_SEQ = H.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXC') END CAM_FILE_SEQ <!-- CAM FILE -->
            , CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT M.FILE_SEQ FROM TBL_FILE M WHERE M.GFILE_SEQ = H.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXN') END NC_FILE_SEQ <!-- NC FILE -->
        FROM jmes.TBL_CONTROL_PART A
            INNER JOIN jmes.TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
			INNER JOIN jmes.TBL_CONTROL_PART_ORDER_MAIN R ON B.CONTROL_SEQ = R.CONTROL_SEQ
            LEFT OUTER JOIN jmes.TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.POP_SEQ = (SELECT MAX(K.POP_SEQ) FROM jmes.TBL_POP K WHERE K.CONTROL_SEQ = C.CONTROL_SEQ
                                                                             AND K.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ
            )
            INNER JOIN jmes.TBL_CAM G ON G.CONTROL_SEQ = A.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND G.FINISH_DT IS NOT NULL
            INNER JOIN jmes.TBL_CAM_DETAIL H ON H.CAM_SEQ = G.CAM_SEQ
            LEFT OUTER JOIN (
                SELECT
                    A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, C.EQUIP_NM, A.WORK_USER_ID AS WORK_USER_ID,
                    IFNULL(SF_GET_CODE_NM('1010', C.PROCESS_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS NC_WORK_TYPE,
                    CONCAT(TRUNCATE(IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)/3600,0),'h ',TRUNCATE((IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)%3600)/60,0),'m') AS WORKING_TIME
                FROM TBL_MCT_WORK A
                    INNER JOIN jmes.TBL_EQUIP C ON A.EQUIP_SEQ = C.EQUIP_SEQ
                        AND C.PROCESS_TYPE = 'MPR010'
                WHERE 1 = 1
                    AND A.WORK_FINISH_DT IS NOT NULL
                    AND A.DEL_YN = 'N'
                    AND A.MCT_WORK_SEQ IN (SELECT MAX(X.MCT_WORK_SEQ) FROM TBL_MCT_WORK X
                                            WHERE  X.DEL_YN = 'N' AND X.WORK_FINISH_DT IS NOT NULL
                                          GROUP BY X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
                    )
            ) Z ON A.CONTROL_SEQ = Z.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
        WHERE 1 = 1
            <choose>
                <when test="CAM_WORK_HISTORY_CONDITION == 1">
                    AND G.UPDATE_DT BETWEEN STR_TO_DATE(#{CAM_WORK_HISTORY_START_DT}, '%Y/%m/%d') AND DATE_ADD(STR_TO_DATE(#{CAM_WORK_HISTORY_END_DT}, '%Y/%m/%d'), INTERVAL 1 DAY)
                </when>
                <when test="CAM_WORK_HISTORY_CONDITION == 2">
                    AND EXISTS (SELECT 1 FROM TBL_CONTROL_PART_PROGRESS P
                        WHERE A.CONTROL_SEQ = P.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ AND P.PART_STATUS = 'PRO002' <!-- 가공 확정 존재 유무 주문 -->
                            AND P.STATUS_DT BETWEEN STR_TO_DATE(#{CAM_WORK_HISTORY_START_DT}, '%Y/%m/%d') AND DATE_ADD(STR_TO_DATE(#{CAM_WORK_HISTORY_END_DT}, '%Y/%m/%d'), INTERVAL 1 DAY)
                            AND P.SEQ > IFNULL((SELECT MAX(E.SEQ) FROM TBL_CONTROL_PART_PROGRESS E
                                WHERE P.CONTROL_SEQ = E.CONTROL_SEQ AND P.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND IFNULL(E.PART_STATUS, 'PRO003') = 'PRO003'), 0
                            )
                    )
                </when>
            </choose>
            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                AND A.WORK_FACTORY = #{WORK_FACTORY}
            </if>
            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}
            </if>
            <if test="HIDDEN_MATERIAL_DETAIL != null and HIDDEN_MATERIAL_DETAIL != ''">
                AND A.MATERIAL_DETAIL IN (${HIDDEN_MATERIAL_DETAIL})
            </if>
            <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                AND A.MATERIAL_TYPE = #{MATERIAL_TYPE}
            </if>
            <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
                AND UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%')
            </if>
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND UPPER(A.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="MATERIAL_KIND != null and MATERIAL_KIND != ''">
                AND A.MATERIAL_KIND = #{MATERIAL_KIND}
            </if>
            <if test="SEARCH_SEQ != null and SEARCH_SEQ != ''">
                AND EXISTS(
                    SELECT 1
                    FROM TBL_MATERIAL_ORDER Y, TBL_MATERIAL_SIZE_SEARCH Q
                    WHERE Y.CONTROL_SEQ = A.CONTROL_SEQ
                    AND Q.SEARCH_SEQ = #{SEARCH_SEQ}
                    AND Y.SIZE_W BETWEEN Q.SIZE_W_START AND Q.SIZE_W_END
                    AND CASE WHEN Y.SIZE_W IS NOT NULL THEN Y.SIZE_W BETWEEN Q.SIZE_W_START AND Q.SIZE_W_END ELSE TRUE END
                    AND CASE WHEN Y.SIZE_H IS NOT NULL THEN Y.SIZE_H BETWEEN Q.SIZE_H_START AND Q.SIZE_H_END ELSE TRUE END
                    AND CASE WHEN Y.SIZE_D IS NOT NULL THEN Y.SIZE_D BETWEEN Q.SIZE_D_START AND Q.SIZE_D_END ELSE TRUE END
                    AND CASE WHEN Y.SIZE_T IS NOT NULL THEN Y.SIZE_T BETWEEN Q.SIZE_T_START AND Q.SIZE_T_END ELSE TRUE END
                    AND CASE WHEN Y.SIZE_L IS NOT NULL THEN Y.SIZE_L BETWEEN Q.SIZE_L_START AND Q.SIZE_L_END ELSE TRUE END
                )
            </if>
        <if test="WORK_USER_ID != null and WORK_USER_ID != ''">
                AND H.WORK_USER_ID = #{WORK_USER_ID}
            </if>
            <choose>
                <when test="SIZE_TYPE == 'XYZ010'">
                    <if test="SIZE_W_F != null and SIZE_W_F != ''">
                        AND A.SIZE_W >= #{SIZE_W_F}
                    </if>
                    <if test="SIZE_W_T != null and SIZE_W_T != ''">
                        AND A.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                    </if>
                    <if test="SIZE_H_F != null and SIZE_H_F != ''">
                        AND A.SIZE_H >= #{SIZE_H_F}
                    </if>
                    <if test="SIZE_H_T != null and SIZE_H_T != ''">
                        AND A.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                    </if>
                    <if test="SIZE_T_F != null and SIZE_T_F != ''">
                        AND A.SIZE_T >= #{SIZE_T_F}
                    </if>
                    <if test="SIZE_T_T != null and SIZE_T_T != ''">
                        AND A.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                    </if>
                </when>
                <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                    <if test="SIZE_D_F != null and SIZE_D_F != ''">
                        AND A.SIZE_D >= #{SIZE_D_F}
                    </if>
                    <if test="SIZE_D_T != null and SIZE_D_T != ''">
                        AND A.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                    </if>
                    <if test="SIZE_L_F != null and SIZE_L_F != ''">
                        AND A.SIZE_L >= #{SIZE_L_F}
                    </if>
                    <if test="SIZE_L_T != null and SIZE_L_T != ''">
                        AND A.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                    </if>
                </when>
            </choose>
        ORDER BY A.INNER_DUE_DT, B.CONTROL_NUM, IFNULL(A.PART_NUM, 0), H.CAM_SEQ
    </select>

    <!-- MCT 수행이력 관리  : NC 수행이력 -->
    <select id="selectNcPerformanceHistoryList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER () AS ROW_NUM
            , A.MCT_WORK_SEQ
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , jmes.SF_GET_CODE_NM('1005', D.FACTORY_AREA, 'KO') AS FACTORY_AREA_NM <!-- AREA 구분 -->
            , jmes.SF_GET_CODE_NM('1010', D.PROCESS_TYPE, 'KO') AS PROCESS_TYPE_NM <!-- 공정 -->
            , D.EQUIP_SEQ
            , D.EQUIP_ID
            , D.EQUIP_NM <!-- 장비명 -->
            , jmes.SF_GET_USER_NM(A.WORK_USER_ID) AS WORK_USER_NM <!-- 작업자 -->
            , jmes.SF_GET_DATE_F(A.WORK_START_DT, 'YY', 'M') AS WORK_START_DT <!-- 착수일시 -->
            , jmes.SF_GET_DATE_F(A.WORK_FINISH_DT, 'YY', 'M') AS WORK_FINISH_DT <!-- 완료일시 -->
            , CASE
                WHEN A.WORK_FINISH_DT IS NOT NULL THEN TRUNCATE(jmes.SF_GET_DRAWING_WORK_TIME('STOP', A.MCT_WORK_SEQ), 0)
            END AS WORK_STOP_MINUTE <!-- 작업 중지 전체 분 -->
            , CASE
                WHEN A.WORK_FINISH_DT IS NOT NULL THEN TRUNCATE(jmes.SF_GET_DRAWING_WORK_TIME('WORK', A.MCT_WORK_SEQ), 0)
            END AS WORK_WORK_MINUTE <!-- 작업 전체 분 -->
            , CASE
                WHEN A.WORK_FINISH_DT IS NOT NULL THEN TRUNCATE(jmes.SF_GET_DRAWING_WORK_TIME('WORK', A.MCT_WORK_SEQ) / jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), 0)
            END AS LEAD_TIME
            , A.FINISH_QTY <!-- 완료 수량 -->
            , A.ERROR_QTY <!-- 불량 -->
            , A.ERROR_REASON <!-- 불량 원인 -->
            , CASE
                WHEN C.PART_NUM IS NULL THEN B.CONTROL_NUM
                ELSE CONCAT(B.CONTROL_NUM, ' #', C.PART_NUM)
            END AS CONTROL_NUM <!-- 관리번호 -->
            , jmes.SF_GET_CODE_NM('1033', C.WORK_TYPE, 'KO') AS WORK_TYPE_NM <!-- 작업형태 -->
            , jmes.SF_GET_DATE_F(C.INNER_DUE_DT, '', '') AS INNER_DUE_DT <!-- 가공납기 -->
            , C.DRAWING_NUM <!-- 도면번호 -->
            , C.IMG_GFILE_SEQ <!-- 도면 이미지 번호 -->
            , R.ITEM_NM <!-- 품명 -->
            , jmes.SF_GET_CODE_NM('1035', C.MATERIAL_TYPE, 'KO') AS MATERIAL_TYPE_NM <!-- 재질 -->
            , jmes.SF_GET_CODE_NM('1027', C.MATERIAL_DETAIL, 'KO') AS MATERIAL_DETAIL_NM <!-- 소재종류 -->
            , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS CONTROL_PART_QTY <!-- 수량 -->
            , C.SIZE_TXT <!-- 규격 -->
            , jmes.SF_GET_MATERIAL_SIZE_TXT(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE <!-- 소재 주문 규격 -->
        FROM TBL_MCT_WORK A
        	INNER JOIN TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ
			INNER JOIN TBL_CONTROL_PART_ORDER_MAIN R ON B.CONTROL_SEQ = R.CONTROL_SEQ
        	INNER JOIN TBL_CONTROL_PART C ON C.CONTROL_SEQ = A.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                <if test="MATERIAL_DETAIL != null and MATERIAL_DETAIL != ''">
                    AND C.MATERIAL_DETAIL = #{MATERIAL_DETAIL}
                </if>
                <if test="WORK_TYPE != null and WORK_TYPE != ''">
                    AND C.WORK_TYPE = #{WORK_TYPE}
                </if>
                <choose>
                    <when test="SIZE_TYPE == 'XYZ010'">
                        <if test="SIZE_W_F != null and SIZE_W_F != ''">
                            AND C.SIZE_W >= #{SIZE_W_F}
                        </if>
                        <if test="SIZE_W_T != null and SIZE_W_T != ''">
                            AND C.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                        </if>
                        <if test="SIZE_H_F != null and SIZE_H_F != ''">
                            AND C.SIZE_H >= #{SIZE_H_F}
                        </if>
                        <if test="SIZE_H_T != null and SIZE_H_T != ''">
                            AND C.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                        </if>
                        <if test="SIZE_T_F != null and SIZE_T_F != ''">
                            AND C.SIZE_T >= #{SIZE_T_F}
                        </if>
                        <if test="SIZE_T_T != null and SIZE_T_T != ''">
                            AND C.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                        </if>
                    </when>
                    <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                        <if test="SIZE_D_F != null and SIZE_D_F != ''">
                            AND C.SIZE_D >= #{SIZE_D_F}
                        </if>
                        <if test="SIZE_D_T != null and SIZE_D_T != ''">
                            AND C.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                        </if>
                        <if test="SIZE_L_F != null and SIZE_L_F != ''">
                            AND C.SIZE_L >= #{SIZE_L_F}
                        </if>
                        <if test="SIZE_L_T != null and SIZE_L_T != ''">
                            AND C.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                        </if>
                    </when>
                </choose>
        	INNER JOIN TBL_EQUIP D ON A.EQUIP_SEQ = D.EQUIP_SEQ
                <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                    AND D.FACTORY_AREA = #{FACTORY_AREA}
                </if>
                <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                    AND D.PROCESS_TYPE = #{PROCESS_TYPE}
                </if>
                <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                    AND D.EQUIP_SEQ = #{EQUIP_SEQ}
                </if>
        WHERE 1 = 1
            AND A.DEL_YN = 'N'
            <if test="CONTROL_NUM_OR_DRAWING_NUM != null and CONTROL_NUM_OR_DRAWING_NUM != ''">
                AND (UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM_OR_DRAWING_NUM}), '%') OR UPPER(C.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM_OR_DRAWING_NUM}), '%'))
            </if>
            <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                AND A.EQUIP_SEQ = #{EQUIP_SEQ}
            </if>
            <if test="WORK_USER_ID != null and WORK_USER_ID != ''">
                AND A.WORK_USER_ID = #{WORK_USER_ID}
            </if>
            <if test="process_fulfillment_history_start_dt != null and process_fulfillment_history_start_dt != '' and process_fulfillment_history_end_dt != null and process_fulfillment_history_end_dt != ''">
                AND A.WORK_FINISH_DT BETWEEN STR_TO_DATE(#{process_fulfillment_history_start_dt}, '%Y/%m/%d') AND DATE_ADD(STR_TO_DATE(#{process_fulfillment_history_end_dt}, '%Y/%m/%d'), INTERVAL 1 DAY)
            </if>
        ORDER BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, IFNULL(C.PART_NUM, 0)
    </select>

    <select id="selectResultManageList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER () AS ROWNUM
            , A.CONTROL_SEQ
            , A.CONTROL_DETAIL_SEQ
            , A.DXF_GFILE_SEQ
            , A.PDF_GFILE_SEQ
            , A.IMG_GFILE_SEQ
            , jmes.SF_GET_DATE_F(A.INNER_DUE_DT, 'YYYY', '') AS INNER_DUE_DT <!-- 내부가공납기 -->
            , jmes.SF_GET_DATE_F(A.INNER_WORK_FINISH_DT, 'YYYY', '') AS INNER_WORK_FINISH_DT <!-- 내부 가공완료일시 -->
            , CASE
                WHEN B.CONTROL_STATUS = 'ORD005' THEN '보류'
                WHEN B.EMERGENCY_YN = 'Y' THEN '긴급'
              END AS EMERGENCY_HOLD <!-- 긴급 보류 -->
            , jmes.SF_GET_CODE_NM('1059', B.MAIN_INSPECTION, #{LOGIN_LOCALE}) AS MAIN_INSPECTION_NM <!-- 주요 검사품 -->
            , CASE
                WHEN B.OUT_FINISH_STATUS = 'RLS030' THEN '반품'
                WHEN E.INSPECT_GRADE = 'GRD040' AND C.OUT_FINISH_DT IS NULL THEN '불량'
            END AS FAIL_STATUS
            , jmes.SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM <!-- 형태 -->
            , C.ITEM_NM <!-- 품명 -->
            , jmes.SF_GET_CODE_NM('1009', H.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION <!-- 현재위치 -->
            , jmes.SF_GET_PART_STATUS_NM(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS <!-- 진행상태 -->
            , jmes.SF_GET_PART_STATUS_NM(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM <!-- 진행상태 -->
            , B.CONTROL_NUM <!-- 관리번호 -->
            , IFNULL(A.PART_NUM, SPACE(0)) AS PART_NUM <!-- Part -->
            , CONCAT(B.CONTROL_NUM, CASE WHEN A.PART_NUM IS NOT NULL THEN CONCAT(' #', A.PART_NUM) ELSE SPACE(0) END) AS CONTROL_PART_NUM
            , A.MATERIAL_DETAIL <!-- 소재종류 상세 -->
            , IFNULL(SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_DETAIL_NM <!-- 소재 종류 -->
            , IFNULL(jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), 0) AS ORDER_QTY <!-- 수량 -->
            , jmes.SF_GET_SIDE_QTY(B.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1) AS ORIGINAL_SIDE_QTY <!-- 대칭_원칭 -->
            , jmes.SF_GET_SIDE_QTY(B.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1) AS OTHER_SIDE_QTY <!-- 대칭_대칭 -->
            , IFNULL(A.DRAWING_NUM, SPACE(0)) AS DRAWING_NUM <!-- 도면번호 -->
            , jmes.SF_GET_DRAWING_NUMBERS(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 'N') AS CONCAT_DRAWING_NUM
            , IFNULL(A.DRAWING_VER, SPACE(0)) AS DRAWING_VER <!-- 도면번호 버전 -->
            , A.ETC_GFILE_SEQ
            , A.SIZE_TXT AS STANDARD_SIZE <!-- 규격 -->
            , jmes.SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE <!-- 소재 주문 규격 -->
            , A.SURFACE_TREAT <!-- 표면처리 -->
            , SF_GET_CODE_NM('1039', A.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM <!-- 표면 처리 -->
            , B.NOTE AS CONTROL_NOTE <!-- 주문 확정 비고 -->
            , jmes.SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME <!-- 작업 시간 (계획 + 실행) -->
            , A.MCT_WORK_TYPE <!-- MCT 작업 구분 -->
            , A.MCT_NOTE <!-- MCT 가공계획 비고 -->
            , IFNULL(SF_GET_CODE_NM('1011', A.MCT_WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS MCT_WORK_TYPE_NM <!-- MCT 작업 구분 이름 -->
            , CASE WHEN CASE
                            WHEN B.OUT_FINISH_STATUS = 'RLS030' THEN '반품'
                            WHEN E.INSPECT_GRADE = 'GRD040' AND C.OUT_FINISH_DT IS NULL THEN '불량'
                        END IS NULL THEN CASE
                                            WHEN D.START_DT IS NOT NULL AND D.FINISH_DT IS NOT NULL THEN 'CWS030'
                                            WHEN D.START_DT IS NOT NULL AND D.FINISH_DT IS NULL THEN 'CWS020'
                                            ELSE 'CWS010'
                                         END
                   ELSE CASE
                            WHEN (B.OUT_FINISH_STATUS = 'RLS030' AND IFNULL(D.UPDATE_DT, D.INSERT_DT) <![CDATA[ < ]]> B.OUT_FINISH_STATUS_DT) OR (E.INSPECT_GRADE = 'GRD040' AND (IFNULL(D.UPDATE_DT, D.INSERT_DT) <![CDATA[ < ]]> E.INSERT_DT)) THEN 'CWS010'
                            WHEN D.START_DT IS NOT NULL AND D.FINISH_DT IS NOT NULL THEN 'CWS030'
                            WHEN D.START_DT IS NOT NULL AND D.FINISH_DT IS NULL THEN 'CWS020'
                            ELSE 'CWS010'
                        END
              END CAM_STATUS <!-- CAM 상태 -->
            , D.CAM_SEQ <!-- CAM 마스터 번호 -->
            , D.CAM_STEP <!-- CAM 스탭 -->
            , SF_GET_CODE_NM('1080', D.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION <!-- CAM 가공위치 -->
            , D.WORK_DESC <!-- CAM 작업 내용 -->
            , jmes.SF_GET_USER_NM(D.WORK_USER_ID) AS WORK_USER_NM <!-- CAM 작업자 -->
            , CASE
                WHEN D.CAM_GFILE_SEQ IS NOT NULL THEN ( SELECT M.FILE_SEQ
                                                        FROM TBL_FILE M
                                                        WHERE M.GFILE_SEQ = D.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXC' )
                ELSE SPACE(0)
              END CAM_FILE_SEQ <!-- CAM FILE -->
            , CASE
                WHEN D.CAM_GFILE_SEQ IS NOT NULL THEN ( SELECT M.FILE_SEQ
                                                        FROM TBL_FILE M
                                                        WHERE M.GFILE_SEQ = D.CAM_GFILE_SEQ AND M.FILE_KIND = 'EXN' )
                ELSE SPACE(0)
              END NC_FILE_SEQ <!-- NC FILE -->
            , D.HISTORY_NOTE <!-- CAM 기록사항 -->
            , D.NOTE <!-- CAM 비고 및 공유사항 -->
            , CONCAT(IFNULL(D.HISTORY_NOTE, SPACE(0)), IFNULL(D.NOTE, SPACE(0))) AS CAM_WORK_NOTE <!-- CAM 작업 기록 및 비고 공유 사항 -->
            , jmes.SF_GET_DATE_F(D.START_DT, '', 'M') AS CAM_START_DT <!-- CAM 시작 일시, -->
            , jmes.SF_GET_DATE_F(D.FINISH_DT, '', 'M') AS CAM_FINISH_DT <!-- CAM 종료 일시, -->
            , jmes.SF_GET_DATE_F(A.STATUS_DT, '', 'M') AS STATUS_DT <!-- 확정 일시 -->
            , (SELECT jmes.SF_GET_DATE_F(MAX(M.STATUS_DT), '', 'M') FROM jmes.TBL_CONTROL_PART_PROGRESS M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ  AND M.PART_STATUS = 'PRO002') AS PROCESS_CONFIRM_DT
            , jmes.SF_GET_MATERIAL_RECEIPT_DT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT <!-- 소재 입고 일시 -->
            , E.INSPECT_NUM AS INSPECT_STEP <!-- 품질 스탭 -->
            , SF_GET_CODE_NM('1040', E.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE
            , CASE
                WHEN E.INSPECT_RESULT LIKE 'QCC%' THEN SF_GET_CODE_NM('1019', E.INSPECT_RESULT, #{LOGIN_LOCALE})
                WHEN E.INSPECT_RESULT LIKE 'QCD%' THEN SF_GET_CODE_NM('1020', E.INSPECT_RESULT, #{LOGIN_LOCALE})
                ELSE SPACE(0)
              END AS INSPECT_RESULT <!-- 불량 코드 -->
            , E.ERROR_QTY <!-- 불량 수량 -->
            , SF_GET_CODE_NM('1032', E.ERROR_REASON, #{LOGIN_LOCALE}) AS ERROR_REASON <!-- 불량 원인 -->
            , E.ERROR_NOTE <!-- 불량 조치방안 -->
            , jmes.SF_GET_DATE_F(E.INSERT_DT, '', '') AS INSPECT_DT <!-- 품질현황 -->
            , G.MCT_PLAN_SEQ
            , G.EQUIP_SEQ <!-- 계획 장비 번호 -->
            , G.EQUIP_ID <!-- 계획 장비 아이디 -->
            , G.EQUIP_NM AS MCT_PLAN_EQUIP_NM <!-- 계획 장비 -->
            , G.WORKING_TIME <!-- MCT 계획 시간 -->
<!--            , ( SELECT CONCAT(jmes.SF_GET_DATE_F(N.INSERT_DT, 'YYYY', ''), ' / ',(SELECT T.USER_NM FROM jmes.TBL_USER T WHERE T.USER_ID = N.WORK_USER_ID))-->
<!--                FROM jmes.TBL_CAM M, jmes.TBL_CAM_DETAIL N, jmes.TBL_CONTROL_PART O, jmes.TBL_CONTROL P-->
<!--                WHERE N.CAM_SEQ = M.CAM_SEQ-->
<!--                    AND O.CONTROL_SEQ = M.CONTROL_SEQ-->
<!--                    AND O.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ-->
<!--                    AND P.CONTROL_SEQ = O.CONTROL_SEQ-->
<!--                    AND O.CONTROL_SEQ != A.CONTROL_SEQ-->
<!--                    AND O.CONTROL_DETAIL_SEQ != A.CONTROL_DETAIL_SEQ-->
<!--                    AND O.SIZE_TXT = A.SIZE_TXT-->
<!--                    AND O.MATERIAL_TYPE = A.MATERIAL_TYPE-->
<!--                    AND P.ORDER_COMP_CD = B.ORDER_COMP_CD-->
<!--                ORDER BY N.SEQ DESC-->
<!--                LIMIT 1-->
<!--            ) AS WORK_HISTORY_INFO &lt;!&ndash; 과거 경험 &ndash;&gt;-->
            , B.SAME_SIDE_YN <!-- 대칭 -->
            , F.EQUIP_NM
            , CASE
                WHEN A.PART_STATUS != 'PRO007' AND F.WORKING_TIME IS NOT NULL THEN
                                                        CASE
                                                            WHEN F.WORKING_TIME > 3600 THEN CONCAT(TRUNCATE(IFNULL(F.WORKING_TIME, 0)/ 3600, 0), 'h ', TRUNCATE((IFNULL(F.WORKING_TIME, 0)%3600)/ 60, 0), 'm')
                                                            ELSE CONCAT(TRUNCATE((IFNULL(F.WORKING_TIME, 0)%3600)/ 60, 0), 'm')
                                                        END
            END AS RECENT_WORKING_TIME
            , F.WORK_STATUS
            , F.WORK_STATUS_NM
            , F.NC_WORK_TYPE
            , jmes.SF_GET_USER_NM(F.WORK_USER_ID) AS NC_WORK_USER_NM <!-- CAM 작업자 -->
        FROM jmes.TBL_CONTROL_PART A
            INNER JOIN jmes.TBL_CONTROL B ON B.CONTROL_SEQ = A.CONTROL_SEQ
            INNER JOIN jmes.TBL_CONTROL_PART_ORDER_MAIN C ON C.CONTROL_SEQ = B.CONTROL_SEQ
            LEFT OUTER JOIN (
                SELECT A.CAM_SEQ
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.START_DT
                    , A.HISTORY_NOTE
                    , A.NOTE
                    , A.INSERT_DT
                    , A.UPDATE_DT
                    , A.FINISH_DT
                    , B.SEQ  AS CAM_STEP
                    , B.WORK_DIRECTION
                    , B.WORK_DESC
                    , B.WORK_USER_ID
                    , B.CAM_GFILE_SEQ
                FROM jmes.TBL_CAM A
                    LEFT OUTER JOIN jmes.TBL_CAM_DETAIL B ON B.CAM_SEQ = A.CAM_SEQ
                WHERE B.SEQ = (SELECT MAX(M.SEQ) FROM jmes.TBL_CAM_DETAIL M WHERE M.CAM_SEQ = B.CAM_SEQ GROUP BY M.CAM_SEQ)
            ) D ON D.CONTROL_SEQ = A.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN jmes.TBL_INSPECT E ON E.CONTROL_SEQ = A.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND E.INSPECT_TYPE = '1'
                AND E.INSPECT_SEQ = (SELECT MAX(M.INSPECT_SEQ) FROM jmes.TBL_INSPECT M WHERE M.CONTROL_SEQ = E.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = E.CONTROL_DETAIL_SEQ AND M.INSPECT_TYPE = '1')
            LEFT OUTER JOIN (
                SELECT A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.WORK_USER_ID
                    , A.WORK_STATUS
                    , jmes.SF_GET_CODE_NM('1079', A.WORK_STATUS, #{LOGIN_LOCALE}) AS WORK_STATUS_NM
                    , jmes.SF_GET_DRAWING_WORK_TIME('WORK', A.MCT_WORK_SEQ) AS WORKING_TIME
                    , B.EQUIP_NM
                    , IFNULL(jmes.SF_GET_CODE_NM('1010', B.PROCESS_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS NC_WORK_TYPE
                FROM jmes.TBL_MCT_WORK A
                    ,jmes.TBL_EQUIP B
                WHERE B.EQUIP_SEQ = A.EQUIP_SEQ
                    AND A.DEL_YN = 'N'
                    AND A.MCT_WORK_SEQ = (SELECT MAX(M.MCT_WORK_SEQ) FROM TBL_MCT_WORK M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N')
            ) F ON F.CONTROL_SEQ = A.CONTROL_SEQ AND F.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN (
                SELECT
                    A.MCT_PLAN_SEQ
                    , A.CONTROL_SEQ
                    , A.CONTROL_DETAIL_SEQ
                    , A.WORKING_TIME
                    , B.EQUIP_SEQ
                    , B.EQUIP_ID
                    , B.EQUIP_NM
                FROM jmes.TBL_MCT_PLAN A
                    , jmes.TBL_EQUIP B
                WHERE B.EQUIP_SEQ = A.EQUIP_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.DEL_YN = 'N'
                    AND A.MCT_PLAN_SEQ = (SELECT MAX(M.MCT_PLAN_SEQ) FROM TBL_MCT_PLAN M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N')
            ) G ON G.CONTROL_SEQ = A.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN jmes.TBL_POP H ON H.CONTROL_SEQ = A.CONTROL_SEQ AND H.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
                AND H.POP_SEQ = (SELECT MAX(M.POP_SEQ) FROM jmes.TBL_POP M WHERE M.CONTROL_SEQ = H.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = H.CONTROL_DETAIL_SEQ GROUP BY M.CONTROL_SEQ, M.CONTROL_DETAIL_SEQ)
        WHERE B.DEL_YN = 'N'
            AND B.CONTROL_STATUS IN ('ORD001', 'ORD003', 'ORD005')
            AND IFNULL(B.OUT_FINISH_STATUS, SPACE(0)) NOT IN ('RLS010')
            <if test='SEL_ASSEMBLY == null'>
                AND A.WORK_TYPE NOT IN ('WTP020')
            </if>
            <choose>
                <when test='SEL_OUTSIDE_YN != null'>
                    AND A.PART_STATUS IN ('PRO001', 'PRO002', 'PRO004', 'PRO005', 'PRO006', 'PRO007', 'PRO008', 'PRO009', 'PRO012', 'PRO013', 'PRO014', 'PRO015', 'PRO018', 'PRO019', 'PRO021', 'PRO022')
                </when>
                <otherwise>
                    AND IFNULL(A.OUTSIDE_YN, 'N') = 'N'
                    AND A.PART_STATUS IN ('PRO002', 'PRO004', 'PRO005', 'PRO006', 'PRO007', 'PRO008', 'PRO009', 'PRO012', 'PRO013', 'PRO014', 'PRO015', 'PRO018', 'PRO021', 'PRO022')
                </otherwise>
            </choose>
            <if test="HIDDEN_EQUIP_SEQ != null and HIDDEN_EQUIP_SEQ != ''">
                AND (
                      EXISTS (SELECT 1 FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N' AND M.EQUIP_SEQ IN (${HIDDEN_EQUIP_SEQ}))
                      OR G.EQUIP_SEQ IN (${HIDDEN_EQUIP_SEQ})
                    <if test="INCLUDE_UNALLOCATED_WAIT != null">
                        OR G.EQUIP_SEQ IS NULL
                    </if>
                    )
            </if>
            <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
                AND UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%')
            </if>
            <if test="CONTROL_DETAIL_SEQ != null and CONTROL_DETAIL_SEQ != ''">
                AND A.CONTROL_DETAIL_SEQ LIKE CONCAT('%', #{CONTROL_DETAIL_SEQ}, '%')
            </if>
            <if test="DRAWING_NUM != null and DRAWING_NUM != ''">
                AND UPPER(A.DRAWING_NUM) LIKE CONCAT('%', UPPER(#{DRAWING_NUM}), '%')
            </if>
            <if test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                AND A.MATERIAL_TYPE = #{MATERIAL_TYPE}
            </if>
            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                AND A.WORK_FACTORY = #{WORK_FACTORY}
            </if>
            <if test="BARCODE_NUM != null and BARCODE_NUM != ''">
                AND EXISTS (SELECT 1 FROM jmes.TBL_CONTROL_BARCODE M
                            WHERE A.CONTROL_SEQ = M.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ
                                AND M.DEL_YN = 'N' AND M.BARCODE_NUM = #{BARCODE_NUM}
                )
            </if>
            <if test='SEL_COMPLETED_YN != null'>
                AND (A.INNER_WORK_FINISH_DT IS NULL OR (E.INSPECT_GRADE = 'GRD040' AND C.OUT_FINISH_DT IS NULL) OR B.OUT_FINISH_STATUS = 'RLS030')
            </if>
        ORDER BY
            <if test="INCLUDE_UNALLOCATED_WAIT != null and INCLUDE_UNALLOCATED_WAIT != ''">
                G.EQUIP_SEQ IS NULL,
            </if>
            CASE CAM_STATUS WHEN 'CWS020' THEN 0 WHEN 'CWS010' THEN 1 WHEN 'CWS030' THEN 2 END,
            CASE FAIL_STATUS WHEN '반품' THEN 0 WHEN '불량' THEN 1 ELSE 2 END,
            CASE EMERGENCY_HOLD WHEN '긴급' THEN 0 WHEN '보류' THEN 1 ELSE 2 END,
            A.INNER_DUE_DT, STATUS_DT DESC, B.CONTROL_NUM, IFNULL(A.PART_NUM, 0)
    </select>

    <select id="selectResultManagePopInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		<!-- Group by 확인필요 !!!-->
        SELECT
            A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.DXF_GFILE_SEQ, A.PDF_GFILE_SEQ, A.IMG_GFILE_SEQ,
            jmes.SF_GET_DATE_F(A.INNER_DUE_DT, '', '') AS INNER_DUE_DT, <!-- 내부가공납기 -->
            CASE
                WHEN B.CONTROL_STATUS = 'ORD005' THEN '보류'
                WHEN B.EMERGENCY_YN = 'Y' THEN '긴급'
            END AS EMERGENCY_HOLD, <!-- 긴급 보류 -->
            CASE WHEN IFNULL(B.MAIN_INSPECTION, 'N') = 'Y' THEN '주' ELSE SPACE(0) END AS MAIN_INSPECTION, <!-- 주요 검사품 -->
            CASE WHEN A.WORK_TYPE = 'WTP030' THEN '수' WHEN A.WORK_TYPE = 'WTP040' THEN '재' END AS WORK_NM, <!-- 형태 -->
            R.ITEM_NM, <!-- 품명 -->
            jmes.SF_GET_CODE_NM('1009', C.POP_POSITION, #{LOGIN_LOCALE}) AS POP_POSITION, <!-- 현재위치 -->
            <!-- C.POP_POSITION_NM AS POP_POSITION, 현재위치 -->
            jmes.SF_GET_PART_STATUS_NM(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS, <!-- 진행상태 -->
            B.CONTROL_NUM, <!-- 관리번호 -->
            IFNULL(A.PART_NUM, SPACE(0)) AS PART_NUM, <!-- Part -->
            jmes.SF_GET_CODE_NM('1033', A.WORK_TYPE, #{LOGIN_LOCALE}) AS WORK_TYPE_NM,
            A.MATERIAL_DETAIL, <!-- 소재종류 상세 -->
            IFNULL(SF_GET_CODE_NM('1027', A.MATERIAL_DETAIL, #{LOGIN_LOCALE}), SPACE(0)) AS MATERIAL_DETAIL_NM, <!-- 소재 종류 -->
            IFNULL(jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ), 0) AS CONTROL_PART_QTY, <!-- 수량 -->
            jmes.SF_GET_SIDE_QTY(B.CONTROL_SEQ, 'ORIGINAL_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1) AS ORIGINAL_SIDE_QTY, <!-- 대칭_원칭 -->
            jmes.SF_GET_SIDE_QTY(B.CONTROL_SEQ, 'OTHER_SIDE_QTY') * IFNULL(A.PART_UNIT_QTY, 1) AS OTHER_SIDE_QTY, <!-- 대칭_대칭 -->
            jmes.SF_GET_DRAWING_NUMBERS(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, 'Y') AS CONCAT_DRAWING_NUM, <!-- 도면번호 -->
            IFNULL(A.DRAWING_VER, SPACE(0)) AS DRAWING_VER, <!-- 도면번호 버전 -->
            A.SIZE_TXT, <!-- 규격 -->
            jmes.SF_GET_MATERIAL_SIZE_TXT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERAIL_ORDER_SIZE,	<!-- 소재 주문 규격 -->
            A.SURFACE_TREAT, <!-- 표면처리 -->
            SF_GET_CODE_NM('1039', A.SURFACE_TREAT, #{LOGIN_LOCALE}) AS SURFACE_TREAT_NM,  <!-- 표면 처리 -->
            B.NOTE AS CONTROL_NOTE, <!-- 주문 확정 비고 -->
            jmes.SF_GET_MCT_WORK_TIME(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MCT_WORK_TIME,	<!-- 작업 시간 (계획 + 실행) -->
            A.MCT_WORK_TYPE, <!-- MCT 작업 구분 -->
            A.MCT_NOTE, <!-- MCT 가공계획 비고 -->
            IFNULL(SF_GET_CODE_NM('1011', A.MCT_WORK_TYPE, #{LOGIN_LOCALE}), SPACE(0)) AS MCT_WORK_TYPE_NM, <!-- MCT 작업 구분 이름 -->
            CASE WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NOT NULL THEN 'CWS030'
                WHEN G.START_DT IS NOT NULL AND G.FINISH_DT IS NULL THEN 'CWS020'
                ELSE 'CWS010'
            END CAM_STATUS, <!-- CAM 상태 -->
            G.CAM_SEQ, <!-- CAM 마스터 번호 -->
            H.SEQ AS CAM_STEP, <!-- CAM 스탭 -->
            SF_GET_CODE_NM('1080', H.WORK_DIRECTION, #{LOGIN_LOCALE}) AS WORK_DIRECTION, <!-- CAM 가공위치 -->
            H.WORK_DESC, <!-- CAM 작업 내용 -->
            (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = H.WORK_USER_ID) AS WORK_USER_NM, <!-- CAM 작업자 -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXC') ELSE SPACE(0) END CAM_FILE_SEQ, <!-- CAM FILE -->
            CASE WHEN H.CAM_GFILE_SEQ IS NOT NULL THEN (SELECT FILE_SEQ FROM TBL_FILE I WHERE H.CAM_GFILE_SEQ = I.GFILE_SEQ AND I.FILE_KIND = 'EXN') ELSE SPACE(0) END NC_FILE_SEQ, <!-- NC FILE -->
            G.HISTORY_NOTE,  <!-- CAM 기록사항 -->
            G.NOTE, <!-- CAM 비고 및 공유사항 -->
            CONCAT(IFNULL(G.HISTORY_NOTE, SPACE(0)), IFNULL(G.NOTE, SPACE(0))) AS CAM_WORK_NOTE,    <!-- CAM 작업 기록 및 비고 공유 사항 -->
            jmes.SF_GET_DATE_F(G.START_DT, '', 'M') AS CAM_START_DT, <!-- CAM 시작 일시, -->
            jmes.SF_GET_DATE_F(G.FINISH_DT, '', 'M') AS CAM_FINISH_DT, <!-- CAM 종료 일시, -->
            SF_GET_CODE_NM('1009', N.POP_POSITION, #{LOGIN_LOCALE}) AS POP_PREV_POSITION, <!-- 이전 위치 -->
            jmes.SF_GET_DATE_F(A.STATUS_DT, '', 'M') AS STATUS_DT, <!-- 확정 일시 -->
            jmes.SF_GET_MATERIAL_RECEIPT_DT(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS MATERIAL_RECEIPT_DT, <!-- 소재 입고 일시 -->
            K.WORKING_TIME, <!-- MCT 계획 시간 -->
            L.EQUIP_NM AS MCT_PLAN_EQUIP_NM,
            ( SELECT CONCAT(SF_GET_CODE_NM('1010', N.PROCESS_TYPE, #{LOGIN_LOCALE}), '(', N.EQUIP_NM, ')')
              FROM jmes.TBL_MCT_WORK M
                 , jmes.TBL_EQUIP N
              WHERE N.EQUIP_SEQ = M.EQUIP_SEQ
                 AND M.DEL_YN = 'N'
                 AND N.DEL_YN = 'N'
                 AND M.CONTROL_SEQ = A.CONTROL_SEQ
                 AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
              ORDER BY MCT_WORK_SEQ DESC
             LIMIT 1
            ) AS LAST_WORK_EQUIP_NM,
            ( SELECT CONCAT(jmes.SF_GET_DATE_F(Q.INSERT_DT,'YYYY',''),' / ',(SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Q.WORK_USER_ID))
              FROM jmes.TBL_CAM P, jmes.TBL_CAM_DETAIL Q, jmes.TBL_CONTROL_PART R, jmes.TBL_CONTROL S
              WHERE P.CAM_SEQ = Q.CAM_SEQ
                AND P.CONTROL_SEQ = R.CONTROL_SEQ
                AND P.CONTROL_DETAIL_SEQ = R.CONTROL_DETAIL_SEQ
                AND S.CONTROL_SEQ = R.CONTROL_SEQ
                AND R.CONTROL_SEQ != A.CONTROL_SEQ
                AND R.CONTROL_DETAIL_SEQ != A.CONTROL_DETAIL_SEQ
                AND R.SIZE_TXT = A.SIZE_TXT
                AND R.MATERIAL_TYPE = A.MATERIAL_TYPE
                AND S.ORDER_COMP_CD = B.ORDER_COMP_CD
              ORDER BY Q.SEQ DESC
              LIMIT 1
            ) AS WORK_HISTORY_INFO, <!-- 과거 경험 -->
            <!-- IF(A.ORIGINAL_SIDE_QTY AND A.OTHER_SIDE_QTY, TRUE, FALSE) AS SYMMETRY, 대칭 -->
            A.IMG_GFILE_SEQ <!-- IMG 파일그룹번호 -->
        FROM jmes.TBL_CONTROL_PART A
            INNER JOIN jmes.TBL_CONTROL B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.CONTROL_STATUS = 'ORD001' <!-- 주문확정 -->
			INNER JOIN jmes.TBL_CONTROL_PART_ORDER R ON B.CONTROL_SEQ = R.CONTROL_SEQ
            LEFT OUTER JOIN jmes.TBL_POP C ON A.CONTROL_SEQ = C.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                AND C.POP_SEQ = (SELECT MAX(K.POP_SEQ) FROM jmes.TBL_POP K WHERE K.CONTROL_SEQ = C.CONTROL_SEQ
                                                                             AND K.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ GROUP BY K.CONTROL_SEQ, K.CONTROL_DETAIL_SEQ
                )
            LEFT OUTER JOIN jmes.TBL_CAM G ON G.CONTROL_SEQ = A.CONTROL_SEQ AND G.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ
            LEFT OUTER JOIN jmes.TBL_CAM_DETAIL H ON G.CAM_SEQ = H.CAM_SEQ AND H.SEQ = (SELECT MAX(I.SEQ) FROM jmes.TBL_CAM_DETAIL I WHERE H.CAM_SEQ = I.CAM_SEQ GROUP BY I.CAM_SEQ)
            LEFT OUTER JOIN jmes.TBL_INSPECT J ON A.CONTROL_SEQ = J.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = J.CONTROL_DETAIL_SEQ AND J.INSPECT_TYPE = '1'
                AND J.INSPECT_SEQ = (SELECT MAX(INSPECT_SEQ) FROM jmes.TBL_INSPECT I WHERE J.CONTROL_SEQ = I.CONTROL_SEQ AND J.CONTROL_DETAIL_SEQ = I.CONTROL_DETAIL_SEQ AND I.INSPECT_TYPE = '1')
            LEFT OUTER JOIN jmes.TBL_MCT_PLAN K ON A.CONTROL_SEQ = K.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = K.CONTROL_DETAIL_SEQ AND K.DEL_YN = 'N'
            LEFT OUTER JOIN jmes.TBL_EQUIP L ON K.EQUIP_SEQ = L.EQUIP_SEQ
            LEFT OUTER JOIN jmes.TBL_POP N ON A.CONTROL_SEQ = N.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = N.CONTROL_DETAIL_SEQ
                                                AND N.POP_SEQ = (SELECT LAG(O.POP_SEQ, 1) OVER(PARTITION BY O.CONTROL_SEQ, O.CONTROL_DETAIL_SEQ ORDER BY O.POP_SEQ) AS POP_SEQ
                                                				FROM jmes.TBL_POP O WHERE N.CONTROL_SEQ = O.CONTROL_SEQ
                                                        AND N.CONTROL_DETAIL_SEQ = O.CONTROL_DETAIL_SEQ ORDER BY O.POP_SEQ DESC LIMIT 1
                                                )
        WHERE 1 = 1
            AND A.PART_STATUS IN ('PRO001', 'PRO002', 'PRO004', 'PRO005', 'PRO006', 'PRO007', 'PRO008', 'PRO009', 'PRO012', 'PRO013', 'PRO014', 'PRO015', 'PRO018', 'PRO019', 'PRO021', 'PRO022')
            <if test="CONTROL_NUM != null and CONTROL_NUM != ''">
                AND UPPER(B.CONTROL_NUM) LIKE CONCAT('%', UPPER(#{CONTROL_NUM}), '%')
            </if>
            <if test="CONTROL_DETAIL_SEQ != null and CONTROL_DETAIL_SEQ != ''">
                AND A.CONTROL_DETAIL_SEQ LIKE CONCAT('%', #{CONTROL_DETAIL_SEQ}, '%')
            </if>
            <if test="BARCODE_NUM != null and BARCODE_NUM != ''">
                AND EXISTS (SELECT 1 FROM jmes.TBL_CONTROL_BARCODE M
                            WHERE A.CONTROL_SEQ = M.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = M.CONTROL_DETAIL_SEQ
                                AND M.DEL_YN = 'N' AND M.BARCODE_NUM = #{BARCODE_NUM}
                )
            </if>
        GROUP BY B.CONTROL_NUM
    </select>

    <select id="selectCamMasterInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.CAM_SEQ, A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.START_DT, A.HISTORY_NOTE, A.NOTE
        FROM jmes.TBL_CAM A
        WHERE 1 = 1
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <select id="selectCamDetailInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
        	LPAD(ROWNUM, 2, '0') AS ROWNUM,
        	Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ, Z.CAM_SEQ, Z.SEQ, Z.WORK_DIRECTION, Z.WORK_DESC, Z.WORK_USER_ID, Z.DESIGN_QTY, Z.WORK_TIME,
            Z.CAM_GFILE_SEQ, Z.CAM_FILE_SEQ, Z.CAM_FILE_NM, Z.NC_FILE_SEQ, Z.NC_FILE_NM
        FROM (
            SELECT
                ROW_NUMBER() OVER(ORDER BY A.CAM_SEQ, A.SEQ) AS ROWNUM,
                B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, A.CAM_SEQ, A.SEQ, A.WORK_DIRECTION, A.WORK_DESC, A.WORK_USER_ID, A.DESIGN_QTY, A.WORK_TIME,
                A.CAM_GFILE_SEQ,
                C.FILE_SEQ AS CAM_FILE_SEQ, C.ORGINAL_FILE_NM AS CAM_FILE_NM,
                D.FILE_SEQ AS NC_FILE_SEQ, D.ORGINAL_FILE_NM AS NC_FILE_NM
            FROM jmes.TBL_CAM_DETAIL A
                INNER JOIN jmes.TBL_CAM B ON A.CAM_SEQ = B.CAM_SEQ
                LEFT OUTER JOIN jmes.TBL_FILE C ON C.GFILE_SEQ = A.CAM_GFILE_SEQ AND C.FILE_KIND = 'EXC'
                LEFT OUTER JOIN jmes.TBL_FILE D ON D.GFILE_SEQ = A.CAM_GFILE_SEQ AND D.FILE_KIND = 'EXN'
            WHERE 1 = 1
              AND A.CAM_SEQ = #{CAM_SEQ}
        ) Z
        ORDER BY Z.CAM_SEQ, Z.SEQ
    </select>

    <select id="selectStartMctCamCheck" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            CAM_SEQ, CASE WHEN A.FINISH_DT IS NULL THEN 'Y' ELSE 'N' END ALREADY_STARTED
        FROM jmes.TBL_CAM A
        WHERE 1 = 1
          AND A.CONTROL_SEQ = #{CONTROL_SEQ}
          AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </select>

    <insert id="insertCamWork"  parameterType="java.util.HashMap" >
        <selectKey keyProperty="CAM_SEQ" resultType="integer" order="BEFORE">
            SELECT NEXTVAL(SEQ_CAM) AS CAM_SEQ FROM DUAL
        </selectKey>
        INSERT INTO jmes.TBL_CAM
        (CAM_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, START_DT, HISTORY_NOTE, NOTE, INSERT_ID)
        VALUES
        (#{CAM_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}, NOW(), #{HISTORY_NOTE}, #{NOTE}, #{LOGIN_USER_ID})
    </insert>

    <insert id="updateCamWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM
        SET
            FINISH_DT= NULL,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND CONTROL_SEQ =  #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ =  #{CONTROL_DETAIL_SEQ}
    </insert>

    <insert id="insertMctCamWork"  parameterType="java.util.HashMap" >
        <selectKey keyProperty="CAM_SEQ" resultType="integer" order="BEFORE">
            SELECT (CASE WHEN #{CAM_SEQ} IS NOT NULL THEN #{CAM_SEQ} ELSE NEXTVAL(SEQ_CAM) END) AS CAM_SEQ FROM DUAL
        </selectKey>
        INSERT INTO jmes.TBL_CAM
        (CAM_SEQ, CONTROL_SEQ, CONTROL_DETAIL_SEQ, START_DT, HISTORY_NOTE, NOTE, INSERT_ID)
        VALUES
        (#{CAM_SEQ}, #{CONTROL_SEQ}, #{CONTROL_DETAIL_SEQ}, NOW(), #{HISTORY_NOTE}, #{NOTE}, #{LOGIN_USER_ID})
        ON DUPLICATE KEY UPDATE
            FINISH_DT= NULL,
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <delete id="deleteMctCamWork"  parameterType="java.util.HashMap" >
        DELETE FROM jmes.TBL_CAM
        WHERE CAM_SEQ = #{CAM_SEQ}
    </delete>

    <update id="updateMctCamWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM
        SET
            HISTORY_NOTE = #{HISTORY_NOTE},
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CAM_SEQ = #{CAM_SEQ}
    </update>

    <update id="updateMctCamWorkComplete"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM
        SET
            HISTORY_NOTE = #{HISTORY_NOTE},
            NOTE = #{NOTE},
            FINISH_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CAM_SEQ = #{CAM_SEQ}
    </update>

    <insert id="insertMctCamDetailWork"  parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_CAM_DETAIL
            (CAM_SEQ, SEQ, WORK_DIRECTION, WORK_DESC, WORK_USER_ID, DESIGN_QTY, CAM_GFILE_SEQ, INSERT_ID)
        VALUES
        (#{CAM_SEQ}, #{SEQ},
            #{WORK_DIRECTION}, #{WORK_DESC}, #{WORK_USER_ID}, #{DESIGN_QTY}, #{CAM_GFILE_SEQ}, #{LOGIN_USER_ID} )
        ON DUPLICATE KEY UPDATE
             WORK_DIRECTION = #{WORK_DIRECTION},
             WORK_DESC = #{WORK_DESC},
             WORK_USER_ID = #{WORK_USER_ID},
             DESIGN_QTY = #{DESIGN_QTY},
             CAM_GFILE_SEQ = #{CAM_GFILE_SEQ},
             UPDATE_DT = NOW(),
             UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateMctCamDetailWork"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM_DETAIL
        SET
            WORK_DIRECTION = #{WORK_DIRECTION},
            WORK_DESC = #{WORK_DESC},
            WORK_USER_ID = #{WORK_USER_ID},
            DESIGN_QTY = #{DESIGN_QTY},
            CAM_GFILE_SEQ = #{CAM_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </update>

    <update id="updateMctCamDetailGfile"  parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_CAM_DETAIL
        SET
            CAM_GFILE_SEQ = #{CAM_GFILE_SEQ},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </update>

    <delete id="deleteMctCamAllDetailWork"  parameterType="java.util.HashMap" >
        DELETE FROM jmes.TBL_CAM_DETAIL
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
    </delete>

    <delete id="deleteMctCamDetailWork"  parameterType="java.util.HashMap" >
        DELETE FROM jmes.TBL_CAM_DETAIL
        WHERE 1 = 1
            AND CAM_SEQ = #{CAM_SEQ}
            AND SEQ = #{SEQ}
    </delete>

    <insert id="createCamStartControlPartProgress" parameterType="java.util.HashMap" >
        INSERT INTO TBL_CONTROL_PART_PROGRESS (
            CONTROL_SEQ,
            CONTROL_DETAIL_SEQ,
            SEQ,
            PART_STATUS,
            STATUS_DT,
            INSERT_ID
        ) VALUES (
            #{CONTROL_SEQ},
            #{CONTROL_DETAIL_SEQ},
            NEXTVAL(SEQ_CONTROL_PART_PROGRESS),
            'PRO006',
            NOW(),
            #{LOGIN_USER_ID}
        )
    </insert>

    <update id="updateCamStartControlPartStatus" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            PART_STATUS = 'PRO006',
            STATUS_DT = NOW(),
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
              AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </update>

    <insert id="beforeStatusControlPartProgress" parameterType="java.util.HashMap" >
        DELETE FROM TBL_CONTROL_PART_PROGRESS
        WHERE PART_STATUS = 'PRO006'
            AND SEQ = (SELECT MAX(A.SEQ) FROM TBL_CONTROL_PART_PROGRESS A WHERE A.CONTROL_SEQ = #{CONTROL_SEQ}
                        AND A.CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ})
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </insert>

    <insert id="beforeStatusControlPart" parameterType="java.util.HashMap" >
        UPDATE TBL_CONTROL_PART A
            INNER JOIN  TBL_CONTROL_PART_PROGRESS B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND A.PART_STATUS != B.PART_STATUS
                AND B.SEQ = (SELECT MAX(C.SEQ) FROM TBL_CONTROL_PART_PROGRESS C WHERE C.CONTROL_SEQ = B.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ)
        SET
            A.PART_STATUS = B.PART_STATUS,
            A.STATUS_DT = B.STATUS_DT,
            A.UPDATE_DT = NOW(),
            A.UPDATE_ID = #{LOGIN_USER_ID}
        WHERE A.PART_STATUS = 'PRO006'
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}
            AND A.CONTROL_DETAIL_SEQ  = #{CONTROL_DETAIL_SEQ}
    </insert>

    <select id="selectNCMachineList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT EQUIP_SEQ AS CODE_CD, EQUIP_NM AS CODE_NM
        FROM TBL_EQUIP
        WHERE 1 = 1
            AND FACTORY_AREA IN ('ARE01', 'ARE02', 'ARE05', 'ARE06', 'ARE11')
            AND PROCESS_TYPE = 'MPR010'
        ORDER BY FACTORY_AREA, COMBO_BOX_SORT_NUM, CAST(IFNULL(SUBSTRING_INDEX(EQUIP_NM, '-', -1), 0) AS UNSIGNED)
    </select>

</mapper>