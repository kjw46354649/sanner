<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="reportMapper">
    <select id="selectDailyProcessStatusLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER(ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT) AS ROW_NUM
            , #{WORK_FACTORY} AS WORK_FACTORY     <!-- 고정조건 -->
            , Z.WEEK_SEQ
            , CONCAT(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2),':',SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2)) AS COUNTING_TIME
            , Z.DT
            , DATE_FORMAT(Z.DT, '%Y/%m/%d') AS DT_FORMAT
            , CASE WHEN Z.WEEK_SEQ IS NULL THEN '총계'
                   WHEN Z.DT IS NULL THEN '합계'
                   ELSE CONCAT(DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%e'),'일')
              END AS CAL_DT_NM
            , CASE WHEN Z.DT IS NULL THEN ''
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '0' THEN '일'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '1' THEN '월'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '2' THEN '화'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '3' THEN '수'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '4' THEN '목'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '5' THEN '금'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '6' THEN '토'
              END AS WEEK_DAY_NM
            , Z.PART_CNT
            , Z.PART_QTY
            , Z.FORECAST_AMT
            , Z.DT_GOAL_AMT
            , CASE WHEN IFNULL(Z.DT_GOAL_AMT,0) = 0 THEN NULL ELSE FORMAT(IFNULL(Z.FORECAST_AMT,0) / IFNULL(Z.DT_GOAL_AMT,0) * 100,1) END AS GOAL_RATIO
            , Z.WORKING_TIME
            , Z.ERROR_CNT
            , Z.ERROR_QTY
            , (SELECT M.NOTE FROM jmes.TBL_WORKING_DAY_NOTE M WHERE M.WORKING_DT = Z.DT) AS NOTE
        FROM (  SELECT X.WEEK_SEQ
                    , X.DT
                    , SUM(IFNULL(Y.PART_CNT,0)) AS PART_CNT
                    , SUM(IFNULL(Y.PART_QTY,0)) AS PART_QTY
                    , SUM(IFNULL(Y.FORECAST_AMT,0)) AS FORECAST_AMT
                    , SUM(IFNULL(X.DT_GOAL_AMT,0)) AS DT_GOAL_AMT
                    , SUM(X.WORKING_TIME) AS WORKING_TIME
                    , SUM(IFNULL(Y.ERROR_CNT,0)) AS ERROR_CNT
                    , SUM(IFNULL(Y.ERROR_QTY,0)) AS ERROR_QTY
                FROM (  SELECT F.DT
                            , DATE_FORMAT(STR_TO_DATE(F.DT,'%Y%m%d'),'%u') AS WEEK_SEQ
                            , CASE WHEN F.WEEK_DAY > 0 THEN (   SELECT ROUND(M.GOAL_AMT / N.DT_CNT,0) AS DT_GOAL_AMT
                                                                FROM (  SELECT SUM(M.GOAL_AMT) AS GOAL_AMT
                                                                        FROM jmes.TBL_PRODUCTION_GOAL M
                                                                        WHERE M.YYYYMM = CONCAT(#{YEAR}, #{MONTH})           <!-- 고정조건 -->
                                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                                            AND M.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                                        </if>
                                                                      ) M
                                                                    , ( SELECT COUNT(*) AS DT_CNT
                                                                        FROM jmes.TBL_YYYYMMDD A
                                                                        WHERE A.DT LIKE CONCAT(#{YEAR}, #{MONTH},'%')    <!-- 고정조건 -->
                                                                            AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') > 0
                                                                      ) N
                                                              )
                              END AS DT_GOAL_AMT
                            , ( SELECT M.WORKING_TIME
                                FROM jmes.TBL_WORKING_WEEK_TIME M
                                WHERE M.WORK_FACTORY = #{WORK_FACTORY}   <!-- 고정조건 -->
                                    AND M.WEEK_DAY = F.WEEK_DAY
                              ) AS WORKING_TIME
                        FROM (  SELECT A.DT
                                    , DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') AS WEEK_DAY
                                FROM jmes.TBL_YYYYMMDD A
                                WHERE A.DT LIKE CONCAT(#{YEAR}, #{MONTH},'%')  <!-- 고정조건 -->
                              ) F
                     ) X LEFT OUTER JOIN (  SELECT P.WORKING_FINISH_DT
                                                , SUM(P.PART_CNT) AS PART_CNT
                                                , SUM(P.PART_QTY) AS PART_QTY
                                                , SUM(P.FORECAST_UNIT_AMT * P.PART_QTY) AS FORECAST_AMT
                                                , SUM(P.ERROR_CNT) AS ERROR_CNT
                                                , SUM(P.ERROR_QTY) AS ERROR_QTY
                                            FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                        , DATE_FORMAT(DATE_ADD(B.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                                                        , 1 AS PART_CNT
                                                        , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                        , IFNULL(B.FORECAST_UNIT_AMT, 0) AS FORECAST_UNIT_AMT
                                                        <!--, IFNULL(D.UNIT_FINAL_AMT, IFNULL(D.UNIT_FINAL_EST_AMT,  IFNULL(CASE WHEN B.PREV_DRAWING_NUM IS NOT NULL THEN ( SELECT M.UNIT_FINAL_AMT
                                                                                                                                                                        FROM jmes.TBL_CONTROL_PART_ORDER_MAIN M, jmes.TBL_CONTROL N
                                                                                                                                                                        WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                                                                                                                            AND N.CONTROL_STATUS = 'ORD003'
                                                                                                                                                                            AND N.DEL_YN = 'N'
                                                                                                                                                                            AND M.DRAWING_NUM = B.PREV_DRAWING_NUM
                                                                                                                                                                        ORDER BY M.CONTROL_SEQ DESC
                                                                                                                                                                        LIMIT 1)
                                                                                                                             ELSE ( SELECT M.UNIT_FINAL_AMT
                                                                                                                                    FROM jmes.TBL_CONTROL_PART_ORDER_MAIN M, jmes.TBL_CONTROL N
                                                                                                                                    WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                                                                                        AND N.CONTROL_STATUS = 'ORD003'
                                                                                                                                        AND N.DEL_YN = 'N'
                                                                                                                                        AND N.CONTROL_SEQ != B.CONTROL_SEQ
                                                                                                                                        AND M.DRAWING_NUM = B.DRAWING_NUM
                                                                                                                                    ORDER BY M.CONTROL_SEQ DESC
                                                                                                                                    LIMIT 1)
                                                                                                                        END, IFNULL(B.FORECAST_UNIT_AMT,0)))) AS FORECAST_UNIT_AMT -->
                                                        , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                                        , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS ERROR_CNT
                                                        , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN C.ERROR_QTY ELSE 0 END AS ERROR_QTY
                                                    FROM jmes.TBL_CONTROL A
                                                        , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                                        , jmes.TBL_CONTROL_PART_ORDER_MAIN D
                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                        AND A.CONTROL_SEQ = D.CONTROL_SEQ
                                                        AND A.DEL_YN = 'N'
                                                        AND B.WORK_TYPE != 'WTP020'
                                                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                    </if>
                                                        AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)     <!-- 고정조건 -->
                                                        AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                                        AND NOT EXISTS (SELECT 1 FROM jmes.TBL_CONTROL M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.DEL_YN = 'Y')
                                                  ) P
                                            WHERE P.INSPECT_RNUM = 1
                                            GROUP BY P.WORKING_FINISH_DT
                                         ) Y ON X.DT = Y.WORKING_FINISH_DT
                GROUP BY X.WEEK_SEQ, X.DT WITH ROLLUP
            ) Z
        ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT
    </select>
    <select id="selectDailyProcessStatusRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ ) AS ROW_NUM
            , Z.CONTROL_SEQ
            , Z.CONTROL_DETAIL_SEQ
            , Z.ORDER_SEQ
            , Z.IMG_GFILE_SEQ
            , Z.ORDER_COMP_NM
            , Z.WORK_FACTORY_NM
            , CASE WHEN Z.PART_NUM IS NULL THEN Z.CONTROL_NUM ELSE CONCAT(Z.CONTROL_NUM, ' #', Z.PART_NUM) END AS CONTROL_NUM
            , Z.INNER_DUE_DT
            , Z.PART_QTY
            , IFNULL(Z.ADDITIONAL_QTY, SPACE(0)) AS ADDITIONAL_QTY
            , Z.INNER_WORK_FINISH_DT
            , FORMAT(Z.WORK_TIME / 60,1) AS WORK_TIME
            , Z.FORECAST_UNIT_AMT
            , CASE WHEN Z.UNIT_FINAL_AMT IS NOT NULL THEN (Z.PART_QTY * Z.UNIT_FINAL_AMT)
                   WHEN Z.FORECAST_UNIT_AMT IS NOT NULL THEN (Z.PART_QTY * Z.FORECAST_UNIT_AMT)
                   ELSE SPACE(0)
              END AS TOTAL_AMT
            , (IFNULL(Z.UNIT_PROCESS_AUTO_AMT,0) + Z.TOTAL_AUTO_AMT + ROUND(Z.CP_VAL / (Z.PART_QTY + IFNULL(Z.ADDITIONAL_QTY,0)),1)) AS CP_TOTAL
            , CASE WHEN IFNULL(Z.WORK_TIME,0) = 0 THEN NULL ELSE FORMAT(Z.PART_QTY * Z.UNIT_FINAL_AMT / (Z.WORK_TIME / 60 / 60),0) END AS PRICE_PER_HOUR
            , CASE WHEN Z.PREV_DRAWING_NUM IS NOT NULL THEN (
                SELECT M.UNIT_FINAL_AMT
                FROM jmes.TBL_ORDER M
                WHERE M.ORDER_STATUS = 'REG003'
                    AND M.DEL_YN = 'N'
                    AND M.DRAWING_NUM = Z.PREV_DRAWING_NUM
                    AND M.WORK_TYPE = Z.WORK_TYPE
                    AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                ORDER BY M.ORDER_SEQ DESC
                LIMIT 1
            ) ELSE (
                SELECT M.UNIT_FINAL_AMT
                FROM jmes.TBL_ORDER M
                WHERE M.ORDER_STATUS = 'REG003'
                    AND M.DEL_YN = 'N'
                    AND M.ORDER_SEQ != Z.ORDER_SEQ
                    AND M.DRAWING_NUM = Z.DRAWING_NUM
                    AND M.WORK_TYPE = Z.WORK_TYPE
                    AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                ORDER BY M.ORDER_SEQ DESC
                LIMIT 1
            ) END AS PREV_UNIT_FINAL_AMT
            , Z.UNIT_FINAL_EST_AMT
            , Z.UNIT_FINAL_AMT
            , Z.INSPECT_GRADE_NM
            , Z.INSPECT_RESULT_NM
            , Z.ERROR_QTY
            , Z.NOTE
            , Z.UNIT_MATERIAL_AUTO_AMT
            , Z.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT
            , Z.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT
            , Z.UNIT_SURFACE_AUTO_AMT
            , Z.UNIT_PROCESS_AUTO_AMT
            , Z.WORK_TYPE
            , Z.CONTROL_VER
            , Z.DRAWING_NUM
            , Z.REGIST_NUM
            , Z.SIZE_TXT
            , jmes.SF_GET_CODE_NM('1027', Z.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
        FROM (
            SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, C.ORDER_SEQ
                , B.IMG_GFILE_SEQ
                , jmes.SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM
                , jmes.SF_GET_CODE_NM('1014',B.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM   -- 언어조건 -->
                , A.CONTROL_NUM
                , A.CONTROL_VER
                , A.ORDER_COMP_CD
                , B.PART_NUM
                , B.WORK_TYPE
                , jmes.SF_GET_DATE_F(B.INNER_DUE_DT,'','') AS INNER_DUE_DT
                , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS PART_QTY
                , B.ADDITIONAL_QTY
                , jmes.SF_GET_DATE_F(B.INNER_WORK_FINISH_DT,'','M') AS INNER_WORK_FINISH_DT
                ,(SELECT SUM(jmes.SF_GET_UNIT_SUM_AUTO_AMT(B.CONTROL_SEQ,B.CONTROL_DETAIL_SEQ)) FROM TBL_CONTROL_PART T WHERE T.CONTROL_SEQ = B.CONTROL_SEQ AND T.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS TOTAL_AUTO_AMT
                ,(SELECT SUM(te.COST_PER_HOUR * ROUND(jmes.SF_GET_DRAWING_WORK_TIME('W_MINUTE', tmw.MCT_WORK_SEQ) / 60,2))
                  FROM TBL_MCT_WORK tmw, TBL_EQUIP te
                  WHERE tmw.DEL_YN = 'N' AND te.DEL_YN = 'N'
                    AND tmw.EQUIP_SEQ = te.EQUIP_SEQ
                    AND tmw.CONTROL_SEQ = B.CONTROL_SEQ
                    AND tmw.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ
                )AS CP_VAL
                , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)),0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME
                , B.FORECAST_UNIT_AMT
                , D.UNIT_FINAL_EST_AMT
                , CASE WHEN B.WORK_TYPE != 'WTP040' THEN D.UNIT_FINAL_AMT
                       ELSE C.UNIT_FINAL_AMT
                  END AS UNIT_FINAL_AMT -- 공급단가 - 주문정보에서 가져옴. 재고는 주문이 없으므로 제외 -->
                , jmes.SF_GET_CODE_NM('1040',E.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM   -- 언어조건 -->
                , jmes.SF_GET_CODE_NM('1020',E.INSPECT_RESULT,#{LOGIN_LOCALE}) AS INSPECT_RESULT_NM   -- 언어조건 -->
                , E.ERROR_QTY
                , A.NOTE
                , B.DRAWING_NUM
                , B.PREV_DRAWING_NUM
                , B.UNIT_MATERIAL_AUTO_AMT
                , B.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT
                , B.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT
                , B.UNIT_SURFACE_AUTO_AMT
                , B.UNIT_PROCESS_AUTO_AMT
                , C.REGIST_NUM
                , B.SIZE_TXT
                , B.MATERIAL_DETAIL
            FROM TBL_CONTROL A
                INNER JOIN TBL_CONTROL_PART B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND B.WORK_TYPE != 'WTP020' AND B.INNER_WORK_FINISH_DT IS NOT NULL
                    AND B.INNER_WORK_FINISH_DT >= CONCAT(#{DT},SPACE(1), #{COUNTING_TIME})
                    AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(CONCAT(#{DT},SPACE(1), #{COUNTING_TIME}), INTERVAL 1 DAY)
                INNER JOIN TBL_CONTROL_PART_ORDER_MAIN C ON B.CONTROL_SEQ = C.CONTROL_SEQ
                INNER JOIN TBL_ORDER D ON C.ORDER_SEQ = D.ORDER_SEQ AND D.DEL_YN = 'N'
                LEFT OUTER JOIN TBL_INSPECT E ON E.CONTROL_SEQ = B.CONTROL_SEQ AND E.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND E.INSPECT_TYPE = '1'
                    AND E.INSPECT_SEQ = (SELECT MIN(X.INSPECT_SEQ) FROM TBL_INSPECT X WHERE X.CONTROL_SEQ = B.CONTROL_SEQ AND X.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND X.INSPECT_TYPE = '1')
            WHERE A.DEL_YN = 'N'
            GROUP BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
        ) Z
    </select>

    <select id="selectDailyProcessStatusRightList_old" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ ) AS ROW_NUM
            , Z.CONTROL_SEQ
            , Z.CONTROL_DETAIL_SEQ
            , Z.ORDER_SEQ
            , Z.IMG_GFILE_SEQ
            , Z.ORDER_COMP_NM
            , Z.WORK_FACTORY_NM
            , CASE WHEN Z.PART_NUM IS NULL THEN Z.CONTROL_NUM ELSE CONCAT(Z.CONTROL_NUM, ' #', Z.PART_NUM) END AS CONTROL_NUM
            , Z.INNER_DUE_DT
            , Z.PART_QTY
            , IFNULL(Z.ADDITIONAL_QTY, SPACE(0)) AS ADDITIONAL_QTY
            , Z.INNER_WORK_FINISH_DT
            , FORMAT(Z.WORK_TIME / 60,1) AS WORK_TIME
            , Z.FORECAST_UNIT_AMT
--             , Z.PART_QTY * Z.FORECAST_UNIT_AMT AS TOTAL_AMT
            , CASE WHEN Z.UNIT_FINAL_AMT IS NOT NULL THEN (Z.PART_QTY * Z.UNIT_FINAL_AMT)
                   WHEN Z.FORECAST_UNIT_AMT IS NOT NULL THEN (Z.PART_QTY * Z.FORECAST_UNIT_AMT)
                   ELSE SPACE(0)
              END AS TOTAL_AMT
            , (IFNULL(Z.UNIT_PROCESS_AUTO_AMT,0) + Z.TOTAL_AUTO_AMT + ROUND(Z.CP_VAL / (Z.PART_QTY + IFNULL(Z.ADDITIONAL_QTY,0)),1)) AS CP_TOTAL
            , CASE WHEN IFNULL(Z.WORK_TIME,0) = 0 THEN NULL ELSE FORMAT(Z.PART_QTY * Z.UNIT_FINAL_AMT / (Z.WORK_TIME / 60 / 60),0) END AS PRICE_PER_HOUR
            , CASE WHEN Z.PREV_DRAWING_NUM IS NOT NULL THEN (   SELECT M.UNIT_FINAL_AMT
                                                                FROM jmes.TBL_ORDER M
                                                                WHERE M.ORDER_STATUS = 'REG003'
                                                                    AND M.DEL_YN = 'N'
                                                                    AND M.DRAWING_NUM = Z.PREV_DRAWING_NUM
                                                                    AND M.WORK_TYPE = Z.WORK_TYPE
                                                                    AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                                                                ORDER BY M.ORDER_SEQ DESC
                                                                LIMIT 1)
                   ELSE (   SELECT M.UNIT_FINAL_AMT
                            FROM jmes.TBL_ORDER M
                            WHERE M.ORDER_STATUS = 'REG003'
                                AND M.DEL_YN = 'N'
                                AND M.ORDER_SEQ != Z.ORDER_SEQ
                                AND M.DRAWING_NUM = Z.DRAWING_NUM
                                AND M.WORK_TYPE = Z.WORK_TYPE
                                AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                            ORDER BY M.ORDER_SEQ DESC
                            LIMIT 1)
              END AS PREV_UNIT_FINAL_AMT
            , Z.UNIT_FINAL_EST_AMT
            , Z.UNIT_FINAL_AMT
            , Z.INSPECT_GRADE_NM
            , Z.INSPECT_RESULT_NM
            , Z.ERROR_QTY
            , Z.NOTE
            , Z.UNIT_MATERIAL_AUTO_AMT
            , Z.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT
            , Z.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT
            , Z.UNIT_SURFACE_AUTO_AMT
            , Z.UNIT_PROCESS_AUTO_AMT
            , Z.WORK_TYPE
            , Z.CONTROL_VER
            , Z.DRAWING_NUM
            , Z.REGIST_NUM
            , Z.SIZE_TXT
            , jmes.SF_GET_CODE_NM('1027', Z.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
        FROM (  SELECT P.CONTROL_SEQ
                    , P.CONTROL_DETAIL_SEQ
                    , M.ORDER_SEQ
                    , P.IMG_GFILE_SEQ
                    , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                    , jmes.SF_GET_CODE_NM('1014',Y.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM   <!-- 언어조건 -->
                    , X.CONTROL_NUM
                    , X.CONTROL_VER
                    , X.ORDER_COMP_CD
                    , Y.PART_NUM
                    , Y.WORK_TYPE
                    , jmes.SF_GET_DATE_F(Y.INNER_DUE_DT,'','') AS INNER_DUE_DT
                    , P.PART_QTY
                    , P.ADDITIONAL_QTY
                    , jmes.SF_GET_DATE_F(Y.INNER_WORK_FINISH_DT,'','M') AS INNER_WORK_FINISH_DT
                    , (SELECT SUM(jmes.SF_GET_UNIT_SUM_AUTO_AMT(T.CONTROL_SEQ,T.CONTROL_DETAIL_SEQ)) FROM TBL_CONTROL_PART T WHERE T.CONTROL_SEQ = P.CONTROL_SEQ AND T.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ) AS TOTAL_AUTO_AMT
                    ,(SELECT SUM(te.COST_PER_HOUR * ROUND(jmes.SF_GET_DRAWING_WORK_TIME('W_MINUTE', tmw.MCT_WORK_SEQ) / 60,2))
                      FROM TBL_MCT_WORK tmw, TBL_EQUIP te
                      WHERE tmw.DEL_YN = 'N' AND te.DEL_YN = 'N'
                        AND tmw.EQUIP_SEQ = te.EQUIP_SEQ
                        AND tmw.CONTROL_SEQ = P.CONTROL_SEQ AND tmw.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                     )AS CP_VAL
                    , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)),0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = P.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ) AS WORK_TIME
                    , Y.FORECAST_UNIT_AMT
                    , M.UNIT_FINAL_EST_AMT
--                     , M.UNIT_FINAL_AMT
                    , CASE WHEN Y.WORK_TYPE != 'WTP040' THEN (SELECT T.UNIT_FINAL_AMT FROM TBL_ORDER T WHERE T.ORDER_SEQ = M.ORDER_SEQ)
                           ELSE M.UNIT_FINAL_AMT
                      END AS UNIT_FINAL_AMT <!-- 공급단가 - 주문정보에서 가져옴. 재고는 주문이 없으므로 제외 -->
                    , jmes.SF_GET_CODE_NM('1040',P.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1020',P.INSPECT_RESULT,#{LOGIN_LOCALE}) AS INSPECT_RESULT_NM   <!-- 언어조건 -->
                    , P.ERROR_QTY
                    , X.NOTE
                    , Y.DRAWING_NUM
                    , Y.PREV_DRAWING_NUM
                    , Y.UNIT_MATERIAL_AUTO_AMT
                    , Y.UNIT_MATERIAL_FINISH_GRIND_AUTO_AMT
                    , Y.UNIT_MATERIAL_FINISH_HEAT_AUTO_AMT
                    , Y.UNIT_SURFACE_AUTO_AMT
                    , Y.UNIT_PROCESS_AUTO_AMT
                    , M.REGIST_NUM
                    , Y.SIZE_TXT
                    , Y.MATERIAL_DETAIL
        FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.IMG_GFILE_SEQ
                            , DATE_FORMAT(DATE_ADD(A.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                            , jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS PART_QTY
                            , A.ADDITIONAL_QTY
                            , IFNULL(A.FORECAST_UNIT_AMT,0) AS FORECAST_UNIT_AMT
                            , ROW_NUMBER() OVER (PARTITION BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ ORDER BY B.INSPECT_SEQ) AS INSPECT_RNUM
                            , B.INSPECT_GRADE
                            , B.INSPECT_RESULT
                            , CASE WHEN B.INSPECT_GRADE = 'GRD040' THEN B.ERROR_QTY ELSE 0 END AS ERROR_QTY
                        FROM jmes.TBL_CONTROL_PART A LEFT OUTER JOIN jmes.TBL_INSPECT B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.INSPECT_TYPE = '1'
                        WHERE A.INNER_WORK_FINISH_DT IS NOT NULL
                            AND A.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(#{DT},'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)                        <!-- 고정조건 -->
                            AND A.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(#{DT},'%Y%m%d'), INTERVAL 1 DAY), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)   <!-- 고정조건 -->
                      ) P, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y, jmes.TBL_CONTROL_PART_ORDER_MAIN M
                WHERE P.CONTROL_SEQ = X.CONTROL_SEQ
                    AND P.CONTROL_SEQ = Y.CONTROL_SEQ
                    AND P.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
					AND P.CONTROL_SEQ = M.CONTROL_SEQ
                    AND P.INSPECT_RNUM = 1
                    AND X.DEL_YN = 'N'
                    AND Y.WORK_TYPE != 'WTP020'
                <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                    AND Y.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                </if>
                GROUP BY P.CONTROL_SEQ, P.CONTROL_DETAIL_SEQ
            ) Z
    </select>

    <insert id="insertUpdateWorkingDayNote" parameterType="java.util.HashMap" >
        INSERT INTO TBL_WORKING_DAY_NOTE (
            WORKING_DT,
            NOTE,
            INSERT_ID
        ) VALUES (
            #{DT},
            #{NOTE},
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
	        UPDATE
	            NOTE = #{NOTE},
                UPDATE_DT = NOW(),
	            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateControlNote" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPartForecastUnitAmt" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            FORECAST_UNIT_AMT = #{FORECAST_UNIT_AMT},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectMonthlyDetailStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER (ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT) AS ROW_NUM
            , #{COMP_CD} AS COMP_CD         <!-- 인자값을 위한 조건변수 -->
            , #{ORDER_COMP_CD} AS ORDER_COMP_CD    <!-- 인자값을 위한 조건변수 -->
            , Z.WEEK_SEQ
            , Z.DT
            , CASE WHEN Z.WEEK_SEQ IS NULL THEN '총계'
                   WHEN Z.DT IS NULL THEN '합계'
                   ELSE CONCAT(DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%e'),'일')
              END AS CAL_DT_NM
            , CASE WHEN Z.DT IS NULL THEN ''
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 0 THEN '일'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 1 THEN '월'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 2 THEN '화'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 3 THEN '수'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 4 THEN '목'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 5 THEN '금'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 6 THEN '토'
              END AS WEEK_DAY_NM
            , Z.PART_CNT
            , Z.PART_QTY
            , Z.OUTSIDE_CNT
            , Z.OUTSIDE_QTY
            , Z.INNER_WORK_FINISH_CNT
            , Z.INNER_WORK_FINISH_QTY
            , Z.OUT_FINISH_CNT
            , Z.OUT_FINISH_QTY
            , Z.LATE_CNT
            , Z.LATE_QTY
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN NULL ELSE Z.LATE_CNT / Z.PART_CNT * 100 END AS LATE_RATIO
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN NULL ELSE Z.OUTSIDE_CNT / Z.PART_CNT * 100 END AS OUTSIDE_RATIO
            , Z.FORECAST_AMT
            , Z.DT_GOAL_AMT
            , CASE WHEN IFNULL(Z.DT_GOAL_AMT,0) = 0 THEN NULL ELSE CONCAT(FORMAT(IFNULL(Z.FORECAST_UNIT_AMT,0) / IFNULL(Z.DT_GOAL_AMT,0) * 100,1),'%') END AS GOAL_RATIO
            , Z.ERROR_CNT
            , Z.ERROR_QTY
            , Z.RETURN_CNT
            , Z.RETURN_QTY
            , (SELECT M.NOTE FROM jmes.TBL_WORKING_DAY_NOTE M WHERE M.WORKING_DT = Z.DT) AS NOTE
        FROM (  SELECT X.WEEK_SEQ
                    , X.DT
                    , SUM(IFNULL(Y.PART_CNT,0)) AS PART_CNT
                    , SUM(IFNULL(Y.PART_QTY,0)) AS PART_QTY
                    , SUM(IFNULL(Y.OUTSIDE_CNT,0)) AS OUTSIDE_CNT
                    , SUM(IFNULL(Y.OUTSIDE_QTY,0)) AS OUTSIDE_QTY
                    , SUM(IFNULL(Y.INNER_WORK_FINISH_CNT,0)) AS INNER_WORK_FINISH_CNT
                    , SUM(IFNULL(Y.INNER_WORK_FINISH_QTY,0)) AS INNER_WORK_FINISH_QTY
                    , SUM(IFNULL(Y.OUT_FINISH_CNT,0)) AS OUT_FINISH_CNT
                    , SUM(IFNULL(Y.OUT_FINISH_QTY,0)) AS OUT_FINISH_QTY
                    , SUM(IFNULL(Y.LATE_CNT,0)) AS LATE_CNT
                    , SUM(IFNULL(Y.LATE_QTY,0)) AS LATE_QTY
                    , SUM(IFNULL(Y.FORECAST_UNIT_AMT,0)) AS FORECAST_UNIT_AMT
                    , SUM(IFNULL(Y.FORECAST_AMT,0)) AS FORECAST_AMT
                    , SUM(IFNULL(X.DT_GOAL_AMT,0)) AS DT_GOAL_AMT
                    , SUM(IFNULL(Y.ERROR_CNT,0)) AS ERROR_CNT
                    , SUM(IFNULL(Y.ERROR_QTY,0)) AS ERROR_QTY
                    , SUM(IFNULL(Y.RETURN_CNT,0)) AS RETURN_CNT
                    , SUM(IFNULL(Y.RETURN_QTY,0)) AS RETURN_QTY
                FROM (  SELECT F.DT
                            , DATE_FORMAT(STR_TO_DATE(F.DT,'%Y%m%d'),'%u') AS WEEK_SEQ
                            , CASE WHEN F.WEEK_DAY > 0 THEN (   SELECT ROUND(M.GOAL_AMT / N.DT_CNT,0) AS DT_GOAL_AMT
                                                                FROM (  SELECT SUM(M.GOAL_AMT) AS GOAL_AMT
                                                                        FROM jmes.TBL_SALES_GOAL M
                                                                        WHERE M.YYYYMM = CONCAT(#{YEAR}, #{MONTH})           <!-- 고정조건 -->
                                                                      ) M
                                                                    , ( SELECT COUNT(*) AS DT_CNT
                                                                        FROM jmes.TBL_YYYYMMDD A
                                                                        WHERE A.DT LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')    <!-- 고정조건 -->
                                                                            AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') > 0
                                                                      ) N
                                                              )
                              END AS DT_GOAL_AMT
                        FROM (  SELECT A.DT
                                    , DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') AS WEEK_DAY
                                FROM jmes.TBL_YYYYMMDD A
                                WHERE A.DT LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')  <!-- 고정조건 -->
                              ) F
                     ) X LEFT OUTER JOIN (  SELECT T.ORDER_DUE_DT
                                                , SUM(T.PART_CNT) AS PART_CNT
                                                , SUM(T.PART_QTY) AS PART_QTY
                                                , SUM(CASE WHEN T.OUTSIDE_YN = 'Y' THEN 1 ELSE 0 END) AS OUTSIDE_CNT
                                                , SUM(CASE WHEN T.OUTSIDE_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS OUTSIDE_QTY
                                                , SUM(CASE WHEN T.INNER_WORK_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS INNER_WORK_FINISH_CNT
                                                , SUM(CASE WHEN T.INNER_WORK_FINISH_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS INNER_WORK_FINISH_QTY
                                                , SUM(CASE WHEN T.OUT_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS OUT_FINISH_CNT
                                                , SUM(CASE WHEN T.OUT_FINISH_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS OUT_FINISH_QTY
                                                , SUM(CASE WHEN T.OUT_FINISH_DT > T.ORDER_DUE_DT THEN 1 ELSE 0 END) AS LATE_CNT
                                                , SUM(CASE WHEN T.OUT_FINISH_DT > T.ORDER_DUE_DT THEN T.PART_QTY ELSE 0 END) AS LATE_QTY
                                                , SUM(T.FORECAST_UNIT_AMT) AS FORECAST_UNIT_AMT
                                                , SUM(T.FORECAST_UNIT_AMT * T.PART_QTY) AS FORECAST_AMT
                                                , SUM(T.ERROR_CNT) AS ERROR_CNT
                                                , SUM(T.ERROR_QTY) AS ERROR_QTY
                                                , SUM(CASE WHEN T.RETURN_QTY > 0 THEN 1 ELSE 0 END) AS RETURN_CNT
                                                , SUM(T.RETURN_QTY) AS RETURN_QTY
                                            FROM (  SELECT P.CONTROL_SEQ
                                                        , P.CONTROL_DETAIL_SEQ
                                                        , P.ORDER_DUE_DT
                                                        , P.PART_CNT
                                                        , P.PART_QTY
                                                        , P.OUTSIDE_YN
                                                        , P.INNER_WORK_FINISH_YN
                                                        , P.OUT_FINISH_YN
                                                        , P.OUT_FINISH_DT
                                                        , P.FORECAST_UNIT_AMT
                                                        , P.ERROR_CNT
                                                        , P.ERROR_QTY
                                                        , ( SELECT SUM(M.ERROR_QTY)
                                                            FROM jmes.TBL_INSPECT M
                                                            WHERE M.CONTROL_SEQ = P.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                                                                AND M.INSPECT_TYPE = '2'
                                                                AND M.INSPECT_GRADE IN ('GRD050', 'GRD060')
                                                           ) AS RETURN_QTY
                                                    FROM (  SELECT C.CONTROL_SEQ
                                                                , C.CONTROL_DETAIL_SEQ
                                                                , A.ORDER_DUE_DT
                                                                , 1 AS PART_CNT
                                                                , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                                , C.OUTSIDE_YN
                                                                , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                                                                , CASE WHEN B.OUT_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS OUT_FINISH_YN
                                                                , DATE_FORMAT(B.OUT_FINISH_DT,'%Y%m%d') AS OUT_FINISH_DT
                                                                , CASE WHEN (SELECT Q.UNIT_FINAL_AMT FROM TBL_ORDER Q WHERE Q.ORDER_SEQ = E.ORDER_SEQ) >= 0 THEN (SELECT Q.UNIT_FINAL_AMT FROM TBL_ORDER Q WHERE Q.ORDER_SEQ = E.ORDER_SEQ)
                                                                       WHEN E.UNIT_FINAL_AMT IS NOT NULL THEN E.UNIT_FINAL_AMT
                                                                       WHEN UNIT_FINAL_EST_AMT IS NOT NULL THEN E.UNIT_FINAL_EST_AMT
                                                                       WHEN C.PREV_DRAWING_NUM IS NOT NULL THEN (
                                                                            SELECT M.UNIT_FINAL_AMT
                                                                            FROM jmes.TBL_ORDER M
                                                                            WHERE M.ORDER_STATUS = 'REG003'
                                                                                AND M.DEL_YN = 'N'
                                                                                AND M.DRAWING_NUM = C.PREV_DRAWING_NUM
                                                                            ORDER BY M.ORDER_SEQ DESC
                                                                            LIMIT 1
                                                                       )
                                                                       WHEN C.PREV_DRAWING_NUM IS NULL THEN (
                                                                            SELECT M.UNIT_FINAL_AMT
                                                                            FROM jmes.TBL_ORDER M
                                                                            WHERE M.ORDER_STATUS = 'REG003'
                                                                                AND M.DEL_YN = 'N' AND M.ORDER_SEQ != E.ORDER_SEQ
                                                                                AND M.DRAWING_NUM = C.DRAWING_NUM
                                                                            ORDER BY M.ORDER_SEQ DESC
                                                                            LIMIT 1
                                                                       )
                                                                       ELSE C.FORECAST_UNIT_AMT
                                                                 END AS FORECAST_UNIT_AMT
--                                                                 , IFNULL(E.UNIT_FINAL_AMT, IFNULL(E.UNIT_FINAL_EST_AMT, IFNULL(CASE WHEN C.PREV_DRAWING_NUM IS NOT NULL THEN (  SELECT M.UNIT_FINAL_AMT
--                                                                                                                                                                                 FROM jmes.TBL_ORDER M
--                                                                                                                                                                                 WHERE M.ORDER_STATUS = 'REG003'
--                                                                                                                                                                                     AND M.DEL_YN = 'N'
--                                                                                                                                                                                     AND M.DRAWING_NUM = C.PREV_DRAWING_NUM
--                                                                                                                                                                                 ORDER BY M.ORDER_SEQ DESC
--                                                                                                                                                                                 LIMIT 1)
--                                                                                                                                     ELSE ( SELECT M.UNIT_FINAL_AMT
--                                                                                                                                            FROM jmes.TBL_ORDER M
--                                                                                                                                            WHERE M.ORDER_STATUS = 'REG003'
--                                                                                                                                                AND M.DEL_YN = 'N'
--                                                                                                                                                AND M.ORDER_SEQ != E.ORDER_SEQ
--                                                                                                                                                AND M.DRAWING_NUM = C.DRAWING_NUM
--                                                                                                                                            ORDER BY M.ORDER_SEQ DESC
--                                                                                                                                            LIMIT 1)
--                                                                                                                                END, C.FORECAST_UNIT_AMT))
--                                                                  ) AS FORECAST_UNIT_AMT
                                                                , ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                                                                , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS ERROR_CNT
                                                                , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN D.ERROR_QTY ELSE 0 END AS ERROR_QTY
                                                            FROM (  SELECT M.CONTROL_SEQ
                                                                        , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                                    FROM jmes.TBL_CONTROL_PART_ORDER M
                                                                    GROUP BY M.CONTROL_SEQ
                                                                    HAVING MAX(M.ORDER_DUE_DT) LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')  <!-- 고정조건 -->
                                                                  ) A
                                                                , jmes.TBL_CONTROL B
                                                                , jmes.TBL_CONTROL_PART C
                                                                        LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.INSPECT_TYPE = '1'
                                                                , jmes.TBL_CONTROL_PART_ORDER_MAIN E
                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                                AND A.CONTROL_SEQ = E.CONTROL_SEQ
                                                                AND B.DEL_YN = 'N'
                                                                AND B.CONTROL_STATUS IN ('ORD001', 'ORD003')
                                                                AND C.WORK_TYPE != 'WTP020'
                                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                                AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                                                            </if>
                                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                                AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                                                            </if>
                                                        ) P
                                                    WHERE P.INSPECT_RNUM = 1
                                                 ) T
                                            GROUP BY T.ORDER_DUE_DT
                                        ) Y ON X.DT = Y.ORDER_DUE_DT
                GROUP BY X.WEEK_SEQ, X.DT WITH ROLLUP
            ) Z
        ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT
    </select>

    <select id="selectMonthlyReportDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ ) AS ROW_NUM
            , Z.CONTROL_SEQ
            , Z.CONTROL_DETAIL_SEQ
            , Z.ORDER_COMP_NM
            , CASE WHEN Z.PART_NUM IS NULL THEN Z.CONTROL_NUM ELSE CONCAT(Z.CONTROL_NUM, ' #', Z.PART_NUM) END AS CONTROL_NUM
            , Z.DRAWING_NUM
            , Z.IMG_GFILE_SEQ
            , Z.PART_NUM
            , Z.SIZE_TXT
            , Z.MATERIAL_DETAIL_NM
            , Z.WORK_TYPE_NM
            , Z.ORDER_DUE_DT
            , Z.PART_QTY
            , Z.PART_STATUS_NM
            , Z.WORK_FACTORY_NM
            , Z.INNER_WORK_FINISH_DT
	        , FORMAT(Z.WORK_TIME / 60,1) AS WORK_TIME
            , Z.OUTSIDE_COMP_NM
            , Z.OUTSIDE_IN_DT
            , Z.OUT_FINISH_DT
            , Z.FORECAST_UNIT_AMT
            , Z.PART_QTY * Z.FORECAST_UNIT_AMT AS TOTAL_AMT
            , CASE WHEN IFNULL(Z.WORK_TIME,0) = 0 THEN NULL ELSE FORMAT(Z.PART_QTY * Z.UNIT_FINAL_AMT / (Z.WORK_TIME / 60 / 60),0) END AS PRICE_PER_HOUR
            , CASE WHEN Z.PREV_DRAWING_NUM IS NOT NULL THEN (   SELECT M.UNIT_FINAL_AMT
                                                                FROM jmes.TBL_ORDER M
                                                                WHERE M.ORDER_STATUS = 'REG003'
                                                                    AND M.DEL_YN = 'N'
                                                                    AND M.DRAWING_NUM = Z.PREV_DRAWING_NUM
                                                                    AND M.WORK_TYPE = Z.WORK_TYPE
                                                                    AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                                                                ORDER BY M.ORDER_SEQ DESC
                                                                LIMIT 1)
                   ELSE (   SELECT M.UNIT_FINAL_AMT
                            FROM jmes.TBL_ORDER M
                            WHERE M.ORDER_STATUS = 'REG003'
                                AND M.DEL_YN = 'N'
                                AND M.ORDER_SEQ != Z.ORDER_SEQ
                                AND M.DRAWING_NUM = Z.DRAWING_NUM
                                AND M.WORK_TYPE = Z.WORK_TYPE
                                AND M.ORDER_COMP_CD = Z.ORDER_COMP_CD
                            ORDER BY M.ORDER_SEQ DESC
                            LIMIT 1)
              END AS PREV_UNIT_FINAL_AMT
            , Z.UNIT_FINAL_EST_AMT
            , Z.UNIT_FINAL_AMT
            , Z.INSPECT_GRADE_NM
            , Z.INSPECT_RESULT_NM
            , Z.ERROR_QTY
            , Z.RETURN_QTY
            , Z.NOTE
            , Z.REGIST_NUM
            , Z.CONTROL_VER
            , Z.DRAWING_VER
        FROM (  SELECT P.CONTROL_SEQ
                    , P.CONTROL_DETAIL_SEQ
                    , M.ORDER_SEQ
                    , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                    , X.CONTROL_NUM
                    , X.ORDER_COMP_CD
                    , Y.WORK_TYPE
                    , Y.PART_NUM
                    , Y.SIZE_TXT
                    , jmes.SF_GET_CODE_NM('1027',Y.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1033',Y.WORK_TYPE,#{LOGIN_LOCALE}) AS WORK_TYPE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_DATE_F(P.ORDER_DUE_DT,'','') AS ORDER_DUE_DT
                    , P.PART_QTY
                    , jmes.SF_GET_PART_STATUS_NM(P.CONTROL_SEQ, P.CONTROL_DETAIL_SEQ, #{LOGIN_LOCALE}) AS PART_STATUS_NM      <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1014',Y.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_DATE_F(Y.INNER_WORK_FINISH_DT,'','M') AS INNER_WORK_FINISH_DT
                    , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)),0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = P.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ) AS WORK_TIME
                    , CASE WHEN P.OUTSIDE_YN = 'Y' THEN jmes.SF_GET_COMP_NM(Y.OUTSIDE_COMP_CD) END AS OUTSIDE_COMP_NM
                    , CASE WHEN P.OUTSIDE_YN = 'Y' THEN jmes.SF_GET_DATE_F(Y.OUTSIDE_IN_DT,'','M') END AS OUTSIDE_IN_DT
                    , jmes.SF_GET_DATE_F(P.OUT_FINISH_DT,'','M') AS OUT_FINISH_DT
                    , Y.FORECAST_UNIT_AMT
                    , M.UNIT_FINAL_EST_AMT
--                     , M.UNIT_FINAL_AMT
                    , CASE WHEN Y.WORK_TYPE != 'WTP040' THEN (SELECT T.UNIT_FINAL_AMT FROM TBL_ORDER T WHERE T.ORDER_SEQ = M.ORDER_SEQ)
                           ELSE M.UNIT_FINAL_AMT
                      END AS UNIT_FINAL_AMT
                    , M.REGIST_NUM
                    , jmes.SF_GET_CODE_NM('1040',P.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1020',P.INSPECT_RESULT,#{LOGIN_LOCALE}) AS INSPECT_RESULT_NM   <!-- 언어조건 -->
                    , P.ERROR_QTY
                    , ( SELECT SUM(M.ERROR_QTY)
                        FROM jmes.TBL_INSPECT M
                        WHERE M.CONTROL_SEQ = P.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                            AND M.INSPECT_TYPE = '2'
                            AND M.INSPECT_GRADE IN ('GRD050', 'GRD060')
                       ) AS RETURN_QTY
                    , X.NOTE
                    , X.CONTROL_VER
                    , Y.DRAWING_VER
                    , Y.DRAWING_NUM
                    , Y.PREV_DRAWING_NUM
                    , Y.IMG_GFILE_SEQ
                FROM (  SELECT C.CONTROL_SEQ
                            , C.CONTROL_DETAIL_SEQ
                            , A.ORDER_DUE_DT
                            , 1 AS PART_CNT
                            , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                            , C.OUTSIDE_YN
                            , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                            , CASE WHEN B.OUT_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS OUT_FINISH_YN
                            , B.OUT_FINISH_DT
                            , C.FORECAST_UNIT_AMT
                            , ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                            , D.INSPECT_GRADE
                            , D.INSPECT_RESULT
                            , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN D.ERROR_QTY ELSE 0 END AS ERROR_QTY
                        FROM (  SELECT M.CONTROL_SEQ
                                    , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                FROM jmes.TBL_CONTROL_PART_ORDER M
                                GROUP BY M.CONTROL_SEQ
                                HAVING MAX(M.ORDER_DUE_DT) BETWEEN REPLACE(#{MONTH_REPORT_DETAIL_START_DATE}, '/', SPACE(0)) AND REPLACE(#{MONTH_REPORT_DETAIL_END_DATE}, '/', SPACE(0))
                              ) A
                            , jmes.TBL_CONTROL B
                            , jmes.TBL_CONTROL_PART C
                                    LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.INSPECT_TYPE = '1'
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND A.CONTROL_SEQ = C.CONTROL_SEQ
                            AND B.DEL_YN = 'N'
                            AND B.CONTROL_STATUS IN ('ORD001', 'ORD003')
                            AND C.WORK_TYPE != 'WTP020'
                        <if test="COMP_CD != null and COMP_CD != ''">
                            AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                        </if>
                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                            AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                        </if>
                        <choose>
                            <when test='FACTORY_CLASSIFY_YN == "Y"'>
                                AND C.INNER_WORK_FINISH_DT IS NOT NULL      <!-- 가변조건(가공완료) -->
                            </when>
                            <when test='FACTORY_CLASSIFY_YN == "N"'>
                                AND C.INNER_WORK_FINISH_DT IS NULL
                            </when>
                        </choose>
                        <choose>
                            <when test='OUTSIDE_YN == "Y"'>
                                AND IFNULL(C.OUTSIDE_YN,'N') = 'Y'          <!-- 가변조건(외주대상) -->
                            </when>
                            <when test='OUTSIDE_YN == "N"'>
                                AND IFNULL(C.OUTSIDE_YN,'N') = 'N'
                            </when>
                        </choose>
                        <choose>
                            <when test='OUT_FINISH_YN == "Y"'>
                                AND B.OUT_FINISH_DT IS NOT NULL             <!-- 가변조건(출고완료) -->
                            </when>
                            <when test='OUT_FINISH_YN == "N"'>
                                AND B.OUT_FINISH_DT IS  NULL
                            </when>
                        </choose>
                        <choose>
                            <when test='DELAY_YN == "Y"'>
                                AND DATE_FORMAT(B.OUT_FINISH_DT,'%Y%m%d') > A.ORDER_DUE_DT        <!-- 가변조건(지연여부) -->
                            </when>
                            <when test='DELAY_YN == "N"'>
                                AND B.OUT_FINISH_DT <![CDATA[ < ]]> A.ORDER_DUE_DT
                            </when>
                        </choose>
                    ) P, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y, jmes.TBL_CONTROL_PART_ORDER_MAIN M
                WHERE P.CONTROL_SEQ = X.CONTROL_SEQ
                    AND P.CONTROL_SEQ = Y.CONTROL_SEQ
                    AND P.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
					AND P.CONTROL_SEQ = M.CONTROL_SEQ
                    AND P.INSPECT_RNUM = 1
            ) Z
    </select>

    <select id="selectMonthlyReportInspectionDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주 업체 -->
            , SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM <!-- 수행 공장 -->
            , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_NUM <!-- 작업지시번호 -->
            , B.DRAWING_NUM <!-- 도면 번호 -->
            , B.IMG_GFILE_SEQ
            , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS PART_QTY <!-- 발주량 -->
            , jmes.SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', 'M') AS INNER_WORK_FINISH_DT <!-- 가공완료(입고) 일시 -->
            , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK', M.MCT_WORK_SEQ)), 0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME <!-- 소요시간 -->
            , jmes.SF_GET_USER_NM(C.INSPECT_USER_ID) AS INSPECT_USER_NM <!-- 작성자 -->
            , jmes.SF_GET_CODE_NM('1040', C.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM <!-- 등급 -->
            , (SELECT NOTE FROM TBL_CODE WHERE CODE_CD = C.INSPECT_GRADE) AS INSPECT_GRADE_NOTE <!-- 합/불 -->
            , C.ERROR_QTY <!-- 불량수량 -->
            , jmes.SF_GET_DATE_F(C.RETURN_SETTLEMENT_DT, '', 'M') AS RETURN_SETTLEMENT_DT <!-- 반품일시 -->
            , CASE C.INSPECT_TYPE
                WHEN '1' THEN SF_GET_CODE_NM('1020', C.INSPECT_RESULT, #{LOGIN_LOCALE})
                WHEN '2' THEN SF_GET_CODE_NM('1021', C.INSPECT_RESULT, #{LOGIN_LOCALE})
              END AS INSPECT_RESULT_NM  <!-- 검사코드 -->
            , C.INSPECT_DESC <!-- 상세내용 -->
            , jmes.SF_GET_CODE_NM('1010', C.ERROR_PROCESS, #{LOGIN_LOCALE}) AS ERROR_PROCESS_NM <!-- 발생공정 -->
            , jmes.SF_GET_CODE_NM('1032', C.ERROR_REASON, #{LOGIN_LOCALE}) AS ERROR_REASON_NM <!-- 원인 -->
            , jmes.SF_GET_CODE_NM('1025', C.ERROR_ACTION, #{LOGIN_LOCALE}) AS ERROR_ACTION_NM <!-- 조치 -->
            , jmes.SF_GET_DATE_F(C.INSERT_DT, '', 'M') AS INSERT_DT <!-- 작성일시 -->
            , A.CONTROL_VER
            , B.DRAWING_VER
            , jmes.SF_GET_CODE_NM('1027',B.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM   <!-- 언어조건 -->
            , B.SIZE_TXT
            , (SELECT D.REGIST_NUM FROM TBL_CONTROL_PART_ORDER_MAIN D WHERE D.CONTROL_SEQ= B.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS REGIST_NUM
        FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_INSPECT C
        WHERE 1 = 1
            AND A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.INSPECT_SEQ IN (  SELECT P.INSPECT_SEQ
                                    FROM (  SELECT ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                                                , D.INSPECT_SEQ
                                                , D.INSPECT_GRADE
                                                , D.ERROR_QTY
                                            FROM (  SELECT M.CONTROL_SEQ
                                                        , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                    FROM jmes.TBL_CONTROL_PART_ORDER M
                                                    GROUP BY M.CONTROL_SEQ
                                                    HAVING MAX(M.ORDER_DUE_DT) = #{DT}  <!-- 고정조건 -->
                                                  ) A
                                                , jmes.TBL_CONTROL B
                                                , jmes.TBL_CONTROL_PART C
                                                        LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ
                                                        <choose>
                                                            <when test='INSPECT_TYPE == "1"'>
                                                                AND D.INSPECT_TYPE = '1' <!-- 부적합 -->
                                                            </when>
                                                            <when test='INSPECT_TYPE == "2"'>
                                                                AND D.INSPECT_TYPE = '2' <!-- 반품 -->
                                                            </when>
                                                        </choose>
                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                AND B.DEL_YN = 'N'
                                                AND C.WORK_TYPE != 'WTP020'
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                                            </if>
                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                                            </if>
                                        ) P
                                    WHERE P.INSPECT_RNUM = 1
                                        AND P.ERROR_QTY > 0
                                    <choose>
                                        <when test='INSPECT_TYPE == "1"'>
                                            AND P.INSPECT_GRADE = 'GRD040' <!-- 부적합 -->
                                        </when>
                                        <when test='INSPECT_TYPE == "2"'>
                                            AND P.INSPECT_GRADE IN ('GRD050', 'GRD060') <!-- 반품 -->
                                        </when>
                                    </choose>
            )
    </select>

    <select id="selectGetDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 최초 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(C.BASE_DT,'%Y%m%d'), INTERVAL -7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(C.BASE_DT,'%Y%m%d'), INTERVAL 20 DAY),'%Y%m%d') AS END_DT
        FROM (  SELECT MAX(A.DT) AS BASE_DT
                FROM jmes.TBL_YYYYMMDD A
                WHERE A.DT <![CDATA[ <= ]]> DATE_FORMAT(NOW(),'%Y%m%d')
                    AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') = 1
              ) C
    </select>

    <select id="selectGetPreviousDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 이전주: 인자값 시작주차 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL -7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 20 DAY),'%Y%m%d') AS END_DT
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT = #{START_DT}
    </select>

    <select id="selectGetNextDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 다음주: 인자값 시작주차 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 27 DAY),'%Y%m%d') AS END_DT
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT = #{START_DT}
    </select>

    <select id="selectStatusByClientTableHeader" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 상단 헤더 -->
        SELECT ROW_NUMBER() OVER(ORDER BY A.DT ) AS DT_SEQ
            , A.DT
            , jmes.SF_GET_DATE_F(DT,'','') AS F_DT
            , CASE DAYOFWEEK(DT)
                WHEN 1 THEN '(일)'
                WHEN 2 THEN '(월)'
                WHEN 3 THEN '(화)'
                WHEN 4 THEN '(수)'
                WHEN 5 THEN '(목)'
                WHEN 6 THEN '(금)'
                WHEN 7 THEN '(토)'
            END AS `DAY`
            , CASE WHEN A.DT = DATE_FORMAT(NOW(),'%Y%m%d') THEN 'Y' ELSE 'N' END AS TODAY_YN
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT BETWEEN #{START_DT} AND #{END_DT}  <!-- 조건 -->
    </select>

    <select id="selectStatusByClientTableList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT M.COMP_CD
            , M.COMP_NM
            , M.ORDER_COMP_CD
            , N.SUB_TYPE
            , CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN '품수' ELSE 'EA' END AS SUB_TYPE_NM
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_1 ELSE ORDER_QTY_1 END),0) AS ORDER_1, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_1 ELSE FINISH_QTY_1  END),0) AS FINISH_1, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_1 ELSE REMAIN_QTY_1 END),0) AS REMAIN_1
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_2 ELSE ORDER_QTY_2 END),0) AS ORDER_2, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_2 ELSE FINISH_QTY_2  END),0) AS FINISH_2, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_2 ELSE REMAIN_QTY_2 END),0) AS REMAIN_2
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_3 ELSE ORDER_QTY_3 END),0) AS ORDER_3, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_3 ELSE FINISH_QTY_3  END),0) AS FINISH_3, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_3 ELSE REMAIN_QTY_3 END),0) AS REMAIN_3
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_4 ELSE ORDER_QTY_4 END),0) AS ORDER_4, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_4 ELSE FINISH_QTY_4  END),0) AS FINISH_4, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_4 ELSE REMAIN_QTY_4 END),0) AS REMAIN_4
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_5 ELSE ORDER_QTY_5 END),0) AS ORDER_5, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_5 ELSE FINISH_QTY_5  END),0) AS FINISH_5, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_5 ELSE REMAIN_QTY_5 END),0) AS REMAIN_5
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_6 ELSE ORDER_QTY_6 END),0) AS ORDER_6, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_6 ELSE FINISH_QTY_6  END),0) AS FINISH_6, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_6 ELSE REMAIN_QTY_6 END),0) AS REMAIN_6
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_7 ELSE ORDER_QTY_7 END),0) AS ORDER_7, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_7 ELSE FINISH_QTY_7  END),0) AS FINISH_7, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_7 ELSE REMAIN_QTY_7 END),0) AS REMAIN_7
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_8 ELSE ORDER_QTY_8 END),0) AS ORDER_8, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_8 ELSE FINISH_QTY_8  END),0) AS FINISH_8, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_8 ELSE REMAIN_QTY_8 END),0) AS REMAIN_8
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_9 ELSE ORDER_QTY_9 END),0) AS ORDER_9, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_9 ELSE FINISH_QTY_9  END),0) AS FINISH_9, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_9 ELSE REMAIN_QTY_9 END),0) AS REMAIN_9
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_10 ELSE ORDER_QTY_10 END),0) AS ORDER_10, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_10 ELSE FINISH_QTY_10  END),0) AS FINISH_10, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_10 ELSE REMAIN_QTY_10 END),0) AS REMAIN_10
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_11 ELSE ORDER_QTY_11 END),0) AS ORDER_11, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_11 ELSE FINISH_QTY_11  END),0) AS FINISH_11, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_11 ELSE REMAIN_QTY_11 END),0) AS REMAIN_11
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_12 ELSE ORDER_QTY_12 END),0) AS ORDER_12, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_12 ELSE FINISH_QTY_12  END),0) AS FINISH_12, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_12 ELSE REMAIN_QTY_12 END),0) AS REMAIN_12
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_13 ELSE ORDER_QTY_13 END),0) AS ORDER_13, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_13 ELSE FINISH_QTY_13  END),0) AS FINISH_13, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_13 ELSE REMAIN_QTY_13 END),0) AS REMAIN_13
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_14 ELSE ORDER_QTY_14 END),0) AS ORDER_14, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_14 ELSE FINISH_QTY_14  END),0) AS FINISH_14, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_14 ELSE REMAIN_QTY_14 END),0) AS REMAIN_14
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_15 ELSE ORDER_QTY_15 END),0) AS ORDER_15, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_15 ELSE FINISH_QTY_15  END),0) AS FINISH_15, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_15 ELSE REMAIN_QTY_15 END),0) AS REMAIN_15
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_16 ELSE ORDER_QTY_16 END),0) AS ORDER_16, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_16 ELSE FINISH_QTY_16  END),0) AS FINISH_16, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_16 ELSE REMAIN_QTY_16 END),0) AS REMAIN_16
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_17 ELSE ORDER_QTY_17 END),0) AS ORDER_17, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_17 ELSE FINISH_QTY_17  END),0) AS FINISH_17, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_17 ELSE REMAIN_QTY_17 END),0) AS REMAIN_17
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_18 ELSE ORDER_QTY_18 END),0) AS ORDER_18, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_18 ELSE FINISH_QTY_18  END),0) AS FINISH_18, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_18 ELSE REMAIN_QTY_18 END),0) AS REMAIN_18
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_19 ELSE ORDER_QTY_19 END),0) AS ORDER_19, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_19 ELSE FINISH_QTY_19  END),0) AS FINISH_19, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_19 ELSE REMAIN_QTY_19 END),0) AS REMAIN_19
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_20 ELSE ORDER_QTY_20 END),0) AS ORDER_20, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_20 ELSE FINISH_QTY_20  END),0) AS FINISH_20, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_20 ELSE REMAIN_QTY_20 END),0) AS REMAIN_20
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_21 ELSE ORDER_QTY_21 END),0) AS ORDER_21, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_21 ELSE FINISH_QTY_21  END),0) AS FINISH_21, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_21 ELSE REMAIN_QTY_21 END),0) AS REMAIN_21
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_22 ELSE ORDER_QTY_22 END),0) AS ORDER_22, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_22 ELSE FINISH_QTY_22  END),0) AS FINISH_22, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_22 ELSE REMAIN_QTY_21 END),0) AS REMAIN_22
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_23 ELSE ORDER_QTY_23 END),0) AS ORDER_23, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_23 ELSE FINISH_QTY_23  END),0) AS FINISH_23, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_23 ELSE REMAIN_QTY_21 END),0) AS REMAIN_23
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_24 ELSE ORDER_QTY_24 END),0) AS ORDER_24, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_24 ELSE FINISH_QTY_24  END),0) AS FINISH_24, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_24 ELSE REMAIN_QTY_21 END),0) AS REMAIN_24
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_25 ELSE ORDER_QTY_25 END),0) AS ORDER_25, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_25 ELSE FINISH_QTY_25  END),0) AS FINISH_25, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_25 ELSE REMAIN_QTY_21 END),0) AS REMAIN_25
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_26 ELSE ORDER_QTY_26 END),0) AS ORDER_26, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_26 ELSE FINISH_QTY_26  END),0) AS FINISH_26, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_26 ELSE REMAIN_QTY_21 END),0) AS REMAIN_26
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_27 ELSE ORDER_QTY_27 END),0) AS ORDER_27, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_27 ELSE FINISH_QTY_27  END),0) AS FINISH_27, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_27 ELSE REMAIN_QTY_21 END),0) AS REMAIN_27
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_28 ELSE ORDER_QTY_28 END),0) AS ORDER_28, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_28 ELSE FINISH_QTY_28  END),0) AS FINISH_28, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_28 ELSE REMAIN_QTY_21 END),0) AS REMAIN_28
        FROM (  SELECT V.COMP_CD
                    , V.COMP_NM
                    , W.ORDER_COMP_CD
                    , W.ORDER_CNT_1, W.FINISH_CNT_1, W.REMAIN_CNT_1
                    , W.ORDER_CNT_2, W.FINISH_CNT_2, W.REMAIN_CNT_2
                    , W.ORDER_CNT_3, W.FINISH_CNT_3, W.REMAIN_CNT_3
                    , W.ORDER_CNT_4, W.FINISH_CNT_4, W.REMAIN_CNT_4
                    , W.ORDER_CNT_5, W.FINISH_CNT_5, W.REMAIN_CNT_5
                    , W.ORDER_CNT_6, W.FINISH_CNT_6, W.REMAIN_CNT_6
                    , W.ORDER_CNT_7, W.FINISH_CNT_7, W.REMAIN_CNT_7
                    , W.ORDER_CNT_8, W.FINISH_CNT_8, W.REMAIN_CNT_8
                    , W.ORDER_CNT_9, W.FINISH_CNT_9, W.REMAIN_CNT_9
                    , W.ORDER_CNT_10, W.FINISH_CNT_10, W.REMAIN_CNT_10
                    , W.ORDER_CNT_11, W.FINISH_CNT_11, W.REMAIN_CNT_11
                    , W.ORDER_CNT_12, W.FINISH_CNT_12, W.REMAIN_CNT_12
                    , W.ORDER_CNT_13, W.FINISH_CNT_13, W.REMAIN_CNT_13
                    , W.ORDER_CNT_14, W.FINISH_CNT_14, W.REMAIN_CNT_14
                    , W.ORDER_CNT_15, W.FINISH_CNT_15, W.REMAIN_CNT_15
                    , W.ORDER_CNT_16, W.FINISH_CNT_16, W.REMAIN_CNT_16
                    , W.ORDER_CNT_17, W.FINISH_CNT_17, W.REMAIN_CNT_17
                    , W.ORDER_CNT_18, W.FINISH_CNT_18, W.REMAIN_CNT_18
                    , W.ORDER_CNT_19, W.FINISH_CNT_19, W.REMAIN_CNT_19
                    , W.ORDER_CNT_20, W.FINISH_CNT_20, W.REMAIN_CNT_20
                    , W.ORDER_CNT_21, W.FINISH_CNT_21, W.REMAIN_CNT_21
                    , W.ORDER_CNT_22, W.FINISH_CNT_22, W.REMAIN_CNT_22
                    , W.ORDER_CNT_23, W.FINISH_CNT_23, W.REMAIN_CNT_23
                    , W.ORDER_CNT_24, W.FINISH_CNT_24, W.REMAIN_CNT_24
                    , W.ORDER_CNT_25, W.FINISH_CNT_25, W.REMAIN_CNT_25
                    , W.ORDER_CNT_26, W.FINISH_CNT_26, W.REMAIN_CNT_26
                    , W.ORDER_CNT_27, W.FINISH_CNT_27, W.REMAIN_CNT_27
                    , W.ORDER_CNT_28, W.FINISH_CNT_28, W.REMAIN_CNT_28
                    , W.ORDER_QTY_1, W.FINISH_QTY_1, W.REMAIN_QTY_1
                    , W.ORDER_QTY_2, W.FINISH_QTY_2, W.REMAIN_QTY_2
                    , W.ORDER_QTY_3, W.FINISH_QTY_3, W.REMAIN_QTY_3
                    , W.ORDER_QTY_4, W.FINISH_QTY_4, W.REMAIN_QTY_4
                    , W.ORDER_QTY_5, W.FINISH_QTY_5, W.REMAIN_QTY_5
                    , W.ORDER_QTY_6, W.FINISH_QTY_6, W.REMAIN_QTY_6
                    , W.ORDER_QTY_7, W.FINISH_QTY_7, W.REMAIN_QTY_7
                    , W.ORDER_QTY_8, W.FINISH_QTY_8, W.REMAIN_QTY_8
                    , W.ORDER_QTY_9, W.FINISH_QTY_9, W.REMAIN_QTY_9
                    , W.ORDER_QTY_10, W.FINISH_QTY_10, W.REMAIN_QTY_10
                    , W.ORDER_QTY_11, W.FINISH_QTY_11, W.REMAIN_QTY_11
                    , W.ORDER_QTY_12, W.FINISH_QTY_12, W.REMAIN_QTY_12
                    , W.ORDER_QTY_13, W.FINISH_QTY_13, W.REMAIN_QTY_13
                    , W.ORDER_QTY_14, W.FINISH_QTY_14, W.REMAIN_QTY_14
                    , W.ORDER_QTY_15, W.FINISH_QTY_15, W.REMAIN_QTY_15
                    , W.ORDER_QTY_16, W.FINISH_QTY_16, W.REMAIN_QTY_16
                    , W.ORDER_QTY_17, W.FINISH_QTY_17, W.REMAIN_QTY_17
                    , W.ORDER_QTY_18, W.FINISH_QTY_18, W.REMAIN_QTY_18
                    , W.ORDER_QTY_19, W.FINISH_QTY_19, W.REMAIN_QTY_19
                    , W.ORDER_QTY_20, W.FINISH_QTY_20, W.REMAIN_QTY_20
                    , W.ORDER_QTY_21, W.FINISH_QTY_21, W.REMAIN_QTY_21
                    , W.ORDER_QTY_22, W.FINISH_QTY_22, W.REMAIN_QTY_22
                    , W.ORDER_QTY_23, W.FINISH_QTY_23, W.REMAIN_QTY_23
                    , W.ORDER_QTY_24, W.FINISH_QTY_24, W.REMAIN_QTY_24
                    , W.ORDER_QTY_25, W.FINISH_QTY_25, W.REMAIN_QTY_25
                    , W.ORDER_QTY_26, W.FINISH_QTY_26, W.REMAIN_QTY_26
                    , W.ORDER_QTY_27, W.FINISH_QTY_27, W.REMAIN_QTY_27
                    , W.ORDER_QTY_28, W.FINISH_QTY_28, W.REMAIN_QTY_28
                FROM (  SELECT A.COMP_CD, A.COMP_NM
                        FROM jmes.TBL_COMPANY A
                        WHERE A.ORDER_COMPANY_YN = 'Y'
                            AND A.ACTIVE_YN = 'Y'
                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                            AND A.COMP_CD IN (${HIDDEN_ORDER_COMP_CD}) <!-- 가변조건 -->
                        </if>
                        UNION ALL
                        SELECT 'TOTAL' AS COMP_CD, '합계' AS COMP_NM
                        FROM DUAL
                      ) V LEFT OUTER JOIN ( SELECT IFNULL(Z.ORDER_COMP_CD,'TOTAL') AS ORDER_COMP_CD
                                                , SUM(Z.ORDER_CNT_1) AS ORDER_CNT_1, SUM(Z.FINISH_CNT_1) AS FINISH_CNT_1, SUM(Z.REMAIN_CNT_1) AS REMAIN_CNT_1
                                                , SUM(Z.ORDER_CNT_2) AS ORDER_CNT_2, SUM(Z.FINISH_CNT_2) AS FINISH_CNT_2, SUM(Z.REMAIN_CNT_2) AS REMAIN_CNT_2
                                                , SUM(Z.ORDER_CNT_3) AS ORDER_CNT_3, SUM(Z.FINISH_CNT_3) AS FINISH_CNT_3, SUM(Z.REMAIN_CNT_3) AS REMAIN_CNT_3
                                                , SUM(Z.ORDER_CNT_4) AS ORDER_CNT_4, SUM(Z.FINISH_CNT_4) AS FINISH_CNT_4, SUM(Z.REMAIN_CNT_4) AS REMAIN_CNT_4
                                                , SUM(Z.ORDER_CNT_5) AS ORDER_CNT_5, SUM(Z.FINISH_CNT_5) AS FINISH_CNT_5, SUM(Z.REMAIN_CNT_5) AS REMAIN_CNT_5
                                                , SUM(Z.ORDER_CNT_6) AS ORDER_CNT_6, SUM(Z.FINISH_CNT_6) AS FINISH_CNT_6, SUM(Z.REMAIN_CNT_6) AS REMAIN_CNT_6
                                                , SUM(Z.ORDER_CNT_7) AS ORDER_CNT_7, SUM(Z.FINISH_CNT_7) AS FINISH_CNT_7, SUM(Z.REMAIN_CNT_7) AS REMAIN_CNT_7
                                                , SUM(Z.ORDER_CNT_8) AS ORDER_CNT_8, SUM(Z.FINISH_CNT_8) AS FINISH_CNT_8, SUM(Z.REMAIN_CNT_8) AS REMAIN_CNT_8
                                                , SUM(Z.ORDER_CNT_9) AS ORDER_CNT_9, SUM(Z.FINISH_CNT_9) AS FINISH_CNT_9, SUM(Z.REMAIN_CNT_9) AS REMAIN_CNT_9
                                                , SUM(Z.ORDER_CNT_10) AS ORDER_CNT_10, SUM(Z.FINISH_CNT_10) AS FINISH_CNT_10, SUM(Z.REMAIN_CNT_10) AS REMAIN_CNT_10
                                                , SUM(Z.ORDER_CNT_11) AS ORDER_CNT_11, SUM(Z.FINISH_CNT_11) AS FINISH_CNT_11, SUM(Z.REMAIN_CNT_11) AS REMAIN_CNT_11
                                                , SUM(Z.ORDER_CNT_12) AS ORDER_CNT_12, SUM(Z.FINISH_CNT_12) AS FINISH_CNT_12, SUM(Z.REMAIN_CNT_12) AS REMAIN_CNT_12
                                                , SUM(Z.ORDER_CNT_13) AS ORDER_CNT_13, SUM(Z.FINISH_CNT_13) AS FINISH_CNT_13, SUM(Z.REMAIN_CNT_13) AS REMAIN_CNT_13
                                                , SUM(Z.ORDER_CNT_14) AS ORDER_CNT_14, SUM(Z.FINISH_CNT_14) AS FINISH_CNT_14, SUM(Z.REMAIN_CNT_14) AS REMAIN_CNT_14
                                                , SUM(Z.ORDER_CNT_15) AS ORDER_CNT_15, SUM(Z.FINISH_CNT_15) AS FINISH_CNT_15, SUM(Z.REMAIN_CNT_15) AS REMAIN_CNT_15
                                                , SUM(Z.ORDER_CNT_16) AS ORDER_CNT_16, SUM(Z.FINISH_CNT_16) AS FINISH_CNT_16, SUM(Z.REMAIN_CNT_16) AS REMAIN_CNT_16
                                                , SUM(Z.ORDER_CNT_17) AS ORDER_CNT_17, SUM(Z.FINISH_CNT_17) AS FINISH_CNT_17, SUM(Z.REMAIN_CNT_17) AS REMAIN_CNT_17
                                                , SUM(Z.ORDER_CNT_18) AS ORDER_CNT_18, SUM(Z.FINISH_CNT_18) AS FINISH_CNT_18, SUM(Z.REMAIN_CNT_18) AS REMAIN_CNT_18
                                                , SUM(Z.ORDER_CNT_19) AS ORDER_CNT_19, SUM(Z.FINISH_CNT_19) AS FINISH_CNT_19, SUM(Z.REMAIN_CNT_19) AS REMAIN_CNT_19
                                                , SUM(Z.ORDER_CNT_20) AS ORDER_CNT_20, SUM(Z.FINISH_CNT_20) AS FINISH_CNT_20, SUM(Z.REMAIN_CNT_20) AS REMAIN_CNT_20
                                                , SUM(Z.ORDER_CNT_21) AS ORDER_CNT_21, SUM(Z.FINISH_CNT_21) AS FINISH_CNT_21, SUM(Z.REMAIN_CNT_21) AS REMAIN_CNT_21
                                                , SUM(Z.ORDER_CNT_22) AS ORDER_CNT_22, SUM(Z.FINISH_CNT_22) AS FINISH_CNT_22, SUM(Z.REMAIN_CNT_22) AS REMAIN_CNT_22
                                                , SUM(Z.ORDER_CNT_23) AS ORDER_CNT_23, SUM(Z.FINISH_CNT_23) AS FINISH_CNT_23, SUM(Z.REMAIN_CNT_23) AS REMAIN_CNT_23
                                                , SUM(Z.ORDER_CNT_24) AS ORDER_CNT_24, SUM(Z.FINISH_CNT_24) AS FINISH_CNT_24, SUM(Z.REMAIN_CNT_24) AS REMAIN_CNT_24
                                                , SUM(Z.ORDER_CNT_25) AS ORDER_CNT_25, SUM(Z.FINISH_CNT_25) AS FINISH_CNT_25, SUM(Z.REMAIN_CNT_25) AS REMAIN_CNT_25
                                                , SUM(Z.ORDER_CNT_26) AS ORDER_CNT_26, SUM(Z.FINISH_CNT_26) AS FINISH_CNT_26, SUM(Z.REMAIN_CNT_26) AS REMAIN_CNT_26
                                                , SUM(Z.ORDER_CNT_27) AS ORDER_CNT_27, SUM(Z.FINISH_CNT_27) AS FINISH_CNT_27, SUM(Z.REMAIN_CNT_27) AS REMAIN_CNT_27
                                                , SUM(Z.ORDER_CNT_28) AS ORDER_CNT_28, SUM(Z.FINISH_CNT_28) AS FINISH_CNT_28, SUM(Z.REMAIN_CNT_28) AS REMAIN_CNT_28
                                                , SUM(Z.ORDER_QTY_1) AS ORDER_QTY_1, SUM(Z.FINISH_QTY_1) AS FINISH_QTY_1, SUM(Z.REMAIN_QTY_1) AS REMAIN_QTY_1
                                                , SUM(Z.ORDER_QTY_2) AS ORDER_QTY_2, SUM(Z.FINISH_QTY_2) AS FINISH_QTY_2, SUM(Z.REMAIN_QTY_2) AS REMAIN_QTY_2
                                                , SUM(Z.ORDER_QTY_3) AS ORDER_QTY_3, SUM(Z.FINISH_QTY_3) AS FINISH_QTY_3, SUM(Z.REMAIN_QTY_3) AS REMAIN_QTY_3
                                                , SUM(Z.ORDER_QTY_4) AS ORDER_QTY_4, SUM(Z.FINISH_QTY_4) AS FINISH_QTY_4, SUM(Z.REMAIN_QTY_4) AS REMAIN_QTY_4
                                                , SUM(Z.ORDER_QTY_5) AS ORDER_QTY_5, SUM(Z.FINISH_QTY_5) AS FINISH_QTY_5, SUM(Z.REMAIN_QTY_5) AS REMAIN_QTY_5
                                                , SUM(Z.ORDER_QTY_6) AS ORDER_QTY_6, SUM(Z.FINISH_QTY_6) AS FINISH_QTY_6, SUM(Z.REMAIN_QTY_6) AS REMAIN_QTY_6
                                                , SUM(Z.ORDER_QTY_7) AS ORDER_QTY_7, SUM(Z.FINISH_QTY_7) AS FINISH_QTY_7, SUM(Z.REMAIN_QTY_7) AS REMAIN_QTY_7
                                                , SUM(Z.ORDER_QTY_8) AS ORDER_QTY_8, SUM(Z.FINISH_QTY_8) AS FINISH_QTY_8, SUM(Z.REMAIN_QTY_8) AS REMAIN_QTY_8
                                                , SUM(Z.ORDER_QTY_9) AS ORDER_QTY_9, SUM(Z.FINISH_QTY_9) AS FINISH_QTY_9, SUM(Z.REMAIN_QTY_9) AS REMAIN_QTY_9
                                                , SUM(Z.ORDER_QTY_10) AS ORDER_QTY_10, SUM(Z.FINISH_QTY_10) AS FINISH_QTY_10, SUM(Z.REMAIN_QTY_10) AS REMAIN_QTY_10
                                                , SUM(Z.ORDER_QTY_11) AS ORDER_QTY_11, SUM(Z.FINISH_QTY_11) AS FINISH_QTY_11, SUM(Z.REMAIN_QTY_11) AS REMAIN_QTY_11
                                                , SUM(Z.ORDER_QTY_12) AS ORDER_QTY_12, SUM(Z.FINISH_QTY_12) AS FINISH_QTY_12, SUM(Z.REMAIN_QTY_12) AS REMAIN_QTY_12
                                                , SUM(Z.ORDER_QTY_13) AS ORDER_QTY_13, SUM(Z.FINISH_QTY_13) AS FINISH_QTY_13, SUM(Z.REMAIN_QTY_13) AS REMAIN_QTY_13
                                                , SUM(Z.ORDER_QTY_14) AS ORDER_QTY_14, SUM(Z.FINISH_QTY_14) AS FINISH_QTY_14, SUM(Z.REMAIN_QTY_14) AS REMAIN_QTY_14
                                                , SUM(Z.ORDER_QTY_15) AS ORDER_QTY_15, SUM(Z.FINISH_QTY_15) AS FINISH_QTY_15, SUM(Z.REMAIN_QTY_15) AS REMAIN_QTY_15
                                                , SUM(Z.ORDER_QTY_16) AS ORDER_QTY_16, SUM(Z.FINISH_QTY_16) AS FINISH_QTY_16, SUM(Z.REMAIN_QTY_16) AS REMAIN_QTY_16
                                                , SUM(Z.ORDER_QTY_17) AS ORDER_QTY_17, SUM(Z.FINISH_QTY_17) AS FINISH_QTY_17, SUM(Z.REMAIN_QTY_17) AS REMAIN_QTY_17
                                                , SUM(Z.ORDER_QTY_18) AS ORDER_QTY_18, SUM(Z.FINISH_QTY_18) AS FINISH_QTY_18, SUM(Z.REMAIN_QTY_18) AS REMAIN_QTY_18
                                                , SUM(Z.ORDER_QTY_19) AS ORDER_QTY_19, SUM(Z.FINISH_QTY_19) AS FINISH_QTY_19, SUM(Z.REMAIN_QTY_19) AS REMAIN_QTY_19
                                                , SUM(Z.ORDER_QTY_20) AS ORDER_QTY_20, SUM(Z.FINISH_QTY_20) AS FINISH_QTY_20, SUM(Z.REMAIN_QTY_20) AS REMAIN_QTY_20
                                                , SUM(Z.ORDER_QTY_21) AS ORDER_QTY_21, SUM(Z.FINISH_QTY_21) AS FINISH_QTY_21, SUM(Z.REMAIN_QTY_21) AS REMAIN_QTY_21
                                                , SUM(Z.ORDER_QTY_22) AS ORDER_QTY_22, SUM(Z.FINISH_QTY_22) AS FINISH_QTY_22, SUM(Z.REMAIN_QTY_22) AS REMAIN_QTY_22
                                                , SUM(Z.ORDER_QTY_23) AS ORDER_QTY_23, SUM(Z.FINISH_QTY_23) AS FINISH_QTY_23, SUM(Z.REMAIN_QTY_23) AS REMAIN_QTY_23
                                                , SUM(Z.ORDER_QTY_24) AS ORDER_QTY_24, SUM(Z.FINISH_QTY_24) AS FINISH_QTY_24, SUM(Z.REMAIN_QTY_24) AS REMAIN_QTY_24
                                                , SUM(Z.ORDER_QTY_25) AS ORDER_QTY_25, SUM(Z.FINISH_QTY_25) AS FINISH_QTY_25, SUM(Z.REMAIN_QTY_25) AS REMAIN_QTY_25
                                                , SUM(Z.ORDER_QTY_26) AS ORDER_QTY_26, SUM(Z.FINISH_QTY_26) AS FINISH_QTY_26, SUM(Z.REMAIN_QTY_26) AS REMAIN_QTY_26
                                                , SUM(Z.ORDER_QTY_27) AS ORDER_QTY_27, SUM(Z.FINISH_QTY_27) AS FINISH_QTY_27, SUM(Z.REMAIN_QTY_27) AS REMAIN_QTY_27
                                                , SUM(Z.ORDER_QTY_28) AS ORDER_QTY_28, SUM(Z.FINISH_QTY_28) AS FINISH_QTY_28, SUM(Z.REMAIN_QTY_28) AS REMAIN_QTY_28
                                            FROM (  SELECT X.ORDER_COMP_CD
                                                        , MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_CNT END) AS ORDER_CNT_1, MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_CNT END) AS FINISH_CNT_1, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_1
                                                        , MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_CNT END) AS ORDER_CNT_2, MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_CNT END) AS FINISH_CNT_2, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_2
                                                        , MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_CNT END) AS ORDER_CNT_3, MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_CNT END) AS FINISH_CNT_3, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_3
                                                        , MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_CNT END) AS ORDER_CNT_4, MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_CNT END) AS FINISH_CNT_4, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_4
                                                        , MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_CNT END) AS ORDER_CNT_5, MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_CNT END) AS FINISH_CNT_5, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_5
                                                        , MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_CNT END) AS ORDER_CNT_6, MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_CNT END) AS FINISH_CNT_6, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_6
                                                        , MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_CNT END) AS ORDER_CNT_7, MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_CNT END) AS FINISH_CNT_7, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_7
                                                        , MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_CNT END) AS ORDER_CNT_8, MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_CNT END) AS FINISH_CNT_8, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_8
                                                        , MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_CNT END) AS ORDER_CNT_9, MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_CNT END) AS FINISH_CNT_9, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_9
                                                        , MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_CNT END) AS ORDER_CNT_10, MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_CNT END) AS FINISH_CNT_10, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_10
                                                        , MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_CNT END) AS ORDER_CNT_11, MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_CNT END) AS FINISH_CNT_11, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_11
                                                        , MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_CNT END) AS ORDER_CNT_12, MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_CNT END) AS FINISH_CNT_12, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_12
                                                        , MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_CNT END) AS ORDER_CNT_13, MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_CNT END) AS FINISH_CNT_13, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_13
                                                        , MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_CNT END) AS ORDER_CNT_14, MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_CNT END) AS FINISH_CNT_14, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_14
                                                        , MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_CNT END) AS ORDER_CNT_15, MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_CNT END) AS FINISH_CNT_15, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_15
                                                        , MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_CNT END) AS ORDER_CNT_16, MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_CNT END) AS FINISH_CNT_16, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_16
                                                        , MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_CNT END) AS ORDER_CNT_17, MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_CNT END) AS FINISH_CNT_17, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_17
                                                        , MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_CNT END) AS ORDER_CNT_18, MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_CNT END) AS FINISH_CNT_18, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_18
                                                        , MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_CNT END) AS ORDER_CNT_19, MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_CNT END) AS FINISH_CNT_19, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_19
                                                        , MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_CNT END) AS ORDER_CNT_20, MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_CNT END) AS FINISH_CNT_20, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_20
                                                        , MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_CNT END) AS ORDER_CNT_21, MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_CNT END) AS FINISH_CNT_21, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_21
                                                        , MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_CNT END) AS ORDER_CNT_22, MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_CNT END) AS FINISH_CNT_22, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_22
                                                        , MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_CNT END) AS ORDER_CNT_23, MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_CNT END) AS FINISH_CNT_23, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_23
                                                        , MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_CNT END) AS ORDER_CNT_24, MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_CNT END) AS FINISH_CNT_24, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_24
                                                        , MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_CNT END) AS ORDER_CNT_25, MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_CNT END) AS FINISH_CNT_25, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_25
                                                        , MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_CNT END) AS ORDER_CNT_26, MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_CNT END) AS FINISH_CNT_26, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_26
                                                        , MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_CNT END) AS ORDER_CNT_27, MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_CNT END) AS FINISH_CNT_27, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_27
                                                        , MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_CNT END) AS ORDER_CNT_28, MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_CNT END) AS FINISH_CNT_28, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_28
                                                        , MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_QTY END) AS ORDER_QTY_1, MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_QTY END) AS FINISH_QTY_1, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_1
                                                        , MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_QTY END) AS ORDER_QTY_2, MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_QTY END) AS FINISH_QTY_2, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_2
                                                        , MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_QTY END) AS ORDER_QTY_3, MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_QTY END) AS FINISH_QTY_3, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_3
                                                        , MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_QTY END) AS ORDER_QTY_4, MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_QTY END) AS FINISH_QTY_4, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_4
                                                        , MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_QTY END) AS ORDER_QTY_5, MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_QTY END) AS FINISH_QTY_5, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_5
                                                        , MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_QTY END) AS ORDER_QTY_6, MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_QTY END) AS FINISH_QTY_6, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_6
                                                        , MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_QTY END) AS ORDER_QTY_7, MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_QTY END) AS FINISH_QTY_7, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_7
                                                        , MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_QTY END) AS ORDER_QTY_8, MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_QTY END) AS FINISH_QTY_8, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_8
                                                        , MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_QTY END) AS ORDER_QTY_9, MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_QTY END) AS FINISH_QTY_9, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_9
                                                        , MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_QTY END) AS ORDER_QTY_10, MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_QTY END) AS FINISH_QTY_10, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_10
                                                        , MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_QTY END) AS ORDER_QTY_11, MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_QTY END) AS FINISH_QTY_11, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_11
                                                        , MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_QTY END) AS ORDER_QTY_12, MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_QTY END) AS FINISH_QTY_12, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_12
                                                        , MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_QTY END) AS ORDER_QTY_13, MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_QTY END) AS FINISH_QTY_13, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_13
                                                        , MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_QTY END) AS ORDER_QTY_14, MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_QTY END) AS FINISH_QTY_14, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_14
                                                        , MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_QTY END) AS ORDER_QTY_15, MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_QTY END) AS FINISH_QTY_15, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_15
                                                        , MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_QTY END) AS ORDER_QTY_16, MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_QTY END) AS FINISH_QTY_16, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_16
                                                        , MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_QTY END) AS ORDER_QTY_17, MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_QTY END) AS FINISH_QTY_17, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_17
                                                        , MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_QTY END) AS ORDER_QTY_18, MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_QTY END) AS FINISH_QTY_18, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_18
                                                        , MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_QTY END) AS ORDER_QTY_19, MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_QTY END) AS FINISH_QTY_19, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_19
                                                        , MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_QTY END) AS ORDER_QTY_20, MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_QTY END) AS FINISH_QTY_20, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_20
                                                        , MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_QTY END) AS ORDER_QTY_21, MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_QTY END) AS FINISH_QTY_21, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_21
                                                        , MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_QTY END) AS ORDER_QTY_22, MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_QTY END) AS FINISH_QTY_22, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_22
                                                        , MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_QTY END) AS ORDER_QTY_23, MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_QTY END) AS FINISH_QTY_23, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_23
                                                        , MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_QTY END) AS ORDER_QTY_24, MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_QTY END) AS FINISH_QTY_24, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_24
                                                        , MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_QTY END) AS ORDER_QTY_25, MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_QTY END) AS FINISH_QTY_25, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_25
                                                        , MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_QTY END) AS ORDER_QTY_26, MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_QTY END) AS FINISH_QTY_26, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_26
                                                        , MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_QTY END) AS ORDER_QTY_27, MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_QTY END) AS FINISH_QTY_27, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_27
                                                        , MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_QTY END) AS ORDER_QTY_28, MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_QTY END) AS FINISH_QTY_28, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_28
                                                    FROM  ( SELECT P.ORDER_COMP_CD
                                                                , P.ORDER_DUE_DT
                                                                , SUM(1) AS ORDER_CNT
                                                                , SUM(P.PART_QTY) AS ORDER_QTY
                                                                , SUM(CASE WHEN P.INNER_WORK_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS FINISH_CNT
                                                                , SUM(CASE WHEN P.INNER_WORK_FINISH_YN = 'Y' THEN P.PART_QTY ELSE 0 END) AS FINISH_QTY
                                                            FROM (  SELECT C.CONTROL_SEQ
                                                                        , C.CONTROL_DETAIL_SEQ
                                                                        , B.ORDER_COMP_CD
                                                                        , A.ORDER_DUE_DT
                                                                        , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                                        , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                                                                    FROM (  SELECT M.CONTROL_SEQ
                                                                                , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                                            FROM jmes.TBL_CONTROL_PART_ORDER M
                                                                            GROUP BY M.CONTROL_SEQ
                                                                            HAVING MAX(M.ORDER_DUE_DT) BETWEEN #{START_DT} AND #{END_DT} <!-- 조건 -->
                                                                          ) A
                                                                        , jmes.TBL_CONTROL B
                                                                        , jmes.TBL_CONTROL_PART C
                                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                        AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                                        AND B.DEL_YN = 'N'
                                                                        AND C.WORK_TYPE != 'WTP020'
                                                                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                                        AND B.ORDER_COMP_CD IN (${HIDDEN_ORDER_COMP_CD}) <!-- 가변조건 -->
                                                                    </if>
                                                                  ) P
                                                            GROUP BY P.ORDER_COMP_CD, P.ORDER_DUE_DT
                                                           ) X
                                                        , (  SELECT ROW_NUMBER() OVER(ORDER BY A.DT ) AS DT_SEQ
                                                                , A.DT
                                                                , jmes.SF_GET_DATE_F(DT,'','') AS F_DT
                                                            FROM jmes.TBL_YYYYMMDD A
                                                            WHERE A.DT BETWEEN #{START_DT} AND #{END_DT}  <!-- 조건 -->
                                                          ) Y
                                                    WHERE X.ORDER_DUE_DT = Y.DT
                                                    GROUP BY X.ORDER_COMP_CD
                                                  ) Z
                                            GROUP BY Z.ORDER_COMP_CD WITH ROLLUP
                                          ) W ON V.COMP_CD = W.ORDER_COMP_CD
                ) M
             , ( SELECT 'PART_CNT' AS SUB_TYPE FROM DUAL UNION ALL SELECT 'PART_QTY' AS SUB_TYPE FROM DUAL) N
        WHERE 1 = 1
            <if test="ONLY_DATA_CHK != null and ONLY_DATA_CHK != ''">
            AND M.ORDER_COMP_CD IS NOT NULL     <!-- 가변조건 -->
            </if>
        GROUP BY M.COMP_CD, M.COMP_NM, N.SUB_TYPE
        ORDER BY M.COMP_CD, N.SUB_TYPE
    </select>

    <select id="selectInnerDueDtComplianceRate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.YYYYMM
            , Z.PART_CNT
            , Z.OK_CNT
            , Z.OK_RATIO
            , CASE WHEN IFNULL(Z.OK_RATIO,0) > IFNULL(Z.PREV_OK_RATIO,0) THEN '+'
                   WHEN IFNULL(Z.OK_RATIO,0) <![CDATA[ < ]]> IFNULL(Z.PREV_OK_RATIO,0) THEN '-'
                   ELSE ''
              END AS RATIO_SIGN
            , ABS(IFNULL(Z.OK_RATIO,0) - IFNULL(Z.PREV_OK_RATIO,0)) AS RATIO_GAP
        FROM (  SELECT MAX(CASE WHEN X.RNUM = 1 THEN X.YYYYMM END) AS YYYYMM
                    , MAX(CASE WHEN X.RNUM = 1 THEN Y.PART_CNT END) AS PART_CNT
                    , MAX(CASE WHEN X.RNUM = 1 THEN Y.OK_CNT END) AS OK_CNT
                    , MAX(CASE WHEN X.RNUM = 1 THEN CASE WHEN IFNULL(Y.PART_CNT,0) = 0 THEN 0 ELSE ROUND(Y.OK_CNT / Y.PART_CNT * 100,0) END END) AS OK_RATIO
                    , MAX(CASE WHEN X.RNUM = 2 THEN Y.PART_CNT END) AS PREV_PART_CNT
                    , MAX(CASE WHEN X.RNUM = 2 THEN Y.OK_CNT END) AS PREV_OK_CNT
                    , MAX(CASE WHEN X.RNUM = 2 THEN CASE WHEN IFNULL(Y.PART_CNT,0) = 0 THEN 0 ELSE ROUND(Y.OK_CNT / Y.PART_CNT * 100,0) END END) AS PREV_OK_RATIO
                FROM (  SELECT ROW_NUMBER() OVER(ORDER BY M.YYYYMM DESC) AS RNUM
                            , M.YYYYMM
                        FROM (  SELECT SUBSTRING(DT,1,6) AS YYYYMM
                                FROM jmes.TBL_YYYYMMDD
                                WHERE DT >= DATE_FORMAT(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL -1 MONTH),'%Y%m%d')      <!-- 고정조건 -->
                                    AND DT <![CDATA[ < ]]> DATE_FORMAT(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH),'%Y%m%d')      <!-- 고정조건 -->
                                GROUP BY SUBSTRING(DT,1,6)
                              ) M
                     ) X LEFT OUTER JOIN (  SELECT SUBSTRING(P.WORKING_FINISH_DT,1,6) AS YYYYMM
                                                , SUM(1) AS PART_CNT
                                                , SUM(CASE WHEN P.WORKING_FINISH_DT <![CDATA[ <= ]]> P.INNER_DUE_DT THEN 1 ELSE 0 END) AS OK_CNT
                                            FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                        , DATE_FORMAT(DATE_ADD(B.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                                                        , B.INNER_DUE_DT
                                                    FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                        AND A.DEL_YN = 'N'
                                                        AND B.WORK_TYPE != 'WTP020'
                                                        AND B.INNER_WORK_FINISH_DT >= DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE), INTERVAL -1 MONTH)    <!-- 고정조건 -->
                                                        AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                        AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                                                        </if>
                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                        </if>
                                                  ) P
                                            GROUP BY SUBSTRING(P.WORKING_FINISH_DT,1,6)
                                          ) Y
                                        ON X.YYYYMM = Y.YYYYMM
              ) Z
    </select>

    <select id="selectProcessingPerformance" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.YYYYMM
            , FORMAT(IFNULL(Y.SALES_AMT,0) / 100000000,1) AS SALES_AMT
            , IFNULL(Y.OUTSIDE_CNT,0) AS OUTSIDE_CNT
            , IFNULL(Y.INSIDE_CNT,0) AS INSIDE_CNT
        FROM (  SELECT SUBSTRING(DT,1,6) AS YYYYMM
                FROM jmes.TBL_YYYYMMDD
                WHERE DT LIKE CONCAT(#{YEAR}, #{MONTH},'%')      <!-- 고정조건 -->
                GROUP BY SUBSTRING(DT,1,6)
             ) X LEFT OUTER JOIN (  SELECT SUBSTRING(P.WORKING_FINISH_DT,1,6) AS YYYYMM
                                        , SUM(1) AS PART_CNT
                                        , SUM(CASE WHEN P.OUTSIDE_YN = 'Y' THEN 1 ELSE 0 END) AS OUTSIDE_CNT
                                        , SUM(CASE WHEN P.OUTSIDE_YN = 'Y' THEN 0 ELSE 1 END) AS INSIDE_CNT
                                        , SUM(P.FINAL_AMT) AS SALES_AMT
                                    FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                , DATE_FORMAT(DATE_ADD(B.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                                                , B.OUTSIDE_YN
                                                , jmes.SF_GET_CONTROL_FINAL_AMT(B.CONTROL_SEQ) AS FINAL_AMT
                                            FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                AND A.DEL_YN = 'N'
                                                AND B.WORK_TYPE != 'WTP020'
                                                AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)    <!-- 고정조건 -->
                                                AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                                <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                                                </if>
                                                <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                </if>
                                          ) P
                                    GROUP BY SUBSTRING(P.WORKING_FINISH_DT,1,6)
                                  ) Y
                                ON X.YYYYMM = Y.YYYYMM
    </select>

    <select id="selectMonthlyStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.YYYYMM
            , SUBSTR(X.YYYYMM,5,2) AS MM
            , IFNULL(Y.GOAL_AMT,0) / 100000000 AS GOAL_AMT
            , IFNULL(Z.SALES_AMT,0) / 100000000 AS SALES_AMT
            , IFNULL(Z.OK_RATIO,0) AS OK_RATIO
        FROM (  SELECT SUBSTRING(DT,1,6) AS YYYYMM
                FROM jmes.TBL_YYYYMMDD
                WHERE DT LIKE CONCAT(#{YEAR},'%')      <!-- 고정조건 -->    
                GROUP BY SUBSTRING(DT,1,6)
             ) X LEFT OUTER JOIN (  SELECT YYYYMM, SUM(GOAL_AMT) AS GOAL_AMT
                                    FROM jmes.TBL_PRODUCTION_GOAL
                                    WHERE YYYYMM LIKE CONCAT(#{YEAR},'%')      <!-- 고정조건 -->
                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                        AND WORK_FACTORY = #{WORK_FACTORY}           <!-- 가변조건 -->
                                        </if>
                                    GROUP BY YYYYMM                                
                                  ) Y ON X.YYYYMM = Y.YYYYMM
                 LEFT OUTER JOIN (  SELECT Q.YYYYMM
                                        , Q.PART_CNT
                                        , Q.OK_CNT
                                        , CASE WHEN IFNULL(Q.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Q.OK_CNT,0) / IFNULL(Q.PART_CNT,0) * 100,0) END AS OK_RATIO
                                        , Q.SALES_AMT
                                    FROM (  SELECT SUBSTRING(P.WORKING_FINISH_DT,1,6) AS YYYYMM
                                                , SUM(1) AS PART_CNT    
                                                , SUM(CASE WHEN P.WORKING_FINISH_DT <![CDATA[ <= ]]> P.INNER_DUE_DT THEN 1 ELSE 0 END) AS OK_CNT    
                                                , SUM(P.FINAL_AMT) AS SALES_AMT
                                            FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ                                                
                                                        , DATE_FORMAT(DATE_ADD(B.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT 
                                                        , B.INNER_DUE_DT
                                                        , jmes.SF_GET_CONTROL_FINAL_AMT(B.CONTROL_SEQ) AS FINAL_AMT
                                                    FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                        AND A.DEL_YN = 'N'
                                                        AND B.WORK_TYPE != 'WTP020'                                                                                                
                                                        AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, '01','01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)    <!-- 고정조건 --> 
                                                        AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, '12','01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 --> 
                                                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                        AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                                                        </if>
                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                        </if>
                                                  ) P
                                            GROUP BY SUBSTRING(P.WORKING_FINISH_DT,1,6)
                                          ) Q
                                ) Z ON X.YYYYMM = Z.YYYYMM
        ORDER BY X.YYYYMM
    </select>

    <select id="selectMaterialProductionTableList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.MATERIAL_TYPE
            , CASE WHEN Z.MATERIAL_TYPE IS NULL THEN '합계'
                   WHEN Z.MATERIAL_TYPE = 'MTP999' THEN '기타'
                   ELSE jmes.SF_GET_CODE_NM('1035', Z.MATERIAL_TYPE, #{LOGIN_LOCALE})      <!-- 언어조건 -->
              END AS MATERIAL_TYPE_NM
            , FORMAT(IFNULL(Z.PART_CNT,0),0) AS PART_CNT
            , FORMAT(IFNULL(Z.PART_QTY,0),0) AS PART_QTY
            , CASE WHEN Z.MATERIAL_TYPE IS NULL THEN 100
                   ELSE CASE WHEN IFNULL(Z.TOTAL_PART_QTY,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.PART_QTY,0) / Z.TOTAL_PART_QTY * 100,0) END
              END AS PART_QTY_RATIO
--             , REPLACE(CONCAT(TRUNCATE(IFNULL(Z.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(Z.WORK_TIME,0)%3600)/60,0),'m'),'0h ',space(0)) AS WORK_TIME
            , CASE WHEN TRUNCATE(IFNULL(Z.WORK_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(Z.WORK_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(Z.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(Z.WORK_TIME,0)%3600)/60,0),'m') END AS WORK_TIME
            , CASE WHEN Z.MATERIAL_TYPE IS NULL THEN 100
                   ELSE CASE WHEN IFNULL(Z.TOTAL_WORK_TIME,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.WORK_TIME,0) / Z.TOTAL_WORK_TIME * 100,0) END
              END AS WORK_TIME_RATIO
        FROM (  SELECT X.MATERIAL_TYPE
                    , SUM(X.PART_CNT) AS PART_CNT
                    , SUM(X.PART_QTY) AS PART_QTY
                    , SUM(X.WORK_TIME) AS WORK_TIME
                    , MAX(X.TOTAL_PART_CNT) AS TOTAL_PART_CNT
                    , MAX(X.TOTAL_PART_QTY) AS TOTAL_PART_QTY
                    , MAX(X.TOTAL_WORK_TIME) AS TOTAL_WORK_TIME
                FROM (  SELECT SUBSTRING(P.WORKING_FINISH_DT,1,6) AS YYYYMM
                            , P.MATERIAL_TYPE
                            , SUM(1) AS PART_CNT
                            , SUM(P.PART_QTY) AS PART_QTY
                            , SUM(P.WORK_TIME) AS WORK_TIME
                            , MAX(P.TOTAL_PART_CNT) AS TOTAL_PART_CNT
                            , MAX(P.TOTAL_PART_QTY) AS TOTAL_PART_QTY
                            , MAX(P.TOTAL_WORK_TIME) AS TOTAL_WORK_TIME
                        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                    , DATE_FORMAT(DATE_ADD(B.INNER_WORK_FINISH_DT, INTERVAL -1 * (CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT)) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                                    , CASE WHEN B.MATERIAL_TYPE IN ('MTP010','MTP020','MTP030') THEN B.MATERIAL_TYPE ELSE 'MTP999' END AS MATERIAL_TYPE
                                    , (jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0)) AS PART_QTY
                                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME
                                    , SUM(1) OVER () AS TOTAL_PART_CNT
                                    , SUM(jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ)) OVER () AS TOTAL_PART_QTY
                                    , SUM((SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ)) OVER () AS TOTAL_WORK_TIME
                                FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B
                                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                    AND A.DEL_YN = 'N'
                                    AND B.WORK_TYPE != 'WTP020'
                                    AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)    <!-- 고정조건 -->
                                    AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                                    </if>
                                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                    AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                    </if>
                              ) P
                        GROUP BY SUBSTRING(P.WORKING_FINISH_DT,1,6), P.MATERIAL_TYPE
                      ) X
                GROUP BY X.MATERIAL_TYPE WITH ROLLUP
            ) Z
        ORDER BY Z.MATERIAL_TYPE IS NULL ASC, Z.MATERIAL_TYPE
    </select>

    <select id="selectMaterialRankInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT P.MATERIAL_TYPE
            , FORMAT(CASE WHEN Q.MATERIAL_TYPE IS NULL THEN P.PART_QTY ELSE Q.PART_QTY END,0) AS PART_QTY
            , CASE WHEN Q.MATERIAL_TYPE IS NULL THEN '0h 0m'
                   WHEN TRUNCATE(IFNULL(Q.WORK_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(Q.WORK_TIME,0)%3600)/60,0),'m')
                   ELSE CONCAT(TRUNCATE(IFNULL(Q.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(Q.WORK_TIME,0)%3600)/60,0),'m')
              END AS WORK_TIME
--             , REPLACE(CASE WHEN Q.MATERIAL_TYPE IS NULL THEN '0h 0m' ELSE CONCAT(TRUNCATE(IFNULL(Q.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(Q.WORK_TIME,0)%3600)/60,0),'m') END,'0h ',space(0)) AS WORK_TIME
            , FORMAT(CASE WHEN Q.MATERIAL_TYPE IS NULL THEN P.TOTAL_EC_AMT ELSE Q.TOTAL_EC_AMT END,0) AS TOTAL_EC_AMT
            , FORMAT(CASE WHEN Q.MATERIAL_TYPE IS NULL THEN P.TOTAL_AP_AMT ELSE Q.TOTAL_AP_AMT END,0) AS TOTAL_AP_AMT
            , FORMAT(CASE WHEN Q.MATERIAL_TYPE IS NULL THEN P.MARGIN_RATIO ELSE Q.MARGIN_RATIO END,1) AS MARGIN_RATIO    
        FROM (  SELECT CASE WHEN CODE_CD IN ('MTP010','MTP020','MTP030') THEN CODE_CD ELSE 'MTP999' END AS MATERIAL_TYPE
                    , 0 AS PART_QTY
                    , '0h 0m' AS WORK_TIME
                    , 0 AS TOTAL_EC_AMT
                    , 0 AS TOTAL_AP_AMT
                    , 0 AS MARGIN_RATIO
                FROM TBL_CODE WHERE HIGH_CD = '1035' AND CODE_CD IN ('MTP010','MTP020','MTP030','MTP040')
             ) P LEFT OUTER JOIN (  SELECT Z.MATERIAL_TYPE
                                        , Z.PART_QTY
                                        , Z.WORK_TIME
                                        , Z.TOTAL_EC_AMT
                                        , Z.TOTAL_AP_AMT
                                        , CASE WHEN Z.TOTAL_EC_AMT = 0 THEN 0 ELSE (Z.TOTAL_AP_AMT - Z.TOTAL_EC_AMT) / Z.TOTAL_EC_AMT * 100 END AS MARGIN_RATIO
                                    FROM (  SELECT X.MATERIAL_TYPE
                                                , IFNULL(SUM(X.PART_QTY),0) AS PART_QTY
                                                , CONCAT(TRUNCATE(IFNULL(SUM(X.WORK_TIME),0)/3600,0),'h ',TRUNCATE((IFNULL(SUM(X.WORK_TIME),0)%3600)/60,0),'m') AS WORK_TIME
                                                , TRUNCATE(SUM(IFNULL(X.UNIT_EC_AMT,0) * X.PART_QTY),0) AS TOTAL_EC_AMT
                                                , TRUNCATE(SUM(IFNULL(X.UNIT_AP_AMT,0) * X.PART_QTY),0) AS TOTAL_AP_AMT    
                                            FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                                                        , CASE WHEN B.MATERIAL_TYPE IN ('MTP010','MTP020','MTP030') THEN B.MATERIAL_TYPE ELSE 'MTP999' END AS MATERIAL_TYPE
                                                        , (jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0)) AS PART_QTY
                                                        , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME
                                                        , ( SELECT SUM(IFNULL(N.COST_PER_HOUR,0) * jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ) / 3600 / (jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0))) AS UNIT_EC_AMT
                                                            FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N
                                                            WHERE M.EQUIP_SEQ = N.EQUIP_SEQ
                                                                AND M.CONTROL_SEQ = B.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ        
                                                          ) AS UNIT_EC_AMT
                                                        , CASE WHEN B.WORK_TYPE != 'WTP040' THEN IFNULL((SELECT T.UNIT_FINAL_AMT FROM TBL_ORDER T WHERE T.ORDER_SEQ = D.ORDER_SEQ),0) - (IFNULL(B.UNIT_MATERIAL_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT, 0) + IFNULL(B.UNIT_SURFACE_AMT, 0) + IFNULL(B.UNIT_PROCESS_AMT, 0) + IFNULL(B.UNIT_ETC_AMT, 0))
                                                               ELSE (IFNULL(D.UNIT_FINAL_AMT, 0) - (IFNULL(B.UNIT_MATERIAL_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT, 0) + IFNULL(B.UNIT_SURFACE_AMT, 0) + IFNULL(B.UNIT_PROCESS_AMT, 0) + IFNULL(B.UNIT_ETC_AMT, 0)))
                                                          END AS UNIT_AP_AMT
--                                                         , (IFNULL(D.UNIT_FINAL_AMT,0) - (IFNULL(B.UNIT_MATERIAL_AMT,0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT,0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT,0) + IFNULL(B.UNIT_SURFACE_AMT,0) + IFNULL(B.UNIT_PROCESS_AMT,0) + IFNULL(B.UNIT_ETC_AMT,0))) AS UNIT_AP_AMT
                                                        , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                                        , C.INSPECT_GRADE
                                                    FROM jmes.TBL_CONTROL A
                                                        , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                                        , jmes.TBL_CONTROL_PART_ORDER_MAIN D
                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                        AND A.CONTROL_SEQ = D.CONTROL_SEQ
                                                        AND A.DEL_YN = 'N'
                                                        AND B.WORK_TYPE != 'WTP020'                        
                                                        AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)    <!-- 고정조건 -->
                                                        AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                        AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                                                        </if>
                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                        </if>
<!--                                                        &#45;&#45; 규격 가변조건 START &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;-->
<!--                                                        &#45;&#45; SIZE_TYPE = 'XYZ010'        &lt;!&ndash; 가변조건 &ndash;&gt;-->
<!--                                                        AND B.SIZE_TYPE = 'XYZ010'      -->
<!--                                                        AND SIZE_W >= 1-->
<!--                                                        AND SIZE_W <![CDATA[ <= ]]> 100-->
<!--                                                        AND SIZE_H >= 1-->
<!--                                                        AND SIZE_H <![CDATA[ <= ]]> 100-->
<!--                                                        AND SIZE_T >= 1-->
<!--                                                        AND SIZE_T <![CDATA[ <= ]]> 100-->
<!--                                                        -->
<!--                                                       &#45;&#45; SIZE_TYPE IN ('XYZ020','XYZ030','XYZ040','XYZ050')        &lt;!&ndash; 가변조건 &ndash;&gt;-->
<!--                                                       &#45;&#45; AND B.SIZE_TYPE = 'XYZ020'      &#45;&#45; 'XYZ030','XYZ040','XYZ050'-->
<!--                                                       &#45;&#45; AND SIZE_D >= 1-->
<!--                                                       &#45;&#45; AND SIZE_D <![CDATA[ <= ]]> 100-->
<!--                                                       &#45;&#45; AND SIZE_L >= 1-->
<!--                                                       &#45;&#45; AND SIZE_L <![CDATA[ <= ]]> 100                    -->
<!--                                                        &#45;&#45; -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;-->
<!--                                                        &#45;&#45; 규격 가변조건 END &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;-->
                                                 ) X
                                            WHERE INSPECT_RNUM = 1
                                                <if test="YY1 != null and YY1 != ''">
                                                AND X.PART_QTY >= ${YY1}     <!-- 가변조건 -->
                                                </if>
                                                <if test="YY2 != null and YY2 != ''">
                                                AND X.PART_QTY <![CDATA[ <= ]]> ${YY2}     <!-- 가변조건 -->
                                                </if>
                                                <if test="HIDDEN_INSPECT_GRADE != null and HIDDEN_INSPECT_GRADE != ''">
                                                AND X.INSPECT_GRADE IN (${HIDDEN_INSPECT_GRADE})   <!-- 가변조건 -->
                                                </if>
                                            GROUP BY X.MATERIAL_TYPE
                                        ) Z
                                 ) Q ON P.MATERIAL_TYPE = Q.MATERIAL_TYPE                         
        ORDER BY P.MATERIAL_TYPE
    </select>

    <select id="selectMaterialRankList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ    
            , CASE WHEN X.PART_NUM IS NULL THEN X.CONTROL_NUM ELSE CONCAT(X.CONTROL_NUM, ' #', X.PART_NUM) END AS CONTROL_NUM
            , X.PART_QTY
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME,0)%3600)/60,0),'m') END AS WORK_TIME
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME_NC,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME_NC,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME_NC,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME_NC,0)%3600)/60,0),'m') END AS WORK_TIME_NC
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME_MILLING,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME_MILLING,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME_MILLING,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME_MILLING,0)%3600)/60,0),'m') END AS WORK_TIME_MILLING
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME_GRINDING,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME_GRINDING,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME_GRINDING,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME_GRINDING,0)%3600)/60,0),'m') END AS WORK_TIME_GRINDING
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME_TURNNING,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME_TURNNING,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME_TURNNING,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME_TURNNING,0)%3600)/60,0),'m') END AS WORK_TIME_TURNNING
            , X.UNIT_EC_AMT, FORMAT(X.UNIT_EC_AMT,0) AS UNIT_EC_AMT_FMT
            , X.UNIT_AP_AMT, FORMAT(X.UNIT_AP_AMT,0) AS UNIT_AP_AMT_FMT
            , FORMAT(CASE WHEN IFNULL(X.UNIT_EC_AMT,0) = 0 THEN NULL ELSE (IFNULL(X.UNIT_AP_AMT,0) - X.UNIT_EC_AMT) / X.UNIT_EC_AMT * 100 END,1) AS MARGIN_RATIO
            , X.SIZE_TXT
            , jmes.SF_GET_CODE_NM('1027',X.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM     -- 언어조건
            , jmes.SF_GET_CODE_NM('1040',X.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM
            , CASE WHEN X.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020',X.INSPECT_RESULT,#{LOGIN_LOCALE}) ELSE jmes.SF_GET_CODE_NM('1019',X.INSPECT_RESULT,#{LOGIN_LOCALE}) END AS INSPECT_RESULT_NM
            , jmes.SF_GET_CODE_NM('1032',X.ERROR_REASON,#{LOGIN_LOCALE}) AS ERROR_REASON_NM
            , jmes.SF_GET_CODE_NM('1025',X.ERROR_ACTION,#{LOGIN_LOCALE}) AS ERROR_ACTION_NM    
            , ( SELECT jmes.SF_GET_USER_NM(B.WORK_USER_ID)
                FROM jmes.TBL_CAM A, jmes.TBL_CAM_DETAIL B
                WHERE A.CAM_SEQ = B.CAM_SEQ
                    AND A.CONTROL_SEQ = X.CONTROL_SEQ
                    AND A.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                ORDER BY B.CAM_SEQ DESC, B.SEQ DESC    
                LIMIT 1) AS CAM_USER_NM
<!--             , (SELECT M.FILE_PATH FROM jmes.TBL_FILE M WHERE M.GFILE_SEQ = X.IMG_GFILE_SEQ) AS FILE_PATH -->
            , X.IMG_GFILE_SEQ
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , B.PART_NUM, A.CONTROL_NUM, B.SIZE_TXT, B.MATERIAL_DETAIL, B.IMG_GFILE_SEQ
                    , (jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0)) AS PART_QTY
                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME
                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N WHERE M.EQUIP_SEQ = N.EQUIP_SEQ AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND N.PROCESS_TYPE = 'MPR010') AS WORK_TIME_NC
                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N WHERE M.EQUIP_SEQ = N.EQUIP_SEQ AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND N.PROCESS_TYPE = 'MPR020') AS WORK_TIME_MILLING
                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N WHERE M.EQUIP_SEQ = N.EQUIP_SEQ AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND N.PROCESS_TYPE = 'MPR030') AS WORK_TIME_GRINDING
                    , (SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N WHERE M.EQUIP_SEQ = N.EQUIP_SEQ AND M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND N.PROCESS_TYPE = 'MPR040') AS WORK_TIME_TURNNING
                    , ( SELECT TRUNCATE(SUM(IFNULL(N.COST_PER_HOUR,0) * jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ) / 3600 / (jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) + IFNULL(B.ADDITIONAL_QTY,0))),0)
                        FROM jmes.TBL_MCT_WORK M, jmes.TBL_EQUIP N
                        WHERE M.EQUIP_SEQ = N.EQUIP_SEQ
                            AND M.CONTROL_SEQ = B.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ        
                      ) AS UNIT_EC_AMT
                    , CASE WHEN B.WORK_TYPE != 'WTP040' THEN IFNULL((SELECT T.UNIT_FINAL_AMT FROM TBL_ORDER T WHERE T.ORDER_SEQ = D.ORDER_SEQ),0) - (IFNULL(B.UNIT_MATERIAL_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT, 0) + IFNULL(B.UNIT_SURFACE_AMT, 0) + IFNULL(B.UNIT_PROCESS_AMT, 0) + IFNULL(B.UNIT_ETC_AMT, 0))
                           ELSE (IFNULL(D.UNIT_FINAL_AMT, 0) - (IFNULL(B.UNIT_MATERIAL_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT, 0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT, 0) + IFNULL(B.UNIT_SURFACE_AMT, 0) + IFNULL(B.UNIT_PROCESS_AMT, 0) + IFNULL(B.UNIT_ETC_AMT, 0)))
                      END AS UNIT_AP_AMT
--                     , (IFNULL(D.UNIT_FINAL_AMT,0) - (IFNULL(B.UNIT_MATERIAL_AMT,0) + IFNULL(B.UNIT_MATERIAL_FINISH_GRIND_AMT,0) + IFNULL(B.UNIT_MATERIAL_FINISH_HEAT_AMT,0) + IFNULL(B.UNIT_SURFACE_AMT,0) + IFNULL(B.UNIT_PROCESS_AMT,0) + IFNULL(B.UNIT_ETC_AMT,0))) AS UNIT_AP_AMT
                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                    , C.INSPECT_GRADE
                    , C.INSPECT_RESULT
                    , C.ERROR_REASON
                    , C.ERROR_ACTION
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                    , jmes.TBL_CONTROL_PART_ORDER_MAIN D
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND A.CONTROL_SEQ = D.CONTROL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'            
                    <choose>
                        <when test="FLAG == 1">
                            AND B.MATERIAL_TYPE = #{MATERIAL_TYPE}  <!-- 가변조건 -->
                        </when>
                        <otherwise>
                            AND B.MATERIAL_TYPE NOT IN (${MATERIAL_TYPE})    <!-- ETC -->
                        </otherwise>
                    </choose>
                    AND B.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)    <!-- 고정조건 -->
                    AND B.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1',#{LOGIN_LOCALE}),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND A.ORDER_COMP_CD = #{ORDER_COMP_CD}   <!-- 가변조건 -->
                    </if>
                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                    AND B.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                    </if>
                    <choose>
                        <when test="SIZE_TYPE == 'XYZ010'">
                            <if test="SIZE_W_F != null and SIZE_W_F != ''">
                                AND B.SIZE_W >= #{SIZE_W_F}
                            </if>
                            <if test="SIZE_W_T != null and SIZE_W_T != ''">
                                AND B.SIZE_W <![CDATA[ <= ]]> #{SIZE_W_T}
                            </if>
                            <if test="SIZE_H_F != null and SIZE_H_F != ''">
                                AND B.SIZE_H >= #{SIZE_H_F}
                            </if>
                            <if test="SIZE_H_T != null and SIZE_H_T != ''">
                                AND B.SIZE_H <![CDATA[ <= ]]> #{SIZE_H_T}
                            </if>
                            <if test="SIZE_T_F != null and SIZE_T_F != ''">
                                AND B.SIZE_T >= #{SIZE_T_F}
                            </if>
                            <if test="SIZE_T_T != null and SIZE_T_T != ''">
                                AND B.SIZE_T <![CDATA[ <= ]]> #{SIZE_T_T}
                            </if>
                        </when>
                        <when test="SIZE_TYPE == 'XYZ020' or SIZE_TYPE == 'XYZ030' or SIZE_TYPE == 'XYZ040' or SIZE_TYPE == 'XYZ050'">
                            <if test="SIZE_D_F != null and SIZE_D_F != ''">
                                AND B.SIZE_D >= #{SIZE_D_F}
                            </if>
                            <if test="SIZE_D_T != null and SIZE_D_T != ''">
                                AND B.SIZE_D <![CDATA[ <= ]]> #{SIZE_D_T}
                            </if>
                            <if test="SIZE_L_F != null and SIZE_L_F != ''">
                                AND B.SIZE_L >= #{SIZE_L_F}
                            </if>
                            <if test="SIZE_L_T != null and SIZE_L_T != ''">
                                AND B.SIZE_L <![CDATA[ <= ]]> #{SIZE_L_T}
                            </if>
                        </when>
                    </choose>
             ) X
        WHERE INSPECT_RNUM = 1
            <if test="YY1 != null and YY1 != ''">
            AND X.PART_QTY >= ${YY1}     <!-- 가변조건 -->
            </if>
            <if test="YY2 != null and YY2 != ''">
            AND X.PART_QTY <![CDATA[ <= ]]> ${YY2}     <!-- 가변조건 -->
            </if>
            <if test="HIDDEN_INSPECT_GRADE != null and HIDDEN_INSPECT_GRADE != ''">
            AND X.INSPECT_GRADE IN (${HIDDEN_INSPECT_GRADE})   <!-- 가변조건 -->
            </if>
        ORDER BY ${ANALYSIS_TARGET} ${SORT}, X.CONTROL_SEQ DESC
        LIMIT 20
    </select>

    <select id="selectProcessingRecordByDeviceList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER(ORDER BY A.MCT_WORK_SEQ) AS RNUM
            , B.EQUIP_NM
            , jmes.SF_GET_USER_NM(A.WORK_USER_ID) AS WORK_USER_NM
            , A.FINISH_QTY
            , CASE WHEN A.ERROR_QTY = 0 THEN NULL ELSE A.ERROR_QTY END AS ERROR_QTY
            , CONCAT(TRUNCATE(IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)/3600,0),'h ',TRUNCATE((IFNULL(jmes.SF_GET_DRAWING_WORK_TIME('WORK',A.MCT_WORK_SEQ),0)%3600)/60,0),'m') AS WORK_TIME
        FROM jmes.TBL_MCT_WORK A, jmes.TBL_EQUIP B
        WHERE A.EQUIP_SEQ = B.EQUIP_SEQ
            AND A.CONTROL_SEQ = #{CONTROL_SEQ}          <!-- 고정조건 -->
            AND A.CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}   <!-- 고정조건 -->
            AND A.DEL_YN = 'N'
            AND A.WORK_FINISH_DT IS NOT NULL
        ORDER BY A.MCT_WORK_SEQ
        LIMIT 6
    </select>

    <select id="selectDailyActualOperateRate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT IFNULL(ROUND(SUM(A.WORK_TIME) / (24 * 60 * 60),0),0) AS REAL_RATIO
        FROM jmes.TBL_BATCH_MCT_WORK A
        WHERE A.BATCH_DT = DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
            AND A.WORK_FACTORY = #{WORK_FACTORY}
            </if>
            <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
            AND A.FACTORY_AREA = #{FACTORY_AREA}
            </if>
            <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
            AND A.PROCESS_TYPE = #{PROCESS_TYPE}
            </if>
            <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
            AND A.EQUIP_SEQ = #{EQUIP_SEQ}
            </if>
    </select>

    <select id="selectDailyOperateRateRank5" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.EQUIP_SEQ
            , (SELECT M.EQUIP_NM FROM jmes.TBL_EQUIP M WHERE M.EQUIP_SEQ = X.EQUIP_SEQ) AS EQUIP_NM
            , ROUND(X.ABS_RATIO,0) AS ABS_RATIO
            , ROUND(X.REAL_RATIO,0) AS REAL_RATIO
        FROM (  SELECT A.EQUIP_SEQ
                    , IFNULL(A.WORK_TIME,0) AS WORK_TIME
                    , IFNULL(A.DUTY_TIME,0) AS DUTY_TIME
                    , 24 * 60 * 60 AS DAY_TIME
                    , IFNULL(A.WORK_TIME,0) / (24 * 60 * 60) * 100 AS ABS_RATIO
                    , CASE WHEN IFNULL(A.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(A.WORK_TIME,0) / A.DUTY_TIME * 100 END AS REAL_RATIO
                FROM jmes.TBL_BATCH_MCT_WORK A
                WHERE A.BATCH_DT = DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                    AND A.WORK_FACTORY = #{WORK_FACTORY}
                    </if>
                    <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                    AND A.FACTORY_AREA = #{FACTORY_AREA}
                    </if>
                    <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                    AND A.PROCESS_TYPE = #{PROCESS_TYPE}
                    </if>
                    <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                    AND A.EQUIP_SEQ = #{EQUIP_SEQ}
                    </if>
             ) X
        ORDER BY (X.ABS_RATIO + X.REAL_RATIO) DESC
        LIMIT 5
    </select>

    <select id="selectMonthlyOperateRateTrend" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.DATA_TYPE, X.DATA_TYPE_NM
            , MAX(CASE WHEN X.MM = '01' THEN X.DATA_VALUE END) AS DATA_VALUE_01
            , MAX(CASE WHEN X.MM = '02' THEN X.DATA_VALUE END) AS DATA_VALUE_02
            , MAX(CASE WHEN X.MM = '03' THEN X.DATA_VALUE END) AS DATA_VALUE_03
            , MAX(CASE WHEN X.MM = '04' THEN X.DATA_VALUE END) AS DATA_VALUE_04
            , MAX(CASE WHEN X.MM = '05' THEN X.DATA_VALUE END) AS DATA_VALUE_05
            , MAX(CASE WHEN X.MM = '06' THEN X.DATA_VALUE END) AS DATA_VALUE_06
            , MAX(CASE WHEN X.MM = '07' THEN X.DATA_VALUE END) AS DATA_VALUE_07
            , MAX(CASE WHEN X.MM = '08' THEN X.DATA_VALUE END) AS DATA_VALUE_08
            , MAX(CASE WHEN X.MM = '09' THEN X.DATA_VALUE END) AS DATA_VALUE_09
            , MAX(CASE WHEN X.MM = '10' THEN X.DATA_VALUE END) AS DATA_VALUE_10
            , MAX(CASE WHEN X.MM = '11' THEN X.DATA_VALUE END) AS DATA_VALUE_11
            , MAX(CASE WHEN X.MM = '12' THEN X.DATA_VALUE END) AS DATA_VALUE_12
        FROM (  SELECT A.DATA_TYPE
                    , A.DATA_TYPE_NM
                    , A.MM
                    , CASE WHEN A.DATA_TYPE = '1' THEN ROUND(B.ABS_MM_TIME / 60 / 60,0)
                           WHEN A.DATA_TYPE = '2' THEN ROUND(B.DUTY_TIME / 60 / 60,0)
                           WHEN A.DATA_TYPE = '3' THEN ROUND(B.WORK_TIME / 60 / 60,0)
                           WHEN A.DATA_TYPE = '4' THEN ROUND(IFNULL(B.WORK_TIME,0) / B.ABS_MM_TIME * 100,0)
                           WHEN A.DATA_TYPE = '5' THEN ROUND(CASE WHEN IFNULL(B.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(B.WORK_TIME,0) / B.DUTY_TIME * 100 END,0)
                      END AS DATA_VALUE
                FROM (
                        SELECT Q.DATA_TYPE, Q.DATA_TYPE_NM
                            , P.MM
                        FROM (  SELECT M.MM
                                FROM jmes.TBL_YYYYMMDD M
                                WHERE M.DT LIKE CONCAT(SUBSTRING(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),1,4),'%')
                                GROUP BY M.MM
                              ) P
                            , ( SELECT '1' AS DATA_TYPE, '24시간' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '2' AS DATA_TYPE, '근무시간' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '3' AS DATA_TYPE, '가동시간' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '4' AS DATA_TYPE, '절대가동률' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '5' AS DATA_TYPE, '실가동률' AS DATA_TYPE_NM FROM DUAL
                               ) Q
                     ) A
                    LEFT OUTER JOIN (   SELECT SUBSTRING(M.BATCH_DT,5,2) AS MM
                                            , SUM(M.WORK_TIME) AS WORK_TIME
                                            , SUM(M.DUTY_TIME) AS DUTY_TIME
                                            , SUM(24 * 60 * 60) AS ABS_MM_TIME
                                        FROM jmes.TBL_BATCH_MCT_WORK M
                                        WHERE M.BATCH_DT LIKE CONCAT(SUBSTRING(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),1,4),'%')
                                            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                            AND M.WORK_FACTORY = #{WORK_FACTORY}
                                            </if>
                                            <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                                            AND M.FACTORY_AREA = #{FACTORY_AREA}
                                            </if>
                                            <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                                            AND M.PROCESS_TYPE = #{PROCESS_TYPE}
                                            </if>
                                            <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                                            AND M.EQUIP_SEQ = #{EQUIP_SEQ}
                                            </if>
                                        GROUP BY SUBSTRING(M.BATCH_DT,5,2)
                                    ) B ON A.MM = B.MM
            ) X
        GROUP BY X.DATA_TYPE, X.DATA_TYPE_NM
        ORDER BY X.DATA_TYPE
    </select>

    <select id="selectDailyMCTOperateRateTrendSevenDays" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.DATA_TYPE, X.DATA_TYPE_NM
            , MAX(CASE WHEN X.RNUM = 1 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_1
            , MAX(CASE WHEN X.RNUM = 2 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_2
            , MAX(CASE WHEN X.RNUM = 3 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_3
            , MAX(CASE WHEN X.RNUM = 4 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_4
            , MAX(CASE WHEN X.RNUM = 5 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_5
            , MAX(CASE WHEN X.RNUM = 6 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_6
            , MAX(CASE WHEN X.RNUM = 7 THEN CASE WHEN X.DATA_TYPE = '1' THEN X.ABS_RATIO ELSE X.REAL_RATIO END END) DATA_VALUE_7
        FROM (  SELECT A.DATA_TYPE, A.DATA_TYPE_NM, A.RNUM, A.DT
                    , IFNULL(ROUND(IFNULL(B.WORK_TIME,0) / B.ABS_TIME * 100,0),0) AS ABS_RATIO
                    , IFNULL(ROUND(CASE WHEN IFNULL(B.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(B.WORK_TIME,0) / B.DUTY_TIME * 100 END,0),0) AS REAL_RATIO
                FROM (  SELECT ROW_NUMBER() OVER (PARTITION BY N.DATA_TYPE ORDER BY M.DT) AS RNUM
                            , M.DT
                            , N.DATA_TYPE, N.DATA_TYPE_NM
                        FROM jmes.TBL_YYYYMMDD M
                            , ( SELECT '1' AS DATA_TYPE, '절대가동률' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '2' AS DATA_TYPE, '실가동률' AS DATA_TYPE_NM FROM DUAL
                              ) N
                        WHERE M.DT BETWEEN DATE_FORMAT(DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),'%Y%m%d'), INTERVAL -6 DAY),'%Y%m%d') AND DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                     ) A LEFT OUTER JOIN (  SELECT M.BATCH_DT
                                                , SUM(M.WORK_TIME) AS WORK_TIME
                                                , SUM(M.DUTY_TIME) AS DUTY_TIME
                                                , SUM(24 * 60 * 60) AS ABS_TIME
                                            FROM jmes.TBL_BATCH_MCT_WORK M
                                            WHERE M.BATCH_DT BETWEEN DATE_FORMAT(DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),'%Y%m%d'), INTERVAL -6 DAY),'%Y%m%d') AND DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                                                <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                AND M.WORK_FACTORY = #{WORK_FACTORY}
                                                </if>
                                                <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                                                AND M.FACTORY_AREA = #{FACTORY_AREA}
                                                </if>
                                                <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                                                AND M.PROCESS_TYPE = #{PROCESS_TYPE}
                                                </if>
                                                <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                                                AND M.EQUIP_SEQ = #{EQUIP_SEQ}
                                                </if>
                                            GROUP BY M.BATCH_DT
                                         ) B ON A.DT = B.BATCH_DT
              ) X
        GROUP BY X.DATA_TYPE, X.DATA_TYPE_NM
    </select>

    <select id="selectDailyMCTOperateRateTrendSevenDaysLabels" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT jmes.SF_GET_DATE_F(A.DT, '', '') AS DT
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT > DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),'%Y%m%d'), INTERVAL -1 WEEK)
            AND A.DT <![CDATA[ <= ]]> DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
        ORDER BY A.DT
    </select>

    <select id="selectWeeklyMctOperateRateEightWeeks" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.DATA_TYPE, Z.DATA_TYPE_NM
            , MAX(CASE WHEN Z.WEEK_SEQ = 1 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_1
            , MAX(CASE WHEN Z.WEEK_SEQ = 2 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_2
            , MAX(CASE WHEN Z.WEEK_SEQ = 3 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_3
            , MAX(CASE WHEN Z.WEEK_SEQ = 4 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_4
            , MAX(CASE WHEN Z.WEEK_SEQ = 5 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_5
            , MAX(CASE WHEN Z.WEEK_SEQ = 6 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_6
            , MAX(CASE WHEN Z.WEEK_SEQ = 7 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_7
            , MAX(CASE WHEN Z.WEEK_SEQ = 8 THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.ABS_RATIO ELSE Z.REAL_RATIO END END) DATA_VALUE_8
        FROM (  SELECT X.DATA_TYPE, X.DATA_TYPE_NM, X.WEEK_SEQ
                    , IFNULL(ROUND(IFNULL(X.WORK_TIME,0) / X.ABS_TIME * 100,0),0) AS ABS_RATIO
                    , IFNULL(ROUND(CASE WHEN IFNULL(X.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(X.WORK_TIME,0) / X.DUTY_TIME * 100 END,0),0) AS REAL_RATIO
                FROM (  SELECT A.DATA_TYPE, A.DATA_TYPE_NM
                            , (TRUNCATE((A.RNUM -1)/7,0)+1) AS WEEK_SEQ
                            , SUM(B.WORK_TIME) AS WORK_TIME
                            , SUM(B.DUTY_TIME) AS DUTY_TIME
                            , SUM(B.ABS_TIME) AS ABS_TIME
                        FROM (  SELECT M.DT
                                    , ROW_NUMBER() OVER (PARTITION BY N.DATA_TYPE ORDER BY M.DT) AS RNUM
                                    , N.DATA_TYPE, N.DATA_TYPE_NM
                                FROM jmes.TBL_YYYYMMDD M
                                    , ( SELECT '1' AS DATA_TYPE, '절대가동률' AS DATA_TYPE_NM FROM DUAL
                                        UNION ALL
                                        SELECT '2' AS DATA_TYPE, '실가동률' AS DATA_TYPE_NM FROM DUAL
                                      ) N
                                WHERE M.DT >=   (   SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(MIN(M.DT),'%Y%m%d'), INTERVAL -55 DAY),'%Y%m%d') AS START_DT
                                                    FROM jmes.TBL_YYYYMMDD M
                                                    WHERE M.DT >= DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                                                        AND DAYOFWEEK(STR_TO_DATE(M.DT,'%Y%m%d')) = '1'
                                                )
                                    AND M.DT <![CDATA[ <= ]]> (   SELECT MIN(M.DT) AS END_DT
                                                    FROM jmes.TBL_YYYYMMDD M
                                                    WHERE M.DT >= DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                                                        AND DAYOFWEEK(STR_TO_DATE(M.DT,'%Y%m%d')) = '1'
                                                )
                             ) A LEFT OUTER JOIN (  SELECT M.BATCH_DT
                                                        , SUM(M.WORK_TIME) AS WORK_TIME
                                                        , SUM(M.DUTY_TIME) AS DUTY_TIME
                                                        , SUM(24 * 60 * 60) AS ABS_TIME
                                                    FROM jmes.TBL_BATCH_MCT_WORK M
                                                    WHERE M.BATCH_DT BETWEEN DATE_FORMAT(DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),'%Y%m%d'), INTERVAL -3 MONTH),'%Y%m%d') AND DATE_FORMAT(DATE_ADD(STR_TO_DATE(DATE_FORMAT(#{BATCH_DT}, '%Y%m%d'),'%Y%m%d'), INTERVAL 1 WEEK),'%Y%m%d')
                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND M.WORK_FACTORY = #{WORK_FACTORY}
                                                        </if>
                                                        <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                                                        AND M.FACTORY_AREA = #{FACTORY_AREA}
                                                        </if>
                                                        <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                                                        AND M.PROCESS_TYPE = #{PROCESS_TYPE}
                                                        </if>
                                                        <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                                                        AND M.EQUIP_SEQ = #{EQUIP_SEQ}
                                                        </if>
                                                    GROUP BY M.BATCH_DT
                                                 ) B ON A.DT = B.BATCH_DT
                        GROUP BY A.DATA_TYPE, A.DATA_TYPE_NM, (TRUNCATE((A.RNUM -1)/7,0)+1)
                    ) X
            ) Z
        GROUP BY Z.DATA_TYPE, Z.DATA_TYPE_NM
    </select>

    <select id="selectMctExecuteBoardGridList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.EQUIP_SEQ
            , SF_GET_CODE_NM('1014', X.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
            , jmes.SF_GET_CODE_NM('1005', X.FACTORY_AREA, #{LOGIN_LOCALE}) AS FACTORY_AREA_NM
            , jmes.SF_GET_CODE_NM('1010', X.PROCESS_TYPE, #{LOGIN_LOCALE}) AS PROCESS_TYPE_NM
            , (SELECT M.EQUIP_NM FROM jmes.TBL_EQUIP M WHERE M.EQUIP_SEQ = X.EQUIP_SEQ) AS EQUIP_NM
            , X.EQUIP_SIZE
            , CASE WHEN TRUNCATE(IFNULL(X.DUTY_TIME,0)/3600,0) <![CDATA[ < ]]>  1 THEN CONCAT(TRUNCATE((IFNULL(X.DUTY_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.DUTY_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.DUTY_TIME,0)%3600)/60,0),'m') END AS DUTY_TIME
            , CASE WHEN TRUNCATE(IFNULL(X.WORK_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.WORK_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME,0)%3600)/60,0),'m') END AS WORK_TIME
            , CASE WHEN TRUNCATE(IFNULL(X.PAUSE_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.PAUSE_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.PAUSE_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.PAUSE_TIME,0)%3600)/60,0),'m') END AS PAUSE_TIME
            , CASE WHEN TRUNCATE(IFNULL(X.REPAIR_TIME,0)/3600,0) <![CDATA[ < ]]> 1 THEN CONCAT(TRUNCATE((IFNULL(X.REPAIR_TIME,0)%3600)/60,0),'m') ELSE CONCAT(TRUNCATE(IFNULL(X.REPAIR_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.REPAIR_TIME,0)%3600)/60,0),'m') END AS REPAIR_TIME
            , IFNULL(ROUND(CASE WHEN IFNULL(X.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(X.WORK_TIME,0) / X.DUTY_TIME * 100 END,0),0) AS REAL_RATIO
--             , REPLACE(CONCAT(TRUNCATE(IFNULL(X.WORK_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.WORK_TIME,0)%3600)/60,0),'m'),'0h ',space(0)) AS WORK_TIME
--             , REPLACE(CONCAT(TRUNCATE(IFNULL(X.PAUSE_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.PAUSE_TIME,0)%3600)/60,0),'m'),'0h ',space(0)) AS PAUSE_TIME
--             , REPLACE(CONCAT(TRUNCATE(IFNULL(X.REPAIR_TIME,0)/3600,0),'h ',TRUNCATE((IFNULL(X.REPAIR_TIME,0)%3600)/60,0),'m'),'0h ',space(0)) AS REPAIR_TIME
--             , IFNULL(ROUND(CASE WHEN IFNULL(X.DUTY_TIME,0) = 0 THEN 0 ELSE IFNULL(X.WORK_TIME,0) / X.DUTY_TIME * 100 END,0),0) AS REAL_RATIO
            , Y.*
        FROM jmes.TBL_BATCH_MCT_WORK X
            , ( SELECT A.EQUIP_SEQ
                    , MAX(CASE WHEN B.HHMM = '0800' THEN B.TIME_STATUS END) AS STATUS_0800
                    , MAX(CASE WHEN B.HHMM = '0830' THEN B.TIME_STATUS END) AS STATUS_0830
                    , MAX(CASE WHEN B.HHMM = '0900' THEN B.TIME_STATUS END) AS STATUS_0900
                    , MAX(CASE WHEN B.HHMM = '0930' THEN B.TIME_STATUS END) AS STATUS_0930
                    , MAX(CASE WHEN B.HHMM = '1000' THEN B.TIME_STATUS END) AS STATUS_1000
                    , MAX(CASE WHEN B.HHMM = '1030' THEN B.TIME_STATUS END) AS STATUS_1030
                    , MAX(CASE WHEN B.HHMM = '1100' THEN B.TIME_STATUS END) AS STATUS_1100
                    , MAX(CASE WHEN B.HHMM = '1130' THEN B.TIME_STATUS END) AS STATUS_1130
                    , MAX(CASE WHEN B.HHMM = '1200' THEN B.TIME_STATUS END) AS STATUS_1200
                    , MAX(CASE WHEN B.HHMM = '1230' THEN B.TIME_STATUS END) AS STATUS_1230
                    , MAX(CASE WHEN B.HHMM = '1300' THEN B.TIME_STATUS END) AS STATUS_1300
                    , MAX(CASE WHEN B.HHMM = '1330' THEN B.TIME_STATUS END) AS STATUS_1330
                    , MAX(CASE WHEN B.HHMM = '1400' THEN B.TIME_STATUS END) AS STATUS_1400
                    , MAX(CASE WHEN B.HHMM = '1430' THEN B.TIME_STATUS END) AS STATUS_1430
                    , MAX(CASE WHEN B.HHMM = '1500' THEN B.TIME_STATUS END) AS STATUS_1500
                    , MAX(CASE WHEN B.HHMM = '1530' THEN B.TIME_STATUS END) AS STATUS_1530
                    , MAX(CASE WHEN B.HHMM = '1600' THEN B.TIME_STATUS END) AS STATUS_1600
                    , MAX(CASE WHEN B.HHMM = '1630' THEN B.TIME_STATUS END) AS STATUS_1630
                    , MAX(CASE WHEN B.HHMM = '1700' THEN B.TIME_STATUS END) AS STATUS_1700
                    , MAX(CASE WHEN B.HHMM = '1730' THEN B.TIME_STATUS END) AS STATUS_1730
                    , MAX(CASE WHEN B.HHMM = '1800' THEN B.TIME_STATUS END) AS STATUS_1800
                    , MAX(CASE WHEN B.HHMM = '1830' THEN B.TIME_STATUS END) AS STATUS_1830
                    , MAX(CASE WHEN B.HHMM = '1900' THEN B.TIME_STATUS END) AS STATUS_1900
                    , MAX(CASE WHEN B.HHMM = '1930' THEN B.TIME_STATUS END) AS STATUS_1930
                    , MAX(CASE WHEN B.HHMM = '2000' THEN B.TIME_STATUS END) AS STATUS_2000
                    , MAX(CASE WHEN B.HHMM = '2030' THEN B.TIME_STATUS END) AS STATUS_2030
                    , MAX(CASE WHEN B.HHMM = '2100' THEN B.TIME_STATUS END) AS STATUS_2100
                    , MAX(CASE WHEN B.HHMM = '2130' THEN B.TIME_STATUS END) AS STATUS_2130
                    , MAX(CASE WHEN B.HHMM = '2200' THEN B.TIME_STATUS END) AS STATUS_2200
                    , MAX(CASE WHEN B.HHMM = '2230' THEN B.TIME_STATUS END) AS STATUS_2230
                    , MAX(CASE WHEN B.HHMM = '2300' THEN B.TIME_STATUS END) AS STATUS_2300
                    , MAX(CASE WHEN B.HHMM = '2330' THEN B.TIME_STATUS END) AS STATUS_2330
                    , MAX(CASE WHEN B.HHMM = '0000' THEN B.TIME_STATUS END) AS STATUS_0000
                    , MAX(CASE WHEN B.HHMM = '0030' THEN B.TIME_STATUS END) AS STATUS_0030
                    , MAX(CASE WHEN B.HHMM = '0100' THEN B.TIME_STATUS END) AS STATUS_0100
                    , MAX(CASE WHEN B.HHMM = '0130' THEN B.TIME_STATUS END) AS STATUS_0130
                    , MAX(CASE WHEN B.HHMM = '0200' THEN B.TIME_STATUS END) AS STATUS_0200
                    , MAX(CASE WHEN B.HHMM = '0230' THEN B.TIME_STATUS END) AS STATUS_0230
                    , MAX(CASE WHEN B.HHMM = '0300' THEN B.TIME_STATUS END) AS STATUS_0300
                    , MAX(CASE WHEN B.HHMM = '0330' THEN B.TIME_STATUS END) AS STATUS_0330
                    , MAX(CASE WHEN B.HHMM = '0400' THEN B.TIME_STATUS END) AS STATUS_0400
                    , MAX(CASE WHEN B.HHMM = '0430' THEN B.TIME_STATUS END) AS STATUS_0430
                    , MAX(CASE WHEN B.HHMM = '0500' THEN B.TIME_STATUS END) AS STATUS_0500
                    , MAX(CASE WHEN B.HHMM = '0530' THEN B.TIME_STATUS END) AS STATUS_0530
                    , MAX(CASE WHEN B.HHMM = '0600' THEN B.TIME_STATUS END) AS STATUS_0600
                    , MAX(CASE WHEN B.HHMM = '0630' THEN B.TIME_STATUS END) AS STATUS_0630
                    , MAX(CASE WHEN B.HHMM = '0700' THEN B.TIME_STATUS END) AS STATUS_0700
                    , MAX(CASE WHEN B.HHMM = '0730' THEN B.TIME_STATUS END) AS STATUS_0730
                FROM jmes.TBL_BATCH_MCT_WORK A LEFT OUTER JOIN TBL_BATCH_MCT_WORK_TIME_STATUS B ON A.BATCH_DT = B.BATCH_DT AND A.EQUIP_SEQ = B.EQUIP_SEQ
                WHERE A.BATCH_DT = DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                    AND A.WORK_FACTORY = #{WORK_FACTORY}
                    </if>
                    <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
                    AND A.FACTORY_AREA = #{FACTORY_AREA}
                    </if>
                    <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
                    AND A.PROCESS_TYPE = #{PROCESS_TYPE}
                    </if>
                    <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
                    AND A.EQUIP_SEQ = #{EQUIP_SEQ}
                    </if>
                GROUP BY A.EQUIP_SEQ
              ) Y
        WHERE X.EQUIP_SEQ = Y.EQUIP_SEQ
            AND X.BATCH_DT = DATE_FORMAT(#{BATCH_DT}, '%Y%m%d')
            <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
            AND X.WORK_FACTORY = #{WORK_FACTORY}
            </if>
            <if test="FACTORY_AREA != null and FACTORY_AREA != ''">
            AND X.FACTORY_AREA = #{FACTORY_AREA}
            </if>
            <if test="PROCESS_TYPE != null and PROCESS_TYPE != ''">
            AND X.PROCESS_TYPE = #{PROCESS_TYPE}
            </if>
            <if test="EQUIP_SEQ != null and EQUIP_SEQ != ''">
            AND X.EQUIP_SEQ = #{EQUIP_SEQ}
            </if>
        ORDER BY X.EQUIP_SEQ
    </select>

    <select id="selectMonthlyQualityBoardFromOrder" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.ORDER_COMP_CD
            , CASE WHEN Z.ORDER_COMP_CD IS NULL THEN 'Total' ELSE (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Z.ORDER_COMP_CD) END AS ORDER_COMP_NM
            , IFNULL(Z.PART_CNT,0) AS PART_CNT
            , IFNULL(Z.INSPECT_CNT,0) AS INSPECT_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.INSPECT_CNT,0) / Z.PART_CNT * 100,1) END AS INSPECT_RATIO
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.PASS_CNT,0) / Z.INSPECT_CNT * 100,1) END AS PASS_RATIO
            , IFNULL(Z.A_CNT,0) AS A_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.A_CNT,0) / Z.INSPECT_CNT * 100,1) END AS A_RATIO
            , IFNULL(Z.B_CNT,0) AS B_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.B_CNT,0) / Z.INSPECT_CNT * 100,1) END AS B_RATIO
            , IFNULL(Z.C_CNT,0) AS C_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.C_CNT,0) / Z.INSPECT_CNT * 100,1) END AS C_RATIO
            , IFNULL(Z.D_CNT,0) AS D_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.D_CNT,0) / Z.INSPECT_CNT * 100,1) END AS D_RATIO
            , IFNULL(Z.RETURN_CNT,0) AS RETURN_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.RETURN_CNT,0) / Z.PART_CNT * 100,1) END AS RETURN_RATIO
        FROM (  SELECT Y.ORDER_COMP_CD
                    , SUM(Y.PART_CNT) AS PART_CNT
                    , SUM(Y.INSPECT_CNT) AS INSPECT_CNT
                    , SUM(Y.PASS_CNT) AS PASS_CNT
                    , SUM(Y.A_CNT) AS A_CNT
                    , SUM(Y.B_CNT) AS B_CNT
                    , SUM(Y.C_CNT) AS C_CNT
                    , SUM(Y.D_CNT) AS D_CNT
                    , SUM(Y.RETURN_CNT) AS RETURN_CNT
                FROM (  SELECT X.ORDER_COMP_CD
                            , X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.PART_CNT
                            , X.INSPECT_CNT, X.PASS_CNT, A_CNT, B_CNT, C_CNT, D_CNT
                            , ( SELECT COUNT(*) AS RETURN_CNT
                                FROM jmes.TBL_INSPECT M
                                WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    AND M.INSPECT_TYPE = '2'
                                    AND M.INSPECT_GRADE = 'GRD050'
                               ) AS RETURN_CNT
                        FROM (  SELECT A.ORDER_COMP_CD
                                    , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, 1 AS PART_CNT
                                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                    , CASE WHEN C.INSPECT_SEQ IS NULL THEN 0 ELSE 1 END AS INSPECT_CNT
                                    , CASE WHEN C.INSPECT_GRADE IN ('GRD010','GRD020','GRD030') THEN 1 ELSE 0 END AS PASS_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD010' THEN 1 ELSE 0 END AS A_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD020' THEN 1 ELSE 0 END AS B_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD030' THEN 1 ELSE 0 END AS C_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS D_CNT
                                FROM jmes.TBL_CONTROL A
                                    , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                    AND A.DEL_YN = 'N'
                                    AND B.WORK_TYPE != 'WTP020'
                                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                                    </if>

                              ) X
                        WHERE X.INSPECT_RNUM = 1
                     ) Y
                GROUP BY Y.ORDER_COMP_CD WITH ROLLUP
            ) Z
        ORDER BY Z.ORDER_COMP_CD IS NULL DESC, PART_CNT DESC;
    </select>

    <select id="selectMonthlyQualityBoardFromOutside" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.OUTSIDE_COMP_CD
            , CASE WHEN Z.OUTSIDE_COMP_CD IS NULL THEN 'Total' ELSE (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Z.OUTSIDE_COMP_CD) END AS OUTSIDE_COMP_NM
            , IFNULL(Z.PART_CNT,0) AS PART_CNT
            , IFNULL(Z.INSPECT_CNT,0) AS INSPECT_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.INSPECT_CNT,0) / Z.PART_CNT * 100,1) END AS INSPECT_RATIO
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.PASS_CNT,0) / Z.INSPECT_CNT * 100,1) END AS PASS_RATIO
            , IFNULL(Z.A_CNT,0) AS A_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.A_CNT,0) / Z.INSPECT_CNT * 100,1) END AS A_RATIO
            , IFNULL(Z.B_CNT,0) AS B_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.B_CNT,0) / Z.INSPECT_CNT * 100,1) END AS B_RATIO
            , IFNULL(Z.C_CNT,0) AS C_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.C_CNT,0) / Z.INSPECT_CNT * 100,1) END AS C_RATIO
            , IFNULL(Z.D_CNT,0) AS D_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.D_CNT,0) / Z.INSPECT_CNT * 100,1) END AS D_RATIO
            , IFNULL(Z.RETURN_CNT,0) AS RETURN_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.RETURN_CNT,0) / Z.PART_CNT * 100,1) END AS RETURN_RATIO
        FROM (  SELECT Y.OUTSIDE_COMP_CD
                    , SUM(Y.PART_CNT) AS PART_CNT
                    , SUM(Y.INSPECT_CNT) AS INSPECT_CNT
                    , SUM(Y.PASS_CNT) AS PASS_CNT
                    , SUM(Y.A_CNT) AS A_CNT
                    , SUM(Y.B_CNT) AS B_CNT
                    , SUM(Y.C_CNT) AS C_CNT
                    , SUM(Y.D_CNT) AS D_CNT
                    , SUM(Y.RETURN_CNT) AS RETURN_CNT
                FROM (  SELECT X.OUTSIDE_COMP_CD
                            , X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.PART_CNT
                            , X.INSPECT_CNT, X.PASS_CNT, A_CNT, B_CNT, C_CNT, D_CNT
                            , ( SELECT COUNT(*) AS RETURN_CNT
                                FROM jmes.TBL_INSPECT M
                                WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    AND M.INSPECT_TYPE = '2'
                                    AND M.INSPECT_GRADE = 'GRD050'
                               ) AS RETURN_CNT
                        FROM (  SELECT B.OUTSIDE_COMP_CD
                                    , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, 1 AS PART_CNT
                                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                    , CASE WHEN C.INSPECT_SEQ IS NULL THEN 0 ELSE 1 END AS INSPECT_CNT
                                    , CASE WHEN C.INSPECT_GRADE IN ('GRD010','GRD020','GRD030') THEN 1 ELSE 0 END AS PASS_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD010' THEN 1 ELSE 0 END AS A_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD020' THEN 1 ELSE 0 END AS B_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD030' THEN 1 ELSE 0 END AS C_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS D_CNT
                                FROM jmes.TBL_CONTROL A
                                    , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                    AND A.DEL_YN = 'N'
                                    AND B.WORK_TYPE != 'WTP020'
                                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                                    </if>
                                    AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 데이타 확인 -->
                              ) X
                        WHERE X.INSPECT_RNUM = 1
                     ) Y
                GROUP BY Y.OUTSIDE_COMP_CD WITH ROLLUP
            ) Z
        ORDER BY Z.OUTSIDE_COMP_CD IS NULL DESC, OUTSIDE_COMP_NM
    </select>

    <select id="selectMonthlyQualityBoardFromMaterialType" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.MATERIAL_TYPE
            , CASE WHEN Z.MATERIAL_TYPE IS NULL THEN 'Total' ELSE jmes.SF_GET_CODE_NM('1035', Z.MATERIAL_TYPE, #{LOGIN_LOCALE}) END AS MATERIAL_TYPE_NM    -- 언어조건
            , IFNULL(Z.PART_CNT,0) AS PART_CNT
            , IFNULL(Z.INSPECT_CNT,0) AS INSPECT_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.INSPECT_CNT,0) / Z.PART_CNT * 100,1) END AS INSPECT_RATIO
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.PASS_CNT,0) / Z.INSPECT_CNT * 100,1) END AS PASS_RATIO
            , IFNULL(Z.A_CNT,0) AS A_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.A_CNT,0) / Z.INSPECT_CNT * 100,1) END AS A_RATIO
            , IFNULL(Z.B_CNT,0) AS B_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.B_CNT,0) / Z.INSPECT_CNT * 100,1) END AS B_RATIO
            , IFNULL(Z.C_CNT,0) AS C_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.C_CNT,0) / Z.INSPECT_CNT * 100,1) END AS C_RATIO
            , IFNULL(Z.D_CNT,0) AS D_CNT
            , CASE WHEN IFNULL(Z.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.D_CNT,0) / Z.INSPECT_CNT * 100,1) END AS D_RATIO
            , IFNULL(Z.RETURN_CNT,0) AS RETURN_CNT
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN 0 ELSE ROUND(IFNULL(Z.RETURN_CNT,0) / Z.PART_CNT * 100,1) END AS RETURN_RATIO
        FROM (  SELECT Y.MATERIAL_TYPE
                    , SUM(Y.PART_CNT) AS PART_CNT
                    , SUM(Y.INSPECT_CNT) AS INSPECT_CNT
                    , SUM(Y.PASS_CNT) AS PASS_CNT
                    , SUM(Y.A_CNT) AS A_CNT
                    , SUM(Y.B_CNT) AS B_CNT
                    , SUM(Y.C_CNT) AS C_CNT
                    , SUM(Y.D_CNT) AS D_CNT
                    , SUM(Y.RETURN_CNT) AS RETURN_CNT
                FROM (  SELECT X.MATERIAL_TYPE
                            , X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ, X.PART_CNT
                            , X.INSPECT_CNT, X.PASS_CNT, A_CNT, B_CNT, C_CNT, D_CNT
                            , ( SELECT COUNT(*) AS RETURN_CNT
                                FROM jmes.TBL_INSPECT M
                                WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                    AND M.INSPECT_TYPE = '2'
                                    AND M.INSPECT_GRADE = 'GRD050'
                               ) AS RETURN_CNT
                        FROM (  SELECT B.MATERIAL_TYPE
                                    , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, 1 AS PART_CNT
                                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                    , CASE WHEN C.INSPECT_SEQ IS NULL THEN 0 ELSE 1 END AS INSPECT_CNT
                                    , CASE WHEN C.INSPECT_GRADE IN ('GRD010','GRD020','GRD030') THEN 1 ELSE 0 END AS PASS_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD010' THEN 1 ELSE 0 END AS A_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD020' THEN 1 ELSE 0 END AS B_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD030' THEN 1 ELSE 0 END AS C_CNT
                                    , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS D_CNT
                                FROM jmes.TBL_CONTROL A
                                    , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                    AND A.DEL_YN = 'N'
                                    AND B.WORK_TYPE != 'WTP020'
                                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                                    </if>
                                    AND B.MATERIAL_TYPE IS NOT NULL     <!-- 데이타 확인 -->
                              ) X
                        WHERE X.INSPECT_RNUM = 1
                     ) Y
                GROUP BY Y.MATERIAL_TYPE WITH ROLLUP
            ) Z
        ORDER BY Z.MATERIAL_TYPE IS NULL DESC, MATERIAL_TYPE_NM
    </select>

    <select id="selectBadTypeCD" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.BAD_TYPE
            , IFNULL(jmes.SF_GET_CODE_NM('1089',X.BAD_TYPE,#{LOGIN_LOCALE}),'N/A') AS BAD_TYPE_NM    <!-- 언어조건 -->
            , COUNT(*) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                    , C.INSPECT_GRADE
                    , (SELECT M.REF_CD FROM TBL_CODE M WHERE M.HIGH_CD IN ('1019','1020','1021') AND M.CODE_CD = C.INSPECT_RESULT LIMIT 1) AS BAD_TYPE
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '1'
              ) X
        WHERE X.INSPECT_RNUM = 1
            <choose>
                <when test="INSPECT_GRADE == 'GRD030'">
                    AND X.INSPECT_GRADE = 'GRD030'      <!-- C등급 -->
                </when>
                <when test="INSPECT_GRADE == 'GRD040'">
                    AND X.INSPECT_GRADE = 'GRD040'      <!-- D등급 -->
                </when>
            </choose>
        GROUP BY X.BAD_TYPE
    </select>

    <select id="selectBadTypeReturn" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.BAD_TYPE
            , IFNULL(jmes.SF_GET_CODE_NM('1089',X.BAD_TYPE,#{LOGIN_LOCALE}),'N/A') AS BAD_TYPE_NM    <!-- 언어조건 -->
            , SUM(X.RETURN_CNT) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , 1 AS RETURN_CNT
                    , (SELECT M.REF_CD FROM TBL_CODE M WHERE M.HIGH_CD IN ('1019','1020','1021') AND M.CODE_CD = C.INSPECT_RESULT LIMIT 1) AS BAD_TYPE
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '2'
                    AND C.INSPECT_GRADE = 'GRD050'
              ) X
        GROUP BY X.BAD_TYPE
    </select>

    <select id="selectGenerationProcessCD" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ERROR_PROCESS
            , IFNULL(jmes.SF_GET_CODE_NM('1010', X.ERROR_PROCESS, #{LOGIN_LOCALE}),'N/A') AS ERROR_PROCESS_NM    <!-- 언어조건 -->
            , COUNT(*) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                    , C.INSPECT_GRADE
                    , C.ERROR_PROCESS
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '1'
              ) X
        WHERE X.INSPECT_RNUM = 1
            <choose>
                <when test="INSPECT_GRADE == 'GRD030'">
                    AND X.INSPECT_GRADE = 'GRD030'      <!-- C등급 -->
                </when>
                <when test="INSPECT_GRADE == 'GRD040'">
                    AND X.INSPECT_GRADE = 'GRD040'      <!-- D등급 -->
                </when>
            </choose>
        GROUP BY X.ERROR_PROCESS
    </select>

    <select id="selectGenerationProcessReturn" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ERROR_PROCESS
            , IFNULL(jmes.SF_GET_CODE_NM('1010', X.ERROR_PROCESS, #{LOGIN_LOCALE}),'N/A') AS ERROR_PROCESS_NM    <!-- 언어조건 -->
            , SUM(X.RETURN_CNT) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , 1 AS RETURN_CNT
                    , C.ERROR_PROCESS
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '2'
                    AND C.INSPECT_GRADE = 'GRD050'
              ) X
        GROUP BY X.ERROR_PROCESS
    </select>

    <select id="selectCausesCD" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ERROR_REASON
            , IFNULL(jmes.SF_GET_CODE_NM('1032', X.ERROR_REASON, #{LOGIN_LOCALE}),'N/A') AS ERROR_PROCESS_NM    <!-- 언어조건 -->
            , COUNT(*) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                    , C.INSPECT_GRADE
                    , C.ERROR_REASON
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '1'
              ) X
        WHERE X.INSPECT_RNUM = 1
            <choose>
                <when test="INSPECT_GRADE == 'GRD030'">
                    AND X.INSPECT_GRADE = 'GRD030'      <!-- C등급 -->
                </when>
                <when test="INSPECT_GRADE == 'GRD040'">
                    AND X.INSPECT_GRADE = 'GRD040'      <!-- D등급 -->
                </when>
            </choose>
        GROUP BY X.ERROR_REASON
    </select>

    <select id="selectCausesReturn" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ERROR_REASON
            , IFNULL(jmes.SF_GET_CODE_NM('1032', X.ERROR_REASON, #{LOGIN_LOCALE}),'N/A') AS ERROR_PROCESS_NM    <!-- 언어조건 -->
            , SUM(X.RETURN_CNT) AS CNT
        FROM (  SELECT B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                    , 1 AS RETURN_CNT
                    , C.ERROR_REASON
                FROM jmes.TBL_CONTROL A
                    , jmes.TBL_CONTROL_PART B
                    , jmes.TBL_INSPECT C
                WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                    AND B.CONTROL_SEQ = C.CONTROL_SEQ
                    AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                    AND A.DEL_YN = 'N'
                    AND B.WORK_TYPE != 'WTP020'
                    AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                    <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                    AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                    </if>
                    <choose>
                        <when test="asdfasdfasdf == 'OUTSIDE'">
                            AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                        </when>
                    </choose>
                    AND C.INSPECT_TYPE = '2'
                    AND C.INSPECT_GRADE = 'GRD050'
              ) X
        GROUP BY X.ERROR_REASON
    </select>

    <select id="selectAnnualQualityStatus" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.DATA_TYPE, Z.DATA_TYPE_NM
            , IFNULL(MAX(CASE WHEN Z.MM = '01' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_01
            , IFNULL(MAX(CASE WHEN Z.MM = '02' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_02
            , IFNULL(MAX(CASE WHEN Z.MM = '03' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_03
            , IFNULL(MAX(CASE WHEN Z.MM = '04' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_04
            , IFNULL(MAX(CASE WHEN Z.MM = '05' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_05
            , IFNULL(MAX(CASE WHEN Z.MM = '06' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_06
            , IFNULL(MAX(CASE WHEN Z.MM = '07' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_07
            , IFNULL(MAX(CASE WHEN Z.MM = '08' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_08
            , IFNULL(MAX(CASE WHEN Z.MM = '09' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_09
            , IFNULL(MAX(CASE WHEN Z.MM = '10' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_10
            , IFNULL(MAX(CASE WHEN Z.MM = '11' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_11
            , IFNULL(MAX(CASE WHEN Z.MM = '12' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.CNT WHEN Z.DATA_TYPE = '2' THEN Z.RATIO END END),0) AS DATA_VALUE_12
        FROM (  SELECT P.MM, P.DATA_TYPE, P.DATA_TYPE_NM
                    , CASE WHEN #{INSPECT_GRADE} = 'GRD030' THEN Q.C_CNT
                           WHEN #{INSPECT_GRADE} = 'GRD040' THEN Q.D_CNT
                           WHEN #{INSPECT_GRADE} = 'GRD050' THEN Q.RETURN_CNT
                      END AS CNT
                    , CASE WHEN #{INSPECT_GRADE} = 'GRD030' THEN CASE WHEN IFNULL(Q.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(Q.C_CNT / Q.INSPECT_CNT * 100,1) END
                           WHEN #{INSPECT_GRADE} = 'GRD040' THEN CASE WHEN IFNULL(Q.INSPECT_CNT,0) = 0 THEN 0 ELSE ROUND(Q.D_CNT / Q.INSPECT_CNT * 100,1) END
                           WHEN #{INSPECT_GRADE} = 'GRD050' THEN CASE WHEN IFNULL(Q.PART_CNT,0) = 0 THEN 0 ELSE ROUND(Q.RETURN_CNT / Q.PART_CNT * 100,1) END
                      END AS RATIO
                FROM (  SELECT M.MM, N.DATA_TYPE, N.DATA_TYPE_NM
                        FROM jmes.TBL_YYYYMMDD M
                            , ( SELECT '1' AS DATA_TYPE, 'CNT' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '2' AS DATA_TYPE, 'RATIO' AS DATA_TYPE_NM FROM DUAL
                               ) N
                        WHERE M.DT LIKE CONCAT(SUBSTRING('202010',1,4),'%')
                        GROUP BY M.MM, N.DATA_TYPE, N.DATA_TYPE_NM
                     ) P LEFT OUTER JOIN (  SELECT DATE_FORMAT(Y.OUT_FINISH_DT,'%m') AS MM
                                                , SUM(Y.PART_CNT) AS PART_CNT
                                                , SUM(Y.INSPECT_CNT) AS INSPECT_CNT
                                                , SUM(Y.C_CNT) AS C_CNT
                                                , SUM(Y.D_CNT) AS D_CNT
                                                , SUM(Y.RETURN_CNT) AS RETURN_CNT
                                            FROM (  SELECT X.OUT_FINISH_DT
                                                        , X.PART_CNT
                                                        , X.INSPECT_CNT, C_CNT, D_CNT
                                                        , ( SELECT COUNT(*) AS RETURN_CNT
                                                            FROM jmes.TBL_INSPECT M
                                                            WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                                                                AND M.INSPECT_TYPE = '2'
                                                                AND M.INSPECT_GRADE = 'GRD050'
                                                           ) AS RETURN_CNT
                                                    FROM (  SELECT A.OUT_FINISH_DT
                                                                , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ, 1 AS PART_CNT
                                                                , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                                                                , CASE WHEN C.INSPECT_SEQ IS NULL THEN 0 ELSE 1 END AS INSPECT_CNT
                                                                , CASE WHEN C.INSPECT_GRADE = 'GRD030' THEN 1 ELSE 0 END AS C_CNT
                                                                , CASE WHEN C.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS D_CNT
                                                            FROM jmes.TBL_CONTROL A
                                                                , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                AND A.DEL_YN = 'N'
                                                                AND B.WORK_TYPE != 'WTP020'
                                                                AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR},'0101'),'%Y%m%d')
                                                                <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                                                                AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(STR_TO_DATE(CONCAT(#{END_YEAR},'1231'),'%Y%m%d'), INTERVAL 1 DAY)
                                                                </if>
                                                                <choose>
                                                                    <when test="asdfasdfasdf == 'OUTSIDE'">
                                                                        AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                                                                    </when>
                                                                </choose>
                                                          ) X
                                                    WHERE X.INSPECT_RNUM = 1
                                                ) Y
                                            GROUP BY DATE_FORMAT(Y.OUT_FINISH_DT,'%m')
                                        ) Q ON P.MM = Q.MM
            ) Z
        GROUP BY Z.DATA_TYPE, Z.DATA_TYPE_NM
    </select>

    <select id="selectMonthlyQualityBoardDetail" parameterType="java.util.HashMap" resultType="java.util.HashMap">

        SELECT Q.CONTROL_SEQ, Q.CONTROL_DETAIL_SEQ, Q.INSPECT_SEQ
            ,Q.IMG_GFILE_SEQ
            ,Q.OUT_FINISH_DT
            ,Q.INNER_WORK_FINISH_DT
            ,Q.ORDER_COMP_NM
            ,Q.CONTROL_NUM
            ,Q.DRAWING_NUM
            ,Q.MATERIAL_DETAIL_NM
            ,Q.MATERIAL_TYPE_NM
            ,Q.PART_QTY
            ,Q.WORK_FACTORY_NM
            ,Q.OUTSIDE_COMP_NM
            ,Q.INSPECT_RNUM
            ,Q.INSPECT_USER_NM
            ,Q.INSPECT_GRADE_NM
            ,Q.INSPECT_GRADE
            ,Q.ERROR_QTY
            ,Q.INSPECT_RESULT_NM
            ,Q.INSPECT_DESC
            ,Q.ERROR_PROCESS_NM
            ,Q.ERROR_REASON_NM
            ,Q.ERROR_ACTION_NM
            ,Q.ERROR_NOTE
            ,Q.INSERT_DT
            ,Q.CONTROL_VER
            ,Q.SIZE_TXT
            ,(SELECT D.REGIST_NUM FROM TBL_CONTROL_PART_ORDER_MAIN D WHERE D.CONTROL_SEQ = Q.CONTROL_SEQ AND D.CONTROL_DETAIL_SEQ = Q.CONTROL_DETAIL_SEQ) AS REGIST_NUM
        FROM (
            SELECT Y.CONTROL_SEQ, Y.CONTROL_DETAIL_SEQ, Y.INSPECT_SEQ
                , jmes.SF_GET_DATE_F(Y.OUT_FINISH_DT,'','') AS OUT_FINISH_DT
                , jmes.SF_GET_DATE_F(Y.INNER_WORK_FINISH_DT,'','') AS INNER_WORK_FINISH_DT
                , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Y.ORDER_COMP_CD) AS ORDER_COMP_NM
                , CASE WHEN Y.PART_NUM IS NULL THEN Y.CONTROL_NUM ELSE CONCAT(Y.CONTROL_NUM, ' #', Y.PART_NUM) END AS
                CONTROL_NUM
                , Y.DRAWING_NUM
                , jmes.SF_GET_CODE_NM('1027', Y.MATERIAL_DETAIL, #{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM
                , jmes.SF_GET_CODE_NM('1035', Y.MATERIAL_TYPE, #{LOGIN_LOCALE}) AS MATERIAL_TYPE_NM
                , jmes.SF_GET_CONTROL_PART_QTY(Y.CONTROL_SEQ, Y.CONTROL_DETAIL_SEQ) AS PART_QTY
                , SF_GET_CODE_NM('1014', Y.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
                , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE M.COMP_CD = Y.OUTSIDE_COMP_CD) AS OUTSIDE_COMP_NM
                , CASE WHEN Y.INSPECT_SEQ IS NOT NULL THEN ROW_NUMBER() OVER (PARTITION BY Y.CONTROL_SEQ, Y.CONTROL_DETAIL_SEQ
                ORDER BY Y.INSPECT_SEQ) END AS INSPECT_RNUM
                , (SELECT M.USER_NM FROM jmes.TBL_USER M WHERE M.USER_ID = Z.INSPECT_USER_ID) AS INSPECT_USER_NM
                , jmes.SF_GET_CODE_NM('1040', Z.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM
                , Z.INSPECT_GRADE
                , Z.ERROR_QTY
                , CASE WHEN Z.INSPECT_GRADE IN ('GRD010','GRD020','GRD030') THEN jmes.SF_GET_CODE_NM('1019', Z.INSPECT_RESULT,
                #{LOGIN_LOCALE})
                WHEN Z.INSPECT_GRADE = 'GRD040' THEN jmes.SF_GET_CODE_NM('1020', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                WHEN Z.INSPECT_GRADE = 'GRD050' THEN jmes.SF_GET_CODE_NM('1021', Z.INSPECT_RESULT, #{LOGIN_LOCALE})
                END AS INSPECT_RESULT_NM
                , Z.INSPECT_DESC
                , jmes.SF_GET_CODE_NM('1010', Z.ERROR_PROCESS, #{LOGIN_LOCALE}) AS ERROR_PROCESS_NM
                , jmes.SF_GET_CODE_NM('1032', Z.ERROR_REASON, #{LOGIN_LOCALE}) AS ERROR_REASON_NM
                , jmes.SF_GET_CODE_NM('1025', Z.ERROR_ACTION, #{LOGIN_LOCALE}) AS ERROR_ACTION_NM
                , Z.ERROR_NOTE
                , jmes.SF_GET_DATE_F(Z.INSERT_DT,'YY','M') AS INSERT_DT
                , Y.IMG_GFILE_SEQ
                , Y.CONTROL_VER
                , Y.SIZE_TXT
            FROM ( SELECT X.ORDER_COMP_CD, X.OUTSIDE_COMP_CD, X.MATERIAL_TYPE
                , X.CONTROL_SEQ, X.CONTROL_DETAIL_SEQ
                , X.INSPECT_SEQ, X.INSPECT_GRADE
                , ( SELECT COUNT(*) AS RETURN_CNT
                    FROM jmes.TBL_INSPECT M
                    WHERE M.CONTROL_SEQ = X.CONTROL_SEQ
                    AND M.CONTROL_DETAIL_SEQ = X.CONTROL_DETAIL_SEQ
                    AND M.INSPECT_TYPE = '2'
                    AND M.INSPECT_GRADE = 'GRD050'
                ) AS RETURN_CNT
                , X.OUT_FINISH_DT
                , X.INNER_WORK_FINISH_DT
                , X.CONTROL_NUM
                , X.PART_NUM
                , X.DRAWING_NUM
                , X.MATERIAL_DETAIL
                , X.WORK_FACTORY
                , X.IMG_GFILE_SEQ
                , X.CONTROL_VER
                , X.SIZE_TXT
                FROM ( SELECT A.ORDER_COMP_CD, B.OUTSIDE_COMP_CD, B.MATERIAL_TYPE
                        , B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ
                        , ROW_NUMBER() OVER (PARTITION BY B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ ORDER BY C.INSPECT_SEQ) AS INSPECT_RNUM
                        , C.INSPECT_SEQ
                        , C.INSPECT_GRADE
                        , A.OUT_FINISH_DT
                        , B.INNER_WORK_FINISH_DT
                        , A.CONTROL_NUM
                        , B.PART_NUM
                        , B.DRAWING_NUM
                        , B.MATERIAL_DETAIL
                        , B.WORK_FACTORY
                        , B.IMG_GFILE_SEQ
                        , A.CONTROL_VER
                        , B.SIZE_TXT
                    FROM jmes.TBL_CONTROL A
                        , jmes.TBL_CONTROL_PART B LEFT OUTER JOIN jmes.TBL_INSPECT C ON B.CONTROL_SEQ = C.CONTROL_SEQ AND
                        B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ AND C.INSPECT_TYPE = '1'
                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                        AND A.DEL_YN = 'N'
                        AND B.WORK_TYPE != 'WTP020'
                        AND A.OUT_FINISH_DT >= STR_TO_DATE(CONCAT(#{START_YEAR}, #{START_MONTH},'01'),'%Y%m%d')
                        <if test="END_YEAR != null and END_YEAR != '' and END_MONTH != null and END_MONTH != ''">
                            AND A.OUT_FINISH_DT <![CDATA[ < ]]> DATE_ADD(LAST_DAY(STR_TO_DATE(CONCAT(#{END_YEAR}, #{END_MONTH},'01'),'%Y%m%d')), INTERVAL 1 DAY)
                        </if>
                        <choose>
                            <when test="asdfasdfasdf == 'OUTSIDE'">
                                AND B.OUTSIDE_COMP_CD IS NOT NULL     <!-- 외주업체를 선택했을 경우 조건추가 -->
                            </when>
                        </choose>
                ) X
                WHERE X.INSPECT_RNUM = 1
            ) Y LEFT OUTER JOIN jmes.TBL_INSPECT Z ON Y.CONTROL_SEQ = Z.CONTROL_SEQ AND Y.CONTROL_DETAIL_SEQ = Z.CONTROL_DETAIL_SEQ
            WHERE 1 = 1
            <if test="SEL_BOTT_INSPECT_GRADE != null and SEL_BOTT_INSPECT_GRADE != ''">
                AND Z.INSPECT_GRADE IN (${SEL_BOTT_INSPECT_GRADE})
            </if>
            <choose>
                <when test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                    AND Y.ORDER_COMP_CD = #{ORDER_COMP_CD}     <!-- 조건 쿼리 -->
                </when>
                <when test="OUTSIDE_COMP_CD != null and OUTSIDE_COMP_CD != ''">
                    AND Y.OUTSIDE_COMP_CD = #{OUTSIDE_COMP_CD}     <!-- 조건 쿼리 -->
                </when>
                <when test="MATERIAL_TYPE != null and MATERIAL_TYPE != ''">
                    AND Y.MATERIAL_TYPE = #{MATERIAL_TYPE}     <!-- 조건 쿼리 -->
                </when>
            </choose>
            ORDER BY Y.CONTROL_NUM, Y.PART_NUM, Z.INSPECT_SEQ
        ) Q
        WHERE Q.INSPECT_RNUM = 1
            OR Q.INSPECT_GRADE = 'GRD050'
    </select>

    <select id="selectMonthlyBusinessStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT TRIM(CONCAT(IFNULL(X.GOAL_AMT_1,SPACE(0)),' ',IFNULL(X.GOAL_AMT_2,SPACE(0)))) AS GOAL_AMT_KOR
            , TRIM(CONCAT(IFNULL(Y.FINAL_NEGO_AMT_1,SPACE(0)),' ',IFNULL(Y.FINAL_NEGO_AMT_2,SPACE(0)))) AS SALES_AMT_KOR
            , CASE WHEN IFNULL(X.GOAL_AMT,0) =0 THEN NULL ELSE ROUND(Y.FINAL_NEGO_AMT / X.GOAL_AMT * 100,0) END AS MONTH_RATIO
        FROM (  SELECT SUM(A.GOAL_AMT) AS GOAL_AMT
                    , CASE WHEN TRUNCATE(SUM(A.GOAL_AMT) / 100000000,0) > 0 THEN CONCAT (TRUNCATE(SUM(A.GOAL_AMT) / 100000000,0),'억') END AS GOAL_AMT_1
                    , CASE WHEN TRUNCATE(MOD(SUM(A.GOAL_AMT),100000000) / 10000000,0) > 0 THEN CONCAT(TRUNCATE(MOD(SUM(A.GOAL_AMT),100000000) / 10000000,0),'천') END AS GOAL_AMT_2
                FROM jmes.TBL_SALES_GOAL A
                WHERE A.YYYYMM = CONCAT(#{YEAR}, #{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
             ) X
           , (  SELECT SUM(A.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
                    , CASE WHEN TRUNCATE(SUM(A.FINAL_NEGO_AMT) / 100000000,0) > 0 THEN CONCAT (TRUNCATE(SUM(A.FINAL_NEGO_AMT) / 100000000,0),'억') END AS FINAL_NEGO_AMT_1
                    , CASE WHEN TRUNCATE(MOD(SUM(A.FINAL_NEGO_AMT),100000000) / 10000000,0) > 0 THEN CONCAT(TRUNCATE(MOD(SUM(A.FINAL_NEGO_AMT),100000000) / 10000000,0),'천') END AS FINAL_NEGO_AMT_2
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH = CONCAT(#{YEAR}, #{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
             ) Y
    </select>

    <select id="selectMonthlyBusinessStatusRatioList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ORDER_COMP_CD
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , X.SALES_AMT
        FROM (  SELECT A.ORDER_COMP_CD
                    , SUM(A.FINAL_NEGO_AMT) AS SALES_AMT
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH = CONCAT(#{YEAR}, #{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                GROUP BY A.ORDER_COMP_CD
                ORDER BY 2 DESC
                LIMIT 5
             ) X
        UNION ALL
        SELECT 'ETC' AS ORDER_COMP_CD
            , '기타' AS ORDER_COMP_NM
            , MAX(X.TOTAL_AMT) - SUM(X.FINAL_NEGO_AMT) AS SALES_AMT
        FROM (  SELECT A.ORDER_COMP_CD, SUM(A.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
                    , SUM(A.FINAL_NEGO_AMT) OVER() AS TOTAL_AMT
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH = CONCAT(#{YEAR}, #{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                GROUP BY A.ORDER_COMP_CD
                ORDER BY 2 DESC
                LIMIT 5
             )  X
        HAVING MAX(X.TOTAL_AMT) - SUM(X.FINAL_NEGO_AMT) > 0
    </select>

    <select id="selectMonthlyBusinessCumulativeStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT TRIM(CONCAT(IFNULL(X.GOAL_AMT_1,SPACE(0)),' ',IFNULL(X.GOAL_AMT_2,SPACE(0)))) AS GOAL_AMT_KOR
            , TRIM(CONCAT(IFNULL(Y.FINAL_NEGO_AMT_1,SPACE(0)),' ',IFNULL(Y.FINAL_NEGO_AMT_2,SPACE(0)))) AS SALES_AMT_KOR
            , CASE WHEN IFNULL(X.GOAL_AMT,0) =0 THEN NULL ELSE ROUND(Y.FINAL_NEGO_AMT / X.GOAL_AMT * 100,0) END AS YEAR_RATIO
        FROM (  SELECT SUM(A.GOAL_AMT) AS GOAL_AMT
                    , CASE WHEN TRUNCATE(SUM(A.GOAL_AMT) / 100000000,0) > 0 THEN CONCAT (TRUNCATE(SUM(A.GOAL_AMT) / 100000000,0),'억') END AS GOAL_AMT_1
                    , CASE WHEN TRUNCATE(MOD(SUM(A.GOAL_AMT),100000000) / 10000000,0) > 0 THEN CONCAT(TRUNCATE(MOD(SUM(A.GOAL_AMT),100000000) / 10000000,0),'천') END AS GOAL_AMT_2
                FROM jmes.TBL_SALES_GOAL A
                WHERE A.YYYYMM BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
             ) X
           , (  SELECT SUM(A.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
                    , CASE WHEN TRUNCATE(SUM(A.FINAL_NEGO_AMT) / 100000000,0) > 0 THEN CONCAT (TRUNCATE(SUM(A.FINAL_NEGO_AMT) / 100000000,0),'억') END AS FINAL_NEGO_AMT_1
                    , CASE WHEN TRUNCATE(MOD(SUM(A.FINAL_NEGO_AMT),100000000) / 10000000,0) > 0 THEN CONCAT(TRUNCATE(MOD(SUM(A.FINAL_NEGO_AMT),100000000) / 10000000,0),'천') END AS FINAL_NEGO_AMT_2
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
             ) Y
    </select>

    <select id="selectMonthlyBusinessCumulativeStatusRatioList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT X.ORDER_COMP_CD
            , (SELECT M.COMP_NM FROM jmes.TBL_COMPANY M WHERE COMP_CD = X.ORDER_COMP_CD) AS ORDER_COMP_NM
            , X.SALES_AMT
        FROM (  SELECT A.ORDER_COMP_CD
                    , SUM(A.FINAL_NEGO_AMT) AS SALES_AMT
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                GROUP BY A.ORDER_COMP_CD
                ORDER BY 2 DESC
                LIMIT 5
             ) X
        UNION ALL
        SELECT 'ETC' AS ORDER_COMP_CD
            , '기타' AS ORDER_COMP_NM
            , MAX(X.TOTAL_AMT) - SUM(X.FINAL_NEGO_AMT) AS SALES_AMT
        FROM (  SELECT A.ORDER_COMP_CD, SUM(A.FINAL_NEGO_AMT) AS FINAL_NEGO_AMT
                    , SUM(A.FINAL_NEGO_AMT) OVER() AS TOTAL_AMT
                FROM jmes.TBL_MONTH_CLOSE A
                WHERE A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                <if test="COMP_CD != null and COMP_CD != ''">
                    AND A.COMP_CD = #{COMP_CD}
                </if>
                GROUP BY A.ORDER_COMP_CD
                ORDER BY 2 DESC
                LIMIT 5
             )  X
        HAVING MAX(X.TOTAL_AMT) - SUM(X.FINAL_NEGO_AMT) > 0
    </select>

    <select id="selectAnnualBusinessStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT Z.DATA_TYPE, Z.DATA_TYPE_NM
            , IFNULL(MAX(CASE WHEN Z.MM = '01' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_01
            , IFNULL(MAX(CASE WHEN Z.MM = '02' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_02
            , IFNULL(MAX(CASE WHEN Z.MM = '03' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_03
            , IFNULL(MAX(CASE WHEN Z.MM = '04' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_04
            , IFNULL(MAX(CASE WHEN Z.MM = '05' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_05
            , IFNULL(MAX(CASE WHEN Z.MM = '06' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_06
            , IFNULL(MAX(CASE WHEN Z.MM = '07' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_07
            , IFNULL(MAX(CASE WHEN Z.MM = '08' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_08
            , IFNULL(MAX(CASE WHEN Z.MM = '09' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_09
            , IFNULL(MAX(CASE WHEN Z.MM = '10' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_10
            , IFNULL(MAX(CASE WHEN Z.MM = '11' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_11
            , IFNULL(MAX(CASE WHEN Z.MM = '12' THEN CASE WHEN Z.DATA_TYPE = '1' THEN Z.GOAL_AMT WHEN Z.DATA_TYPE = '2' THEN Z.SALES_AMT WHEN Z.DATA_TYPE = '3' THEN Z.RATIO END END),0) AS DATA_VALUE_12
        FROM (  SELECT P.MM, P.DATA_TYPE, P.DATA_TYPE_NM
                    , Q.GOAL_AMT
                    , Q.SALES_AMT
                    , CASE WHEN IFNULL(Q.GOAL_AMT,0) =0 THEN NULL ELSE ROUND(Q.SALES_AMT / Q.GOAL_AMT * 100,0) END AS RATIO
                FROM (  SELECT M.MM, N.DATA_TYPE, N.DATA_TYPE_NM
                        FROM jmes.TBL_YYYYMMDD M
                            , ( SELECT '1' AS DATA_TYPE, '목표매출' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '2' AS DATA_TYPE, '달성매출' AS DATA_TYPE_NM FROM DUAL
                                UNION ALL
                                SELECT '3' AS DATA_TYPE, '달성률' AS DATA_TYPE_NM FROM DUAL
                               ) N
                        WHERE M.DT LIKE CONCAT(#{YEAR},'%')
                        GROUP BY M.MM, N.DATA_TYPE, N.DATA_TYPE_NM
                     ) P LEFT OUTER JOIN (  SELECT SUBSTR(X.YYYYMM,5,2) AS MM
                                                , IFNULL(X.GOAL_AMT,0) AS GOAL_AMT
                                                , IFNULL(Y.CLOSE_AMT,0) AS SALES_AMT
                                                , CASE WHEN IFNULL(X.GOAL_AMT,0) = 0 THEN 0 ELSE IFNULL(Y.CLOSE_AMT,0) / X.GOAL_AMT * 100 END AS MONTH_RATIO
                                            FROM (  SELECT A.YYYYMM, SUM(A.GOAL_AMT) AS GOAL_AMT
                                                    FROM jmes.TBL_SALES_GOAL A
                                                    WHERE YYYYMM LIKE CONCAT(#{YEAR},'%')
                                                    <if test="COMP_CD != null and COMP_CD != ''">
                                                        AND A.COMP_CD = #{COMP_CD}
                                                    </if>
                                                    GROUP BY A.YYYYMM
                                                  ) X LEFT OUTER JOIN ( SELECT A.CLOSE_MONTH
                                                                            , SUM(A.FINAL_NEGO_AMT) AS CLOSE_AMT
                                                                        FROM jmes.TBL_MONTH_CLOSE A
                                                                        WHERE A.CLOSE_MONTH LIKE CONCAT(#{YEAR},'%')
                                                                        <if test="COMP_CD != null and COMP_CD != ''">
                                                                            AND A.COMP_CD = #{COMP_CD}
                                                                        </if>
                                                                        GROUP BY A.CLOSE_MONTH
                                                                      ) Y ON X.YYYYMM = Y.CLOSE_MONTH
                                         ) Q ON P.MM = Q.MM
             ) Z
        GROUP BY Z.DATA_TYPE, Z.DATA_TYPE_NM
    </select>

    <select id="selectDetailedCumulativeStatusByMonthlyOrderCompList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            '1' as GROUP_KEY
            , ROW_NUMBER () OVER (ORDER BY V.YEAR_AMT DESC) AS ROW_NUM
            , V.ORDER_COMP_CD
            , V.COMP_NM
            , V.PLUS_MINUS
            , V.PLUS_MINUS_RED_YN
            , V.BUSINESS_ITEM
            , TRUNCATE(W.MONTH_AMT / 1000,0) AS MONTH_AMT
            , W.MONTH_ORDER_CNT
            , W.MONTH_ORDER_QTY
            , TRUNCATE(V.YEAR_AMT / 1000,0) AS YEAR_AMT
            , V.YEAR_ORDER_CNT
            , V.YEAR_ORDER_QTY
            , TRUNCATE(IFNULL(V.YEAR_MCT_WORK_TIME,0)/3600,0) AS MCT_WORK_TIME
            , ROUND(TRUNCATE(V.YEAR_AMT / 1000,0) / (V.YEAR_MCT_WORK_TIME / 3600),0) AS YEAR_AMT_PER_HOUR
            , V.STAFF_NM
            , DATE_FORMAT(STR_TO_DATE(CONCAT(V.PREV_CLOSE_MONTH,'01'),'%Y%m%d'),'%y년 %c월') AS PREV_SALES_MONTH
            , CASE WHEN V.PREV_CLOSE_MONTH IS NULL THEN '신규거래'
                    ELSE CASE WHEN PERIOD_DIFF(CONCAT(#{YEAR},#{MONTH}),V.PREV_CLOSE_MONTH) > 1 THEN CONCAT(PERIOD_DIFF(CONCAT(#{YEAR},#{MONTH}),V.PREV_CLOSE_MONTH)-1,'개월 미거래') END
              END AS NOTE
        FROM (  SELECT X.ORDER_COMP_CD
                , Z.COMP_NM
                , Z.BUSINESS_ITEM
                , (SELECT M.STAFF_NM FROM jmes.TBL_COMPANY_STAFF M WHERE M.COMP_CD = X.ORDER_COMP_CD AND MAIN_YN = 'Y' LIMIT 1) AS STAFF_NM
                , CASE WHEN Y.ORDER_COMP_CD IS NULL THEN '신규'
                           WHEN X.RANK_NUM = Y.RANK_NUM THEN '-'
                           WHEN X.RANK_NUM <![CDATA[ < ]]> Y.RANK_NUM THEN CONCAT('▲',(Y.RANK_NUM - X.RANK_NUM))
                           WHEN X.RANK_NUM > Y.RANK_NUM THEN CONCAT('▼',(X.RANK_NUM - Y.RANK_NUM))
                      END AS PLUS_MINUS
                    ,  CASE WHEN Y.ORDER_COMP_CD IS NULL THEN 'Y'
                           WHEN X.RANK_NUM <![CDATA[ < ]]> Y.RANK_NUM THEN 'Y'
                      END AS PLUS_MINUS_RED_YN
                , X.YEAR_AMT
                , X.YEAR_ORDER_CNT
                , X.YEAR_ORDER_QTY
                , X.YEAR_MCT_WORK_TIME
                , ( SELECT MAX(M.CLOSE_MONTH)
                        FROM jmes.TBL_MONTH_CLOSE M
                        WHERE M.ORDER_COMP_CD = X.ORDER_COMP_CD
                            AND M.CLOSE_MONTH <![CDATA[ < ]]> CONCAT(#{YEAR},#{MONTH})
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND M.COMP_CD = #{COMP_CD}
                            </if>
                      ) AS PREV_CLOSE_MONTH
            FROM (  SELECT P.ORDER_COMP_CD
                        , P.YEAR_AMT
                        , Q.ORDER_CNT AS YEAR_ORDER_CNT
                        , Q.ORDER_QTY AS YEAR_ORDER_QTY
                        , RANK() OVER(ORDER BY P.YEAR_AMT DESC) AS RANK_NUM
                        , Q.MCT_WORK_TIME AS YEAR_MCT_WORK_TIME
                    FROM (  SELECT A.ORDER_COMP_CD
                                , SUM(A.FINAL_NEGO_AMT) AS YEAR_AMT
                            FROM jmes.TBL_MONTH_CLOSE A
                            WHERE A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                                <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                            GROUP BY A.ORDER_COMP_CD
                         ) P
                       , (  SELECT A.ORDER_COMP_CD
                                , COUNT(DISTINCT A.ORDER_SEQ) AS ORDER_CNT
                                , SUM(jmes.SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, A.ORDER_SEQ)) AS ORDER_QTY
                                , SUM((SELECT SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK', M.MCT_WORK_SEQ)) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = A.CONTROL_DETAIL_SEQ AND M.DEL_YN = 'N' )) AS MCT_WORK_TIME
                            FROM jmes.TBL_MONTH_CLOSE_ORDER A
                            WHERE A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                                <if test="COMP_CD != null and COMP_CD != ''">
                                    AND A.COMP_CD = #{COMP_CD}
                                </if>
                            GROUP BY A.ORDER_COMP_CD
                         ) Q
                    WHERE P.ORDER_COMP_CD = Q.ORDER_COMP_CD
                ) X LEFT OUTER JOIN (   SELECT B.ORDER_COMP_CD
                                            , B.PREV_YEAR_AMT
                                            , RANK() OVER(ORDER BY B.PREV_YEAR_AMT DESC) AS RANK_NUM
                                        FROM (  SELECT A.ORDER_COMP_CD
                                                    , SUM(A.FINAL_NEGO_AMT) AS PREV_YEAR_AMT
                                                FROM jmes.TBL_MONTH_CLOSE A
                                                WHERE A.CLOSE_MONTH BETWEEN CONCAT(DATE_FORMAT(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR},#{MONTH},'01'),'%Y%m%d'), INTERVAL -1 MONTH),'%Y'),'01') AND DATE_FORMAT(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR},#{MONTH},'01'),'%Y%m%d'), INTERVAL -1 MONTH),'%Y%m')
                                                    <if test="COMP_CD != null and COMP_CD != ''">
                                                        AND A.COMP_CD = #{COMP_CD}
                                                    </if>
                                                GROUP BY A.ORDER_COMP_CD
                                            ) B
                                     ) Y ON X.ORDER_COMP_CD = Y.ORDER_COMP_CD
                            , jmes.TBL_COMPANY Z
                        WHERE X.ORDER_COMP_CD = Z.COMP_CD
        ) V LEFT OUTER JOIN (   SELECT P.ORDER_COMP_CD
                                    , P.MONTH_AMT
                                    , Q.ORDER_CNT AS MONTH_ORDER_CNT
                                    , Q.ORDER_QTY AS MONTH_ORDER_QTY
                                FROM (  SELECT A.ORDER_COMP_CD
                                            , SUM(A.FINAL_NEGO_AMT) AS MONTH_AMT
                                        FROM jmes.TBL_MONTH_CLOSE A
                                        WHERE A.CLOSE_MONTH = CONCAT(#{YEAR},#{MONTH})
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND A.COMP_CD = #{COMP_CD}
                                            </if>
                                        GROUP BY A.ORDER_COMP_CD
                                    ) P
                                  , (   SELECT A.ORDER_COMP_CD
                                            , COUNT(DISTINCT A.ORDER_SEQ) AS ORDER_CNT
                                            , SUM(jmes.SF_GET_CONTROL_ORDER_QTY(A.CONTROL_SEQ, A.ORDER_SEQ)) AS ORDER_QTY
                                        FROM jmes.TBL_MONTH_CLOSE_ORDER A
                                        WHERE A.CLOSE_MONTH = CONCAT(#{YEAR},#{MONTH})
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND A.COMP_CD = #{COMP_CD}
                                            </if>
                                        GROUP BY A.ORDER_COMP_CD
                                    ) Q
                                WHERE P.ORDER_COMP_CD = Q.ORDER_COMP_CD
                            ) W ON V.ORDER_COMP_CD = W.ORDER_COMP_CD
        ORDER BY V.YEAR_AMT DESC
    </select>

    <select id="selectOutsourcingProcessPurchaseStatusByCompanyList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            '1' as GROUP_KEY
            , ROW_NUMBER () OVER (ORDER BY X.YEAR_AMT DESC) AS ROW_NUM
            , X.OUTSIDE_COMP_CD
            , jmes.SF_GET_COMP_NM(X.OUTSIDE_COMP_CD) AS COMP_NM
            , TRUNCATE(Y.MONTH_AMT / 1000,0) AS MONTH_AMT
            , Y.MONTH_PART_CNT
            , Y.MONTH_PART_QTY
            , TRUNCATE(X.YEAR_AMT / 1000,0) AS YEAR_AMT
            , X.YEAR_PART_CNT
            , X.YEAR_PART_QTY
        FROM (  SELECT Q.OUTSIDE_COMP_CD
                    , SUM(P.FINAL_NEGO_AMT) AS YEAR_AMT
                    , SUM(Q.YEAR_PART_CNT) AS YEAR_PART_CNT
                    , SUM(Q.YEAR_PART_QTY) AS YEAR_PART_QTY
                FROM ( SELECT A.CLOSE_MONTH, A.CLOSE_VER, B.COMP_CD, C.OUTSIDE_COMP_CD
                            , COUNT(A.CONTROL_SEQ) AS YEAR_PART_CNT
                            , SUM((jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) + IFNULL(C.ADDITIONAL_QTY,0))) AS YEAR_PART_QTY
                        FROM jmes.TBL_OUTSIDE_CLOSE A, jmes.TBL_CONTROL B, jmes.TBL_CONTROL_PART C
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND A.CONTROL_SEQ = C.CONTROL_SEQ
                            AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                            AND A.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                            <if test="COMP_CD != null and COMP_CD != ''">
                                AND B.COMP_CD = #{COMP_CD}
                            </if>
                        GROUP BY A.CLOSE_MONTH, A.CLOSE_VER, C.OUTSIDE_COMP_CD
                   ) Q
                   LEFT OUTER JOIN TBL_OUTSIDE_CLOSE_NOTE P
                            ON P.CLOSE_MONTH = Q.CLOSE_MONTH
                                AND P.CLOSE_VER = Q.CLOSE_VER
                                AND P.OUTSIDE_COMP_CD = Q.OUTSIDE_COMP_CD
                                AND P.CLOSE_MONTH BETWEEN CONCAT(#{YEAR},'01') AND CONCAT(#{YEAR},#{MONTH})
                                <if test="COMP_CD != null and COMP_CD != ''">
                                    AND P.COMP_CD = #{COMP_CD}
                                </if>
                WHERE 1 = 1
                GROUP BY Q.OUTSIDE_COMP_CD
             ) X LEFT OUTER JOIN (  SELECT Q.OUTSIDE_COMP_CD
                                        , SUM(P.FINAL_NEGO_AMT) AS MONTH_AMT
                                        , SUM(Q.MONTH_PART_CNT) AS MONTH_PART_CNT
                                        , SUM(Q.MONTH_PART_QTY) AS MONTH_PART_QTY
                                    FROM ( SELECT A.CLOSE_MONTH, A.CLOSE_VER, B.COMP_CD, C.OUTSIDE_COMP_CD
                                                , COUNT(A.CONTROL_SEQ) AS MONTH_PART_CNT
                                                , SUM((jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) + IFNULL(C.ADDITIONAL_QTY,0))) AS MONTH_PART_QTY
                                            FROM jmes.TBL_OUTSIDE_CLOSE A, jmes.TBL_CONTROL B, jmes.TBL_CONTROL_PART C
                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                AND A.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
                                                AND A.CLOSE_MONTH = CONCAT(#{YEAR},#{MONTH})
                                                <if test="COMP_CD != null and COMP_CD != ''">
                                                    AND B.COMP_CD = #{COMP_CD}
                                                </if>
                                            GROUP BY A.CLOSE_MONTH, A.CLOSE_VER, C.OUTSIDE_COMP_CD
                                       ) Q
                                       LEFT OUTER JOIN TBL_OUTSIDE_CLOSE_NOTE P
                                            ON P.CLOSE_MONTH = Q.CLOSE_MONTH
                                                AND P.CLOSE_VER = Q.CLOSE_VER
                                                AND P.OUTSIDE_COMP_CD = Q.OUTSIDE_COMP_CD
                                                AND P.CLOSE_MONTH = CONCAT(#{YEAR},#{MONTH})
                                                <if test="COMP_CD != null and COMP_CD != ''">
                                                    AND P.COMP_CD = #{COMP_CD}
                                                </if>
                                    GROUP BY Q.OUTSIDE_COMP_CD
                                 ) Y ON X.OUTSIDE_COMP_CD = Y.OUTSIDE_COMP_CD
        ORDER BY X.YEAR_AMT DESC
    </select>

</mapper>