<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="reportMapper">
    <select id="selectDailyProcessStatusLeftList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER(ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT) AS ROW_NUM
            , #{WORK_FACTORY} AS WORK_FACTORY     <!-- 고정조건 -->
            , Z.WEEK_SEQ
            , Z.DT
            , CASE WHEN Z.WEEK_SEQ IS NULL THEN '총계'
                   WHEN Z.DT IS NULL THEN '합계'
                   ELSE CONCAT(DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%e'),'일')
              END AS CAL_DT_NM
            , CASE WHEN Z.DT IS NULL THEN ''
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '0' THEN '일'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '1' THEN '월'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '2' THEN '화'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '3' THEN '수'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '4' THEN '목'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '5' THEN '금'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = '6' THEN '토'
              END AS WEEK_DAY_NM
            , Z.PART_CNT
            , Z.PART_QTY
            , Z.FORECAST_UNIT_AMT
            , Z.DT_GOAL_AMT
            , CASE WHEN IFNULL(Z.DT_GOAL_AMT,0) = 0 THEN NULL ELSE CONCAT(FORMAT(IFNULL(Z.FORECAST_UNIT_AMT,0) / IFNULL(Z.DT_GOAL_AMT,0) * 100,1),'%') END AS GOAL_RATIO
            , Z.WORKING_TIME
            , Z.ERROR_CNT
            , Z.ERROR_QTY
            , (SELECT M.NOTE FROM jmes.TBL_WORKING_DAY_NOTE M WHERE M.WORKING_DT = Z.DT) AS NOTE
        FROM (  SELECT X.WEEK_SEQ
                    , X.DT
                    , SUM(IFNULL(Y.PART_CNT,0)) AS PART_CNT
                    , SUM(IFNULL(Y.PART_QTY,0)) AS PART_QTY
                    , SUM(IFNULL(Y.FORECAST_UNIT_AMT,0)) AS FORECAST_UNIT_AMT
                    , SUM(IFNULL(X.DT_GOAL_AMT,0)) AS DT_GOAL_AMT
                    , SUM(X.WORKING_TIME) AS WORKING_TIME
                    , SUM(IFNULL(Y.ERROR_CNT,0)) AS ERROR_CNT
                    , SUM(IFNULL(Y.ERROR_QTY,0)) AS ERROR_QTY
                FROM (  SELECT F.DT
                            , DATE_FORMAT(STR_TO_DATE(F.DT,'%Y%m%d'),'%u') AS WEEK_SEQ
                            , CASE WHEN F.WEEK_DAY > 0 THEN (   SELECT ROUND(M.GOAL_AMT / N.DT_CNT,0) AS DT_GOAL_AMT
                                                                FROM (  SELECT SUM(M.PRODUCTION_GOAL_AMT) AS GOAL_AMT
                                                                        FROM jmes.TBL_SALES_GOAL M
                                                                        WHERE YYYYMM = CONCAT(#{YEAR}, #{MONTH})           <!-- 고정조건 -->
                                                                        <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                                            AND WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                                        </if>
                                                                      ) M
                                                                    , ( SELECT COUNT(*) AS DT_CNT
                                                                        FROM jmes.TBL_YYYYMMDD A
                                                                        WHERE A.DT LIKE CONCAT(#{YEAR}, #{MONTH},'%')    <!-- 고정조건 -->
                                                                            AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') > 0
                                                                      ) N
                                                              )
                              END AS DT_GOAL_AMT
                            , ( SELECT M.WORKING_TIME
                                FROM jmes.TBL_WORKING_WEEK_TIME M
                                WHERE M.WORK_FACTORY = #{WORK_FACTORY}   <!-- 고정조건 -->
                                    AND M.WEEK_DAY = F.WEEK_DAY
                              ) AS WORKING_TIME
                        FROM (  SELECT A.DT
                                    , DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') AS WEEK_DAY
                                FROM jmes.TBL_YYYYMMDD A
                                WHERE A.DT LIKE CONCAT(#{YEAR}, #{MONTH},'%')  <!-- 고정조건 -->
                              ) F
                     ) X LEFT OUTER JOIN (  SELECT P.WORKING_FINISH_DT
                                                , SUM(P.PART_CNT) AS PART_CNT
                                                , SUM(P.PART_QTY) AS PART_QTY
                                                , SUM(P.FORECAST_UNIT_AMT) AS FORECAST_UNIT_AMT
                                                , SUM(P.ERROR_CNT) AS ERROR_CNT
                                                , SUM(P.ERROR_QTY) AS ERROR_QTY
                                            FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ
                                                        , DATE_FORMAT(DATE_ADD(A.INNER_WORK_FINISH_DT, INTERVAL -1 * CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                                                        , 1 AS PART_CNT
                                                        , jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                        , IFNULL(A.FORECAST_UNIT_AMT,0) AS FORECAST_UNIT_AMT
                                                        , ROW_NUMBER() OVER (PARTITION BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ ORDER BY B.INSPECT_SEQ) AS INSPECT_RNUM
                                                        , CASE WHEN B.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS ERROR_CNT
                                                        , CASE WHEN B.INSPECT_GRADE = 'GRD040' THEN B.ERROR_QTY ELSE 0 END AS ERROR_QTY
                                                    FROM jmes.TBL_CONTROL_PART A LEFT OUTER JOIN jmes.TBL_INSPECT B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.INSPECT_TYPE = '1'
                                                    WHERE A.WORK_TYPE != 'WTP020'
                                                    <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                                                        AND WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                                                    </if>
                                                        AND A.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE)     <!-- 고정조건 -->
                                                        AND A.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(CONCAT(#{YEAR}, #{MONTH},'01'),'%Y%m%d'), INTERVAL 1 MONTH), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE)      <!-- 고정조건 -->
                                                        AND NOT EXISTS (SELECT 1 FROM jmes.TBL_CONTROL M WHERE M.CONTROL_SEQ = A.CONTROL_SEQ AND M.DEL_YN = 'Y')
                                                  ) P
                                            WHERE P.INSPECT_RNUM = 1
                                            GROUP BY P.WORKING_FINISH_DT
                                         ) Y ON X.DT = Y.WORKING_FINISH_DT
                GROUP BY X.WEEK_SEQ, X.DT WITH ROLLUP
            ) Z
        ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT
    </select>

    <select id="selectDailyProcessStatusRightList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ ) AS ROW_NUM
            , Z.CONTROL_SEQ
            , Z.CONTROL_DETAIL_SEQ
            , Z.IMG_GFILE_SEQ
            , Z.ORDER_COMP_NM
            , Z.WORK_FACTORY_NM
            , CASE WHEN Z.PART_NUM IS NULL THEN Z.CONTROL_NUM ELSE CONCAT(Z.CONTROL_NUM, ' #', Z.PART_NUM) END AS CONTROL_NUM
            , Z.INNER_DUE_DT
            , Z.PART_QTY
            , Z.INNER_WORK_FINISH_DT
            , ROUND(Z.WORK_TIME / 60,1) AS WORK_TIME
            , Z.FORECAST_UNIT_AMT
            , Z.PART_QTY * Z.FORECAST_UNIT_AMT AS TOTAL_AMT
            , CASE WHEN IFNULL(Z.WORK_TIME,0) = 0 THEN NULL ELSE Z.PART_QTY * Z.FORECAST_UNIT_AMT / (Z.WORK_TIME / 60 / 60) END AS PRICE_PER_HOUR
            , CASE WHEN Z.PREV_DRAWING_NUM IS NOT NULL THEN (   SELECT M.UNIT_FINAL_AMT
                                                                FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                    AND N.CONTROL_STATUS = 'ORD003'
                                                                    AND N.DEL_YN = 'N'
                                                                    AND M.DRAWING_NUM = Z.PREV_DRAWING_NUM
                                                                ORDER BY M.CONTROL_SEQ DESC
                                                                LIMIT 1)
                   ELSE (   SELECT M.UNIT_FINAL_AMT
                            FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                            WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                AND N.CONTROL_STATUS = 'ORD003'
                                AND N.DEL_YN = 'N'
                                AND N.CONTROL_SEQ != Z.CONTROL_SEQ
                                AND M.DRAWING_NUM = Z.DRAWING_NUM
                            ORDER BY M.CONTROL_SEQ DESC
                            LIMIT 1)
              END AS PREV_UNIT_FINAL_AMT
            , Z.UNIT_FINAL_EST_AMT
            , Z.UNIT_FINAL_AMT
            , Z.INSPECT_GRADE_NM
            , Z.INSPECT_RESULT_NM
            , Z.ERROR_QTY
            , Z.NOTE
        FROM (  SELECT P.CONTROL_SEQ
                    , P.CONTROL_DETAIL_SEQ
                    , P.IMG_GFILE_SEQ
                    , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                    , jmes.SF_GET_CODE_NM('1014',Y.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM   <!-- 언어조건 -->
                    , X.CONTROL_NUM
                    , Y.PART_NUM
                    , jmes.SF_GET_DATE_F(Y.INNER_DUE_DT,'','') AS INNER_DUE_DT
                    , P.PART_QTY
                    , jmes.SF_GET_DATE_F(Y.INNER_WORK_FINISH_DT,'','M') AS INNER_WORK_FINISH_DT
                    , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)),0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = P.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ) AS WORK_TIME
                    , Y.FORECAST_UNIT_AMT
                    , Y.UNIT_FINAL_EST_AMT
                    , Y.UNIT_FINAL_AMT
                    , jmes.SF_GET_CODE_NM('1040',P.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1020',P.INSPECT_RESULT,#{LOGIN_LOCALE}) AS INSPECT_RESULT_NM   <!-- 언어조건 -->
                    , P.ERROR_QTY
                    , X.NOTE
                    , Y.DRAWING_NUM
                    , Y.PREV_DRAWING_NUM
                FROM (  SELECT A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ, A.IMG_GFILE_SEQ
                            , DATE_FORMAT(DATE_ADD(A.INNER_WORK_FINISH_DT, INTERVAL -1 * CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE),'%Y%m%d') AS WORKING_FINISH_DT
                            , jmes.SF_GET_CONTROL_PART_QTY(A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ) AS PART_QTY
                            , IFNULL(A.FORECAST_UNIT_AMT,0) AS FORECAST_UNIT_AMT
                            , ROW_NUMBER() OVER (PARTITION BY A.CONTROL_SEQ, A.CONTROL_DETAIL_SEQ ORDER BY B.INSPECT_SEQ) AS INSPECT_RNUM
                            , B.INSPECT_GRADE
                            , B.INSPECT_RESULT
                            , CASE WHEN B.INSPECT_GRADE = 'GRD040' THEN B.ERROR_QTY ELSE 0 END AS ERROR_QTY
                        FROM jmes.TBL_CONTROL_PART A LEFT OUTER JOIN jmes.TBL_INSPECT B ON A.CONTROL_SEQ = B.CONTROL_SEQ AND A.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ AND B.INSPECT_TYPE = '1'
                        WHERE A.INNER_WORK_FINISH_DT IS NOT NULL
                            AND A.INNER_WORK_FINISH_DT >= DATE_ADD(STR_TO_DATE(#{DT},'%Y%m%d'), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE)                        <!-- 고정조건 -->
                            AND A.INNER_WORK_FINISH_DT <![CDATA[ < ]]> DATE_ADD(DATE_ADD(STR_TO_DATE(#{DT},'%Y%m%d'), INTERVAL 1 DAY), INTERVAL CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),1,2) AS INT) * 60 + CAST(SUBSTRING(SF_GET_CODE_NM('1086','1','KR'),3,2) AS INT) MINUTE)   <!-- 고정조건 -->
                      ) P, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y
                WHERE P.CONTROL_SEQ = X.CONTROL_SEQ
                    AND P.CONTROL_SEQ = Y.CONTROL_SEQ
                    AND P.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
                    AND P.INSPECT_RNUM = 1
                    AND X.DEL_YN = 'N'
                    AND Y.WORK_TYPE != 'WTP020'
                <if test="WORK_FACTORY != null and WORK_FACTORY != ''">
                    AND Y.WORK_FACTORY = #{WORK_FACTORY}   <!-- 가변조건 -->
                </if>
            ) Z
    </select>

    <select id="selectTargetAmountRegisterList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            ROW_NUMBER () OVER (ORDER BY A.YYYY, A.MM) AS ROW_NUM,
            DATE_FORMAT(STR_TO_DATE(CONCAT(A.YYYY, A.MM), '%Y%m'), '%Y/%m') AS YYYYMM,
            #{WORK_FACTORY} AS WORK_FACTORY,
            SF_GET_CODE_NM('1014', #{WORK_FACTORY}, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM,
            B.PRODUCTION_GOAL_AMT,
            B.SALES_GOAL_AMT
        FROM TBL_YYYYMMDD A
            LEFT OUTER JOIN TBL_SALES_GOAL B ON CONCAT(A.YYYY, A.MM) = B.YYYYMM
                AND B.WORK_FACTORY = #{WORK_FACTORY}
        WHERE 1 = 1
            AND A.YYYY = #{YEAR}
        GROUP BY A.YYYY, A.MM, B.WORK_FACTORY
    </select>

    <insert id="createTargetAmount" parameterType="java.util.HashMap" >
        INSERT INTO TBL_SALES_GOAL (
            YYYYMM,
            WORK_FACTORY,
            PRODUCTION_GOAL_AMT,
            SALES_GOAL_AMT,
            INSERT_ID
        ) VALUES (
            REPLACE(#{YYYYMM}, '/', SPACE(0)),
            #{WORK_FACTORY},
            #{PRODUCTION_GOAL_AMT},
            #{SALES_GOAL_AMT},
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
	        UPDATE
	            PRODUCTION_GOAL_AMT = #{PRODUCTION_GOAL_AMT},
	            SALES_GOAL_AMT = #{SALES_GOAL_AMT},
                UPDATE_DT = NOW(),
	            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <insert id="insertUpdateWorkingDayNote" parameterType="java.util.HashMap" >
        INSERT INTO TBL_WORKING_DAY_NOTE (
            WORKING_DT,
            NOTE,
            INSERT_ID
        ) VALUES (
            #{DT},
            #{NOTE},
            #{LOGIN_USER_ID}
        ) ON DUPLICATE KEY
	        UPDATE
	            NOTE = #{NOTE},
                UPDATE_DT = NOW(),
	            UPDATE_ID = #{LOGIN_USER_ID}
    </insert>

    <update id="updateControlNote" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL
        SET
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE CONTROL_SEQ = #{CONTROL_SEQ}
    </update>

    <update id="updateControlPartForecastUnitAmt" parameterType="java.util.HashMap">
        UPDATE TBL_CONTROL_PART
        SET
            FORECAST_UNIT_AMT = #{FORECAST_UNIT_AMT},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND CONTROL_SEQ = #{CONTROL_SEQ}
            AND CONTROL_DETAIL_SEQ = #{CONTROL_DETAIL_SEQ}
    </update>

    <select id="selectMonthlyDetailStatusList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER (ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT) AS ROW_NUM
            , #{COMP_CD} AS COMP_CD         <!-- 인자값을 위한 조건변수 -->
            , #{ORDER_COMP_CD} AS ORDER_COMP_CD    <!-- 인자값을 위한 조건변수 -->
            , Z.WEEK_SEQ
            , Z.DT
            , CASE WHEN Z.WEEK_SEQ IS NULL THEN '총계'
                   WHEN Z.DT IS NULL THEN '합계'
                   ELSE CONCAT(DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%e'),'일')
              END AS CAL_DT_NM
            , CASE WHEN Z.DT IS NULL THEN ''
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 0 THEN '일'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 1 THEN '월'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 2 THEN '화'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 3 THEN '수'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 4 THEN '목'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 5 THEN '금'
                   WHEN DATE_FORMAT(STR_TO_DATE(Z.DT,'%Y%m%d'),'%w') = 6 THEN '토'
              END AS WEEK_DAY_NM
            , Z.PART_CNT
            , Z.PART_QTY
            , Z.OUTSIDE_CNT
            , Z.OUTSIDE_QTY
            , Z.INNER_WORK_FINISH_CNT
            , Z.INNER_WORK_FINISH_QTY
            , Z.OUT_FINISH_CNT
            , Z.OUT_FINISH_QTY
            , Z.LATE_CNT
            , Z.LATE_QTY
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN NULL ELSE Z.LATE_CNT / Z.PART_CNT * 100 END AS LATE_RATIO
            , CASE WHEN IFNULL(Z.PART_CNT,0) = 0 THEN NULL ELSE Z.OUTSIDE_CNT / Z.PART_CNT * 100 END AS OUTSIDE_RATIO
            , Z.FORECAST_UNIT_AMT
            , Z.DT_GOAL_AMT
            , CASE WHEN IFNULL(Z.DT_GOAL_AMT,0) = 0 THEN NULL ELSE CONCAT(FORMAT(IFNULL(Z.FORECAST_UNIT_AMT,0) / IFNULL(Z.DT_GOAL_AMT,0) * 100,1),'%') END AS GOAL_RATIO
            , Z.ERROR_CNT
            , Z.ERROR_QTY
            , Z.RETURN_CNT
            , Z.RETURN_QTY
            , (SELECT M.NOTE FROM jmes.TBL_WORKING_DAY_NOTE M WHERE M.WORKING_DT = Z.DT) AS NOTE
        FROM (  SELECT X.WEEK_SEQ
                    , X.DT
                    , SUM(IFNULL(Y.PART_CNT,0)) AS PART_CNT
                    , SUM(IFNULL(Y.PART_QTY,0)) AS PART_QTY
                    , SUM(IFNULL(Y.OUTSIDE_CNT,0)) AS OUTSIDE_CNT
                    , SUM(IFNULL(Y.OUTSIDE_QTY,0)) AS OUTSIDE_QTY
                    , SUM(IFNULL(Y.INNER_WORK_FINISH_CNT,0)) AS INNER_WORK_FINISH_CNT
                    , SUM(IFNULL(Y.INNER_WORK_FINISH_QTY,0)) AS INNER_WORK_FINISH_QTY
                    , SUM(IFNULL(Y.OUT_FINISH_CNT,0)) AS OUT_FINISH_CNT
                    , SUM(IFNULL(Y.OUT_FINISH_QTY,0)) AS OUT_FINISH_QTY
                    , SUM(IFNULL(Y.LATE_CNT,0)) AS LATE_CNT
                    , SUM(IFNULL(Y.LATE_QTY,0)) AS LATE_QTY
                    , SUM(IFNULL(Y.FORECAST_UNIT_AMT,0)) AS FORECAST_UNIT_AMT
                    , SUM(IFNULL(X.DT_GOAL_AMT,0)) AS DT_GOAL_AMT
                    , SUM(IFNULL(Y.ERROR_CNT,0)) AS ERROR_CNT
                    , SUM(IFNULL(Y.ERROR_QTY,0)) AS ERROR_QTY
                    , SUM(IFNULL(Y.RETURN_CNT,0)) AS RETURN_CNT
                    , SUM(IFNULL(Y.RETURN_QTY,0)) AS RETURN_QTY
                FROM (  SELECT F.DT
                            , DATE_FORMAT(STR_TO_DATE(F.DT,'%Y%m%d'),'%u') AS WEEK_SEQ
                            , CASE WHEN F.WEEK_DAY > 0 THEN (   SELECT ROUND(M.GOAL_AMT / N.DT_CNT,0) AS DT_GOAL_AMT
                                                                FROM (  SELECT SUM(M.SALES_GOAL_AMT) AS GOAL_AMT
                                                                        FROM jmes.TBL_SALES_GOAL M
                                                                        WHERE YYYYMM = CONCAT(#{YEAR}, #{MONTH})           <!-- 고정조건 -->
                                                                      ) M
                                                                    , ( SELECT COUNT(*) AS DT_CNT
                                                                        FROM jmes.TBL_YYYYMMDD A
                                                                        WHERE A.DT LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')    <!-- 고정조건 -->
                                                                            AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') > 0
                                                                      ) N
                                                              )
                              END AS DT_GOAL_AMT
                        FROM (  SELECT A.DT
                                    , DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') AS WEEK_DAY
                                FROM jmes.TBL_YYYYMMDD A
                                WHERE A.DT LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')  <!-- 고정조건 -->
                              ) F
                     ) X LEFT OUTER JOIN (  SELECT T.ORDER_DUE_DT
                                                , SUM(T.PART_CNT) AS PART_CNT
                                                , SUM(T.PART_QTY) AS PART_QTY
                                                , SUM(CASE WHEN T.OUTSIDE_YN = 'Y' THEN 1 ELSE 0 END) AS OUTSIDE_CNT
                                                , SUM(CASE WHEN T.OUTSIDE_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS OUTSIDE_QTY
                                                , SUM(CASE WHEN T.INNER_WORK_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS INNER_WORK_FINISH_CNT
                                                , SUM(CASE WHEN T.INNER_WORK_FINISH_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS INNER_WORK_FINISH_QTY
                                                , SUM(CASE WHEN T.OUT_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS OUT_FINISH_CNT
                                                , SUM(CASE WHEN T.OUT_FINISH_YN = 'Y' THEN T.PART_QTY ELSE 0 END) AS OUT_FINISH_QTY
                                                , SUM(CASE WHEN T.OUT_FINISH_DT > T.ORDER_DUE_DT THEN 1 ELSE 0 END) AS LATE_CNT
                                                , SUM(CASE WHEN T.OUT_FINISH_DT > T.ORDER_DUE_DT THEN T.PART_QTY ELSE 0 END) AS LATE_QTY
                                                , SUM(T.FORECAST_UNIT_AMT) AS FORECAST_UNIT_AMT
                                                , SUM(T.ERROR_CNT) AS ERROR_CNT
                                                , SUM(T.ERROR_QTY) AS ERROR_QTY
                                                , SUM(CASE WHEN T.RETURN_QTY > 0 THEN 1 ELSE 0 END) AS RETURN_CNT
                                                , SUM(T.RETURN_QTY) AS RETURN_QTY
                                            FROM (  SELECT P.CONTROL_SEQ
                                                        , P.CONTROL_DETAIL_SEQ
                                                        , P.ORDER_DUE_DT
                                                        , P.PART_CNT
                                                        , P.PART_QTY
                                                        , P.OUTSIDE_YN
                                                        , P.INNER_WORK_FINISH_YN
                                                        , P.OUT_FINISH_YN
                                                        , P.OUT_FINISH_DT
                                                        , P.FORECAST_UNIT_AMT
                                                        , P.ERROR_CNT
                                                        , P.ERROR_QTY
                                                        , ( SELECT SUM(M.ERROR_QTY)
                                                            FROM jmes.TBL_INSPECT M
                                                            WHERE M.CONTROL_SEQ = P.CONTROL_SEQ
                                                                AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                                                                AND M.INSPECT_TYPE = '2'
                                                                AND M.INSPECT_GRADE IN ('GRD050', 'GRD060')
                                                           ) AS RETURN_QTY
                                                    FROM (  SELECT C.CONTROL_SEQ
                                                                , C.CONTROL_DETAIL_SEQ
                                                                , A.ORDER_DUE_DT
                                                                , 1 AS PART_CNT
                                                                , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                                , C.OUTSIDE_YN
                                                                , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                                                                , CASE WHEN B.OUT_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS OUT_FINISH_YN
                                                                , DATE_FORMAT(B.OUT_FINISH_DT,'%Y%m%d') AS OUT_FINISH_DT
                                                                , C.FORECAST_UNIT_AMT
                                                                , ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                                                                , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN 1 ELSE 0 END AS ERROR_CNT
                                                                , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN D.ERROR_QTY ELSE 0 END AS ERROR_QTY
                                                            FROM (  SELECT M.CONTROL_SEQ
                                                                        , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                                    FROM jmes.TBL_CONTROL_PART_ORDER M
                                                                    GROUP BY M.CONTROL_SEQ
                                                                    HAVING MAX(M.ORDER_DUE_DT) LIKE CONCAT(CONCAT(#{YEAR}, #{MONTH}),'%')  <!-- 고정조건 -->
                                                                  ) A
                                                                , jmes.TBL_CONTROL B
                                                                , jmes.TBL_CONTROL_PART C
                                                                        LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.INSPECT_TYPE = '1'
                                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                                AND B.DEL_YN = 'N'
                                                                AND C.WORK_TYPE != 'WTP020'
                                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                                AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                                                            </if>
                                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                                AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                                                            </if>
                                                        ) P
                                                    WHERE P.INSPECT_RNUM = 1
                                                 ) T
                                            GROUP BY T.ORDER_DUE_DT
                                        ) Y ON X.DT = Y.ORDER_DUE_DT
                GROUP BY X.WEEK_SEQ, X.DT WITH ROLLUP
            ) Z
        ORDER BY Z.WEEK_SEQ IS NULL ASC, Z.WEEK_SEQ, Z.DT IS NULL ASC, Z.DT
    </select>

    <select id="selectMonthlyReportDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER() OVER(ORDER BY Z.CONTROL_SEQ, Z.CONTROL_DETAIL_SEQ ) AS ROW_NUM
            , Z.CONTROL_SEQ
            , Z.CONTROL_DETAIL_SEQ
            , Z.ORDER_COMP_NM
            , CASE WHEN Z.PART_NUM IS NULL THEN Z.CONTROL_NUM ELSE CONCAT(Z.CONTROL_NUM, ' #', Z.PART_NUM) END AS CONTROL_NUM
            , Z.DRAWING_NUM
            , Z.IMG_GFILE_SEQ
            , Z.PART_NUM
            , Z.SIZE_TXT
            , Z.MATERIAL_DETAIL_NM
            , Z.WORK_TYPE_NM
            , Z.ORDER_DUE_DT
            , Z.PART_QTY
            , Z.PART_STATUS_NM
            , Z.WORK_FACTORY_NM
            , Z.INNER_WORK_FINISH_DT
	        , ROUND(Z.WORK_TIME / 60,1) AS WORK_TIME
            , Z.OUTSIDE_COMP_NM
            , Z.OUTSIDE_IN_DT
            , Z.OUT_FINISH_DT
            , Z.FORECAST_UNIT_AMT
            , Z.PART_QTY * Z.FORECAST_UNIT_AMT AS TOTAL_AMT
            , CASE WHEN IFNULL(Z.WORK_TIME,0) = 0 THEN NULL ELSE Z.PART_QTY * Z.FORECAST_UNIT_AMT / (Z.WORK_TIME / 60 / 60) END AS PRICE_PER_HOUR
            , CASE WHEN Z.PREV_DRAWING_NUM IS NOT NULL THEN (   SELECT M.UNIT_FINAL_AMT
                                                                FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                                                                WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                                                    AND N.CONTROL_STATUS = 'ORD003'
                                                                    AND N.DEL_YN = 'N'
                                                                    AND M.DRAWING_NUM = Z.PREV_DRAWING_NUM
                                                                ORDER BY M.CONTROL_SEQ DESC
                                                                LIMIT 1)
                   ELSE (   SELECT M.UNIT_FINAL_AMT
                            FROM jmes.TBL_CONTROL_PART M, jmes.TBL_CONTROL N
                            WHERE M.CONTROL_SEQ = N.CONTROL_SEQ
                                AND N.CONTROL_STATUS = 'ORD003'
                                AND N.DEL_YN = 'N'
                                AND N.CONTROL_SEQ != Z.CONTROL_SEQ
                                AND M.DRAWING_NUM = Z.DRAWING_NUM
                            ORDER BY M.CONTROL_SEQ DESC
                            LIMIT 1)
              END AS PREV_UNIT_FINAL_AMT
            , Z.UNIT_FINAL_EST_AMT
            , Z.UNIT_FINAL_AMT
            , Z.INSPECT_GRADE_NM
            , Z.INSPECT_RESULT_NM
            , Z.ERROR_QTY
            , Z.RETURN_QTY
            , Z.NOTE
        FROM (  SELECT P.CONTROL_SEQ
                    , P.CONTROL_DETAIL_SEQ
                    , jmes.SF_GET_COMP_NM(X.ORDER_COMP_CD) AS ORDER_COMP_NM
                    , X.CONTROL_NUM
                    , Y.PART_NUM
                    , Y.SIZE_TXT
                    , jmes.SF_GET_CODE_NM('1027',Y.MATERIAL_DETAIL,#{LOGIN_LOCALE}) AS MATERIAL_DETAIL_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1033',Y.WORK_TYPE,#{LOGIN_LOCALE}) AS WORK_TYPE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_DATE_F(P.ORDER_DUE_DT,'','') AS ORDER_DUE_DT
                    , P.PART_QTY
                    , jmes.SF_GET_CODE_NM(1013, Y.PART_STATUS, #{LOGIN_LOCALE}) AS PART_STATUS_NM      <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1014',Y.WORK_FACTORY,#{LOGIN_LOCALE}) AS WORK_FACTORY_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_DATE_F(Y.INNER_WORK_FINISH_DT,'','M') AS INNER_WORK_FINISH_DT
                    , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK',M.MCT_WORK_SEQ)),0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = P.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ) AS WORK_TIME
                    , CASE WHEN P.OUTSIDE_YN = 'Y' THEN jmes.SF_GET_COMP_NM(Y.OUTSIDE_COMP_CD) END AS OUTSIDE_COMP_NM
                    , CASE WHEN P.OUTSIDE_YN = 'Y' THEN jmes.SF_GET_DATE_F(Y.OUTSIDE_IN_DT,'','M') END AS OUTSIDE_IN_DT
                    , jmes.SF_GET_DATE_F(P.OUT_FINISH_DT,'','M') AS OUT_FINISH_DT
                    , Y.FORECAST_UNIT_AMT
                    , Y.UNIT_FINAL_EST_AMT
                    , Y.UNIT_FINAL_AMT
                    , jmes.SF_GET_CODE_NM('1040',P.INSPECT_GRADE,#{LOGIN_LOCALE}) AS INSPECT_GRADE_NM   <!-- 언어조건 -->
                    , jmes.SF_GET_CODE_NM('1020',P.INSPECT_RESULT,#{LOGIN_LOCALE}) AS INSPECT_RESULT_NM   <!-- 언어조건 -->
                    , P.ERROR_QTY
                    , ( SELECT SUM(M.ERROR_QTY)
                        FROM jmes.TBL_INSPECT M
                        WHERE M.CONTROL_SEQ = P.CONTROL_SEQ
                            AND M.CONTROL_DETAIL_SEQ = P.CONTROL_DETAIL_SEQ
                            AND M.INSPECT_TYPE = '2'
                            AND M.INSPECT_GRADE IN ('GRD050', 'GRD060')
                       ) AS RETURN_QTY
                    , X.NOTE
                    , Y.DRAWING_NUM
                    , Y.PREV_DRAWING_NUM
                    , Y.IMG_GFILE_SEQ
                FROM (  SELECT C.CONTROL_SEQ
                            , C.CONTROL_DETAIL_SEQ
                            , A.ORDER_DUE_DT
                            , 1 AS PART_CNT
                            , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                            , C.OUTSIDE_YN
                            , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                            , CASE WHEN B.OUT_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS OUT_FINISH_YN
                            , DATE_FORMAT(B.OUT_FINISH_DT,'%Y%m%d') AS OUT_FINISH_DT
                            , C.FORECAST_UNIT_AMT
                            , ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                            , D.INSPECT_GRADE
                            , D.INSPECT_RESULT
                            , CASE WHEN D.INSPECT_GRADE = 'GRD040' THEN D.ERROR_QTY ELSE 0 END AS ERROR_QTY
                        FROM (  SELECT M.CONTROL_SEQ
                                    , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                FROM jmes.TBL_CONTROL_PART_ORDER M
                                GROUP BY M.CONTROL_SEQ
                                HAVING MAX(M.ORDER_DUE_DT) BETWEEN REPLACE(#{MONTH_REPORT_DETAIL_START_DATE}, '/', SPACE(0)) AND REPLACE(#{MONTH_REPORT_DETAIL_END_DATE}, '/', SPACE(0))
                              ) A
                            , jmes.TBL_CONTROL B
                            , jmes.TBL_CONTROL_PART C
                                    LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.INSPECT_TYPE = '1'
                        WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                            AND A.CONTROL_SEQ = C.CONTROL_SEQ
                            AND B.DEL_YN = 'N'
                            AND C.WORK_TYPE != 'WTP020'
                        <if test="COMP_CD != null and COMP_CD != ''">
                            AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                        </if>
                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                            AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                        </if>
                        <choose>
                            <when test='FACTORY_CLASSIFY_YN == "Y"'>
                                AND C.INNER_WORK_FINISH_DT IS NOT NULL      <!-- 가변조건(가공완료) -->
                            </when>
                            <when test='FACTORY_CLASSIFY_YN == "N"'>
                                AND C.INNER_WORK_FINISH_DT IS NULL
                            </when>
                        </choose>
                        <choose>
                            <when test='OUTSIDE_YN == "Y"'>
                                AND IFNULL(C.OUTSIDE_YN,'N') = 'Y'          <!-- 가변조건(외주대상) -->
                            </when>
                            <when test='OUTSIDE_YN == "N"'>
                                AND IFNULL(C.OUTSIDE_YN,'N') = 'N'
                            </when>
                        </choose>
                        <choose>
                            <when test='OUT_FINISH_YN == "Y"'>
                                AND B.OUT_FINISH_DT IS NOT NULL             <!-- 가변조건(출고완료) -->
                            </when>
                            <when test='OUT_FINISH_YN == "N"'>
                                AND B.OUT_FINISH_DT IS  NULL
                            </when>
                        </choose>
                        <choose>
                            <when test='DELAY_YN == "Y"'>
                                AND DATE_FORMAT(B.OUT_FINISH_DT,'%Y%m%d') > A.ORDER_DUE_DT        <!-- 가변조건(지연여부) -->
                            </when>
                            <when test='DELAY_YN == "N"'>
                                AND B.OUT_FINISH_DT <![CDATA[ < ]]> A.ORDER_DUE_DT
                            </when>
                        </choose>
                    ) P, jmes.TBL_CONTROL X, jmes.TBL_CONTROL_PART Y
                WHERE P.CONTROL_SEQ = X.CONTROL_SEQ
                    AND P.CONTROL_SEQ = Y.CONTROL_SEQ
                    AND P.CONTROL_DETAIL_SEQ = Y.CONTROL_DETAIL_SEQ
                    AND P.INSPECT_RNUM = 1
            ) Z
    </select>

    <select id="selectMonthlyReportInspectionDetailList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT SF_GET_COMP_NM(A.ORDER_COMP_CD) AS ORDER_COMP_NM <!-- 발주 업체 -->
            , SF_GET_CODE_NM('1014', B.WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM <!-- 수행 공장 -->
            , CASE WHEN B.PART_NUM IS NULL THEN A.CONTROL_NUM ELSE CONCAT(A.CONTROL_NUM, ' #', B.PART_NUM) END AS CONTROL_NUM <!-- 관리번호 -->
            , B.DRAWING_NUM <!-- 도면 번호 -->
            , B.IMG_GFILE_SEQ
            , jmes.SF_GET_CONTROL_PART_QTY(B.CONTROL_SEQ, B.CONTROL_DETAIL_SEQ) AS PART_QTY <!-- 발주량 -->
            , jmes.SF_GET_DATE_F(B.INNER_WORK_FINISH_DT, '', 'M') AS INNER_WORK_FINISH_DT <!-- 가공완료(입고) 일시 -->
            , (SELECT ROUND(SUM(jmes.SF_GET_DRAWING_WORK_TIME('WORK', M.MCT_WORK_SEQ)), 0) FROM jmes.TBL_MCT_WORK M WHERE M.CONTROL_SEQ = B.CONTROL_SEQ AND M.CONTROL_DETAIL_SEQ = B.CONTROL_DETAIL_SEQ) AS WORK_TIME <!-- 소요시간 -->
            , jmes.SF_GET_USER_NM(C.INSPECT_USER_ID) AS INSPECT_USER_NM <!-- 작성자 -->
            , jmes.SF_GET_CODE_NM('1040', C.INSPECT_GRADE, #{LOGIN_LOCALE}) AS INSPECT_GRADE_NM <!-- 등급 -->
            , (SELECT NOTE FROM TBL_CODE WHERE CODE_CD = C.INSPECT_GRADE) AS K <!-- 합/불 -->
            , C.ERROR_QTY <!-- 불량수량 -->
            , jmes.SF_GET_DATE_F(C.RETURN_SETTLEMENT_DT, '', 'M') AS RETURN_SETTLEMENT_DT <!-- 반품일시 -->
            , CASE C.INSPECT_TYPE
                WHEN '1' THEN SF_GET_CODE_NM('1020', C.INSPECT_RESULT, #{LOGIN_LOCALE})
                WHEN '2' THEN SF_GET_CODE_NM('1021', C.INSPECT_RESULT, #{LOGIN_LOCALE})
              END AS INSPECT_RESULT_NM  <!-- 검사코드 -->
            , C.INSPECT_DESC <!-- 상세내용 -->
            , jmes.SF_GET_CODE_NM('1010', C.ERROR_PROCESS, #{LOGIN_LOCALE}) AS ERROR_PROCESS_NM <!-- 발생공정 -->
            , jmes.SF_GET_CODE_NM('1032', C.ERROR_REASON, #{LOGIN_LOCALE}) AS ERROR_REASON_NM <!-- 원인 -->
            , jmes.SF_GET_CODE_NM('1025', C.ERROR_ACTION, #{LOGIN_LOCALE}) AS ERROR_ACTION_NM <!-- 조치 -->
            , jmes.SF_GET_DATE_F(C.INSERT_DT, '', 'M') AS INSERT_DT <!-- 작성일시 -->
        FROM jmes.TBL_CONTROL A, jmes.TBL_CONTROL_PART B, jmes.TBL_INSPECT C
        WHERE 1 = 1
            AND A.CONTROL_SEQ = B.CONTROL_SEQ
            AND B.CONTROL_SEQ = C.CONTROL_SEQ
            AND B.CONTROL_DETAIL_SEQ = C.CONTROL_DETAIL_SEQ
            AND C.INSPECT_SEQ IN (  SELECT P.INSPECT_SEQ
                                    FROM (  SELECT ROW_NUMBER() OVER (PARTITION BY C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ ORDER BY D.INSPECT_SEQ) AS INSPECT_RNUM
                                                , D.INSPECT_SEQ
                                                , D.INSPECT_GRADE
                                            FROM (  SELECT M.CONTROL_SEQ
                                                        , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                    FROM jmes.TBL_CONTROL_PART_ORDER M
                                                    GROUP BY M.CONTROL_SEQ
                                                    HAVING MAX(M.ORDER_DUE_DT) = #{DT}  <!-- 고정조건 -->
                                                  ) A
                                                , jmes.TBL_CONTROL B
                                                , jmes.TBL_CONTROL_PART C
                                                        LEFT OUTER JOIN jmes.TBL_INSPECT D ON C.CONTROL_SEQ = D.CONTROL_SEQ AND C.CONTROL_DETAIL_SEQ = D.CONTROL_DETAIL_SEQ AND D.INSPECT_TYPE = '1'
                                            WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                AND B.DEL_YN = 'N'
                                                AND C.WORK_TYPE != 'WTP020'
                                            <if test="COMP_CD != null and COMP_CD != ''">
                                                AND B.COMP_CD = #{COMP_CD}          <!-- 가변조건 -->
                                            </if>
                                            <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                AND B.ORDER_COMP_CD = #{ORDER_COMP_CD}          <!-- 가변조건 -->
                                            </if>
                                        ) P
                                    WHERE P.INSPECT_RNUM = 1
                                        AND P.INSPECT_GRADE = 'GRD040'
            )
    </select>

    <select id="selectWorkingWeekTimeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROW_NUMBER () OVER() AS ROW_NUM
            , WORK_FACTORY
            , SF_GET_CODE_NM('1014', WORK_FACTORY, #{LOGIN_LOCALE}) AS WORK_FACTORY_NM
            , MAX(CASE  WHEN WEEK_DAY =  0 THEN WORKING_TIME END) AS SUN
            , MAX(CASE  WHEN WEEK_DAY =  1 THEN WORKING_TIME END) AS MON
            , MAX(CASE  WHEN WEEK_DAY =  2 THEN WORKING_TIME END) AS TUE
            , MAX(CASE  WHEN WEEK_DAY =  3 THEN WORKING_TIME END) AS WED
            , MAX(CASE  WHEN WEEK_DAY =  4 THEN WORKING_TIME END) AS THU
            , MAX(CASE  WHEN WEEK_DAY =  5 THEN WORKING_TIME END) AS FRI
            , MAX(CASE  WHEN WEEK_DAY =  6 THEN WORKING_TIME END) AS SAT
        FROM TBL_WORKING_WEEK_TIME
        GROUP BY WORK_FACTORY
        ORDER BY WORK_FACTORY
    </select>

    <update id="updateWorkingWeekTime" parameterType="java.util.HashMap">
        UPDATE TBL_WORKING_WEEK_TIME
        SET
            WORKING_TIME = #{WORKING_TIME},
            UPDATE_DT = NOW(),
            UPDATE_ID = #{LOGIN_USER_ID}
        WHERE 1 = 1
            AND WORK_FACTORY = #{WORK_FACTORY}
            AND WEEK_DAY = #{WEEK_DAY}
    </update>

    <select id="selectGetDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 최초 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(C.BASE_DT,'%Y%m%d'), INTERVAL -7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(C.BASE_DT,'%Y%m%d'), INTERVAL 20 DAY),'%Y%m%d') AS END_DT
        FROM (  SELECT MAX(A.DT) AS BASE_DT
                FROM jmes.TBL_YYYYMMDD A
                WHERE A.DT <![CDATA[ <= ]]> DATE_FORMAT(NOW(),'%Y%m%d')
                    AND DATE_FORMAT(STR_TO_DATE(A.DT,'%Y%m%d'),'%w') = 1
              ) C
    </select>

    <select id="selectGetPreviousDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 이전주: 인자값 시작주차 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL -7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 20 DAY),'%Y%m%d') AS END_DT
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT = #{START_DT}
    </select>

    <select id="selectGetNextDate" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 다음주: 인자값 시작주차 -->
        SELECT DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 7 DAY),'%Y%m%d') AS START_DT
            , DATE_FORMAT(DATE_ADD(STR_TO_DATE(A.DT,'%Y%m%d'), INTERVAL 27 DAY),'%Y%m%d') AS END_DT
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT = #{START_DT}
    </select>

    <select id="selectStatusByClientTableHeader" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <!-- 상단 헤더 -->
        SELECT ROW_NUMBER() OVER(ORDER BY A.DT ) AS DT_SEQ
            , A.DT
            , jmes.SF_GET_DATE_F(DT,'','') AS F_DT
            , CASE DAYOFWEEK(DT)
                WHEN 1 THEN '(일)'
                WHEN 2 THEN '(월)'
                WHEN 3 THEN '(화)'
                WHEN 4 THEN '(수)'
                WHEN 5 THEN '(목)'
                WHEN 6 THEN '(금)'
                WHEN 7 THEN '(토)'
            END AS `DAY`
            , CASE WHEN A.DT = DATE_FORMAT(NOW(),'%Y%m%d') THEN 'Y' ELSE 'N' END AS TODAY_YN
        FROM jmes.TBL_YYYYMMDD A
        WHERE A.DT BETWEEN #{START_DT} AND #{END_DT}  <!-- 조건 -->
    </select>

    <select id="selectStatusByClientTableList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT M.COMP_CD
            , M.COMP_NM
            , M.ORDER_COMP_CD
            , N.SUB_TYPE
            , CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN '품수' ELSE 'EA' END AS SUB_TYPE_NM
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_1 ELSE ORDER_QTY_1 END),0) AS ORDER_1, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_1 ELSE FINISH_QTY_1  END),0) AS FINISH_1, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_1 ELSE REMAIN_QTY_1 END),0) AS REMAIN_1
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_2 ELSE ORDER_QTY_2 END),0) AS ORDER_2, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_2 ELSE FINISH_QTY_2  END),0) AS FINISH_2, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_2 ELSE REMAIN_QTY_2 END),0) AS REMAIN_2
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_3 ELSE ORDER_QTY_3 END),0) AS ORDER_3, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_3 ELSE FINISH_QTY_3  END),0) AS FINISH_3, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_3 ELSE REMAIN_QTY_3 END),0) AS REMAIN_3
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_4 ELSE ORDER_QTY_4 END),0) AS ORDER_4, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_4 ELSE FINISH_QTY_4  END),0) AS FINISH_4, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_4 ELSE REMAIN_QTY_4 END),0) AS REMAIN_4
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_5 ELSE ORDER_QTY_5 END),0) AS ORDER_5, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_5 ELSE FINISH_QTY_5  END),0) AS FINISH_5, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_5 ELSE REMAIN_QTY_5 END),0) AS REMAIN_5
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_6 ELSE ORDER_QTY_6 END),0) AS ORDER_6, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_6 ELSE FINISH_QTY_6  END),0) AS FINISH_6, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_6 ELSE REMAIN_QTY_6 END),0) AS REMAIN_6
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_7 ELSE ORDER_QTY_7 END),0) AS ORDER_7, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_7 ELSE FINISH_QTY_7  END),0) AS FINISH_7, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_7 ELSE REMAIN_QTY_7 END),0) AS REMAIN_7
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_8 ELSE ORDER_QTY_8 END),0) AS ORDER_8, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_8 ELSE FINISH_QTY_8  END),0) AS FINISH_8, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_8 ELSE REMAIN_QTY_8 END),0) AS REMAIN_8
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_9 ELSE ORDER_QTY_9 END),0) AS ORDER_9, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_9 ELSE FINISH_QTY_9  END),0) AS FINISH_9, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_9 ELSE REMAIN_QTY_9 END),0) AS REMAIN_9
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_10 ELSE ORDER_QTY_10 END),0) AS ORDER_10, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_10 ELSE FINISH_QTY_10  END),0) AS FINISH_10, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_10 ELSE REMAIN_QTY_10 END),0) AS REMAIN_10
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_11 ELSE ORDER_QTY_11 END),0) AS ORDER_11, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_11 ELSE FINISH_QTY_11  END),0) AS FINISH_11, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_11 ELSE REMAIN_QTY_11 END),0) AS REMAIN_11
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_12 ELSE ORDER_QTY_12 END),0) AS ORDER_12, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_12 ELSE FINISH_QTY_12  END),0) AS FINISH_12, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_12 ELSE REMAIN_QTY_12 END),0) AS REMAIN_12
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_13 ELSE ORDER_QTY_13 END),0) AS ORDER_13, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_13 ELSE FINISH_QTY_13  END),0) AS FINISH_13, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_13 ELSE REMAIN_QTY_13 END),0) AS REMAIN_13
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_14 ELSE ORDER_QTY_14 END),0) AS ORDER_14, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_14 ELSE FINISH_QTY_14  END),0) AS FINISH_14, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_14 ELSE REMAIN_QTY_14 END),0) AS REMAIN_14
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_15 ELSE ORDER_QTY_15 END),0) AS ORDER_15, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_15 ELSE FINISH_QTY_15  END),0) AS FINISH_15, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_15 ELSE REMAIN_QTY_15 END),0) AS REMAIN_15
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_16 ELSE ORDER_QTY_16 END),0) AS ORDER_16, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_16 ELSE FINISH_QTY_16  END),0) AS FINISH_16, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_16 ELSE REMAIN_QTY_16 END),0) AS REMAIN_16
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_17 ELSE ORDER_QTY_17 END),0) AS ORDER_17, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_17 ELSE FINISH_QTY_17  END),0) AS FINISH_17, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_17 ELSE REMAIN_QTY_17 END),0) AS REMAIN_17
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_18 ELSE ORDER_QTY_18 END),0) AS ORDER_18, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_18 ELSE FINISH_QTY_18  END),0) AS FINISH_18, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_18 ELSE REMAIN_QTY_18 END),0) AS REMAIN_18
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_19 ELSE ORDER_QTY_19 END),0) AS ORDER_19, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_19 ELSE FINISH_QTY_19  END),0) AS FINISH_19, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_19 ELSE REMAIN_QTY_19 END),0) AS REMAIN_19
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_20 ELSE ORDER_QTY_20 END),0) AS ORDER_20, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_20 ELSE FINISH_QTY_20  END),0) AS FINISH_20, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_20 ELSE REMAIN_QTY_20 END),0) AS REMAIN_20
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_21 ELSE ORDER_QTY_21 END),0) AS ORDER_21, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_21 ELSE FINISH_QTY_21  END),0) AS FINISH_21, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_21 ELSE REMAIN_QTY_21 END),0) AS REMAIN_21
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_22 ELSE ORDER_QTY_22 END),0) AS ORDER_22, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_22 ELSE FINISH_QTY_22  END),0) AS FINISH_22, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_22 ELSE REMAIN_QTY_21 END),0) AS REMAIN_22
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_23 ELSE ORDER_QTY_23 END),0) AS ORDER_23, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_23 ELSE FINISH_QTY_23  END),0) AS FINISH_23, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_23 ELSE REMAIN_QTY_21 END),0) AS REMAIN_23
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_24 ELSE ORDER_QTY_24 END),0) AS ORDER_24, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_24 ELSE FINISH_QTY_24  END),0) AS FINISH_24, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_24 ELSE REMAIN_QTY_21 END),0) AS REMAIN_24
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_25 ELSE ORDER_QTY_25 END),0) AS ORDER_25, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_25 ELSE FINISH_QTY_25  END),0) AS FINISH_25, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_25 ELSE REMAIN_QTY_21 END),0) AS REMAIN_25
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_26 ELSE ORDER_QTY_26 END),0) AS ORDER_26, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_26 ELSE FINISH_QTY_26  END),0) AS FINISH_26, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_26 ELSE REMAIN_QTY_21 END),0) AS REMAIN_26
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_27 ELSE ORDER_QTY_27 END),0) AS ORDER_27, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_27 ELSE FINISH_QTY_27  END),0) AS FINISH_27, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_27 ELSE REMAIN_QTY_21 END),0) AS REMAIN_27
            , IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN ORDER_CNT_28 ELSE ORDER_QTY_28 END),0) AS ORDER_28, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN FINISH_CNT_28 ELSE FINISH_QTY_28  END),0) AS FINISH_28, IFNULL(MAX(CASE WHEN N.SUB_TYPE = 'PART_CNT' THEN REMAIN_CNT_28 ELSE REMAIN_QTY_21 END),0) AS REMAIN_28
        FROM (  SELECT V.COMP_CD
                    , V.COMP_NM
                    , W.ORDER_COMP_CD
                    , W.ORDER_CNT_1, W.FINISH_CNT_1, W.REMAIN_CNT_1
                    , W.ORDER_CNT_2, W.FINISH_CNT_2, W.REMAIN_CNT_2
                    , W.ORDER_CNT_3, W.FINISH_CNT_3, W.REMAIN_CNT_3
                    , W.ORDER_CNT_4, W.FINISH_CNT_4, W.REMAIN_CNT_4
                    , W.ORDER_CNT_5, W.FINISH_CNT_5, W.REMAIN_CNT_5
                    , W.ORDER_CNT_6, W.FINISH_CNT_6, W.REMAIN_CNT_6
                    , W.ORDER_CNT_7, W.FINISH_CNT_7, W.REMAIN_CNT_7
                    , W.ORDER_CNT_8, W.FINISH_CNT_8, W.REMAIN_CNT_8
                    , W.ORDER_CNT_9, W.FINISH_CNT_9, W.REMAIN_CNT_9
                    , W.ORDER_CNT_10, W.FINISH_CNT_10, W.REMAIN_CNT_10
                    , W.ORDER_CNT_11, W.FINISH_CNT_11, W.REMAIN_CNT_11
                    , W.ORDER_CNT_12, W.FINISH_CNT_12, W.REMAIN_CNT_12
                    , W.ORDER_CNT_13, W.FINISH_CNT_13, W.REMAIN_CNT_13
                    , W.ORDER_CNT_14, W.FINISH_CNT_14, W.REMAIN_CNT_14
                    , W.ORDER_CNT_15, W.FINISH_CNT_15, W.REMAIN_CNT_15
                    , W.ORDER_CNT_16, W.FINISH_CNT_16, W.REMAIN_CNT_16
                    , W.ORDER_CNT_17, W.FINISH_CNT_17, W.REMAIN_CNT_17
                    , W.ORDER_CNT_18, W.FINISH_CNT_18, W.REMAIN_CNT_18
                    , W.ORDER_CNT_19, W.FINISH_CNT_19, W.REMAIN_CNT_19
                    , W.ORDER_CNT_20, W.FINISH_CNT_20, W.REMAIN_CNT_20
                    , W.ORDER_CNT_21, W.FINISH_CNT_21, W.REMAIN_CNT_21
                    , W.ORDER_CNT_22, W.FINISH_CNT_22, W.REMAIN_CNT_22
                    , W.ORDER_CNT_23, W.FINISH_CNT_23, W.REMAIN_CNT_23
                    , W.ORDER_CNT_24, W.FINISH_CNT_24, W.REMAIN_CNT_24
                    , W.ORDER_CNT_25, W.FINISH_CNT_25, W.REMAIN_CNT_25
                    , W.ORDER_CNT_26, W.FINISH_CNT_26, W.REMAIN_CNT_26
                    , W.ORDER_CNT_27, W.FINISH_CNT_27, W.REMAIN_CNT_27
                    , W.ORDER_CNT_28, W.FINISH_CNT_28, W.REMAIN_CNT_28
                    , W.ORDER_QTY_1, W.FINISH_QTY_1, W.REMAIN_QTY_1
                    , W.ORDER_QTY_2, W.FINISH_QTY_2, W.REMAIN_QTY_2
                    , W.ORDER_QTY_3, W.FINISH_QTY_3, W.REMAIN_QTY_3
                    , W.ORDER_QTY_4, W.FINISH_QTY_4, W.REMAIN_QTY_4
                    , W.ORDER_QTY_5, W.FINISH_QTY_5, W.REMAIN_QTY_5
                    , W.ORDER_QTY_6, W.FINISH_QTY_6, W.REMAIN_QTY_6
                    , W.ORDER_QTY_7, W.FINISH_QTY_7, W.REMAIN_QTY_7
                    , W.ORDER_QTY_8, W.FINISH_QTY_8, W.REMAIN_QTY_8
                    , W.ORDER_QTY_9, W.FINISH_QTY_9, W.REMAIN_QTY_9
                    , W.ORDER_QTY_10, W.FINISH_QTY_10, W.REMAIN_QTY_10
                    , W.ORDER_QTY_11, W.FINISH_QTY_11, W.REMAIN_QTY_11
                    , W.ORDER_QTY_12, W.FINISH_QTY_12, W.REMAIN_QTY_12
                    , W.ORDER_QTY_13, W.FINISH_QTY_13, W.REMAIN_QTY_13
                    , W.ORDER_QTY_14, W.FINISH_QTY_14, W.REMAIN_QTY_14
                    , W.ORDER_QTY_15, W.FINISH_QTY_15, W.REMAIN_QTY_15
                    , W.ORDER_QTY_16, W.FINISH_QTY_16, W.REMAIN_QTY_16
                    , W.ORDER_QTY_17, W.FINISH_QTY_17, W.REMAIN_QTY_17
                    , W.ORDER_QTY_18, W.FINISH_QTY_18, W.REMAIN_QTY_18
                    , W.ORDER_QTY_19, W.FINISH_QTY_19, W.REMAIN_QTY_19
                    , W.ORDER_QTY_20, W.FINISH_QTY_20, W.REMAIN_QTY_20
                    , W.ORDER_QTY_21, W.FINISH_QTY_21, W.REMAIN_QTY_21
                    , W.ORDER_QTY_22, W.FINISH_QTY_22, W.REMAIN_QTY_22
                    , W.ORDER_QTY_23, W.FINISH_QTY_23, W.REMAIN_QTY_23
                    , W.ORDER_QTY_24, W.FINISH_QTY_24, W.REMAIN_QTY_24
                    , W.ORDER_QTY_25, W.FINISH_QTY_25, W.REMAIN_QTY_25
                    , W.ORDER_QTY_26, W.FINISH_QTY_26, W.REMAIN_QTY_26
                    , W.ORDER_QTY_27, W.FINISH_QTY_27, W.REMAIN_QTY_27
                    , W.ORDER_QTY_28, W.FINISH_QTY_28, W.REMAIN_QTY_28
                FROM (  SELECT A.COMP_CD, A.COMP_NM
                        FROM jmes.TBL_COMPANY A
                        WHERE A.ORDER_COMPANY_YN = 'Y'
                            AND A.ACTIVE_YN = 'Y'
                        <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                            AND A.COMP_CD IN (${HIDDEN_ORDER_COMP_CD}) <!-- 가변조건 -->
                        </if>
                        UNION ALL
                        SELECT 'TOTAL' AS COMP_CD, '합계' AS COMP_NM
                        FROM DUAL
                      ) V LEFT OUTER JOIN ( SELECT IFNULL(Z.ORDER_COMP_CD,'TOTAL') AS ORDER_COMP_CD
                                                , SUM(Z.ORDER_CNT_1) AS ORDER_CNT_1, SUM(Z.FINISH_CNT_1) AS FINISH_CNT_1, SUM(Z.REMAIN_CNT_1) AS REMAIN_CNT_1
                                                , SUM(Z.ORDER_CNT_2) AS ORDER_CNT_2, SUM(Z.FINISH_CNT_2) AS FINISH_CNT_2, SUM(Z.REMAIN_CNT_2) AS REMAIN_CNT_2
                                                , SUM(Z.ORDER_CNT_3) AS ORDER_CNT_3, SUM(Z.FINISH_CNT_3) AS FINISH_CNT_3, SUM(Z.REMAIN_CNT_3) AS REMAIN_CNT_3
                                                , SUM(Z.ORDER_CNT_4) AS ORDER_CNT_4, SUM(Z.FINISH_CNT_4) AS FINISH_CNT_4, SUM(Z.REMAIN_CNT_4) AS REMAIN_CNT_4
                                                , SUM(Z.ORDER_CNT_5) AS ORDER_CNT_5, SUM(Z.FINISH_CNT_5) AS FINISH_CNT_5, SUM(Z.REMAIN_CNT_5) AS REMAIN_CNT_5
                                                , SUM(Z.ORDER_CNT_6) AS ORDER_CNT_6, SUM(Z.FINISH_CNT_6) AS FINISH_CNT_6, SUM(Z.REMAIN_CNT_6) AS REMAIN_CNT_6
                                                , SUM(Z.ORDER_CNT_7) AS ORDER_CNT_7, SUM(Z.FINISH_CNT_7) AS FINISH_CNT_7, SUM(Z.REMAIN_CNT_7) AS REMAIN_CNT_7
                                                , SUM(Z.ORDER_CNT_8) AS ORDER_CNT_8, SUM(Z.FINISH_CNT_8) AS FINISH_CNT_8, SUM(Z.REMAIN_CNT_8) AS REMAIN_CNT_8
                                                , SUM(Z.ORDER_CNT_9) AS ORDER_CNT_9, SUM(Z.FINISH_CNT_9) AS FINISH_CNT_9, SUM(Z.REMAIN_CNT_9) AS REMAIN_CNT_9
                                                , SUM(Z.ORDER_CNT_10) AS ORDER_CNT_10, SUM(Z.FINISH_CNT_10) AS FINISH_CNT_10, SUM(Z.REMAIN_CNT_10) AS REMAIN_CNT_10
                                                , SUM(Z.ORDER_CNT_11) AS ORDER_CNT_11, SUM(Z.FINISH_CNT_11) AS FINISH_CNT_11, SUM(Z.REMAIN_CNT_11) AS REMAIN_CNT_11
                                                , SUM(Z.ORDER_CNT_12) AS ORDER_CNT_12, SUM(Z.FINISH_CNT_12) AS FINISH_CNT_12, SUM(Z.REMAIN_CNT_12) AS REMAIN_CNT_12
                                                , SUM(Z.ORDER_CNT_13) AS ORDER_CNT_13, SUM(Z.FINISH_CNT_13) AS FINISH_CNT_13, SUM(Z.REMAIN_CNT_13) AS REMAIN_CNT_13
                                                , SUM(Z.ORDER_CNT_14) AS ORDER_CNT_14, SUM(Z.FINISH_CNT_14) AS FINISH_CNT_14, SUM(Z.REMAIN_CNT_14) AS REMAIN_CNT_14
                                                , SUM(Z.ORDER_CNT_15) AS ORDER_CNT_15, SUM(Z.FINISH_CNT_15) AS FINISH_CNT_15, SUM(Z.REMAIN_CNT_15) AS REMAIN_CNT_15
                                                , SUM(Z.ORDER_CNT_16) AS ORDER_CNT_16, SUM(Z.FINISH_CNT_16) AS FINISH_CNT_16, SUM(Z.REMAIN_CNT_16) AS REMAIN_CNT_16
                                                , SUM(Z.ORDER_CNT_17) AS ORDER_CNT_17, SUM(Z.FINISH_CNT_17) AS FINISH_CNT_17, SUM(Z.REMAIN_CNT_17) AS REMAIN_CNT_17
                                                , SUM(Z.ORDER_CNT_18) AS ORDER_CNT_18, SUM(Z.FINISH_CNT_18) AS FINISH_CNT_18, SUM(Z.REMAIN_CNT_18) AS REMAIN_CNT_18
                                                , SUM(Z.ORDER_CNT_19) AS ORDER_CNT_19, SUM(Z.FINISH_CNT_19) AS FINISH_CNT_19, SUM(Z.REMAIN_CNT_19) AS REMAIN_CNT_19
                                                , SUM(Z.ORDER_CNT_20) AS ORDER_CNT_20, SUM(Z.FINISH_CNT_20) AS FINISH_CNT_20, SUM(Z.REMAIN_CNT_20) AS REMAIN_CNT_20
                                                , SUM(Z.ORDER_CNT_21) AS ORDER_CNT_21, SUM(Z.FINISH_CNT_21) AS FINISH_CNT_21, SUM(Z.REMAIN_CNT_21) AS REMAIN_CNT_21
                                                , SUM(Z.ORDER_CNT_22) AS ORDER_CNT_22, SUM(Z.FINISH_CNT_22) AS FINISH_CNT_22, SUM(Z.REMAIN_CNT_22) AS REMAIN_CNT_22
                                                , SUM(Z.ORDER_CNT_23) AS ORDER_CNT_23, SUM(Z.FINISH_CNT_23) AS FINISH_CNT_23, SUM(Z.REMAIN_CNT_23) AS REMAIN_CNT_23
                                                , SUM(Z.ORDER_CNT_24) AS ORDER_CNT_24, SUM(Z.FINISH_CNT_24) AS FINISH_CNT_24, SUM(Z.REMAIN_CNT_24) AS REMAIN_CNT_24
                                                , SUM(Z.ORDER_CNT_25) AS ORDER_CNT_25, SUM(Z.FINISH_CNT_25) AS FINISH_CNT_25, SUM(Z.REMAIN_CNT_25) AS REMAIN_CNT_25
                                                , SUM(Z.ORDER_CNT_26) AS ORDER_CNT_26, SUM(Z.FINISH_CNT_26) AS FINISH_CNT_26, SUM(Z.REMAIN_CNT_26) AS REMAIN_CNT_26
                                                , SUM(Z.ORDER_CNT_27) AS ORDER_CNT_27, SUM(Z.FINISH_CNT_27) AS FINISH_CNT_27, SUM(Z.REMAIN_CNT_27) AS REMAIN_CNT_27
                                                , SUM(Z.ORDER_CNT_28) AS ORDER_CNT_28, SUM(Z.FINISH_CNT_28) AS FINISH_CNT_28, SUM(Z.REMAIN_CNT_28) AS REMAIN_CNT_28
                                                , SUM(Z.ORDER_QTY_1) AS ORDER_QTY_1, SUM(Z.FINISH_QTY_1) AS FINISH_QTY_1, SUM(Z.REMAIN_QTY_1) AS REMAIN_QTY_1
                                                , SUM(Z.ORDER_QTY_2) AS ORDER_QTY_2, SUM(Z.FINISH_QTY_2) AS FINISH_QTY_2, SUM(Z.REMAIN_QTY_2) AS REMAIN_QTY_2
                                                , SUM(Z.ORDER_QTY_3) AS ORDER_QTY_3, SUM(Z.FINISH_QTY_3) AS FINISH_QTY_3, SUM(Z.REMAIN_QTY_3) AS REMAIN_QTY_3
                                                , SUM(Z.ORDER_QTY_4) AS ORDER_QTY_4, SUM(Z.FINISH_QTY_4) AS FINISH_QTY_4, SUM(Z.REMAIN_QTY_4) AS REMAIN_QTY_4
                                                , SUM(Z.ORDER_QTY_5) AS ORDER_QTY_5, SUM(Z.FINISH_QTY_5) AS FINISH_QTY_5, SUM(Z.REMAIN_QTY_5) AS REMAIN_QTY_5
                                                , SUM(Z.ORDER_QTY_6) AS ORDER_QTY_6, SUM(Z.FINISH_QTY_6) AS FINISH_QTY_6, SUM(Z.REMAIN_QTY_6) AS REMAIN_QTY_6
                                                , SUM(Z.ORDER_QTY_7) AS ORDER_QTY_7, SUM(Z.FINISH_QTY_7) AS FINISH_QTY_7, SUM(Z.REMAIN_QTY_7) AS REMAIN_QTY_7
                                                , SUM(Z.ORDER_QTY_8) AS ORDER_QTY_8, SUM(Z.FINISH_QTY_8) AS FINISH_QTY_8, SUM(Z.REMAIN_QTY_8) AS REMAIN_QTY_8
                                                , SUM(Z.ORDER_QTY_9) AS ORDER_QTY_9, SUM(Z.FINISH_QTY_9) AS FINISH_QTY_9, SUM(Z.REMAIN_QTY_9) AS REMAIN_QTY_9
                                                , SUM(Z.ORDER_QTY_10) AS ORDER_QTY_10, SUM(Z.FINISH_QTY_10) AS FINISH_QTY_10, SUM(Z.REMAIN_QTY_10) AS REMAIN_QTY_10
                                                , SUM(Z.ORDER_QTY_11) AS ORDER_QTY_11, SUM(Z.FINISH_QTY_11) AS FINISH_QTY_11, SUM(Z.REMAIN_QTY_11) AS REMAIN_QTY_11
                                                , SUM(Z.ORDER_QTY_12) AS ORDER_QTY_12, SUM(Z.FINISH_QTY_12) AS FINISH_QTY_12, SUM(Z.REMAIN_QTY_12) AS REMAIN_QTY_12
                                                , SUM(Z.ORDER_QTY_13) AS ORDER_QTY_13, SUM(Z.FINISH_QTY_13) AS FINISH_QTY_13, SUM(Z.REMAIN_QTY_13) AS REMAIN_QTY_13
                                                , SUM(Z.ORDER_QTY_14) AS ORDER_QTY_14, SUM(Z.FINISH_QTY_14) AS FINISH_QTY_14, SUM(Z.REMAIN_QTY_14) AS REMAIN_QTY_14
                                                , SUM(Z.ORDER_QTY_15) AS ORDER_QTY_15, SUM(Z.FINISH_QTY_15) AS FINISH_QTY_15, SUM(Z.REMAIN_QTY_15) AS REMAIN_QTY_15
                                                , SUM(Z.ORDER_QTY_16) AS ORDER_QTY_16, SUM(Z.FINISH_QTY_16) AS FINISH_QTY_16, SUM(Z.REMAIN_QTY_16) AS REMAIN_QTY_16
                                                , SUM(Z.ORDER_QTY_17) AS ORDER_QTY_17, SUM(Z.FINISH_QTY_17) AS FINISH_QTY_17, SUM(Z.REMAIN_QTY_17) AS REMAIN_QTY_17
                                                , SUM(Z.ORDER_QTY_18) AS ORDER_QTY_18, SUM(Z.FINISH_QTY_18) AS FINISH_QTY_18, SUM(Z.REMAIN_QTY_18) AS REMAIN_QTY_18
                                                , SUM(Z.ORDER_QTY_19) AS ORDER_QTY_19, SUM(Z.FINISH_QTY_19) AS FINISH_QTY_19, SUM(Z.REMAIN_QTY_19) AS REMAIN_QTY_19
                                                , SUM(Z.ORDER_QTY_20) AS ORDER_QTY_20, SUM(Z.FINISH_QTY_20) AS FINISH_QTY_20, SUM(Z.REMAIN_QTY_20) AS REMAIN_QTY_20
                                                , SUM(Z.ORDER_QTY_21) AS ORDER_QTY_21, SUM(Z.FINISH_QTY_21) AS FINISH_QTY_21, SUM(Z.REMAIN_QTY_21) AS REMAIN_QTY_21
                                                , SUM(Z.ORDER_QTY_22) AS ORDER_QTY_22, SUM(Z.FINISH_QTY_22) AS FINISH_QTY_22, SUM(Z.REMAIN_QTY_22) AS REMAIN_QTY_22
                                                , SUM(Z.ORDER_QTY_23) AS ORDER_QTY_23, SUM(Z.FINISH_QTY_23) AS FINISH_QTY_23, SUM(Z.REMAIN_QTY_23) AS REMAIN_QTY_23
                                                , SUM(Z.ORDER_QTY_24) AS ORDER_QTY_24, SUM(Z.FINISH_QTY_24) AS FINISH_QTY_24, SUM(Z.REMAIN_QTY_24) AS REMAIN_QTY_24
                                                , SUM(Z.ORDER_QTY_25) AS ORDER_QTY_25, SUM(Z.FINISH_QTY_25) AS FINISH_QTY_25, SUM(Z.REMAIN_QTY_25) AS REMAIN_QTY_25
                                                , SUM(Z.ORDER_QTY_26) AS ORDER_QTY_26, SUM(Z.FINISH_QTY_26) AS FINISH_QTY_26, SUM(Z.REMAIN_QTY_26) AS REMAIN_QTY_26
                                                , SUM(Z.ORDER_QTY_27) AS ORDER_QTY_27, SUM(Z.FINISH_QTY_27) AS FINISH_QTY_27, SUM(Z.REMAIN_QTY_27) AS REMAIN_QTY_27
                                                , SUM(Z.ORDER_QTY_28) AS ORDER_QTY_28, SUM(Z.FINISH_QTY_28) AS FINISH_QTY_28, SUM(Z.REMAIN_QTY_28) AS REMAIN_QTY_28
                                            FROM (  SELECT X.ORDER_COMP_CD
                                                        , MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_CNT END) AS ORDER_CNT_1, MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_CNT END) AS FINISH_CNT_1, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_1
                                                        , MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_CNT END) AS ORDER_CNT_2, MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_CNT END) AS FINISH_CNT_2, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_2
                                                        , MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_CNT END) AS ORDER_CNT_3, MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_CNT END) AS FINISH_CNT_3, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_3
                                                        , MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_CNT END) AS ORDER_CNT_4, MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_CNT END) AS FINISH_CNT_4, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_4
                                                        , MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_CNT END) AS ORDER_CNT_5, MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_CNT END) AS FINISH_CNT_5, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_5
                                                        , MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_CNT END) AS ORDER_CNT_6, MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_CNT END) AS FINISH_CNT_6, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_6
                                                        , MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_CNT END) AS ORDER_CNT_7, MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_CNT END) AS FINISH_CNT_7, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_7
                                                        , MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_CNT END) AS ORDER_CNT_8, MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_CNT END) AS FINISH_CNT_8, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_8
                                                        , MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_CNT END) AS ORDER_CNT_9, MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_CNT END) AS FINISH_CNT_9, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_9
                                                        , MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_CNT END) AS ORDER_CNT_10, MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_CNT END) AS FINISH_CNT_10, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_10
                                                        , MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_CNT END) AS ORDER_CNT_11, MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_CNT END) AS FINISH_CNT_11, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_11
                                                        , MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_CNT END) AS ORDER_CNT_12, MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_CNT END) AS FINISH_CNT_12, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_12
                                                        , MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_CNT END) AS ORDER_CNT_13, MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_CNT END) AS FINISH_CNT_13, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_13
                                                        , MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_CNT END) AS ORDER_CNT_14, MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_CNT END) AS FINISH_CNT_14, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_14
                                                        , MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_CNT END) AS ORDER_CNT_15, MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_CNT END) AS FINISH_CNT_15, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_15
                                                        , MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_CNT END) AS ORDER_CNT_16, MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_CNT END) AS FINISH_CNT_16, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_16
                                                        , MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_CNT END) AS ORDER_CNT_17, MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_CNT END) AS FINISH_CNT_17, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_17
                                                        , MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_CNT END) AS ORDER_CNT_18, MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_CNT END) AS FINISH_CNT_18, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_18
                                                        , MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_CNT END) AS ORDER_CNT_19, MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_CNT END) AS FINISH_CNT_19, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_19
                                                        , MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_CNT END) AS ORDER_CNT_20, MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_CNT END) AS FINISH_CNT_20, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_20
                                                        , MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_CNT END) AS ORDER_CNT_21, MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_CNT END) AS FINISH_CNT_21, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_21
                                                        , MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_CNT END) AS ORDER_CNT_22, MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_CNT END) AS FINISH_CNT_22, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_22
                                                        , MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_CNT END) AS ORDER_CNT_23, MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_CNT END) AS FINISH_CNT_23, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_23
                                                        , MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_CNT END) AS ORDER_CNT_24, MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_CNT END) AS FINISH_CNT_24, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_24
                                                        , MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_CNT END) AS ORDER_CNT_25, MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_CNT END) AS FINISH_CNT_25, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_25
                                                        , MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_CNT END) AS ORDER_CNT_26, MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_CNT END) AS FINISH_CNT_26, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_26
                                                        , MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_CNT END) AS ORDER_CNT_27, MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_CNT END) AS FINISH_CNT_27, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_27
                                                        , MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_CNT END) AS ORDER_CNT_28, MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_CNT END) AS FINISH_CNT_28, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_CNT END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_CNT END),0) AS REMAIN_CNT_28
                                                        , MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_QTY END) AS ORDER_QTY_1, MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_QTY END) AS FINISH_QTY_1, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 1 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_1
                                                        , MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_QTY END) AS ORDER_QTY_2, MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_QTY END) AS FINISH_QTY_2, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 2 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_2
                                                        , MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_QTY END) AS ORDER_QTY_3, MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_QTY END) AS FINISH_QTY_3, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 3 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_3
                                                        , MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_QTY END) AS ORDER_QTY_4, MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_QTY END) AS FINISH_QTY_4, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 4 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_4
                                                        , MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_QTY END) AS ORDER_QTY_5, MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_QTY END) AS FINISH_QTY_5, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 5 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_5
                                                        , MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_QTY END) AS ORDER_QTY_6, MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_QTY END) AS FINISH_QTY_6, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 6 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_6
                                                        , MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_QTY END) AS ORDER_QTY_7, MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_QTY END) AS FINISH_QTY_7, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 7 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_7
                                                        , MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_QTY END) AS ORDER_QTY_8, MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_QTY END) AS FINISH_QTY_8, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 8 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_8
                                                        , MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_QTY END) AS ORDER_QTY_9, MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_QTY END) AS FINISH_QTY_9, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 9 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_9
                                                        , MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_QTY END) AS ORDER_QTY_10, MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_QTY END) AS FINISH_QTY_10, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 10 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_10
                                                        , MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_QTY END) AS ORDER_QTY_11, MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_QTY END) AS FINISH_QTY_11, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 11 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_11
                                                        , MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_QTY END) AS ORDER_QTY_12, MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_QTY END) AS FINISH_QTY_12, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 12 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_12
                                                        , MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_QTY END) AS ORDER_QTY_13, MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_QTY END) AS FINISH_QTY_13, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 13 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_13
                                                        , MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_QTY END) AS ORDER_QTY_14, MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_QTY END) AS FINISH_QTY_14, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 14 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_14
                                                        , MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_QTY END) AS ORDER_QTY_15, MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_QTY END) AS FINISH_QTY_15, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 15 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_15
                                                        , MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_QTY END) AS ORDER_QTY_16, MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_QTY END) AS FINISH_QTY_16, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 16 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_16
                                                        , MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_QTY END) AS ORDER_QTY_17, MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_QTY END) AS FINISH_QTY_17, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 17 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_17
                                                        , MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_QTY END) AS ORDER_QTY_18, MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_QTY END) AS FINISH_QTY_18, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 18 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_18
                                                        , MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_QTY END) AS ORDER_QTY_19, MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_QTY END) AS FINISH_QTY_19, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 19 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_19
                                                        , MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_QTY END) AS ORDER_QTY_20, MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_QTY END) AS FINISH_QTY_20, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 20 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_20
                                                        , MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_QTY END) AS ORDER_QTY_21, MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_QTY END) AS FINISH_QTY_21, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 21 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_21
                                                        , MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_QTY END) AS ORDER_QTY_22, MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_QTY END) AS FINISH_QTY_22, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 22 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_22
                                                        , MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_QTY END) AS ORDER_QTY_23, MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_QTY END) AS FINISH_QTY_23, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 23 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_23
                                                        , MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_QTY END) AS ORDER_QTY_24, MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_QTY END) AS FINISH_QTY_24, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 24 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_24
                                                        , MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_QTY END) AS ORDER_QTY_25, MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_QTY END) AS FINISH_QTY_25, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 25 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_25
                                                        , MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_QTY END) AS ORDER_QTY_26, MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_QTY END) AS FINISH_QTY_26, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 26 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_26
                                                        , MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_QTY END) AS ORDER_QTY_27, MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_QTY END) AS FINISH_QTY_27, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 27 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_27
                                                        , MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_QTY END) AS ORDER_QTY_28, MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_QTY END) AS FINISH_QTY_28, IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.ORDER_QTY END),0) - IFNULL(MAX(CASE WHEN Y.DT_SEQ = 28 THEN X.FINISH_QTY END),0) AS REMAIN_QTY_28
                                                    FROM  ( SELECT P.ORDER_COMP_CD
                                                                , P.ORDER_DUE_DT
                                                                , SUM(1) AS ORDER_CNT
                                                                , SUM(P.PART_QTY) AS ORDER_QTY
                                                                , SUM(CASE WHEN P.INNER_WORK_FINISH_YN = 'Y' THEN 1 ELSE 0 END) AS FINISH_CNT
                                                                , SUM(CASE WHEN P.INNER_WORK_FINISH_YN = 'Y' THEN P.PART_QTY ELSE 0 END) AS FINISH_QTY
                                                            FROM (  SELECT C.CONTROL_SEQ
                                                                        , C.CONTROL_DETAIL_SEQ
                                                                        , B.ORDER_COMP_CD
                                                                        , A.ORDER_DUE_DT
                                                                        , jmes.SF_GET_CONTROL_PART_QTY(C.CONTROL_SEQ, C.CONTROL_DETAIL_SEQ) AS PART_QTY
                                                                        , CASE WHEN C.INNER_WORK_FINISH_DT IS NULL THEN 'N' ELSE 'Y' END AS INNER_WORK_FINISH_YN
                                                                    FROM (  SELECT M.CONTROL_SEQ
                                                                                , MAX(M.ORDER_DUE_DT) AS ORDER_DUE_DT
                                                                            FROM jmes.TBL_CONTROL_PART_ORDER M
                                                                            GROUP BY M.CONTROL_SEQ
                                                                            HAVING MAX(M.ORDER_DUE_DT) BETWEEN #{START_DT} AND #{END_DT} <!-- 조건 -->
                                                                          ) A
                                                                        , jmes.TBL_CONTROL B
                                                                        , jmes.TBL_CONTROL_PART C
                                                                    WHERE A.CONTROL_SEQ = B.CONTROL_SEQ
                                                                        AND A.CONTROL_SEQ = C.CONTROL_SEQ
                                                                        AND B.DEL_YN = 'N'
                                                                        AND C.WORK_TYPE != 'WTP020'
                                                                    <if test="ORDER_COMP_CD != null and ORDER_COMP_CD != ''">
                                                                        AND B.ORDER_COMP_CD IN (${HIDDEN_ORDER_COMP_CD}) <!-- 가변조건 -->
                                                                    </if>
                                                                  ) P
                                                            GROUP BY P.ORDER_COMP_CD, P.ORDER_DUE_DT
                                                           ) X
                                                        , (  SELECT ROW_NUMBER() OVER(ORDER BY A.DT ) AS DT_SEQ
                                                                , A.DT
                                                                , jmes.SF_GET_DATE_F(DT,'','') AS F_DT
                                                            FROM jmes.TBL_YYYYMMDD A
                                                            WHERE A.DT BETWEEN #{START_DT} AND #{END_DT}  <!-- 조건 -->
                                                          ) Y
                                                    WHERE X.ORDER_DUE_DT = Y.DT
                                                    GROUP BY X.ORDER_COMP_CD
                                                  ) Z
                                            GROUP BY Z.ORDER_COMP_CD WITH ROLLUP
                                          ) W ON V.COMP_CD = W.ORDER_COMP_CD
                ) M
             , ( SELECT 'PART_CNT' AS SUB_TYPE FROM DUAL UNION ALL SELECT 'PART_QTY' AS SUB_TYPE FROM DUAL) N
        WHERE 1 = 1
            <if test="ONLY_DATA_CHK != null and ONLY_DATA_CHK != ''">
            AND M.ORDER_COMP_CD IS NOT NULL     <!-- 가변조건 -->
            </if>
        GROUP BY M.COMP_CD, M.COMP_NM, N.SUB_TYPE
        ORDER BY M.COMP_CD, N.SUB_TYPE
    </select>

</mapper>