<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="systemMapper">

    <select id="getUserAuthorize" parameterType="java.util.HashMap" resultType="java.util.HashMap">
		SELECT DATE_FORMAT(NOW(), '%Y%m%d') AS CURDATE FROM DUAL
	</select>

    <select id="selectUserMasterList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT USER_ID,
               USER_NM,
               USER_PWD,
               DEL_YN,
               SF_GET_CODE_NM(1042, DEL_YN, 'EN') AS DEL_YN_NM
        FROM TBL_USER
        WHERE 1=1
            <if test="user_id != null and user_id != ''">
                AND USER_ID LIKE CONCAT('%', #{user_id}, '%')
            </if>
            <if test="sel_user_nm != null and sel_user_nm != ''">
                AND upper(USER_NM) LIKE CONCAT('%', upper(#{sel_user_nm}), '%')
            </if>
        LIMIT 20
    </select>

    <insert id="insertUser" parameterType="java.util.HashMap">
		INSERT INTO TBL_USER
            (USER_ID, USER_NM, USER_PWD, DEL_YN, ROLE_SEQ, INSERT_DT, INSERT_ID, UPDATE_DT, UPDATE_ID)
        VALUES(#{USER_ID}, #{USER_NM}, #{USER_PWD}, 'N', NULL, NOW(), NULL, NULL, NULL)
	</insert>

    <update id="updateUser" parameterType="java.util.HashMap">
      UPDATE TBL_USER
      SET USER_NM = #{USER_NM},
          USER_PWD = #{USER_PWD}
      WHERE USER_ID = #{USER_ID}
   </update>

    <delete id="deleteUser" parameterType="java.util.HashMap">
      DELETE FROM TBL_USER
      WHERE USER_ID = #{USER_ID}
           AND USER_NM = #{USER_NM}
   </delete>

    <select id="selectSessionCodeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.HIGH_CD, A.CODE_CD, B.CODE_NM AS CODE_NM_KR, C.CODE_NM AS CODE_NM_EN, A.REF_CD
        FROM TBL_CODE A
            INNER JOIN TBL_CODE_LANG B ON A.HIGH_CD = B.HIGH_CD AND A.CODE_CD = B.CODE_CD AND B.LANG_CD = 'KR'
            INNER JOIN TBL_CODE_LANG C ON A.HIGH_CD = C.HIGH_CD AND A.CODE_CD = C.CODE_CD AND C.LANG_CD = 'EN'
        WHERE A.DEL_YN = 'N'
    </select>

    <select id="selectSessionMenuList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        WITH RECURSIVE MENU_CTE AS
		(
			SELECT
                A.MENU_SEQ, A.MENU_LINK, A.PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
				B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
				SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM,
                CONCAT(A.SORT_NUM, 0) AS CD_NO
			FROM TBL_MENU A
				INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
				INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
			WHERE 1 = 1
				AND A.DEL_YN = 'N' AND A.PARENT_MENU_SEQ = 0
			UNION ALL
			SELECT
                A.MENU_SEQ, A.MENU_LINK, A.PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
				B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
				SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM,
                CONCAT(D.SORT_NUM, A.SORT_NUM) AS CD_NO
			FROM TBL_MENU A
				INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
				INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
				INNER JOIN TBL_MENU D ON A.PARENT_MENU_SEQ = D.MENU_SEQ
				INNER JOIN MENU_CTE E ON E.MENU_SEQ = A.PARENT_MENU_SEQ
			WHERE 1 = 1
				AND A.DEL_YN = 'N'
				AND A.PARENT_MENU_SEQ > 0
		)
		SELECT
			A.MENU_SEQ, CONCAT('/static', B.MENU_LINK, A.MENU_LINK) AS MENU_LINK,
			CASE WHEN A.PARENT_MENU_SEQ = '0' THEN A.MENU_NM_EN ELSE '' END PARENT_MENU_NM,
			CASE WHEN A.PARENT_MENU_SEQ = '0' THEN '' ELSE A.MENU_NM_EN END MENU_NM,
			A.PARENT_MENU_SEQ, CONCAT(1000, CD_NO) AS CD_NO
		FROM MENU_CTE A
			LEFT OUTER JOIN TBL_MENU B ON A.PARENT_MENU_SEQ = B.MENU_SEQ
		WHERE 1 = 1
		ORDER BY CAST(A.CD_NO AS DOUBLE)
    </select>

    <select id="selectUserTopMenuList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.MENU_SEQ, A.MENU_LINK, A.PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
			B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
			SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM
        FROM TBL_MENU A
            INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
            INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
        WHERE A.PARENT_MENU_SEQ = 0
    </select>

    <select id="selectUserSubMenuList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
      SELECT
            A.MENU_SEQ, A.MENU_SEQ AS MENU_SUB_SEQ, A.MENU_LINK, #{PARENT_MENU_SEQ} AS PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
			B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
			SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM
        FROM TBL_MENU A
            INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
            INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
        WHERE A.PARENT_MENU_SEQ = #{PARENT_MENU_SEQ}
    </select>

    <insert id="insertTopMenuCode" parameterType="java.util.HashMap" >
       INSERT INTO TBL_MENU
         (MENU_SEQ, MENU_LINK, PARENT_MENU_SEQ, SORT_NUM, DEL_YN, NOTE, INSERT_ID)
      VALUES
         (NEXTVAL(SEQ_MENU), #{MENU_LINK}, '0', #{SORT_NUM}, #{DEL_YN_NM}, #{NOTE}, NULL)
   </insert>

    <insert id="insertTopMenuKr" parameterType="java.util.HashMap">
       INSERT INTO TBL_MENU_LANG(MENU_SEQ, LANG_CD, MENU_NM, INSERT_DT, INSERT_ID)
       VALUES(LASTVAL(SEQ_MENU), 'KR', #{MENU_NM_KR}, NOW(), NULL)
   </insert>

    <insert id="insertTopMenuEn" parameterType="java.util.HashMap">
       INSERT INTO TBL_MENU_LANG(MENU_SEQ, LANG_CD, MENU_NM, INSERT_DT, INSERT_ID)
       VALUES(LASTVAL(SEQ_MENU), 'EN', #{MENU_NM_EN}, NOW(), NULL)
   </insert>

    <update id="updateTopMenuCode" parameterType="java.util.HashMap" >
        UPDATE TBL_MENU
            SET MENU_LINK = #{MENU_LINK},
                SORT_NUM = #{SORT_NUM},
                DEL_YN = #{DEL_YN_NM},
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = NULL
            WHERE MENU_SEQ = #{MENU_SEQ}
   </update>

    <update id="updateTopMenuKr" parameterType="java.util.HashMap" >
        UPDATE TBL_MENU_LANG
            SET MENU_NM = #{MENU_NM_KR},
                UPDATE_DT = NOW(),
                UPDATE_ID = NULL
        WHERE MENU_SEQ = #{MENU_SEQ}
            AND LANG_CD = 'KR'
    </update>

    <update id="updateTopMenuEn" parameterType="java.util.HashMap" >
        UPDATE TBL_MENU_LANG
            SET MENU_NM = #{MENU_NM_EN},
                UPDATE_DT = NOW(),
                UPDATE_ID = NULL
        WHERE MENU_SEQ = #{MENU_SEQ}
            AND LANG_CD = 'EN'
    </update>

    <insert id="insertSubMenuCode" parameterType="java.util.HashMap" >
    	INSERT INTO TBL_MENU
            (MENU_SEQ, MENU_LINK, PARENT_MENU_SEQ, SORT_NUM, DEL_YN, NOTE, INSERT_ID)
        VALUES
            (NEXTVAL(SEQ_MENU), #{MENU_LINK}, #{PARENT_MENU_SEQ}, #{SORT_NUM}, #{DEL_YN_NM}, #{NOTE}, NULL)
	</insert>

    <update id="updateSubMenuCode" parameterType="java.util.HashMap" >
    	UPDATE TBL_MENU
            SET MENU_LINK = #{MENU_LINK},
                PARENT_MENU_SEQ = #{PARENT_MENU_SEQ},
                SORT_NUM = #{SORT_NUM},
                DEL_YN = #{DEL_YN_NM},
                NOTE = #{NOTE},
                UPDATE_DT = NOW(),
                UPDATE_ID = NULL
        WHERE MENU_SEQ = #{MENU_SEQ}
	</update>

    <select id="selectCommoGroupNextSequence" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT NEXT VALUE FOR SEQ_CODE_GROUP AS SEQ
    </select>

    <select id="selectCommonGroupCodeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT HIGH_CD,
               HIGH_NM,
               DEL_YN,
               NOTE
        FROM TBL_CODE_GROUP
        WHERE 1 = 1
        <if test="HIGH_NM != null and HIGH_NM != ''">
            AND HIGH_NM LIKE CONCAT('%', #{HIGH_NM}, '%')
        </if>
    </select>

    <insert id="insertCommonGroupCode" parameterType="java.util.HashMap">
        INSERT INTO TBL_CODE_GROUP
            (HIGH_CD, HIGH_NM, DEL_YN, NOTE, INSERT_DT, INSERT_ID)
        VALUES(NEXTVAL(SEQ_CODE_GROUP), #{HIGH_NM}, #{DEL_YN}, #{NOTE}, NOW(), NULL)
	</insert>

    <update id="updateCommonGroupCode"  parameterType="java.util.HashMap" >
        UPDATE TBL_CODE_GROUP
        SET HIGH_NM = #{HIGH_NM},
            DEL_YN = #{DEL_YN},
            NOTE = #{NOTE},
            UPDATE_DT = NOW(),
            UPDATE_ID = NULL
        WHERE HIGH_CD = #{HIGH_CD}
   </update>

    <select id="selectCommonCodeList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT HIGH_CD,
               CODE_CD,
                <foreach item="item" index="index" collection="LANG_CD">
                    (SELECT CODE_NM
                    FROM TBL_CODE_LANG
                    WHERE HIGH_CD = A.HIGH_CD
                    AND CODE_CD = A.CODE_CD
                    AND LANG_CD = #{item}) AS CODE_NM_${item},
                </foreach>
               DEL_YN,
               SF_GET_CODE_NM(1042, DEL_YN, 'EN') AS DEL_YN_NM,
               SORT_NUM,
               REF_CD,
               NOTE
        FROM TBL_CODE A
        WHERE 1 = 1
        <if test="HIGH_CD != null and HIGH_CD != ''">
            AND HIGH_CD = #{HIGH_CD}
        </if>
        ORDER BY SORT_NUM
    </select>

    <insert id="insertCommonCode" parameterType="java.util.HashMap">
        INSERT INTO TBL_CODE (
            HIGH_CD,
            CODE_CD,
            REF_CD,
            SORT_NUM,
            DEL_YN,
            NOTE,
            INSERT_DT
            <!-- ,INSERT_ID -->
        ) VALUES(
            #{HIGH_CD},
            #{CODE_CD},
            #{REF_CD},
            #{SORT_NUM},
            #{DEL_YN},
            #{NOTE},
            NOW()
            <!-- ,'USER_ID' -->
        )
	</insert>

    <insert id="insertCommonLangCode" parameterType="java.util.HashMap">
        INSERT INTO TBL_CODE_LANG (
            HIGH_CD,
            CODE_CD,
            LANG_CD,
            CODE_NM,
            INSERT_DT
            <!-- ,INSERT_ID -->
        ) VALUES (
            #{HIGH_CD},
            #{CODE_CD},
            #{LANG_CD},
            #{CODE_NM},
            NOW()
            <!-- ,'USER_ID' -->
        )
	</insert>

    <update id="updateCommonCode"  parameterType="java.util.HashMap" >
        UPDATE TBL_CODE
    	SET REF_CD = #{REF_CD},
            SORT_NUM = #{SORT_NUM},
            DEL_YN = #{DEL_YN},
            NOTE = #{NOTE},
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = 'USER_ID' -->
        WHERE HIGH_CD = #{HIGH_CD}
        	  AND CODE_CD = #{CODE_CD}
   </update>

    <update id="updateCommonLangCode"  parameterType="java.util.HashMap" >
        INSERT INTO TBL_CODE_LANG (
            HIGH_CD,
            CODE_CD,
            LANG_CD,
            CODE_NM,
            INSERT_DT
            <!-- ,INSERT_ID -->
        ) VALUES (
            #{HIGH_CD},
            #{CODE_CD},
            #{LANG_CD},
            #{CODE_NM},
            NOW()
             <!-- ,'USER_ID' -->
        ) ON DUPLICATE KEY
            UPDATE
	        	CODE_NM = #{CODE_NM},
	        	UPDATE_DT = NOW()
                <!-- ,UPDATE_ID = 'USER_ID' -->
   </update>

    <select id="selectAuthorityGroupList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT ROLE_SEQ,
               ROLE_NM,
               DEL_YN,
               SF_GET_CODE_NM(1042, DEL_YN, 'EN') AS DEL_YN_NM,
               NOTE
        FROM TBL_ROLE
        WHERE 1 = 1
        <if test="ROLE_NM != null and ROLE_NM != ''">
            AND ROLE_NM LIKE CONCAT('%', #{ROLE_NM}, '%')
        </if>
    </select>

    <insert id="insertAuthorityGroup" parameterType="java.util.HashMap">
        INSERT INTO TBL_ROLE (
            ROLE_SEQ,
            ROLE_NM,
            DEL_YN,
            NOTE,
            INSERT_DT
            <!-- ,INSERT_ID -->
        ) VALUES(
            #{ROLE_SEQ},
            #{ROLE_NM},
            #{DEL_YN},
            #{NOTE},
            NOW()
            <!-- ,NULL -->
        )
	</insert>

    <update id="updateAuthorityGroup"  parameterType="java.util.HashMap" >
        UPDATE TBL_ROLE
        SET ROLE_NM = #{ROLE_NM},
            DEL_YN = #{DEL_YN},
            NOTE = #{NOTE},
            UPDATE_DT = NOW()
            <!-- ,UPDATE_ID = 'USER_ID' -->
        WHERE ROLE_SEQ = #{ROLE_SEQ}
   </update>

    <select id="selectCommonLangList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT A.LANG_CD
        FROM TBL_CODE_LANG A
        INNER JOIN TBL_CODE B ON A.HIGH_CD = B.HIGH_CD
                                 AND A.CODE_CD = B.CODE_CD
        WHERE A.HIGH_CD = #{HIGH_CD}
        GROUP BY A.HIGH_CD, A.LANG_CD
    </select>
    <select id="selectAuthorityMenuManagementList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        WITH RECURSIVE MENU_CTE AS
		(
			SELECT
                A.MENU_SEQ, A.MENU_LINK, A.PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
				B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
				SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM,
                CONCAT(A.SORT_NUM, 0) AS CD_NO
			FROM TBL_MENU A
				INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
				INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
			WHERE 1 = 1
				AND A.DEL_YN = 'N' AND A.PARENT_MENU_SEQ = 0
			UNION ALL
			SELECT
                A.MENU_SEQ, A.MENU_LINK, A.PARENT_MENU_SEQ, A.SORT_NUM, A.DEL_YN, A.NOTE,
				B.MENU_NM AS MENU_NM_KR, C.MENU_NM AS MENU_NM_EN,
				SF_GET_CODE_NM(1042, A.DEL_YN, 'EN') AS DEL_YN_NM,
                CONCAT(D.SORT_NUM, A.SORT_NUM) AS CD_NO
			FROM TBL_MENU A
				INNER JOIN TBL_MENU_LANG B ON A.MENU_SEQ = B.MENU_SEQ AND B.LANG_CD = 'KR'
				INNER JOIN TBL_MENU_LANG C ON A.MENU_SEQ = C.MENU_SEQ AND C.LANG_CD = 'EN'
				INNER JOIN TBL_MENU D ON A.PARENT_MENU_SEQ = D.MENU_SEQ
				INNER JOIN MENU_CTE E ON E.MENU_SEQ = A.PARENT_MENU_SEQ
			WHERE 1 = 1
				AND A.DEL_YN = 'N'
				AND A.PARENT_MENU_SEQ >= 1
		)
		SELECT
			A.MENU_SEQ,
			CASE WHEN A.PARENT_MENU_SEQ = '0' THEN A.MENU_NM_EN ELSE '' END PARENT_MENU_NM,
			CASE WHEN A.PARENT_MENU_SEQ = '0' THEN '' ELSE A.MENU_NM_EN END MENU_NM,
			A.PARENT_MENU_SEQ, #{ROLE_SEQ} AS ROLE_SEQ, CONCAT(#{ROLE_SEQ}, CD_NO) AS CD_NO,
            IFNULL(C.ACCESS_CD, '0') AS ACCESS_CD, SF_GET_CODE_NM('1043', IFNULL(C.ACCESS_CD, '0'), 'EN') AS ACCESS_NM
		FROM MENU_CTE A
			LEFT OUTER JOIN TBL_MENU B ON A.PARENT_MENU_SEQ = B.MENU_SEQ
			LEFT OUTER JOIN TBL_ROLE_MENU C ON A.MENU_SEQ = C.MENU_SEQ AND ROLE_SEQ = #{ROLE_SEQ}
		WHERE 1 = 1
		ORDER BY CAST(A.CD_NO AS DOUBLE)
    </select>

    <insert id="insertAuthorityMenuManagement" parameterType="java.util.HashMap">
        INSERT INTO TBL_ROLE_MENU(ROLE_SEQ, MENU_SEQ, ACCESS_CD, INSERT_ID)
        VALUES(#{ROLE_SEQ}, #{MENU_SEQ}, #{ACCESS_CD}, NULL)
        ON DUPLICATE KEY UPDATE
            ACCESS_CD = #{ACCESS_CD},
            UPDATE_ID = NULL,
            UPDATE_DT = NOW()
	</insert>

    <update id="updateAuthorityMenuManagement"  parameterType="java.util.HashMap" >

    </update>

    <select id="getCompanyMasterList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.COMP_CD
            , A.COMP_NM
            , A.ORDER_COMPANY_YN
            , ( SELECT group_concat(jmes.SF_GET_CODE_NM('1024', M.COMP_TYPE, 'KR'))
                FROM jmes.TBL_COMPANY_TYPE M
                WHERE M.COMP_CD = A.COMP_CD
                AND M.HIGH_TYPE = '1024'
              ) AS ORDER_COMPANY_INFO
            , A.CO_COMPANY_YN
            , ( SELECT group_concat(DISTINCT jmes.SF_GET_CODE_NM('1041', N.REF_CD, 'KR'))
                FROM jmes.TBL_COMPANY_TYPE M, jmes.TBL_CODE N
                WHERE M.COMP_CD = A.COMP_CD
                AND M.HIGH_TYPE IN ('1001','1002','1003','1004')
                AND M.HIGH_TYPE = N.HIGH_CD
                AND M.COMP_TYPE = N.CODE_CD
              ) AS CO_COMPANY_INFO
            , A.COMP_NUM
            , A.BUSINESS_TYPE
            , A.BUSINESS_ITEM
            , A.COMP_TEL
            , ( SELECT CONCAT(M.STAFF_NM, ' (', M.STAFF_EMAIL,')')
                FROM jmes.TBL_COMPANY_STAFF M
                WHERE M.COMP_CD = A.COMP_CD
                AND M.MAIN_YN = 'Y'
                AND M.DEL_YN = 'N'
                LIMIT 1
              ) AS MAIN_STAFF_INFO
            , A.CEO_NM
            , A.COMP_ADDRESS
            , A.NOTE
            , A.COMP_EMAIL
            , A.LOGO_GFILE_SEQ
            , A.SIGN_GFILE_SEQ
            , A.ETC_GFILE_SEQ
            , CASE WHEN A.LOGO_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END LOGO_FILE_YN
            , CASE WHEN A.SIGN_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END SIGN_FILE_YN
            , CASE WHEN A.ETC_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END ETC_FILE_YN
            , 'AFTER...' AS LAST_BUSINESS_DT
            , jmes.SF_GET_DATE_F(A.INSERT_DT,'YYYY','M') AS INSERT_DT
            , jmes.SF_GET_DATE_F(A.UPDATE_DT,'YYYY','M') AS UPDATE_DT
            , A.ACTIVE_YN
        FROM jmes.TBL_COMPANY A
        WHERE A.DEL_YN = 'N'
        <if test="SEL_COMP_KIND != null and SEL_COMP_KIND == 'CLS010'">
            AND A.ORDER_COMPANY_YN = 'Y' -- 발주처 선택
        </if>
        <if test="SEL_COMP_KIND != null and SEL_COMP_KIND == 'CLS020'">
            AND A.CO_COMPANY_YN = 'Y' -- 협력업체 선택
        </if>
        <if test="SEL_COMP_KIND != null and SEL_COMP_KIND == 'CLS030'">
            AND A.FAMILY_COMPANY_YN = 'Y' -- 본사 선택
        </if>
        <if test="SEL_COMP_KIND == 'CLS010' and SEL_COMP_TYPE != null and SEL_COMP_TYPE != ''">
            AND EXISTS( SELECT 1 FROM jmes.TBL_COMPANY_TYPE
                        WHERE COMP_CD = A.COMP_CD
                        AND HIGH_TYPE = '1024'
                        AND COMP_TYPE = #{SEL_COMP_TYPE}
                      )
        </if>
        <if test="SEL_COMP_KIND == 'CLS020' and SEL_COMP_TYPE != null and SEL_COMP_TYPE != ''">
            AND EXISTS( SELECT 1
                        FROM jmes.TBL_COMPANY_TYPE M, jmes.TBL_CODE N
                        WHERE M.COMP_CD = A.COMP_CD
                        AND M.HIGH_TYPE IN ('1001','1002','1003','1004')
                        AND M.HIGH_TYPE = N.HIGH_CD
                        AND M.COMP_TYPE = N.CODE_CD
                        AND N.REF_CD = #{SEL_COMP_TYPE}
                      )
        </if>
        <if test="SEL_STAFF_NM != null and SEL_STAFF_NM != ''">
            AND EXISTS( SELECT 1 FROM jmes.TBL_COMPANY_STAFF
                        WHERE COMP_CD = A.COMP_CD
                        AND DEL_YN = 'N'
                        AND STAFF_NM LIKE CONCAT('%', #{SEL_STAFF_NM}, '%')
                      )
        </if>
        <if test="SEL_COMP_NM != null and SEL_COMP_NM != ''">
            AND A.COMP_NM LIKE CONCAT('%', #{SEL_COMP_NM}, '%')
        </if>
        <if test="SEL_COMP_NUM != null and SEL_COMP_NUM != ''">
            AND REPLACE(A.COMP_NUM,'-','') = REPLACE(#{SEL_COMP_NUM},'-','')
        </if>
        <if test="SEL_CEO_NM != null and SEL_CEO_NM != ''">
            AND A.CEO_NM LIKE CONCAT('%', #{SEL_CEO_NM}, '%')
        </if>
        <if test="SEL_ACTIVE_YN != null and SEL_ACTIVE_YN != ''">
            AND A.ACTIVE_YN = #{SEL_ACTIVE_YN}
        </if>
        ORDER BY 1 DESC
    </select>

    <select id="getCompanyMasterInfo" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            A.COMP_CD
            , A.COMP_NM
            , A.ORDER_COMPANY_YN
            , ( SELECT group_concat(jmes.SF_GET_CODE_NM('1024', M.COMP_TYPE, 'KR'))
                FROM jmes.TBL_COMPANY_TYPE M
                WHERE M.COMP_CD = A.COMP_CD
                AND M.HIGH_TYPE = '1024'
              ) AS ORDER_COMPANY_INFO
            , A.CO_COMPANY_YN
            , ( SELECT group_concat(DISTINCT jmes.SF_GET_CODE_NM('1041', N.REF_CD, 'KR'))
                FROM jmes.TBL_COMPANY_TYPE M, jmes.TBL_CODE N
                WHERE M.COMP_CD = A.COMP_CD
                AND M.HIGH_TYPE IN ('1001','1002','1003','1004')
                AND M.HIGH_TYPE = N.HIGH_CD
                AND M.COMP_TYPE = N.CODE_CD
              ) AS CO_COMPANY_INFO
            , A.FAMILY_COMPANY_YN
            , A.COMP_NUM
            , A.BUSINESS_TYPE
            , A.BUSINESS_ITEM
            , A.COMP_TEL
            , ( SELECT CONCAT(M.STAFF_NM, ' (', M.STAFF_EMAIL,')')
                FROM jmes.TBL_COMPANY_STAFF M
                WHERE M.COMP_CD = A.COMP_CD
                AND M.MAIN_YN = 'Y'
                AND M.DEL_YN = 'N'
                LIMIT 1
              ) AS MAIN_STAFF_INFO
            , A.CEO_NM
            , A.COMP_ADDRESS
            , A.NOTE
            , A.COMP_EMAIL
            , A.LOGO_GFILE_SEQ
            , CASE WHEN A.LOGO_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END LOGO_FILE_YN
            , jmes.SF_GET_FILE_ORGINAL_NM(A.LOGO_GFILE_SEQ, NULL) as LOGO_GFILE_SEQ_NM
            , A.SIGN_GFILE_SEQ
            , CASE WHEN A.SIGN_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END SIGN_FILE_YN
            , jmes.SF_GET_FILE_ORGINAL_NM(A.SIGN_GFILE_SEQ, NULL) as SIGN_GFILE_SEQ_NM
            , A.ETC_GFILE_SEQ
            , CASE WHEN A.ETC_GFILE_SEQ IS NULL THEN 'N' ELSE 'Y' END ETC_FILE_YN
            , jmes.SF_GET_FILE_ORGINAL_NM(A.ETC_GFILE_SEQ, NULL) as ETC_GFILE_SEQ_NM
            , 'AFTER...' AS LAST_BUSINESS_DT
            , jmes.SF_GET_DATE_F(A.INSERT_DT,'YYYY','M') AS INSERT_DT
            , jmes.SF_GET_DATE_F(A.UPDATE_DT,'YYYY','M') AS UPDATE_DT
            , A.ACTIVE_YN
            , A.CHARGE_USER_ID
            , A.COMP_FAX
            ,(SELECT COMP_TYPE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = A.COMP_CD AND HIGH_TYPE = '1024' LIMIT 1) AS H_VAL_1024
            ,(SELECT COMP_TYPE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = A.COMP_CD AND HIGH_TYPE = '1001' LIMIT 1) AS H_VAL_1001
            ,(SELECT COMP_TYPE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = A.COMP_CD AND HIGH_TYPE = '1002' LIMIT 1) AS H_VAL_1002
            ,(SELECT COMP_TYPE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = A.COMP_CD AND HIGH_TYPE = '1003' LIMIT 1) AS H_VAL_1003
            ,(SELECT COMP_TYPE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = A.COMP_CD AND HIGH_TYPE = '1004' LIMIT 1) AS H_VAL_1004
        FROM jmes.TBL_COMPANY A
        WHERE A.DEL_YN = 'N'
          AND A.COMP_CD = #{COMP_CD}
    </select>
    <select id="selectCompanySeq" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT CONCAT('CMP',LPAD(IFNULL(CONVERT(MAX(SUBSTRING(COMP_CD,4,4)),INT)+1,1),4,'0')) AS SEQ
        FROM jmes.TBL_COMPANY WHERE COMP_CD LIKE 'CMP%'
    </select>
    <insert id="insertCompanyMaster" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_COMPANY
        (
              COMP_CD, COMP_NM, CEO_NM, COMP_NUM, FAMILY_COMPANY_YN, BUSINESS_TYPE, BUSINESS_ITEM
            , CHARGE_USER_ID, COMP_EMAIL, COMP_TEL, COMP_FAX, COMP_ADDRESS
            <if test="LOGO_GFILE_SEQ != null and LOGO_GFILE_SEQ != ''">
                ,LOGO_GFILE_SEQ
            </if>
            <if test="SIGN_GFILE_SEQ != null and SIGN_GFILE_SEQ != ''">
                ,SIGN_GFILE_SEQ
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
                ,ETC_GFILE_SEQ
            </if>
            ,ACTIVE_YN, NOTE, INSERT_ID
        )VALUES (
              #{COMP_CD}, #{COMP_NM}, #{CEO_NM}, #{COMP_NUM}, IFNULL(#{FAMILY_COMPANY_YN}, 'N'), #{BUSINESS_TYPE}, #{BUSINESS_ITEM}
            , #{CHARGE_USER_ID}, #{COMP_EMAIL}, #{COMP_TEL}, #{COMP_FAX}, #{COMP_ADDRESS}
            <if test="LOGO_GFILE_SEQ != null and LOGO_GFILE_SEQ != ''">
                ,LOGO_GFILE_SEQ
            </if>
            <if test="SIGN_GFILE_SEQ != null and SIGN_GFILE_SEQ != ''">
                ,SIGN_GFILE_SEQ
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
                ,ETC_GFILE_SEQ
            </if>
            , IFNULL(#{ACTIVE_YN}, 'N'), #{NOTE}, #{LOGIN_USER_ID}
        )
    </insert>

    <update id="updateCompanyMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_COMPANY
        SET
             COMP_NM = #{COMP_NM}
            , CEO_NM = #{CEO_NM}
            , COMP_NUM = #{COMP_NUM}
            , CHARGE_USER_ID = #{CHARGE_USER_ID}
            , COMP_TEL = #{COMP_TEL}
            , COMP_FAX = #{COMP_FAX}
            , COMP_ADDRESS = #{COMP_ADDRESS}
            , COMP_EMAIL = #{COMP_EMAIL}
            <if test="LOGO_GFILE_SEQ != null and LOGO_GFILE_SEQ != ''">
                , LOGO_GFILE_SEQ = #{LOGO_GFILE_SEQ}
            </if>
            <if test="SIGN_GFILE_SEQ != null and SIGN_GFILE_SEQ != ''">
                , SIGN_GFILE_SEQ = #{SIGN_GFILE_SEQ}
            </if>
            <if test="ETC_GFILE_SEQ != null and ETC_GFILE_SEQ != ''">
                , ETC_GFILE_SEQ = #{ETC_GFILE_SEQ}
            </if>
            , FAMILY_COMPANY_YN = IFNULL(#{FAMILY_COMPANY_YN}, 'N')
            , BUSINESS_TYPE = #{BUSINESS_TYPE}
            , BUSINESS_ITEM = #{BUSINESS_ITEM}
            , ACTIVE_YN = IFNULL(#{ACTIVE_YN}, 'N')
            , NOTE = #{NOTE}
            , UPDATE_ID = #{LOGIN_USER_ID}
            , UPDATE_DT = NOW()
        WHERE COMP_CD = #{COMP_CD}
    </update>

    <insert id="insertCompanyStaff" parameterType="java.util.HashMap" >
        INSERT INTO jmes.TBL_COMPANY_STAFF (STAFF_SEQ, COMP_CD, STAFF_NM, POSITION_NM, JOB_TITLE, STAFF_TEL, STAFF_EMAIL, MAIN_YN, NOTE)
        VALUES ( NEXTVAL(SEQ_COMPANY_STAFF), #{COMP_CD}, #{STAFF_NM}, #{POSITION_NM}, #{JOB_TITLE}, #{STAFF_TEL}, #{STAFF_EMAIL}, #{MAIN_YN}, #{NOTE})
    </insert>

    <update id="updateCompanyStaff" parameterType="java.util.HashMap" >
        UPDATE jmes.TBL_COMPANY_STAFF
        SET
            COMP_CD = #{COMP_CD},
            STAFF_NM = #{STAFF_NM},
            POSITION_NM = #{POSITION_NM},
            JOB_TITLE = #{JOB_TITLE},
            STAFF_TEL = #{STAFF_TEL},
            STAFF_EMAIL = #{STAFF_EMAIL},
            MAIN_YN = #{MAIN_YN},
            NOTE = #{NOTE},
            UPDATE_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW()
        WHERE STAFF_SEQ = #{STAFF_SEQ}
    </update>

    <update id="deleteCompanyStaff" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_COMPANY_STAFF
        SET
            DEL_YN = 'Y',
            UPDATE_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW()
        WHERE STAFF_SEQ = #{STAFF_SEQ}
    </update>

    <update id="deleteCompanyAllType" parameterType="java.util.HashMap">
        DELETE FROM jmes.TBL_COMPANY_TYPE WHERE COMP_CD = #{COMP_CD}
    </update>

    <update id="insertCompanyType" parameterType="java.util.HashMap">
        INSERT INTO jmes.TBL_COMPANY_TYPE (COMP_CD, COMP_TYPE, HIGH_TYPE, INSERT_ID)
        VALUES (#{COMP_CD}, #{COMP_TYPE}, #{HIGH_TYPE}, #{LOGIN_USER_ID})
    </update>

    <update id="updateCompanyMasterStatus1" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_COMPANY SET ORDER_COMPANY_YN = (  SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
                                                          FROM jmes.TBL_COMPANY_TYPE
                                                          WHERE COMP_CD = #{COMP_CD}
                                                            AND HIGH_TYPE = '1024'
                                                        )
        WHERE COMP_CD = #{COMP_CD}
    </update>
    <update id="updateCompanyMasterStatus2" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_COMPANY SET CO_COMPANY_YN = (  SELECT CASE WHEN COUNT(*) > 0 THEN 'Y' ELSE 'N' END
                                                          FROM jmes.TBL_COMPANY_TYPE
                                                          WHERE COMP_CD = #{COMP_CD}
                                                            AND HIGH_TYPE IN ('1001', '1002', '1003', '1004')
                                                        )
        WHERE COMP_CD = #{COMP_CD}
    </update>




    <!-- 여기부터 예전 소스 -->
    <update id="deleteCompanyMaster" parameterType="java.util.HashMap">
        UPDATE jmes.TBL_COMPANY
        SET
            DEL_YN = 'Y',
            UPDATE_ID = #{LOGIN_USER_ID},
            UPDATE_DT = NOW()
        WHERE COMP_CD = #{COMP_CD}
    </update>





    <select id="getCompanyMasterStaffList" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        SELECT
            STAFF_SEQ, COMP_CD, STAFF_NM, POSITION_NM, JOB_TITLE, STAFF_TEL, STAFF_EMAIL, MAIN_YN, NOTE
        FROM jmes.TBL_COMPANY_STAFF
        WHERE DEL_YN = 'N'
            AND COMP_CD = #{COMP_CD}
        ORDER BY STAFF_NM
    </select>


    <!-- 여기까지 예전 소스 -->
</mapper>